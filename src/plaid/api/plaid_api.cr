#  The Plaid API
#
# The Plaid REST API. Please see https://plaid.com/docs/api for more details.
#
# The version of the OpenAPI document: 2020-09-14_1.474.3
#
# Generated by: https://openapi-generator.tech
#

require "../../core"

require "../models/accounts_balance_get_request"
require "../models/accounts_get_request"
require "../models/accounts_get_response"
require "../models/application_get_request"
require "../models/application_get_response"
require "../models/asset_report_audit_copy_create_request"
require "../models/asset_report_audit_copy_create_response"
require "../models/asset_report_audit_copy_get_request"
require "../models/asset_report_audit_copy_remove_request"
require "../models/asset_report_audit_copy_remove_response"
require "../models/asset_report_create_request"
require "../models/asset_report_create_response"
require "../models/asset_report_filter_request"
require "../models/asset_report_filter_response"
require "../models/asset_report_freddie_get_request"
require "../models/asset_report_freddie_get_response"
require "../models/asset_report_get_request"
require "../models/asset_report_get_response"
require "../models/asset_report_pdf_get_request"
require "../models/asset_report_refresh_request"
require "../models/asset_report_refresh_response"
require "../models/asset_report_remove_request"
require "../models/asset_report_remove_response"
require "../models/auth_get_request"
require "../models/auth_get_response"
require "../models/bank_transfer_balance_get_request"
require "../models/bank_transfer_balance_get_response"
require "../models/bank_transfer_cancel_request"
require "../models/bank_transfer_cancel_response"
require "../models/bank_transfer_create_request"
require "../models/bank_transfer_create_response"
require "../models/bank_transfer_event_list_request"
require "../models/bank_transfer_event_list_response"
require "../models/bank_transfer_event_sync_request"
require "../models/bank_transfer_event_sync_response"
require "../models/bank_transfer_get_request"
require "../models/bank_transfer_get_response"
require "../models/bank_transfer_list_request"
require "../models/bank_transfer_list_response"
require "../models/bank_transfer_migrate_account_request"
require "../models/bank_transfer_migrate_account_response"
require "../models/bank_transfer_sweep_get_request"
require "../models/bank_transfer_sweep_get_response"
require "../models/bank_transfer_sweep_list_request"
require "../models/bank_transfer_sweep_list_response"
require "../models/base_report_get_request"
require "../models/base_report_get_response"
require "../models/beacon_report_create_request"
require "../models/beacon_report_create_response"
require "../models/beacon_report_get_request"
require "../models/beacon_report_get_response"
require "../models/beacon_report_list_request"
require "../models/beacon_report_list_response"
require "../models/beacon_report_syndication_list_request"
require "../models/beacon_report_syndication_list_response"
require "../models/beacon_user_create_request"
require "../models/beacon_user_create_response"
require "../models/beacon_user_get_request"
require "../models/beacon_user_get_response"
require "../models/beacon_user_review_request"
require "../models/categories_get_response"
require "../models/cra_bank_income_get_request"
require "../models/cra_bank_income_get_response"
require "../models/credit_audit_copy_token_create_request"
require "../models/credit_audit_copy_token_create_response"
require "../models/credit_audit_copy_token_remove_request"
require "../models/credit_audit_copy_token_remove_response"
require "../models/credit_audit_copy_token_update_request"
require "../models/credit_audit_copy_token_update_response"
require "../models/credit_bank_employment_get_request"
require "../models/credit_bank_employment_get_response"
require "../models/credit_bank_income_get_request"
require "../models/credit_bank_income_get_response"
require "../models/credit_bank_income_pdf_get_request"
require "../models/credit_bank_income_refresh_request"
require "../models/credit_bank_income_refresh_response"
require "../models/credit_bank_income_webhook_update_request"
require "../models/credit_bank_income_webhook_update_response"
require "../models/credit_bank_statements_uploads_get_request"
require "../models/credit_bank_statements_uploads_get_response"
require "../models/credit_employment_get_request"
require "../models/credit_employment_get_response"
require "../models/credit_freddie_mac_reports_get_request"
require "../models/credit_freddie_mac_reports_get_response"
require "../models/credit_payroll_income_get_request"
require "../models/credit_payroll_income_get_response"
require "../models/credit_payroll_income_parsing_config_update_request"
require "../models/credit_payroll_income_parsing_config_update_response"
require "../models/credit_payroll_income_precheck_request"
require "../models/credit_payroll_income_precheck_response"
require "../models/credit_payroll_income_refresh_request"
require "../models/credit_payroll_income_refresh_response"
require "../models/credit_payroll_income_risk_signals_get_request"
require "../models/credit_payroll_income_risk_signals_get_response"
require "../models/credit_relay_create_request"
require "../models/credit_relay_create_response"
require "../models/credit_relay_get_request"
require "../models/credit_relay_pdf_get_request"
require "../models/credit_relay_refresh_request"
require "../models/credit_relay_refresh_response"
require "../models/credit_relay_remove_request"
require "../models/credit_relay_remove_response"
require "../models/credit_sessions_get_request"
require "../models/credit_sessions_get_response"
require "../models/dashboard_user_get_request"
require "../models/dashboard_user_get_response"
require "../models/dashboard_user_list_request"
require "../models/dashboard_user_list_response"
require "../models/deposit_switch_alt_create_request"
require "../models/deposit_switch_alt_create_response"
require "../models/deposit_switch_create_request"
require "../models/deposit_switch_create_response"
require "../models/deposit_switch_get_request"
require "../models/deposit_switch_get_response"
require "../models/deposit_switch_token_create_request"
require "../models/deposit_switch_token_create_response"
require "../models/employers_search_request"
require "../models/employers_search_response"
require "../models/employment_verification_get_request"
require "../models/employment_verification_get_response"
require "../models/fdx_notification"
require "../models/identity_get_request"
require "../models/identity_get_response"
require "../models/identity_match_request"
require "../models/identity_match_response"
require "../models/identity_refresh_request"
require "../models/identity_refresh_response"
require "../models/identity_verification_create_request"
require "../models/identity_verification_create_response"
require "../models/identity_verification_get_request"
require "../models/identity_verification_get_response"
require "../models/identity_verification_list_request"
require "../models/identity_verification_list_response"
require "../models/identity_verification_retry_request"
require "../models/identity_verification_retry_response"
require "../models/income_verification_create_request"
require "../models/income_verification_create_response"
require "../models/income_verification_documents_download_request"
require "../models/income_verification_paystubs_get_request"
require "../models/income_verification_paystubs_get_response"
require "../models/income_verification_precheck_request"
require "../models/income_verification_precheck_response"
require "../models/income_verification_taxforms_get_request"
require "../models/income_verification_taxforms_get_response"
require "../models/institutions_get_by_id_request"
require "../models/institutions_get_by_id_response"
require "../models/institutions_get_request"
require "../models/institutions_get_response"
require "../models/institutions_search_request"
require "../models/institutions_search_response"
require "../models/investments_auth_get_request"
require "../models/investments_auth_get_response"
require "../models/investments_holdings_get_request"
require "../models/investments_holdings_get_response"
require "../models/investments_refresh_request"
require "../models/investments_refresh_response"
require "../models/investments_transactions_get_request"
require "../models/investments_transactions_get_response"
require "../models/item_access_token_invalidate_request"
require "../models/item_access_token_invalidate_response"
require "../models/item_activity_list_request"
require "../models/item_activity_list_response"
require "../models/item_application_list_request"
require "../models/item_application_list_response"
require "../models/item_application_scopes_update_request"
require "../models/item_application_scopes_update_response"
require "../models/item_application_unlink_request"
require "../models/item_application_unlink_response"
require "../models/item_get_request"
require "../models/item_get_response"
require "../models/item_import_request"
require "../models/item_import_response"
require "../models/item_public_token_create_request"
require "../models/item_public_token_create_response"
require "../models/item_public_token_exchange_request"
require "../models/item_public_token_exchange_response"
require "../models/item_remove_request"
require "../models/item_remove_response"
require "../models/item_webhook_update_request"
require "../models/item_webhook_update_response"
require "../models/liabilities_get_request"
require "../models/liabilities_get_response"
require "../models/link_delivery_create_request"
require "../models/link_delivery_create_response"
require "../models/link_delivery_get_request"
require "../models/link_delivery_get_response"
require "../models/link_o_auth_correlation_id_exchange_request"
require "../models/link_o_auth_correlation_id_exchange_response"
require "../models/link_token_create_request"
require "../models/link_token_create_response"
require "../models/link_token_get_request"
require "../models/link_token_get_response"
require "../models/partner_customer_create_request"
require "../models/partner_customer_create_response"
require "../models/partner_customer_enable_request"
require "../models/partner_customer_enable_response"
require "../models/partner_customer_get_request"
require "../models/partner_customer_get_response"
require "../models/partner_customer_o_auth_institutions_get_request"
require "../models/partner_customer_o_auth_institutions_get_response"
require "../models/partner_customer_remove_request"
require "../models/partner_customer_remove_response"
require "../models/payment_initiation_consent_create_request"
require "../models/payment_initiation_consent_create_response"
require "../models/payment_initiation_consent_get_request"
require "../models/payment_initiation_consent_get_response"
require "../models/payment_initiation_consent_payment_execute_request"
require "../models/payment_initiation_consent_payment_execute_response"
require "../models/payment_initiation_consent_revoke_request"
require "../models/payment_initiation_consent_revoke_response"
require "../models/payment_initiation_payment_create_request"
require "../models/payment_initiation_payment_create_response"
require "../models/payment_initiation_payment_get_request"
require "../models/payment_initiation_payment_get_response"
require "../models/payment_initiation_payment_list_request"
require "../models/payment_initiation_payment_list_response"
require "../models/payment_initiation_payment_reverse_request"
require "../models/payment_initiation_payment_reverse_response"
require "../models/payment_initiation_payment_token_create_request"
require "../models/payment_initiation_payment_token_create_response"
require "../models/payment_initiation_recipient_create_request"
require "../models/payment_initiation_recipient_create_response"
require "../models/payment_initiation_recipient_get_request"
require "../models/payment_initiation_recipient_get_response"
require "../models/payment_initiation_recipient_list_request"
require "../models/payment_initiation_recipient_list_response"
require "../models/payment_profile_create_request"
require "../models/payment_profile_create_response"
require "../models/payment_profile_get_request"
require "../models/payment_profile_get_response"
require "../models/payment_profile_remove_request"
require "../models/payment_profile_remove_response"
require "../models/plaid_error"
require "../models/processor_account_get_request"
require "../models/processor_account_get_response"
require "../models/processor_apex_processor_token_create_request"
require "../models/processor_auth_get_request"
require "../models/processor_auth_get_response"
require "../models/processor_balance_get_request"
require "../models/processor_balance_get_response"
require "../models/processor_bank_transfer_create_request"
require "../models/processor_bank_transfer_create_response"
require "../models/processor_identity_get_request"
require "../models/processor_identity_get_response"
require "../models/processor_identity_match_request"
require "../models/processor_identity_match_response"
require "../models/processor_signal_decision_report_request"
require "../models/processor_signal_decision_report_response"
require "../models/processor_signal_evaluate_request"
require "../models/processor_signal_evaluate_response"
require "../models/processor_signal_prepare_request"
require "../models/processor_signal_prepare_response"
require "../models/processor_signal_return_report_request"
require "../models/processor_signal_return_report_response"
require "../models/processor_stripe_bank_account_token_create_request"
require "../models/processor_stripe_bank_account_token_create_response"
require "../models/processor_token_create_request"
require "../models/processor_token_create_response"
require "../models/processor_token_permissions_get_request"
require "../models/processor_token_permissions_get_response"
require "../models/processor_token_permissions_set_request"
require "../models/processor_token_permissions_set_response"
require "../models/processor_token_webhook_update_request"
require "../models/processor_token_webhook_update_response"
require "../models/processor_transactions_get_request"
require "../models/processor_transactions_get_response"
require "../models/processor_transactions_recurring_get_request"
require "../models/processor_transactions_recurring_get_response"
require "../models/processor_transactions_refresh_request"
require "../models/processor_transactions_refresh_response"
require "../models/processor_transactions_sync_request"
require "../models/processor_transactions_sync_response"
require "../models/sandbox_bank_income_fire_webhook_request"
require "../models/sandbox_bank_income_fire_webhook_response"
require "../models/sandbox_bank_transfer_fire_webhook_request"
require "../models/sandbox_bank_transfer_fire_webhook_response"
require "../models/sandbox_bank_transfer_simulate_request"
require "../models/sandbox_bank_transfer_simulate_response"
require "../models/sandbox_income_fire_webhook_request"
require "../models/sandbox_income_fire_webhook_response"
require "../models/sandbox_item_fire_webhook_request"
require "../models/sandbox_item_fire_webhook_response"
require "../models/sandbox_item_reset_login_request"
require "../models/sandbox_item_reset_login_response"
require "../models/sandbox_item_set_verification_status_request"
require "../models/sandbox_item_set_verification_status_response"
require "../models/sandbox_oauth_select_accounts_request"
require "../models/sandbox_payment_profile_reset_login_request"
require "../models/sandbox_payment_profile_reset_login_response"
require "../models/sandbox_processor_token_create_request"
require "../models/sandbox_processor_token_create_response"
require "../models/sandbox_public_token_create_request"
require "../models/sandbox_public_token_create_response"
require "../models/sandbox_transfer_fire_webhook_request"
require "../models/sandbox_transfer_fire_webhook_response"
require "../models/sandbox_transfer_ledger_deposit_simulate_request"
require "../models/sandbox_transfer_ledger_deposit_simulate_response"
require "../models/sandbox_transfer_ledger_simulate_available_request"
require "../models/sandbox_transfer_ledger_simulate_available_response"
require "../models/sandbox_transfer_ledger_withdraw_simulate_request"
require "../models/sandbox_transfer_ledger_withdraw_simulate_response"
require "../models/sandbox_transfer_refund_simulate_request"
require "../models/sandbox_transfer_refund_simulate_response"
require "../models/sandbox_transfer_repayment_simulate_request"
require "../models/sandbox_transfer_repayment_simulate_response"
require "../models/sandbox_transfer_simulate_request"
require "../models/sandbox_transfer_simulate_response"
require "../models/sandbox_transfer_sweep_simulate_request"
require "../models/sandbox_transfer_sweep_simulate_response"
require "../models/sandbox_transfer_test_clock_advance_request"
require "../models/sandbox_transfer_test_clock_advance_response"
require "../models/sandbox_transfer_test_clock_create_request"
require "../models/sandbox_transfer_test_clock_create_response"
require "../models/sandbox_transfer_test_clock_get_request"
require "../models/sandbox_transfer_test_clock_get_response"
require "../models/sandbox_transfer_test_clock_list_request"
require "../models/sandbox_transfer_test_clock_list_response"
require "../models/signal_decision_report_request"
require "../models/signal_decision_report_response"
require "../models/signal_evaluate_request"
require "../models/signal_evaluate_response"
require "../models/signal_prepare_request"
require "../models/signal_prepare_response"
require "../models/signal_return_report_request"
require "../models/signal_return_report_response"
require "../models/statements_download_request"
require "../models/statements_list_request"
require "../models/statements_list_response"
require "../models/transactions_enhance_get_request"
require "../models/transactions_enhance_get_response"
require "../models/transactions_enrich_request"
require "../models/transactions_enrich_response"
require "../models/transactions_get_request"
require "../models/transactions_get_response"
require "../models/transactions_recurring_get_request"
require "../models/transactions_recurring_get_response"
require "../models/transactions_refresh_request"
require "../models/transactions_refresh_response"
require "../models/transactions_rules_create_request"
require "../models/transactions_rules_create_response"
require "../models/transactions_rules_list_request"
require "../models/transactions_rules_list_response"
require "../models/transactions_rules_remove_request"
require "../models/transactions_rules_remove_response"
require "../models/transactions_sync_request"
require "../models/transactions_sync_response"
require "../models/transactions_user_insights_get_request"
require "../models/transactions_user_insights_get_response"
require "../models/transfer_authorization_create_request"
require "../models/transfer_authorization_create_response"
require "../models/transfer_balance_get_request"
require "../models/transfer_balance_get_response"
require "../models/transfer_cancel_request"
require "../models/transfer_cancel_response"
require "../models/transfer_capabilities_get_request"
require "../models/transfer_capabilities_get_response"
require "../models/transfer_configuration_get_request"
require "../models/transfer_configuration_get_response"
require "../models/transfer_create_request"
require "../models/transfer_create_response"
require "../models/transfer_diligence_document_upload_request"
require "../models/transfer_diligence_document_upload_response"
require "../models/transfer_diligence_submit_request"
require "../models/transfer_diligence_submit_response"
require "../models/transfer_event_list_request"
require "../models/transfer_event_list_response"
require "../models/transfer_event_sync_request"
require "../models/transfer_event_sync_response"
require "../models/transfer_get_request"
require "../models/transfer_get_response"
require "../models/transfer_intent_create_request"
require "../models/transfer_intent_create_response"
require "../models/transfer_intent_get_request"
require "../models/transfer_intent_get_response"
require "../models/transfer_ledger_deposit_request"
require "../models/transfer_ledger_deposit_response"
require "../models/transfer_ledger_distribute_request"
require "../models/transfer_ledger_distribute_response"
require "../models/transfer_ledger_get_request"
require "../models/transfer_ledger_get_response"
require "../models/transfer_ledger_withdraw_request"
require "../models/transfer_ledger_withdraw_response"
require "../models/transfer_list_request"
require "../models/transfer_list_response"
require "../models/transfer_metrics_get_request"
require "../models/transfer_metrics_get_response"
require "../models/transfer_migrate_account_request"
require "../models/transfer_migrate_account_response"
require "../models/transfer_originator_create_request"
require "../models/transfer_originator_create_response"
require "../models/transfer_originator_funding_account_update_request"
require "../models/transfer_originator_funding_account_update_response"
require "../models/transfer_originator_get_request"
require "../models/transfer_originator_get_response"
require "../models/transfer_originator_list_request"
require "../models/transfer_originator_list_response"
require "../models/transfer_questionnaire_create_request"
require "../models/transfer_questionnaire_create_response"
require "../models/transfer_recurring_cancel_request"
require "../models/transfer_recurring_cancel_response"
require "../models/transfer_recurring_create_request"
require "../models/transfer_recurring_create_response"
require "../models/transfer_recurring_get_request"
require "../models/transfer_recurring_get_response"
require "../models/transfer_recurring_list_request"
require "../models/transfer_recurring_list_response"
require "../models/transfer_refund_cancel_request"
require "../models/transfer_refund_cancel_response"
require "../models/transfer_refund_create_request"
require "../models/transfer_refund_create_response"
require "../models/transfer_refund_get_request"
require "../models/transfer_refund_get_response"
require "../models/transfer_repayment_list_request"
require "../models/transfer_repayment_list_response"
require "../models/transfer_repayment_return_list_request"
require "../models/transfer_repayment_return_list_response"
require "../models/transfer_sweep_get_request"
require "../models/transfer_sweep_get_response"
require "../models/transfer_sweep_list_request"
require "../models/transfer_sweep_list_response"
require "../models/user_create_request"
require "../models/user_create_response"
require "../models/user_update_request"
require "../models/user_update_response"
require "../models/wallet_create_request"
require "../models/wallet_create_response"
require "../models/wallet_get_request"
require "../models/wallet_get_response"
require "../models/wallet_list_request"
require "../models/wallet_list_response"
require "../models/wallet_transaction_execute_request"
require "../models/wallet_transaction_execute_response"
require "../models/wallet_transaction_get_request"
require "../models/wallet_transaction_get_response"
require "../models/wallet_transaction_list_request"
require "../models/wallet_transaction_list_response"
require "../models/watchlist_screening_entity_create_request"
require "../models/watchlist_screening_entity_create_response"
require "../models/watchlist_screening_entity_get_request"
require "../models/watchlist_screening_entity_get_response"
require "../models/watchlist_screening_entity_history_list_request"
require "../models/watchlist_screening_entity_history_list_response"
require "../models/watchlist_screening_entity_hit_list_request"
require "../models/watchlist_screening_entity_hit_list_response"
require "../models/watchlist_screening_entity_list_request"
require "../models/watchlist_screening_entity_list_response"
require "../models/watchlist_screening_entity_program_get_request"
require "../models/watchlist_screening_entity_program_get_response"
require "../models/watchlist_screening_entity_program_list_request"
require "../models/watchlist_screening_entity_program_list_response"
require "../models/watchlist_screening_entity_review_create_request"
require "../models/watchlist_screening_entity_review_create_response"
require "../models/watchlist_screening_entity_review_list_request"
require "../models/watchlist_screening_entity_review_list_response"
require "../models/watchlist_screening_entity_update_request"
require "../models/watchlist_screening_entity_update_response"
require "../models/watchlist_screening_individual_create_request"
require "../models/watchlist_screening_individual_create_response"
require "../models/watchlist_screening_individual_get_request"
require "../models/watchlist_screening_individual_get_response"
require "../models/watchlist_screening_individual_history_list_request"
require "../models/watchlist_screening_individual_history_list_response"
require "../models/watchlist_screening_individual_hit_list_request"
require "../models/watchlist_screening_individual_hit_list_response"
require "../models/watchlist_screening_individual_list_request"
require "../models/watchlist_screening_individual_list_response"
require "../models/watchlist_screening_individual_program_get_request"
require "../models/watchlist_screening_individual_program_get_response"
require "../models/watchlist_screening_individual_program_list_request"
require "../models/watchlist_screening_individual_program_list_response"
require "../models/watchlist_screening_individual_review_create_request"
require "../models/watchlist_screening_individual_review_create_response"
require "../models/watchlist_screening_individual_review_list_request"
require "../models/watchlist_screening_individual_review_list_response"
require "../models/watchlist_screening_individual_update_request"
require "../models/watchlist_screening_individual_update_response"
require "../models/webhook_verification_key_get_request"
require "../models/webhook_verification_key_get_response"

module Plaid
  class PlaidApi
    property api_client : ApiClient

    delegate client_side_validation?, debugging?, to: @api_client.config

    def initialize(api_client = ApiClient.default)
      @api_client = api_client
    end

    # Retrieve real-time balance data
    # The `/accounts/balance/get` endpoint returns the real-time balance for each of an Item's accounts. While other endpoints, such as `/accounts/get`, return a balance object, only `/accounts/balance/get` forces the available and current balance fields to be refreshed rather than cached. This endpoint can be used for existing Items that were added via any of Plaid’s other products. This endpoint can be used as long as Link has been initialized with any other product, `balance` itself is not a product that can be used to initialize Link. As this endpoint triggers a synchronous request for fresh data, latency may be higher than for other Plaid endpoints (typically less than 10 seconds, but occasionally up to 30 seconds or more); if you encounter errors, you may find it necessary to adjust your timeout period when making requests.
    # @required @param accounts_balance_get_request [Plaid::AccountsBalanceGetRequest?]
    # @return [AccountsGetResponse]
    def accounts_balance_get(
      *,
      accounts_balance_get_request : Plaid::AccountsBalanceGetRequest? = nil
    ) : AccountsGetResponse
      data, _status_code, _headers = accounts_balance_get_with_http_info(accounts_balance_get_request: accounts_balance_get_request)
      data
    end

    # Retrieve real-time balance data
    # The &#x60;/accounts/balance/get&#x60; endpoint returns the real-time balance for each of an Item&#39;s accounts. While other endpoints, such as &#x60;/accounts/get&#x60;, return a balance object, only &#x60;/accounts/balance/get&#x60; forces the available and current balance fields to be refreshed rather than cached. This endpoint can be used for existing Items that were added via any of Plaid’s other products. This endpoint can be used as long as Link has been initialized with any other product, &#x60;balance&#x60; itself is not a product that can be used to initialize Link. As this endpoint triggers a synchronous request for fresh data, latency may be higher than for other Plaid endpoints (typically less than 10 seconds, but occasionally up to 30 seconds or more); if you encounter errors, you may find it necessary to adjust your timeout period when making requests.
    # @required @param accounts_balance_get_request [Plaid::AccountsBalanceGetRequest?]
    # @return [Tuple(AccountsGetResponse, Integer, Hash)] AccountsGetResponse, response status code and response headers
    def accounts_balance_get_with_http_info(
      *,
      accounts_balance_get_request : Plaid::AccountsBalanceGetRequest? = nil
    ) : Tuple(AccountsGetResponse, Int32, Hash(String, Array(String) | String))
      request = build_api_request_for_accounts_balance_get(accounts_balance_get_request: accounts_balance_get_request)

      body, status_code, headers = @api_client.execute_api_request(request)

      if debugging?
        Log.debug { "API called: PlaidApi#accounts_balance_get\nBody: #{body.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}" }
      end

      Tuple.new(AccountsGetResponse.from_json(body), status_code, headers)
    end

    # Retrieve real-time balance data
    # The &#x60;/accounts/balance/get&#x60; endpoint returns the real-time balance for each of an Item&#39;s accounts. While other endpoints, such as &#x60;/accounts/get&#x60;, return a balance object, only &#x60;/accounts/balance/get&#x60; forces the available and current balance fields to be refreshed rather than cached. This endpoint can be used for existing Items that were added via any of Plaid’s other products. This endpoint can be used as long as Link has been initialized with any other product, &#x60;balance&#x60; itself is not a product that can be used to initialize Link. As this endpoint triggers a synchronous request for fresh data, latency may be higher than for other Plaid endpoints (typically less than 10 seconds, but occasionally up to 30 seconds or more); if you encounter errors, you may find it necessary to adjust your timeout period when making requests.
    # @required @param accounts_balance_get_request [Plaid::AccountsBalanceGetRequest?]
    # @return nil
    def accounts_balance_get(
      *,
      accounts_balance_get_request : Plaid::AccountsBalanceGetRequest? = nil,
      &block : Crest::Response ->
    ) : Nil
      build_api_request_for_accounts_balance_get(accounts_balance_get_request: accounts_balance_get_request).execute(&block)
    end

    # @return Crest::Request
    def build_api_request_for_accounts_balance_get(
      *,
      accounts_balance_get_request : Plaid::AccountsBalanceGetRequest? = nil
    ) : Crest::Request
      if debugging?
        Log.debug { "Calling API: PlaidApi.accounts_balance_get ..." }
      end

      if client_side_validation?
        raise ArgumentError.new("\"accounts_balance_get_request\" is required and cannot be null") if accounts_balance_get_request.nil?
        unless (_accounts_balance_get_request = accounts_balance_get_request).nil?
          _accounts_balance_get_request.validate if _accounts_balance_get_request.is_a?(OpenApi::Validatable)
        end
      end

      # resource path
      local_var_path = "/accounts/balance/get"

      # header parameters
      header_params : Hash(String, String) = Hash(String, String).new
      # HTTP header "Accept" (if needed)
      header_params["Accept"] = @api_client.select_header_accept(["application/json"])
      # HTTP header "Content-Type"
      header_params["Content-Type"] = @api_client.select_header_content_type(["application/json"])

      # cookie parameters
      cookie_params : Hash(String, String) = Hash(String, String).new

      # query parameters
      query_params : Hash(String, (String | Array(String) | JSON::Any)) = Hash(String, (String | Array(String) | JSON::Any)).new

      # form parameters
      form_params : Array(Tuple(String, Crest::ParamsValue)) | Nil = nil

      # http body (model)
      post_body : IO | String | Nil = @api_client.encode(body: accounts_balance_get_request, content_type: header_params["Content-Type"]?) if !accounts_balance_get_request.nil?

      # auth_names
      auth_names = ["clientId", "plaidVersion", "secret"]

      @api_client.build_api_request(
        http_method: :"POST",
        path: local_var_path,
        operation: "PlaidApi.accounts_balance_get",
        post_body: post_body,
        auth_names: auth_names,
        header_params: header_params,
        cookie_params: cookie_params,
        query_params: query_params,
        form_params: form_params
      )
    end

    # Retrieve accounts
    # The `/accounts/get` endpoint can be used to retrieve a list of accounts associated with any linked Item. Plaid will only return active bank accounts — that is, accounts that are not closed and are capable of carrying a balance. For items that went through the updated account selection pane, this endpoint only returns accounts that were permissioned by the user when they initially created the Item. If a user creates a new account after the initial link, you can capture this event through the [`NEW_ACCOUNTS_AVAILABLE`](https://plaid.com/docs/api/items/#new_accounts_available) webhook and then use Link's [update mode](https://plaid.com/docs/link/update-mode/) to request that the user share this new account with you.  `/accounts/get` is free to use and retrieves cached information, rather than extracting fresh information from the institution. The balance returned will reflect the balance at the time of the last successful Item update. If the Item is enabled for a regularly updating product, such as Transactions, Investments, or Liabilities, the balance will typically update about once a day, as long as the Item is healthy. If the Item is enabled only for products that do not frequently update, such as Auth or Identity, balance data may be much older.  For realtime balance information, use the paid endpoint `/accounts/balance/get` instead.
    # @required @param accounts_get_request [Plaid::AccountsGetRequest?]
    # @return [AccountsGetResponse]
    def accounts_get(
      *,
      accounts_get_request : Plaid::AccountsGetRequest? = nil
    ) : AccountsGetResponse
      data, _status_code, _headers = accounts_get_with_http_info(accounts_get_request: accounts_get_request)
      data
    end

    # Retrieve accounts
    # The &#x60;/accounts/get&#x60; endpoint can be used to retrieve a list of accounts associated with any linked Item. Plaid will only return active bank accounts — that is, accounts that are not closed and are capable of carrying a balance. For items that went through the updated account selection pane, this endpoint only returns accounts that were permissioned by the user when they initially created the Item. If a user creates a new account after the initial link, you can capture this event through the [&#x60;NEW_ACCOUNTS_AVAILABLE&#x60;](https://plaid.com/docs/api/items/#new_accounts_available) webhook and then use Link&#39;s [update mode](https://plaid.com/docs/link/update-mode/) to request that the user share this new account with you.  &#x60;/accounts/get&#x60; is free to use and retrieves cached information, rather than extracting fresh information from the institution. The balance returned will reflect the balance at the time of the last successful Item update. If the Item is enabled for a regularly updating product, such as Transactions, Investments, or Liabilities, the balance will typically update about once a day, as long as the Item is healthy. If the Item is enabled only for products that do not frequently update, such as Auth or Identity, balance data may be much older.  For realtime balance information, use the paid endpoint &#x60;/accounts/balance/get&#x60; instead.
    # @required @param accounts_get_request [Plaid::AccountsGetRequest?]
    # @return [Tuple(AccountsGetResponse, Integer, Hash)] AccountsGetResponse, response status code and response headers
    def accounts_get_with_http_info(
      *,
      accounts_get_request : Plaid::AccountsGetRequest? = nil
    ) : Tuple(AccountsGetResponse, Int32, Hash(String, Array(String) | String))
      request = build_api_request_for_accounts_get(accounts_get_request: accounts_get_request)

      body, status_code, headers = @api_client.execute_api_request(request)

      if debugging?
        Log.debug { "API called: PlaidApi#accounts_get\nBody: #{body.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}" }
      end

      Tuple.new(AccountsGetResponse.from_json(body), status_code, headers)
    end

    # Retrieve accounts
    # The &#x60;/accounts/get&#x60; endpoint can be used to retrieve a list of accounts associated with any linked Item. Plaid will only return active bank accounts — that is, accounts that are not closed and are capable of carrying a balance. For items that went through the updated account selection pane, this endpoint only returns accounts that were permissioned by the user when they initially created the Item. If a user creates a new account after the initial link, you can capture this event through the [&#x60;NEW_ACCOUNTS_AVAILABLE&#x60;](https://plaid.com/docs/api/items/#new_accounts_available) webhook and then use Link&#39;s [update mode](https://plaid.com/docs/link/update-mode/) to request that the user share this new account with you.  &#x60;/accounts/get&#x60; is free to use and retrieves cached information, rather than extracting fresh information from the institution. The balance returned will reflect the balance at the time of the last successful Item update. If the Item is enabled for a regularly updating product, such as Transactions, Investments, or Liabilities, the balance will typically update about once a day, as long as the Item is healthy. If the Item is enabled only for products that do not frequently update, such as Auth or Identity, balance data may be much older.  For realtime balance information, use the paid endpoint &#x60;/accounts/balance/get&#x60; instead.
    # @required @param accounts_get_request [Plaid::AccountsGetRequest?]
    # @return nil
    def accounts_get(
      *,
      accounts_get_request : Plaid::AccountsGetRequest? = nil,
      &block : Crest::Response ->
    ) : Nil
      build_api_request_for_accounts_get(accounts_get_request: accounts_get_request).execute(&block)
    end

    # @return Crest::Request
    def build_api_request_for_accounts_get(
      *,
      accounts_get_request : Plaid::AccountsGetRequest? = nil
    ) : Crest::Request
      if debugging?
        Log.debug { "Calling API: PlaidApi.accounts_get ..." }
      end

      if client_side_validation?
        raise ArgumentError.new("\"accounts_get_request\" is required and cannot be null") if accounts_get_request.nil?
        unless (_accounts_get_request = accounts_get_request).nil?
          _accounts_get_request.validate if _accounts_get_request.is_a?(OpenApi::Validatable)
        end
      end

      # resource path
      local_var_path = "/accounts/get"

      # header parameters
      header_params : Hash(String, String) = Hash(String, String).new
      # HTTP header "Accept" (if needed)
      header_params["Accept"] = @api_client.select_header_accept(["application/json"])
      # HTTP header "Content-Type"
      header_params["Content-Type"] = @api_client.select_header_content_type(["application/json"])

      # cookie parameters
      cookie_params : Hash(String, String) = Hash(String, String).new

      # query parameters
      query_params : Hash(String, (String | Array(String) | JSON::Any)) = Hash(String, (String | Array(String) | JSON::Any)).new

      # form parameters
      form_params : Array(Tuple(String, Crest::ParamsValue)) | Nil = nil

      # http body (model)
      post_body : IO | String | Nil = @api_client.encode(body: accounts_get_request, content_type: header_params["Content-Type"]?) if !accounts_get_request.nil?

      # auth_names
      auth_names = ["clientId", "plaidVersion", "secret"]

      @api_client.build_api_request(
        http_method: :"POST",
        path: local_var_path,
        operation: "PlaidApi.accounts_get",
        post_body: post_body,
        auth_names: auth_names,
        header_params: header_params,
        cookie_params: cookie_params,
        query_params: query_params,
        form_params: form_params
      )
    end

    # Retrieve information about a Plaid application
    # Allows financial institutions to retrieve information about Plaid clients for the purpose of building control-tower experiences
    # @required @param application_get_request [Plaid::ApplicationGetRequest?]
    # @return [ApplicationGetResponse]
    def application_get(
      *,
      application_get_request : Plaid::ApplicationGetRequest? = nil
    ) : ApplicationGetResponse
      data, _status_code, _headers = application_get_with_http_info(application_get_request: application_get_request)
      data
    end

    # Retrieve information about a Plaid application
    # Allows financial institutions to retrieve information about Plaid clients for the purpose of building control-tower experiences
    # @required @param application_get_request [Plaid::ApplicationGetRequest?]
    # @return [Tuple(ApplicationGetResponse, Integer, Hash)] ApplicationGetResponse, response status code and response headers
    def application_get_with_http_info(
      *,
      application_get_request : Plaid::ApplicationGetRequest? = nil
    ) : Tuple(ApplicationGetResponse, Int32, Hash(String, Array(String) | String))
      request = build_api_request_for_application_get(application_get_request: application_get_request)

      body, status_code, headers = @api_client.execute_api_request(request)

      if debugging?
        Log.debug { "API called: PlaidApi#application_get\nBody: #{body.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}" }
      end

      Tuple.new(ApplicationGetResponse.from_json(body), status_code, headers)
    end

    # Retrieve information about a Plaid application
    # Allows financial institutions to retrieve information about Plaid clients for the purpose of building control-tower experiences
    # @required @param application_get_request [Plaid::ApplicationGetRequest?]
    # @return nil
    def application_get(
      *,
      application_get_request : Plaid::ApplicationGetRequest? = nil,
      &block : Crest::Response ->
    ) : Nil
      build_api_request_for_application_get(application_get_request: application_get_request).execute(&block)
    end

    # @return Crest::Request
    def build_api_request_for_application_get(
      *,
      application_get_request : Plaid::ApplicationGetRequest? = nil
    ) : Crest::Request
      if debugging?
        Log.debug { "Calling API: PlaidApi.application_get ..." }
      end

      if client_side_validation?
        raise ArgumentError.new("\"application_get_request\" is required and cannot be null") if application_get_request.nil?
        unless (_application_get_request = application_get_request).nil?
          _application_get_request.validate if _application_get_request.is_a?(OpenApi::Validatable)
        end
      end

      # resource path
      local_var_path = "/application/get"

      # header parameters
      header_params : Hash(String, String) = Hash(String, String).new
      # HTTP header "Accept" (if needed)
      header_params["Accept"] = @api_client.select_header_accept(["application/json"])
      # HTTP header "Content-Type"
      header_params["Content-Type"] = @api_client.select_header_content_type(["application/json"])

      # cookie parameters
      cookie_params : Hash(String, String) = Hash(String, String).new

      # query parameters
      query_params : Hash(String, (String | Array(String) | JSON::Any)) = Hash(String, (String | Array(String) | JSON::Any)).new

      # form parameters
      form_params : Array(Tuple(String, Crest::ParamsValue)) | Nil = nil

      # http body (model)
      post_body : IO | String | Nil = @api_client.encode(body: application_get_request, content_type: header_params["Content-Type"]?) if !application_get_request.nil?

      # auth_names
      auth_names = ["clientId", "plaidVersion", "secret"]

      @api_client.build_api_request(
        http_method: :"POST",
        path: local_var_path,
        operation: "PlaidApi.application_get",
        post_body: post_body,
        auth_names: auth_names,
        header_params: header_params,
        cookie_params: cookie_params,
        query_params: query_params,
        form_params: form_params
      )
    end

    # Create Asset Report Audit Copy
    # Plaid can provide an Audit Copy of any Asset Report directly to a participating third party on your behalf. For example, Plaid can supply an Audit Copy directly to Fannie Mae on your behalf if you participate in the Day 1 Certainty™ program. An Audit Copy contains the same underlying data as the Asset Report.  To grant access to an Audit Copy, use the `/asset_report/audit_copy/create` endpoint to create an `audit_copy_token` and then pass that token to the third party who needs access. Each third party has its own `auditor_id`, for example `fannie_mae`. You’ll need to create a separate Audit Copy for each third party to whom you want to grant access to the Report.
    # @required @param asset_report_audit_copy_create_request [Plaid::AssetReportAuditCopyCreateRequest?]
    # @return [AssetReportAuditCopyCreateResponse]
    def asset_report_audit_copy_create(
      *,
      asset_report_audit_copy_create_request : Plaid::AssetReportAuditCopyCreateRequest? = nil
    ) : AssetReportAuditCopyCreateResponse
      data, _status_code, _headers = asset_report_audit_copy_create_with_http_info(asset_report_audit_copy_create_request: asset_report_audit_copy_create_request)
      data
    end

    # Create Asset Report Audit Copy
    # Plaid can provide an Audit Copy of any Asset Report directly to a participating third party on your behalf. For example, Plaid can supply an Audit Copy directly to Fannie Mae on your behalf if you participate in the Day 1 Certainty™ program. An Audit Copy contains the same underlying data as the Asset Report.  To grant access to an Audit Copy, use the &#x60;/asset_report/audit_copy/create&#x60; endpoint to create an &#x60;audit_copy_token&#x60; and then pass that token to the third party who needs access. Each third party has its own &#x60;auditor_id&#x60;, for example &#x60;fannie_mae&#x60;. You’ll need to create a separate Audit Copy for each third party to whom you want to grant access to the Report.
    # @required @param asset_report_audit_copy_create_request [Plaid::AssetReportAuditCopyCreateRequest?]
    # @return [Tuple(AssetReportAuditCopyCreateResponse, Integer, Hash)] AssetReportAuditCopyCreateResponse, response status code and response headers
    def asset_report_audit_copy_create_with_http_info(
      *,
      asset_report_audit_copy_create_request : Plaid::AssetReportAuditCopyCreateRequest? = nil
    ) : Tuple(AssetReportAuditCopyCreateResponse, Int32, Hash(String, Array(String) | String))
      request = build_api_request_for_asset_report_audit_copy_create(asset_report_audit_copy_create_request: asset_report_audit_copy_create_request)

      body, status_code, headers = @api_client.execute_api_request(request)

      if debugging?
        Log.debug { "API called: PlaidApi#asset_report_audit_copy_create\nBody: #{body.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}" }
      end

      Tuple.new(AssetReportAuditCopyCreateResponse.from_json(body), status_code, headers)
    end

    # Create Asset Report Audit Copy
    # Plaid can provide an Audit Copy of any Asset Report directly to a participating third party on your behalf. For example, Plaid can supply an Audit Copy directly to Fannie Mae on your behalf if you participate in the Day 1 Certainty™ program. An Audit Copy contains the same underlying data as the Asset Report.  To grant access to an Audit Copy, use the &#x60;/asset_report/audit_copy/create&#x60; endpoint to create an &#x60;audit_copy_token&#x60; and then pass that token to the third party who needs access. Each third party has its own &#x60;auditor_id&#x60;, for example &#x60;fannie_mae&#x60;. You’ll need to create a separate Audit Copy for each third party to whom you want to grant access to the Report.
    # @required @param asset_report_audit_copy_create_request [Plaid::AssetReportAuditCopyCreateRequest?]
    # @return nil
    def asset_report_audit_copy_create(
      *,
      asset_report_audit_copy_create_request : Plaid::AssetReportAuditCopyCreateRequest? = nil,
      &block : Crest::Response ->
    ) : Nil
      build_api_request_for_asset_report_audit_copy_create(asset_report_audit_copy_create_request: asset_report_audit_copy_create_request).execute(&block)
    end

    # @return Crest::Request
    def build_api_request_for_asset_report_audit_copy_create(
      *,
      asset_report_audit_copy_create_request : Plaid::AssetReportAuditCopyCreateRequest? = nil
    ) : Crest::Request
      if debugging?
        Log.debug { "Calling API: PlaidApi.asset_report_audit_copy_create ..." }
      end

      if client_side_validation?
        raise ArgumentError.new("\"asset_report_audit_copy_create_request\" is required and cannot be null") if asset_report_audit_copy_create_request.nil?
        unless (_asset_report_audit_copy_create_request = asset_report_audit_copy_create_request).nil?
          _asset_report_audit_copy_create_request.validate if _asset_report_audit_copy_create_request.is_a?(OpenApi::Validatable)
        end
      end

      # resource path
      local_var_path = "/asset_report/audit_copy/create"

      # header parameters
      header_params : Hash(String, String) = Hash(String, String).new
      # HTTP header "Accept" (if needed)
      header_params["Accept"] = @api_client.select_header_accept(["application/json"])
      # HTTP header "Content-Type"
      header_params["Content-Type"] = @api_client.select_header_content_type(["application/json"])

      # cookie parameters
      cookie_params : Hash(String, String) = Hash(String, String).new

      # query parameters
      query_params : Hash(String, (String | Array(String) | JSON::Any)) = Hash(String, (String | Array(String) | JSON::Any)).new

      # form parameters
      form_params : Array(Tuple(String, Crest::ParamsValue)) | Nil = nil

      # http body (model)
      post_body : IO | String | Nil = @api_client.encode(body: asset_report_audit_copy_create_request, content_type: header_params["Content-Type"]?) if !asset_report_audit_copy_create_request.nil?

      # auth_names
      auth_names = ["clientId", "plaidVersion", "secret"]

      @api_client.build_api_request(
        http_method: :"POST",
        path: local_var_path,
        operation: "PlaidApi.asset_report_audit_copy_create",
        post_body: post_body,
        auth_names: auth_names,
        header_params: header_params,
        cookie_params: cookie_params,
        query_params: query_params,
        form_params: form_params
      )
    end

    # Retrieve an Asset Report Audit Copy
    # `/asset_report/audit_copy/get` allows auditors to get a copy of an Asset Report that was previously shared via the `/asset_report/audit_copy/create` endpoint.  The caller of `/asset_report/audit_copy/create` must provide the `audit_copy_token` to the auditor.  This token can then be used to call `/asset_report/audit_copy/create`.
    # @required @param asset_report_audit_copy_get_request [Plaid::AssetReportAuditCopyGetRequest?]
    # @return [AssetReportGetResponse]
    def asset_report_audit_copy_get(
      *,
      asset_report_audit_copy_get_request : Plaid::AssetReportAuditCopyGetRequest? = nil
    ) : AssetReportGetResponse
      data, _status_code, _headers = asset_report_audit_copy_get_with_http_info(asset_report_audit_copy_get_request: asset_report_audit_copy_get_request)
      data
    end

    # Retrieve an Asset Report Audit Copy
    # &#x60;/asset_report/audit_copy/get&#x60; allows auditors to get a copy of an Asset Report that was previously shared via the &#x60;/asset_report/audit_copy/create&#x60; endpoint.  The caller of &#x60;/asset_report/audit_copy/create&#x60; must provide the &#x60;audit_copy_token&#x60; to the auditor.  This token can then be used to call &#x60;/asset_report/audit_copy/create&#x60;.
    # @required @param asset_report_audit_copy_get_request [Plaid::AssetReportAuditCopyGetRequest?]
    # @return [Tuple(AssetReportGetResponse, Integer, Hash)] AssetReportGetResponse, response status code and response headers
    def asset_report_audit_copy_get_with_http_info(
      *,
      asset_report_audit_copy_get_request : Plaid::AssetReportAuditCopyGetRequest? = nil
    ) : Tuple(AssetReportGetResponse, Int32, Hash(String, Array(String) | String))
      request = build_api_request_for_asset_report_audit_copy_get(asset_report_audit_copy_get_request: asset_report_audit_copy_get_request)

      body, status_code, headers = @api_client.execute_api_request(request)

      if debugging?
        Log.debug { "API called: PlaidApi#asset_report_audit_copy_get\nBody: #{body.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}" }
      end

      Tuple.new(AssetReportGetResponse.from_json(body), status_code, headers)
    end

    # Retrieve an Asset Report Audit Copy
    # &#x60;/asset_report/audit_copy/get&#x60; allows auditors to get a copy of an Asset Report that was previously shared via the &#x60;/asset_report/audit_copy/create&#x60; endpoint.  The caller of &#x60;/asset_report/audit_copy/create&#x60; must provide the &#x60;audit_copy_token&#x60; to the auditor.  This token can then be used to call &#x60;/asset_report/audit_copy/create&#x60;.
    # @required @param asset_report_audit_copy_get_request [Plaid::AssetReportAuditCopyGetRequest?]
    # @return nil
    def asset_report_audit_copy_get(
      *,
      asset_report_audit_copy_get_request : Plaid::AssetReportAuditCopyGetRequest? = nil,
      &block : Crest::Response ->
    ) : Nil
      build_api_request_for_asset_report_audit_copy_get(asset_report_audit_copy_get_request: asset_report_audit_copy_get_request).execute(&block)
    end

    # @return Crest::Request
    def build_api_request_for_asset_report_audit_copy_get(
      *,
      asset_report_audit_copy_get_request : Plaid::AssetReportAuditCopyGetRequest? = nil
    ) : Crest::Request
      if debugging?
        Log.debug { "Calling API: PlaidApi.asset_report_audit_copy_get ..." }
      end

      if client_side_validation?
        raise ArgumentError.new("\"asset_report_audit_copy_get_request\" is required and cannot be null") if asset_report_audit_copy_get_request.nil?
        unless (_asset_report_audit_copy_get_request = asset_report_audit_copy_get_request).nil?
          _asset_report_audit_copy_get_request.validate if _asset_report_audit_copy_get_request.is_a?(OpenApi::Validatable)
        end
      end

      # resource path
      local_var_path = "/asset_report/audit_copy/get"

      # header parameters
      header_params : Hash(String, String) = Hash(String, String).new
      # HTTP header "Accept" (if needed)
      header_params["Accept"] = @api_client.select_header_accept(["application/json"])
      # HTTP header "Content-Type"
      header_params["Content-Type"] = @api_client.select_header_content_type(["application/json"])

      # cookie parameters
      cookie_params : Hash(String, String) = Hash(String, String).new

      # query parameters
      query_params : Hash(String, (String | Array(String) | JSON::Any)) = Hash(String, (String | Array(String) | JSON::Any)).new

      # form parameters
      form_params : Array(Tuple(String, Crest::ParamsValue)) | Nil = nil

      # http body (model)
      post_body : IO | String | Nil = @api_client.encode(body: asset_report_audit_copy_get_request, content_type: header_params["Content-Type"]?) if !asset_report_audit_copy_get_request.nil?

      # auth_names
      auth_names = ["clientId", "plaidVersion", "secret"]

      @api_client.build_api_request(
        http_method: :"POST",
        path: local_var_path,
        operation: "PlaidApi.asset_report_audit_copy_get",
        post_body: post_body,
        auth_names: auth_names,
        header_params: header_params,
        cookie_params: cookie_params,
        query_params: query_params,
        form_params: form_params
      )
    end

    # Remove Asset Report Audit Copy
    # The `/asset_report/audit_copy/remove` endpoint allows you to remove an Audit Copy. Removing an Audit Copy invalidates the `audit_copy_token` associated with it, meaning both you and any third parties holding the token will no longer be able to use it to access Report data. Items associated with the Asset Report, the Asset Report itself and other Audit Copies of it are not affected and will remain accessible after removing the given Audit Copy.
    # @required @param asset_report_audit_copy_remove_request [Plaid::AssetReportAuditCopyRemoveRequest?]
    # @return [AssetReportAuditCopyRemoveResponse]
    def asset_report_audit_copy_remove(
      *,
      asset_report_audit_copy_remove_request : Plaid::AssetReportAuditCopyRemoveRequest? = nil
    ) : AssetReportAuditCopyRemoveResponse
      data, _status_code, _headers = asset_report_audit_copy_remove_with_http_info(asset_report_audit_copy_remove_request: asset_report_audit_copy_remove_request)
      data
    end

    # Remove Asset Report Audit Copy
    # The &#x60;/asset_report/audit_copy/remove&#x60; endpoint allows you to remove an Audit Copy. Removing an Audit Copy invalidates the &#x60;audit_copy_token&#x60; associated with it, meaning both you and any third parties holding the token will no longer be able to use it to access Report data. Items associated with the Asset Report, the Asset Report itself and other Audit Copies of it are not affected and will remain accessible after removing the given Audit Copy.
    # @required @param asset_report_audit_copy_remove_request [Plaid::AssetReportAuditCopyRemoveRequest?]
    # @return [Tuple(AssetReportAuditCopyRemoveResponse, Integer, Hash)] AssetReportAuditCopyRemoveResponse, response status code and response headers
    def asset_report_audit_copy_remove_with_http_info(
      *,
      asset_report_audit_copy_remove_request : Plaid::AssetReportAuditCopyRemoveRequest? = nil
    ) : Tuple(AssetReportAuditCopyRemoveResponse, Int32, Hash(String, Array(String) | String))
      request = build_api_request_for_asset_report_audit_copy_remove(asset_report_audit_copy_remove_request: asset_report_audit_copy_remove_request)

      body, status_code, headers = @api_client.execute_api_request(request)

      if debugging?
        Log.debug { "API called: PlaidApi#asset_report_audit_copy_remove\nBody: #{body.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}" }
      end

      Tuple.new(AssetReportAuditCopyRemoveResponse.from_json(body), status_code, headers)
    end

    # Remove Asset Report Audit Copy
    # The &#x60;/asset_report/audit_copy/remove&#x60; endpoint allows you to remove an Audit Copy. Removing an Audit Copy invalidates the &#x60;audit_copy_token&#x60; associated with it, meaning both you and any third parties holding the token will no longer be able to use it to access Report data. Items associated with the Asset Report, the Asset Report itself and other Audit Copies of it are not affected and will remain accessible after removing the given Audit Copy.
    # @required @param asset_report_audit_copy_remove_request [Plaid::AssetReportAuditCopyRemoveRequest?]
    # @return nil
    def asset_report_audit_copy_remove(
      *,
      asset_report_audit_copy_remove_request : Plaid::AssetReportAuditCopyRemoveRequest? = nil,
      &block : Crest::Response ->
    ) : Nil
      build_api_request_for_asset_report_audit_copy_remove(asset_report_audit_copy_remove_request: asset_report_audit_copy_remove_request).execute(&block)
    end

    # @return Crest::Request
    def build_api_request_for_asset_report_audit_copy_remove(
      *,
      asset_report_audit_copy_remove_request : Plaid::AssetReportAuditCopyRemoveRequest? = nil
    ) : Crest::Request
      if debugging?
        Log.debug { "Calling API: PlaidApi.asset_report_audit_copy_remove ..." }
      end

      if client_side_validation?
        raise ArgumentError.new("\"asset_report_audit_copy_remove_request\" is required and cannot be null") if asset_report_audit_copy_remove_request.nil?
        unless (_asset_report_audit_copy_remove_request = asset_report_audit_copy_remove_request).nil?
          _asset_report_audit_copy_remove_request.validate if _asset_report_audit_copy_remove_request.is_a?(OpenApi::Validatable)
        end
      end

      # resource path
      local_var_path = "/asset_report/audit_copy/remove"

      # header parameters
      header_params : Hash(String, String) = Hash(String, String).new
      # HTTP header "Accept" (if needed)
      header_params["Accept"] = @api_client.select_header_accept(["application/json"])
      # HTTP header "Content-Type"
      header_params["Content-Type"] = @api_client.select_header_content_type(["application/json"])

      # cookie parameters
      cookie_params : Hash(String, String) = Hash(String, String).new

      # query parameters
      query_params : Hash(String, (String | Array(String) | JSON::Any)) = Hash(String, (String | Array(String) | JSON::Any)).new

      # form parameters
      form_params : Array(Tuple(String, Crest::ParamsValue)) | Nil = nil

      # http body (model)
      post_body : IO | String | Nil = @api_client.encode(body: asset_report_audit_copy_remove_request, content_type: header_params["Content-Type"]?) if !asset_report_audit_copy_remove_request.nil?

      # auth_names
      auth_names = ["clientId", "plaidVersion", "secret"]

      @api_client.build_api_request(
        http_method: :"POST",
        path: local_var_path,
        operation: "PlaidApi.asset_report_audit_copy_remove",
        post_body: post_body,
        auth_names: auth_names,
        header_params: header_params,
        cookie_params: cookie_params,
        query_params: query_params,
        form_params: form_params
      )
    end

    # Create an Asset Report
    # The `/asset_report/create` endpoint initiates the process of creating an Asset Report, which can then be retrieved by passing the `asset_report_token` return value to the `/asset_report/get` or `/asset_report/pdf/get` endpoints.  The Asset Report takes some time to be created and is not available immediately after calling `/asset_report/create`. The exact amount of time to create the report will vary depending on how many days of history are requested and will typically range from a few seconds to about one minute. When the Asset Report is ready to be retrieved using `/asset_report/get` or `/asset_report/pdf/get`, Plaid will fire a `PRODUCT_READY` webhook. For full details of the webhook schema, see [Asset Report webhooks](https://plaid.com/docs/api/products/assets/#webhooks).  The `/asset_report/create` endpoint creates an Asset Report at a moment in time. Asset Reports are immutable. To get an updated Asset Report, use the `/asset_report/refresh` endpoint.
    # @required @param asset_report_create_request [Plaid::AssetReportCreateRequest?]
    # @return [AssetReportCreateResponse]
    def asset_report_create(
      *,
      asset_report_create_request : Plaid::AssetReportCreateRequest? = nil
    ) : AssetReportCreateResponse
      data, _status_code, _headers = asset_report_create_with_http_info(asset_report_create_request: asset_report_create_request)
      data
    end

    # Create an Asset Report
    # The &#x60;/asset_report/create&#x60; endpoint initiates the process of creating an Asset Report, which can then be retrieved by passing the &#x60;asset_report_token&#x60; return value to the &#x60;/asset_report/get&#x60; or &#x60;/asset_report/pdf/get&#x60; endpoints.  The Asset Report takes some time to be created and is not available immediately after calling &#x60;/asset_report/create&#x60;. The exact amount of time to create the report will vary depending on how many days of history are requested and will typically range from a few seconds to about one minute. When the Asset Report is ready to be retrieved using &#x60;/asset_report/get&#x60; or &#x60;/asset_report/pdf/get&#x60;, Plaid will fire a &#x60;PRODUCT_READY&#x60; webhook. For full details of the webhook schema, see [Asset Report webhooks](https://plaid.com/docs/api/products/assets/#webhooks).  The &#x60;/asset_report/create&#x60; endpoint creates an Asset Report at a moment in time. Asset Reports are immutable. To get an updated Asset Report, use the &#x60;/asset_report/refresh&#x60; endpoint.
    # @required @param asset_report_create_request [Plaid::AssetReportCreateRequest?]
    # @return [Tuple(AssetReportCreateResponse, Integer, Hash)] AssetReportCreateResponse, response status code and response headers
    def asset_report_create_with_http_info(
      *,
      asset_report_create_request : Plaid::AssetReportCreateRequest? = nil
    ) : Tuple(AssetReportCreateResponse, Int32, Hash(String, Array(String) | String))
      request = build_api_request_for_asset_report_create(asset_report_create_request: asset_report_create_request)

      body, status_code, headers = @api_client.execute_api_request(request)

      if debugging?
        Log.debug { "API called: PlaidApi#asset_report_create\nBody: #{body.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}" }
      end

      Tuple.new(AssetReportCreateResponse.from_json(body), status_code, headers)
    end

    # Create an Asset Report
    # The &#x60;/asset_report/create&#x60; endpoint initiates the process of creating an Asset Report, which can then be retrieved by passing the &#x60;asset_report_token&#x60; return value to the &#x60;/asset_report/get&#x60; or &#x60;/asset_report/pdf/get&#x60; endpoints.  The Asset Report takes some time to be created and is not available immediately after calling &#x60;/asset_report/create&#x60;. The exact amount of time to create the report will vary depending on how many days of history are requested and will typically range from a few seconds to about one minute. When the Asset Report is ready to be retrieved using &#x60;/asset_report/get&#x60; or &#x60;/asset_report/pdf/get&#x60;, Plaid will fire a &#x60;PRODUCT_READY&#x60; webhook. For full details of the webhook schema, see [Asset Report webhooks](https://plaid.com/docs/api/products/assets/#webhooks).  The &#x60;/asset_report/create&#x60; endpoint creates an Asset Report at a moment in time. Asset Reports are immutable. To get an updated Asset Report, use the &#x60;/asset_report/refresh&#x60; endpoint.
    # @required @param asset_report_create_request [Plaid::AssetReportCreateRequest?]
    # @return nil
    def asset_report_create(
      *,
      asset_report_create_request : Plaid::AssetReportCreateRequest? = nil,
      &block : Crest::Response ->
    ) : Nil
      build_api_request_for_asset_report_create(asset_report_create_request: asset_report_create_request).execute(&block)
    end

    # @return Crest::Request
    def build_api_request_for_asset_report_create(
      *,
      asset_report_create_request : Plaid::AssetReportCreateRequest? = nil
    ) : Crest::Request
      if debugging?
        Log.debug { "Calling API: PlaidApi.asset_report_create ..." }
      end

      if client_side_validation?
        raise ArgumentError.new("\"asset_report_create_request\" is required and cannot be null") if asset_report_create_request.nil?
        unless (_asset_report_create_request = asset_report_create_request).nil?
          _asset_report_create_request.validate if _asset_report_create_request.is_a?(OpenApi::Validatable)
        end
      end

      # resource path
      local_var_path = "/asset_report/create"

      # header parameters
      header_params : Hash(String, String) = Hash(String, String).new
      # HTTP header "Accept" (if needed)
      header_params["Accept"] = @api_client.select_header_accept(["application/json"])
      # HTTP header "Content-Type"
      header_params["Content-Type"] = @api_client.select_header_content_type(["application/json"])

      # cookie parameters
      cookie_params : Hash(String, String) = Hash(String, String).new

      # query parameters
      query_params : Hash(String, (String | Array(String) | JSON::Any)) = Hash(String, (String | Array(String) | JSON::Any)).new

      # form parameters
      form_params : Array(Tuple(String, Crest::ParamsValue)) | Nil = nil

      # http body (model)
      post_body : IO | String | Nil = @api_client.encode(body: asset_report_create_request, content_type: header_params["Content-Type"]?) if !asset_report_create_request.nil?

      # auth_names
      auth_names = ["clientId", "plaidVersion", "secret"]

      @api_client.build_api_request(
        http_method: :"POST",
        path: local_var_path,
        operation: "PlaidApi.asset_report_create",
        post_body: post_body,
        auth_names: auth_names,
        header_params: header_params,
        cookie_params: cookie_params,
        query_params: query_params,
        form_params: form_params
      )
    end

    # Filter Asset Report
    # By default, an Asset Report will contain all of the accounts on a given Item. In some cases, you may not want the Asset Report to contain all accounts. For example, you might have the end user choose which accounts are relevant in Link using the Account Select view, which you can enable in the dashboard. Or, you might always exclude certain account types or subtypes, which you can identify by using the `/accounts/get` endpoint. To narrow an Asset Report to only a subset of accounts, use the `/asset_report/filter` endpoint.  To exclude certain Accounts from an Asset Report, first use the `/asset_report/create` endpoint to create the report, then send the `asset_report_token` along with a list of `account_ids` to exclude to the `/asset_report/filter` endpoint, to create a new Asset Report which contains only a subset of the original Asset Report's data.  Because Asset Reports are immutable, calling `/asset_report/filter` does not alter the original Asset Report in any way; rather, `/asset_report/filter` creates a new Asset Report with a new token and id. Asset Reports created via `/asset_report/filter` do not contain new Asset data, and are not billed.  Plaid will fire a [`PRODUCT_READY`](https://plaid.com/docs/api/products/assets/#product_ready) webhook once generation of the filtered Asset Report has completed.
    # @required @param asset_report_filter_request [Plaid::AssetReportFilterRequest?]
    # @return [AssetReportFilterResponse]
    def asset_report_filter(
      *,
      asset_report_filter_request : Plaid::AssetReportFilterRequest? = nil
    ) : AssetReportFilterResponse
      data, _status_code, _headers = asset_report_filter_with_http_info(asset_report_filter_request: asset_report_filter_request)
      data
    end

    # Filter Asset Report
    # By default, an Asset Report will contain all of the accounts on a given Item. In some cases, you may not want the Asset Report to contain all accounts. For example, you might have the end user choose which accounts are relevant in Link using the Account Select view, which you can enable in the dashboard. Or, you might always exclude certain account types or subtypes, which you can identify by using the &#x60;/accounts/get&#x60; endpoint. To narrow an Asset Report to only a subset of accounts, use the &#x60;/asset_report/filter&#x60; endpoint.  To exclude certain Accounts from an Asset Report, first use the &#x60;/asset_report/create&#x60; endpoint to create the report, then send the &#x60;asset_report_token&#x60; along with a list of &#x60;account_ids&#x60; to exclude to the &#x60;/asset_report/filter&#x60; endpoint, to create a new Asset Report which contains only a subset of the original Asset Report&#39;s data.  Because Asset Reports are immutable, calling &#x60;/asset_report/filter&#x60; does not alter the original Asset Report in any way; rather, &#x60;/asset_report/filter&#x60; creates a new Asset Report with a new token and id. Asset Reports created via &#x60;/asset_report/filter&#x60; do not contain new Asset data, and are not billed.  Plaid will fire a [&#x60;PRODUCT_READY&#x60;](https://plaid.com/docs/api/products/assets/#product_ready) webhook once generation of the filtered Asset Report has completed.
    # @required @param asset_report_filter_request [Plaid::AssetReportFilterRequest?]
    # @return [Tuple(AssetReportFilterResponse, Integer, Hash)] AssetReportFilterResponse, response status code and response headers
    def asset_report_filter_with_http_info(
      *,
      asset_report_filter_request : Plaid::AssetReportFilterRequest? = nil
    ) : Tuple(AssetReportFilterResponse, Int32, Hash(String, Array(String) | String))
      request = build_api_request_for_asset_report_filter(asset_report_filter_request: asset_report_filter_request)

      body, status_code, headers = @api_client.execute_api_request(request)

      if debugging?
        Log.debug { "API called: PlaidApi#asset_report_filter\nBody: #{body.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}" }
      end

      Tuple.new(AssetReportFilterResponse.from_json(body), status_code, headers)
    end

    # Filter Asset Report
    # By default, an Asset Report will contain all of the accounts on a given Item. In some cases, you may not want the Asset Report to contain all accounts. For example, you might have the end user choose which accounts are relevant in Link using the Account Select view, which you can enable in the dashboard. Or, you might always exclude certain account types or subtypes, which you can identify by using the &#x60;/accounts/get&#x60; endpoint. To narrow an Asset Report to only a subset of accounts, use the &#x60;/asset_report/filter&#x60; endpoint.  To exclude certain Accounts from an Asset Report, first use the &#x60;/asset_report/create&#x60; endpoint to create the report, then send the &#x60;asset_report_token&#x60; along with a list of &#x60;account_ids&#x60; to exclude to the &#x60;/asset_report/filter&#x60; endpoint, to create a new Asset Report which contains only a subset of the original Asset Report&#39;s data.  Because Asset Reports are immutable, calling &#x60;/asset_report/filter&#x60; does not alter the original Asset Report in any way; rather, &#x60;/asset_report/filter&#x60; creates a new Asset Report with a new token and id. Asset Reports created via &#x60;/asset_report/filter&#x60; do not contain new Asset data, and are not billed.  Plaid will fire a [&#x60;PRODUCT_READY&#x60;](https://plaid.com/docs/api/products/assets/#product_ready) webhook once generation of the filtered Asset Report has completed.
    # @required @param asset_report_filter_request [Plaid::AssetReportFilterRequest?]
    # @return nil
    def asset_report_filter(
      *,
      asset_report_filter_request : Plaid::AssetReportFilterRequest? = nil,
      &block : Crest::Response ->
    ) : Nil
      build_api_request_for_asset_report_filter(asset_report_filter_request: asset_report_filter_request).execute(&block)
    end

    # @return Crest::Request
    def build_api_request_for_asset_report_filter(
      *,
      asset_report_filter_request : Plaid::AssetReportFilterRequest? = nil
    ) : Crest::Request
      if debugging?
        Log.debug { "Calling API: PlaidApi.asset_report_filter ..." }
      end

      if client_side_validation?
        raise ArgumentError.new("\"asset_report_filter_request\" is required and cannot be null") if asset_report_filter_request.nil?
        unless (_asset_report_filter_request = asset_report_filter_request).nil?
          _asset_report_filter_request.validate if _asset_report_filter_request.is_a?(OpenApi::Validatable)
        end
      end

      # resource path
      local_var_path = "/asset_report/filter"

      # header parameters
      header_params : Hash(String, String) = Hash(String, String).new
      # HTTP header "Accept" (if needed)
      header_params["Accept"] = @api_client.select_header_accept(["application/json"])
      # HTTP header "Content-Type"
      header_params["Content-Type"] = @api_client.select_header_content_type(["application/json"])

      # cookie parameters
      cookie_params : Hash(String, String) = Hash(String, String).new

      # query parameters
      query_params : Hash(String, (String | Array(String) | JSON::Any)) = Hash(String, (String | Array(String) | JSON::Any)).new

      # form parameters
      form_params : Array(Tuple(String, Crest::ParamsValue)) | Nil = nil

      # http body (model)
      post_body : IO | String | Nil = @api_client.encode(body: asset_report_filter_request, content_type: header_params["Content-Type"]?) if !asset_report_filter_request.nil?

      # auth_names
      auth_names = ["clientId", "plaidVersion", "secret"]

      @api_client.build_api_request(
        http_method: :"POST",
        path: local_var_path,
        operation: "PlaidApi.asset_report_filter",
        post_body: post_body,
        auth_names: auth_names,
        header_params: header_params,
        cookie_params: cookie_params,
        query_params: query_params,
        form_params: form_params
      )
    end

    # Retrieve an Asset Report
    # The `/asset_report/get` endpoint retrieves the Asset Report in JSON format. Before calling `/asset_report/get`, you must first create the Asset Report using `/asset_report/create` (or filter an Asset Report using `/asset_report/filter`) and then wait for the [`PRODUCT_READY`](https://plaid.com/docs/api/products/assets/#product_ready) webhook to fire, indicating that the Report is ready to be retrieved.  By default, an Asset Report includes transaction descriptions as returned by the bank, as opposed to parsed and categorized by Plaid. You can also receive cleaned and categorized transactions, as well as additional insights like merchant name or location information. We call this an Asset Report with Insights. An Asset Report with Insights provides transaction category, location, and merchant information in addition to the transaction strings provided in a standard Asset Report. To retrieve an Asset Report with Insights, call `/asset_report/get` endpoint with `include_insights` set to `true`.  For latency-sensitive applications, you can optionally call `/asset_report/create` with `options.add_ons` set to `[\"fast_assets\"]`. This will cause Plaid to create two versions of the Asset Report: one with only current and available balance and identity information, and then later on the complete Asset Report. You will receive separate webhooks for each version of the Asset Report.
    # @required @param asset_report_get_request [Plaid::AssetReportGetRequest?]
    # @return [AssetReportGetResponse]
    def asset_report_get(
      *,
      asset_report_get_request : Plaid::AssetReportGetRequest? = nil
    ) : AssetReportGetResponse
      data, _status_code, _headers = asset_report_get_with_http_info(asset_report_get_request: asset_report_get_request)
      data
    end

    # Retrieve an Asset Report
    # The &#x60;/asset_report/get&#x60; endpoint retrieves the Asset Report in JSON format. Before calling &#x60;/asset_report/get&#x60;, you must first create the Asset Report using &#x60;/asset_report/create&#x60; (or filter an Asset Report using &#x60;/asset_report/filter&#x60;) and then wait for the [&#x60;PRODUCT_READY&#x60;](https://plaid.com/docs/api/products/assets/#product_ready) webhook to fire, indicating that the Report is ready to be retrieved.  By default, an Asset Report includes transaction descriptions as returned by the bank, as opposed to parsed and categorized by Plaid. You can also receive cleaned and categorized transactions, as well as additional insights like merchant name or location information. We call this an Asset Report with Insights. An Asset Report with Insights provides transaction category, location, and merchant information in addition to the transaction strings provided in a standard Asset Report. To retrieve an Asset Report with Insights, call &#x60;/asset_report/get&#x60; endpoint with &#x60;include_insights&#x60; set to &#x60;true&#x60;.  For latency-sensitive applications, you can optionally call &#x60;/asset_report/create&#x60; with &#x60;options.add_ons&#x60; set to &#x60;[\&quot;fast_assets\&quot;]&#x60;. This will cause Plaid to create two versions of the Asset Report: one with only current and available balance and identity information, and then later on the complete Asset Report. You will receive separate webhooks for each version of the Asset Report.
    # @required @param asset_report_get_request [Plaid::AssetReportGetRequest?]
    # @return [Tuple(AssetReportGetResponse, Integer, Hash)] AssetReportGetResponse, response status code and response headers
    def asset_report_get_with_http_info(
      *,
      asset_report_get_request : Plaid::AssetReportGetRequest? = nil
    ) : Tuple(AssetReportGetResponse, Int32, Hash(String, Array(String) | String))
      request = build_api_request_for_asset_report_get(asset_report_get_request: asset_report_get_request)

      body, status_code, headers = @api_client.execute_api_request(request)

      if debugging?
        Log.debug { "API called: PlaidApi#asset_report_get\nBody: #{body.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}" }
      end

      Tuple.new(AssetReportGetResponse.from_json(body), status_code, headers)
    end

    # Retrieve an Asset Report
    # The &#x60;/asset_report/get&#x60; endpoint retrieves the Asset Report in JSON format. Before calling &#x60;/asset_report/get&#x60;, you must first create the Asset Report using &#x60;/asset_report/create&#x60; (or filter an Asset Report using &#x60;/asset_report/filter&#x60;) and then wait for the [&#x60;PRODUCT_READY&#x60;](https://plaid.com/docs/api/products/assets/#product_ready) webhook to fire, indicating that the Report is ready to be retrieved.  By default, an Asset Report includes transaction descriptions as returned by the bank, as opposed to parsed and categorized by Plaid. You can also receive cleaned and categorized transactions, as well as additional insights like merchant name or location information. We call this an Asset Report with Insights. An Asset Report with Insights provides transaction category, location, and merchant information in addition to the transaction strings provided in a standard Asset Report. To retrieve an Asset Report with Insights, call &#x60;/asset_report/get&#x60; endpoint with &#x60;include_insights&#x60; set to &#x60;true&#x60;.  For latency-sensitive applications, you can optionally call &#x60;/asset_report/create&#x60; with &#x60;options.add_ons&#x60; set to &#x60;[\&quot;fast_assets\&quot;]&#x60;. This will cause Plaid to create two versions of the Asset Report: one with only current and available balance and identity information, and then later on the complete Asset Report. You will receive separate webhooks for each version of the Asset Report.
    # @required @param asset_report_get_request [Plaid::AssetReportGetRequest?]
    # @return nil
    def asset_report_get(
      *,
      asset_report_get_request : Plaid::AssetReportGetRequest? = nil,
      &block : Crest::Response ->
    ) : Nil
      build_api_request_for_asset_report_get(asset_report_get_request: asset_report_get_request).execute(&block)
    end

    # @return Crest::Request
    def build_api_request_for_asset_report_get(
      *,
      asset_report_get_request : Plaid::AssetReportGetRequest? = nil
    ) : Crest::Request
      if debugging?
        Log.debug { "Calling API: PlaidApi.asset_report_get ..." }
      end

      if client_side_validation?
        raise ArgumentError.new("\"asset_report_get_request\" is required and cannot be null") if asset_report_get_request.nil?
        unless (_asset_report_get_request = asset_report_get_request).nil?
          _asset_report_get_request.validate if _asset_report_get_request.is_a?(OpenApi::Validatable)
        end
      end

      # resource path
      local_var_path = "/asset_report/get"

      # header parameters
      header_params : Hash(String, String) = Hash(String, String).new
      # HTTP header "Accept" (if needed)
      header_params["Accept"] = @api_client.select_header_accept(["application/json"])
      # HTTP header "Content-Type"
      header_params["Content-Type"] = @api_client.select_header_content_type(["application/json"])

      # cookie parameters
      cookie_params : Hash(String, String) = Hash(String, String).new

      # query parameters
      query_params : Hash(String, (String | Array(String) | JSON::Any)) = Hash(String, (String | Array(String) | JSON::Any)).new

      # form parameters
      form_params : Array(Tuple(String, Crest::ParamsValue)) | Nil = nil

      # http body (model)
      post_body : IO | String | Nil = @api_client.encode(body: asset_report_get_request, content_type: header_params["Content-Type"]?) if !asset_report_get_request.nil?

      # auth_names
      auth_names = ["clientId", "plaidVersion", "secret"]

      @api_client.build_api_request(
        http_method: :"POST",
        path: local_var_path,
        operation: "PlaidApi.asset_report_get",
        post_body: post_body,
        auth_names: auth_names,
        header_params: header_params,
        cookie_params: cookie_params,
        query_params: query_params,
        form_params: form_params
      )
    end

    # Retrieve a PDF Asset Report
    # The `/asset_report/pdf/get` endpoint retrieves the Asset Report in PDF format. Before calling `/asset_report/pdf/get`, you must first create the Asset Report using `/asset_report/create` (or filter an Asset Report using `/asset_report/filter`) and then wait for the [`PRODUCT_READY`](https://plaid.com/docs/api/products/assets/#product_ready) webhook to fire, indicating that the Report is ready to be retrieved.  The response to `/asset_report/pdf/get` is the PDF binary data. The `request_id`  is returned in the `Plaid-Request-ID` header.  [View a sample PDF Asset Report](https://plaid.com/documents/sample-asset-report.pdf).
    # @required @param asset_report_pdf_get_request [Plaid::AssetReportPDFGetRequest?]
    # @return [::File]
    def asset_report_pdf_get(
      *,
      asset_report_pdf_get_request : Plaid::AssetReportPDFGetRequest? = nil
    ) : ::File
      data, _status_code, _headers = asset_report_pdf_get_with_http_info(asset_report_pdf_get_request: asset_report_pdf_get_request)
      data
    end

    # Retrieve a PDF Asset Report
    # The &#x60;/asset_report/pdf/get&#x60; endpoint retrieves the Asset Report in PDF format. Before calling &#x60;/asset_report/pdf/get&#x60;, you must first create the Asset Report using &#x60;/asset_report/create&#x60; (or filter an Asset Report using &#x60;/asset_report/filter&#x60;) and then wait for the [&#x60;PRODUCT_READY&#x60;](https://plaid.com/docs/api/products/assets/#product_ready) webhook to fire, indicating that the Report is ready to be retrieved.  The response to &#x60;/asset_report/pdf/get&#x60; is the PDF binary data. The &#x60;request_id&#x60;  is returned in the &#x60;Plaid-Request-ID&#x60; header.  [View a sample PDF Asset Report](https://plaid.com/documents/sample-asset-report.pdf).
    # @required @param asset_report_pdf_get_request [Plaid::AssetReportPDFGetRequest?]
    # @return [Tuple(::File, Integer, Hash)] ::File, response status code and response headers
    def asset_report_pdf_get_with_http_info(
      *,
      asset_report_pdf_get_request : Plaid::AssetReportPDFGetRequest? = nil
    ) : Tuple(::File, Int32, Hash(String, Array(String) | String))
      request = build_api_request_for_asset_report_pdf_get(asset_report_pdf_get_request: asset_report_pdf_get_request)

      body, status_code, headers = @api_client.execute_api_request(request)

      if debugging?
        Log.debug { "API called: PlaidApi#asset_report_pdf_get\nBody: #{body.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}" }
      end

      Tuple.new(::File.from_json(body), status_code, headers)
    end

    # Retrieve a PDF Asset Report
    # The &#x60;/asset_report/pdf/get&#x60; endpoint retrieves the Asset Report in PDF format. Before calling &#x60;/asset_report/pdf/get&#x60;, you must first create the Asset Report using &#x60;/asset_report/create&#x60; (or filter an Asset Report using &#x60;/asset_report/filter&#x60;) and then wait for the [&#x60;PRODUCT_READY&#x60;](https://plaid.com/docs/api/products/assets/#product_ready) webhook to fire, indicating that the Report is ready to be retrieved.  The response to &#x60;/asset_report/pdf/get&#x60; is the PDF binary data. The &#x60;request_id&#x60;  is returned in the &#x60;Plaid-Request-ID&#x60; header.  [View a sample PDF Asset Report](https://plaid.com/documents/sample-asset-report.pdf).
    # @required @param asset_report_pdf_get_request [Plaid::AssetReportPDFGetRequest?]
    # @return nil
    def asset_report_pdf_get(
      *,
      asset_report_pdf_get_request : Plaid::AssetReportPDFGetRequest? = nil,
      &block : Crest::Response ->
    ) : Nil
      build_api_request_for_asset_report_pdf_get(asset_report_pdf_get_request: asset_report_pdf_get_request).execute(&block)
    end

    # @return Crest::Request
    def build_api_request_for_asset_report_pdf_get(
      *,
      asset_report_pdf_get_request : Plaid::AssetReportPDFGetRequest? = nil
    ) : Crest::Request
      if debugging?
        Log.debug { "Calling API: PlaidApi.asset_report_pdf_get ..." }
      end

      if client_side_validation?
        raise ArgumentError.new("\"asset_report_pdf_get_request\" is required and cannot be null") if asset_report_pdf_get_request.nil?
        unless (_asset_report_pdf_get_request = asset_report_pdf_get_request).nil?
          _asset_report_pdf_get_request.validate if _asset_report_pdf_get_request.is_a?(OpenApi::Validatable)
        end
      end

      # resource path
      local_var_path = "/asset_report/pdf/get"

      # header parameters
      header_params : Hash(String, String) = Hash(String, String).new
      # HTTP header "Accept" (if needed)
      header_params["Accept"] = @api_client.select_header_accept(["application/pdf"])
      # HTTP header "Content-Type"
      header_params["Content-Type"] = @api_client.select_header_content_type(["application/json"])

      # cookie parameters
      cookie_params : Hash(String, String) = Hash(String, String).new

      # query parameters
      query_params : Hash(String, (String | Array(String) | JSON::Any)) = Hash(String, (String | Array(String) | JSON::Any)).new

      # form parameters
      form_params : Array(Tuple(String, Crest::ParamsValue)) | Nil = nil

      # http body (model)
      post_body : IO | String | Nil = @api_client.encode(body: asset_report_pdf_get_request, content_type: header_params["Content-Type"]?) if !asset_report_pdf_get_request.nil?

      # auth_names
      auth_names = ["clientId", "plaidVersion", "secret"]

      @api_client.build_api_request(
        http_method: :"POST",
        path: local_var_path,
        operation: "PlaidApi.asset_report_pdf_get",
        post_body: post_body,
        auth_names: auth_names,
        header_params: header_params,
        cookie_params: cookie_params,
        query_params: query_params,
        form_params: form_params
      )
    end

    # Refresh an Asset Report
    # An Asset Report is an immutable snapshot of a user's assets. In order to \"refresh\" an Asset Report you created previously, you can use the `/asset_report/refresh` endpoint to create a new Asset Report based on the old one, but with the most recent data available.  The new Asset Report will contain the same Items as the original Report, as well as the same filters applied by any call to `/asset_report/filter`. By default, the new Asset Report will also use the same parameters you submitted with your original `/asset_report/create` request, but the original `days_requested` value and the values of any parameters in the `options` object can be overridden with new values. To change these arguments, simply supply new values for them in your request to `/asset_report/refresh`. Submit an empty string (\"\") for any previously-populated fields you would like set as empty.
    # @required @param asset_report_refresh_request [Plaid::AssetReportRefreshRequest?]
    # @return [AssetReportRefreshResponse]
    def asset_report_refresh(
      *,
      asset_report_refresh_request : Plaid::AssetReportRefreshRequest? = nil
    ) : AssetReportRefreshResponse
      data, _status_code, _headers = asset_report_refresh_with_http_info(asset_report_refresh_request: asset_report_refresh_request)
      data
    end

    # Refresh an Asset Report
    # An Asset Report is an immutable snapshot of a user&#39;s assets. In order to \&quot;refresh\&quot; an Asset Report you created previously, you can use the &#x60;/asset_report/refresh&#x60; endpoint to create a new Asset Report based on the old one, but with the most recent data available.  The new Asset Report will contain the same Items as the original Report, as well as the same filters applied by any call to &#x60;/asset_report/filter&#x60;. By default, the new Asset Report will also use the same parameters you submitted with your original &#x60;/asset_report/create&#x60; request, but the original &#x60;days_requested&#x60; value and the values of any parameters in the &#x60;options&#x60; object can be overridden with new values. To change these arguments, simply supply new values for them in your request to &#x60;/asset_report/refresh&#x60;. Submit an empty string (\&quot;\&quot;) for any previously-populated fields you would like set as empty.
    # @required @param asset_report_refresh_request [Plaid::AssetReportRefreshRequest?]
    # @return [Tuple(AssetReportRefreshResponse, Integer, Hash)] AssetReportRefreshResponse, response status code and response headers
    def asset_report_refresh_with_http_info(
      *,
      asset_report_refresh_request : Plaid::AssetReportRefreshRequest? = nil
    ) : Tuple(AssetReportRefreshResponse, Int32, Hash(String, Array(String) | String))
      request = build_api_request_for_asset_report_refresh(asset_report_refresh_request: asset_report_refresh_request)

      body, status_code, headers = @api_client.execute_api_request(request)

      if debugging?
        Log.debug { "API called: PlaidApi#asset_report_refresh\nBody: #{body.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}" }
      end

      Tuple.new(AssetReportRefreshResponse.from_json(body), status_code, headers)
    end

    # Refresh an Asset Report
    # An Asset Report is an immutable snapshot of a user&#39;s assets. In order to \&quot;refresh\&quot; an Asset Report you created previously, you can use the &#x60;/asset_report/refresh&#x60; endpoint to create a new Asset Report based on the old one, but with the most recent data available.  The new Asset Report will contain the same Items as the original Report, as well as the same filters applied by any call to &#x60;/asset_report/filter&#x60;. By default, the new Asset Report will also use the same parameters you submitted with your original &#x60;/asset_report/create&#x60; request, but the original &#x60;days_requested&#x60; value and the values of any parameters in the &#x60;options&#x60; object can be overridden with new values. To change these arguments, simply supply new values for them in your request to &#x60;/asset_report/refresh&#x60;. Submit an empty string (\&quot;\&quot;) for any previously-populated fields you would like set as empty.
    # @required @param asset_report_refresh_request [Plaid::AssetReportRefreshRequest?]
    # @return nil
    def asset_report_refresh(
      *,
      asset_report_refresh_request : Plaid::AssetReportRefreshRequest? = nil,
      &block : Crest::Response ->
    ) : Nil
      build_api_request_for_asset_report_refresh(asset_report_refresh_request: asset_report_refresh_request).execute(&block)
    end

    # @return Crest::Request
    def build_api_request_for_asset_report_refresh(
      *,
      asset_report_refresh_request : Plaid::AssetReportRefreshRequest? = nil
    ) : Crest::Request
      if debugging?
        Log.debug { "Calling API: PlaidApi.asset_report_refresh ..." }
      end

      if client_side_validation?
        raise ArgumentError.new("\"asset_report_refresh_request\" is required and cannot be null") if asset_report_refresh_request.nil?
        unless (_asset_report_refresh_request = asset_report_refresh_request).nil?
          _asset_report_refresh_request.validate if _asset_report_refresh_request.is_a?(OpenApi::Validatable)
        end
      end

      # resource path
      local_var_path = "/asset_report/refresh"

      # header parameters
      header_params : Hash(String, String) = Hash(String, String).new
      # HTTP header "Accept" (if needed)
      header_params["Accept"] = @api_client.select_header_accept(["application/json"])
      # HTTP header "Content-Type"
      header_params["Content-Type"] = @api_client.select_header_content_type(["application/json"])

      # cookie parameters
      cookie_params : Hash(String, String) = Hash(String, String).new

      # query parameters
      query_params : Hash(String, (String | Array(String) | JSON::Any)) = Hash(String, (String | Array(String) | JSON::Any)).new

      # form parameters
      form_params : Array(Tuple(String, Crest::ParamsValue)) | Nil = nil

      # http body (model)
      post_body : IO | String | Nil = @api_client.encode(body: asset_report_refresh_request, content_type: header_params["Content-Type"]?) if !asset_report_refresh_request.nil?

      # auth_names
      auth_names = ["clientId", "plaidVersion", "secret"]

      @api_client.build_api_request(
        http_method: :"POST",
        path: local_var_path,
        operation: "PlaidApi.asset_report_refresh",
        post_body: post_body,
        auth_names: auth_names,
        header_params: header_params,
        cookie_params: cookie_params,
        query_params: query_params,
        form_params: form_params
      )
    end

    # Delete an Asset Report
    # The `/item/remove` endpoint allows you to invalidate an `access_token`, meaning you will not be able to create new Asset Reports with it. Removing an Item does not affect any Asset Reports or Audit Copies you have already created, which will remain accessible until you remove them specifically.  The `/asset_report/remove` endpoint allows you to remove an Asset Report. Removing an Asset Report invalidates its `asset_report_token`, meaning you will no longer be able to use it to access Report data or create new Audit Copies. Removing an Asset Report does not affect the underlying Items, but does invalidate any `audit_copy_tokens` associated with the Asset Report.
    # @required @param asset_report_remove_request [Plaid::AssetReportRemoveRequest?]
    # @return [AssetReportRemoveResponse]
    def asset_report_remove(
      *,
      asset_report_remove_request : Plaid::AssetReportRemoveRequest? = nil
    ) : AssetReportRemoveResponse
      data, _status_code, _headers = asset_report_remove_with_http_info(asset_report_remove_request: asset_report_remove_request)
      data
    end

    # Delete an Asset Report
    # The &#x60;/item/remove&#x60; endpoint allows you to invalidate an &#x60;access_token&#x60;, meaning you will not be able to create new Asset Reports with it. Removing an Item does not affect any Asset Reports or Audit Copies you have already created, which will remain accessible until you remove them specifically.  The &#x60;/asset_report/remove&#x60; endpoint allows you to remove an Asset Report. Removing an Asset Report invalidates its &#x60;asset_report_token&#x60;, meaning you will no longer be able to use it to access Report data or create new Audit Copies. Removing an Asset Report does not affect the underlying Items, but does invalidate any &#x60;audit_copy_tokens&#x60; associated with the Asset Report.
    # @required @param asset_report_remove_request [Plaid::AssetReportRemoveRequest?]
    # @return [Tuple(AssetReportRemoveResponse, Integer, Hash)] AssetReportRemoveResponse, response status code and response headers
    def asset_report_remove_with_http_info(
      *,
      asset_report_remove_request : Plaid::AssetReportRemoveRequest? = nil
    ) : Tuple(AssetReportRemoveResponse, Int32, Hash(String, Array(String) | String))
      request = build_api_request_for_asset_report_remove(asset_report_remove_request: asset_report_remove_request)

      body, status_code, headers = @api_client.execute_api_request(request)

      if debugging?
        Log.debug { "API called: PlaidApi#asset_report_remove\nBody: #{body.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}" }
      end

      Tuple.new(AssetReportRemoveResponse.from_json(body), status_code, headers)
    end

    # Delete an Asset Report
    # The &#x60;/item/remove&#x60; endpoint allows you to invalidate an &#x60;access_token&#x60;, meaning you will not be able to create new Asset Reports with it. Removing an Item does not affect any Asset Reports or Audit Copies you have already created, which will remain accessible until you remove them specifically.  The &#x60;/asset_report/remove&#x60; endpoint allows you to remove an Asset Report. Removing an Asset Report invalidates its &#x60;asset_report_token&#x60;, meaning you will no longer be able to use it to access Report data or create new Audit Copies. Removing an Asset Report does not affect the underlying Items, but does invalidate any &#x60;audit_copy_tokens&#x60; associated with the Asset Report.
    # @required @param asset_report_remove_request [Plaid::AssetReportRemoveRequest?]
    # @return nil
    def asset_report_remove(
      *,
      asset_report_remove_request : Plaid::AssetReportRemoveRequest? = nil,
      &block : Crest::Response ->
    ) : Nil
      build_api_request_for_asset_report_remove(asset_report_remove_request: asset_report_remove_request).execute(&block)
    end

    # @return Crest::Request
    def build_api_request_for_asset_report_remove(
      *,
      asset_report_remove_request : Plaid::AssetReportRemoveRequest? = nil
    ) : Crest::Request
      if debugging?
        Log.debug { "Calling API: PlaidApi.asset_report_remove ..." }
      end

      if client_side_validation?
        raise ArgumentError.new("\"asset_report_remove_request\" is required and cannot be null") if asset_report_remove_request.nil?
        unless (_asset_report_remove_request = asset_report_remove_request).nil?
          _asset_report_remove_request.validate if _asset_report_remove_request.is_a?(OpenApi::Validatable)
        end
      end

      # resource path
      local_var_path = "/asset_report/remove"

      # header parameters
      header_params : Hash(String, String) = Hash(String, String).new
      # HTTP header "Accept" (if needed)
      header_params["Accept"] = @api_client.select_header_accept(["application/json"])
      # HTTP header "Content-Type"
      header_params["Content-Type"] = @api_client.select_header_content_type(["application/json"])

      # cookie parameters
      cookie_params : Hash(String, String) = Hash(String, String).new

      # query parameters
      query_params : Hash(String, (String | Array(String) | JSON::Any)) = Hash(String, (String | Array(String) | JSON::Any)).new

      # form parameters
      form_params : Array(Tuple(String, Crest::ParamsValue)) | Nil = nil

      # http body (model)
      post_body : IO | String | Nil = @api_client.encode(body: asset_report_remove_request, content_type: header_params["Content-Type"]?) if !asset_report_remove_request.nil?

      # auth_names
      auth_names = ["clientId", "plaidVersion", "secret"]

      @api_client.build_api_request(
        http_method: :"POST",
        path: local_var_path,
        operation: "PlaidApi.asset_report_remove",
        post_body: post_body,
        auth_names: auth_names,
        header_params: header_params,
        cookie_params: cookie_params,
        query_params: query_params,
        form_params: form_params
      )
    end

    # Retrieve auth data
    # The `/auth/get` endpoint returns the bank account and bank identification numbers (such as routing numbers, for US accounts) associated with an Item's checking and savings accounts, along with high-level account data and balances when available.  Note: This request may take some time to complete if `auth` was not specified as an initial product when creating the Item. This is because Plaid must communicate directly with the institution to retrieve the data.  Versioning note: In API version 2017-03-08, the schema of the `numbers` object returned by this endpoint is substantially different. For details, see [Plaid API versioning](https://plaid.com/docs/api/versioning/#version-2018-05-22).
    # @required @param auth_get_request [Plaid::AuthGetRequest?]
    # @return [AuthGetResponse]
    def auth_get(
      *,
      auth_get_request : Plaid::AuthGetRequest? = nil
    ) : AuthGetResponse
      data, _status_code, _headers = auth_get_with_http_info(auth_get_request: auth_get_request)
      data
    end

    # Retrieve auth data
    # The &#x60;/auth/get&#x60; endpoint returns the bank account and bank identification numbers (such as routing numbers, for US accounts) associated with an Item&#39;s checking and savings accounts, along with high-level account data and balances when available.  Note: This request may take some time to complete if &#x60;auth&#x60; was not specified as an initial product when creating the Item. This is because Plaid must communicate directly with the institution to retrieve the data.  Versioning note: In API version 2017-03-08, the schema of the &#x60;numbers&#x60; object returned by this endpoint is substantially different. For details, see [Plaid API versioning](https://plaid.com/docs/api/versioning/#version-2018-05-22).
    # @required @param auth_get_request [Plaid::AuthGetRequest?]
    # @return [Tuple(AuthGetResponse, Integer, Hash)] AuthGetResponse, response status code and response headers
    def auth_get_with_http_info(
      *,
      auth_get_request : Plaid::AuthGetRequest? = nil
    ) : Tuple(AuthGetResponse, Int32, Hash(String, Array(String) | String))
      request = build_api_request_for_auth_get(auth_get_request: auth_get_request)

      body, status_code, headers = @api_client.execute_api_request(request)

      if debugging?
        Log.debug { "API called: PlaidApi#auth_get\nBody: #{body.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}" }
      end

      Tuple.new(AuthGetResponse.from_json(body), status_code, headers)
    end

    # Retrieve auth data
    # The &#x60;/auth/get&#x60; endpoint returns the bank account and bank identification numbers (such as routing numbers, for US accounts) associated with an Item&#39;s checking and savings accounts, along with high-level account data and balances when available.  Note: This request may take some time to complete if &#x60;auth&#x60; was not specified as an initial product when creating the Item. This is because Plaid must communicate directly with the institution to retrieve the data.  Versioning note: In API version 2017-03-08, the schema of the &#x60;numbers&#x60; object returned by this endpoint is substantially different. For details, see [Plaid API versioning](https://plaid.com/docs/api/versioning/#version-2018-05-22).
    # @required @param auth_get_request [Plaid::AuthGetRequest?]
    # @return nil
    def auth_get(
      *,
      auth_get_request : Plaid::AuthGetRequest? = nil,
      &block : Crest::Response ->
    ) : Nil
      build_api_request_for_auth_get(auth_get_request: auth_get_request).execute(&block)
    end

    # @return Crest::Request
    def build_api_request_for_auth_get(
      *,
      auth_get_request : Plaid::AuthGetRequest? = nil
    ) : Crest::Request
      if debugging?
        Log.debug { "Calling API: PlaidApi.auth_get ..." }
      end

      if client_side_validation?
        raise ArgumentError.new("\"auth_get_request\" is required and cannot be null") if auth_get_request.nil?
        unless (_auth_get_request = auth_get_request).nil?
          _auth_get_request.validate if _auth_get_request.is_a?(OpenApi::Validatable)
        end
      end

      # resource path
      local_var_path = "/auth/get"

      # header parameters
      header_params : Hash(String, String) = Hash(String, String).new
      # HTTP header "Accept" (if needed)
      header_params["Accept"] = @api_client.select_header_accept(["application/json"])
      # HTTP header "Content-Type"
      header_params["Content-Type"] = @api_client.select_header_content_type(["application/json"])

      # cookie parameters
      cookie_params : Hash(String, String) = Hash(String, String).new

      # query parameters
      query_params : Hash(String, (String | Array(String) | JSON::Any)) = Hash(String, (String | Array(String) | JSON::Any)).new

      # form parameters
      form_params : Array(Tuple(String, Crest::ParamsValue)) | Nil = nil

      # http body (model)
      post_body : IO | String | Nil = @api_client.encode(body: auth_get_request, content_type: header_params["Content-Type"]?) if !auth_get_request.nil?

      # auth_names
      auth_names = ["clientId", "plaidVersion", "secret"]

      @api_client.build_api_request(
        http_method: :"POST",
        path: local_var_path,
        operation: "PlaidApi.auth_get",
        post_body: post_body,
        auth_names: auth_names,
        header_params: header_params,
        cookie_params: cookie_params,
        query_params: query_params,
        form_params: form_params
      )
    end

    # Get balance of your Bank Transfer account
    # Use the `/bank_transfer/balance/get` endpoint to see the available balance in your bank transfer account. Debit transfers increase this balance once their status is posted. Credit transfers decrease this balance when they are created.  The transactable balance shows the amount in your account that you are able to use for transfers, and is essentially your available balance minus your minimum balance.  Note that this endpoint can only be used with FBO accounts, when using Bank Transfers in the Full Service configuration. It cannot be used on your own account when using Bank Transfers in the BTS Platform configuration.
    # @required @param bank_transfer_balance_get_request [Plaid::BankTransferBalanceGetRequest?]
    # @return [BankTransferBalanceGetResponse]
    def bank_transfer_balance_get(
      *,
      bank_transfer_balance_get_request : Plaid::BankTransferBalanceGetRequest? = nil
    ) : BankTransferBalanceGetResponse
      data, _status_code, _headers = bank_transfer_balance_get_with_http_info(bank_transfer_balance_get_request: bank_transfer_balance_get_request)
      data
    end

    # Get balance of your Bank Transfer account
    # Use the &#x60;/bank_transfer/balance/get&#x60; endpoint to see the available balance in your bank transfer account. Debit transfers increase this balance once their status is posted. Credit transfers decrease this balance when they are created.  The transactable balance shows the amount in your account that you are able to use for transfers, and is essentially your available balance minus your minimum balance.  Note that this endpoint can only be used with FBO accounts, when using Bank Transfers in the Full Service configuration. It cannot be used on your own account when using Bank Transfers in the BTS Platform configuration.
    # @required @param bank_transfer_balance_get_request [Plaid::BankTransferBalanceGetRequest?]
    # @return [Tuple(BankTransferBalanceGetResponse, Integer, Hash)] BankTransferBalanceGetResponse, response status code and response headers
    def bank_transfer_balance_get_with_http_info(
      *,
      bank_transfer_balance_get_request : Plaid::BankTransferBalanceGetRequest? = nil
    ) : Tuple(BankTransferBalanceGetResponse, Int32, Hash(String, Array(String) | String))
      request = build_api_request_for_bank_transfer_balance_get(bank_transfer_balance_get_request: bank_transfer_balance_get_request)

      body, status_code, headers = @api_client.execute_api_request(request)

      if debugging?
        Log.debug { "API called: PlaidApi#bank_transfer_balance_get\nBody: #{body.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}" }
      end

      Tuple.new(BankTransferBalanceGetResponse.from_json(body), status_code, headers)
    end

    # Get balance of your Bank Transfer account
    # Use the &#x60;/bank_transfer/balance/get&#x60; endpoint to see the available balance in your bank transfer account. Debit transfers increase this balance once their status is posted. Credit transfers decrease this balance when they are created.  The transactable balance shows the amount in your account that you are able to use for transfers, and is essentially your available balance minus your minimum balance.  Note that this endpoint can only be used with FBO accounts, when using Bank Transfers in the Full Service configuration. It cannot be used on your own account when using Bank Transfers in the BTS Platform configuration.
    # @required @param bank_transfer_balance_get_request [Plaid::BankTransferBalanceGetRequest?]
    # @return nil
    def bank_transfer_balance_get(
      *,
      bank_transfer_balance_get_request : Plaid::BankTransferBalanceGetRequest? = nil,
      &block : Crest::Response ->
    ) : Nil
      build_api_request_for_bank_transfer_balance_get(bank_transfer_balance_get_request: bank_transfer_balance_get_request).execute(&block)
    end

    # @return Crest::Request
    def build_api_request_for_bank_transfer_balance_get(
      *,
      bank_transfer_balance_get_request : Plaid::BankTransferBalanceGetRequest? = nil
    ) : Crest::Request
      if debugging?
        Log.debug { "Calling API: PlaidApi.bank_transfer_balance_get ..." }
      end

      if client_side_validation?
        raise ArgumentError.new("\"bank_transfer_balance_get_request\" is required and cannot be null") if bank_transfer_balance_get_request.nil?
        unless (_bank_transfer_balance_get_request = bank_transfer_balance_get_request).nil?
          _bank_transfer_balance_get_request.validate if _bank_transfer_balance_get_request.is_a?(OpenApi::Validatable)
        end
      end

      # resource path
      local_var_path = "/bank_transfer/balance/get"

      # header parameters
      header_params : Hash(String, String) = Hash(String, String).new
      # HTTP header "Accept" (if needed)
      header_params["Accept"] = @api_client.select_header_accept(["application/json"])
      # HTTP header "Content-Type"
      header_params["Content-Type"] = @api_client.select_header_content_type(["application/json"])

      # cookie parameters
      cookie_params : Hash(String, String) = Hash(String, String).new

      # query parameters
      query_params : Hash(String, (String | Array(String) | JSON::Any)) = Hash(String, (String | Array(String) | JSON::Any)).new

      # form parameters
      form_params : Array(Tuple(String, Crest::ParamsValue)) | Nil = nil

      # http body (model)
      post_body : IO | String | Nil = @api_client.encode(body: bank_transfer_balance_get_request, content_type: header_params["Content-Type"]?) if !bank_transfer_balance_get_request.nil?

      # auth_names
      auth_names = ["clientId", "plaidVersion", "secret"]

      @api_client.build_api_request(
        http_method: :"POST",
        path: local_var_path,
        operation: "PlaidApi.bank_transfer_balance_get",
        post_body: post_body,
        auth_names: auth_names,
        header_params: header_params,
        cookie_params: cookie_params,
        query_params: query_params,
        form_params: form_params
      )
    end

    # Cancel a bank transfer
    # Use the `/bank_transfer/cancel` endpoint to cancel a bank transfer.  A transfer is eligible for cancelation if the `cancellable` property returned by `/bank_transfer/get` is `true`.
    # @required @param bank_transfer_cancel_request [Plaid::BankTransferCancelRequest?]
    # @return [BankTransferCancelResponse]
    def bank_transfer_cancel(
      *,
      bank_transfer_cancel_request : Plaid::BankTransferCancelRequest? = nil
    ) : BankTransferCancelResponse
      data, _status_code, _headers = bank_transfer_cancel_with_http_info(bank_transfer_cancel_request: bank_transfer_cancel_request)
      data
    end

    # Cancel a bank transfer
    # Use the &#x60;/bank_transfer/cancel&#x60; endpoint to cancel a bank transfer.  A transfer is eligible for cancelation if the &#x60;cancellable&#x60; property returned by &#x60;/bank_transfer/get&#x60; is &#x60;true&#x60;.
    # @required @param bank_transfer_cancel_request [Plaid::BankTransferCancelRequest?]
    # @return [Tuple(BankTransferCancelResponse, Integer, Hash)] BankTransferCancelResponse, response status code and response headers
    def bank_transfer_cancel_with_http_info(
      *,
      bank_transfer_cancel_request : Plaid::BankTransferCancelRequest? = nil
    ) : Tuple(BankTransferCancelResponse, Int32, Hash(String, Array(String) | String))
      request = build_api_request_for_bank_transfer_cancel(bank_transfer_cancel_request: bank_transfer_cancel_request)

      body, status_code, headers = @api_client.execute_api_request(request)

      if debugging?
        Log.debug { "API called: PlaidApi#bank_transfer_cancel\nBody: #{body.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}" }
      end

      Tuple.new(BankTransferCancelResponse.from_json(body), status_code, headers)
    end

    # Cancel a bank transfer
    # Use the &#x60;/bank_transfer/cancel&#x60; endpoint to cancel a bank transfer.  A transfer is eligible for cancelation if the &#x60;cancellable&#x60; property returned by &#x60;/bank_transfer/get&#x60; is &#x60;true&#x60;.
    # @required @param bank_transfer_cancel_request [Plaid::BankTransferCancelRequest?]
    # @return nil
    def bank_transfer_cancel(
      *,
      bank_transfer_cancel_request : Plaid::BankTransferCancelRequest? = nil,
      &block : Crest::Response ->
    ) : Nil
      build_api_request_for_bank_transfer_cancel(bank_transfer_cancel_request: bank_transfer_cancel_request).execute(&block)
    end

    # @return Crest::Request
    def build_api_request_for_bank_transfer_cancel(
      *,
      bank_transfer_cancel_request : Plaid::BankTransferCancelRequest? = nil
    ) : Crest::Request
      if debugging?
        Log.debug { "Calling API: PlaidApi.bank_transfer_cancel ..." }
      end

      if client_side_validation?
        raise ArgumentError.new("\"bank_transfer_cancel_request\" is required and cannot be null") if bank_transfer_cancel_request.nil?
        unless (_bank_transfer_cancel_request = bank_transfer_cancel_request).nil?
          _bank_transfer_cancel_request.validate if _bank_transfer_cancel_request.is_a?(OpenApi::Validatable)
        end
      end

      # resource path
      local_var_path = "/bank_transfer/cancel"

      # header parameters
      header_params : Hash(String, String) = Hash(String, String).new
      # HTTP header "Accept" (if needed)
      header_params["Accept"] = @api_client.select_header_accept(["application/json"])
      # HTTP header "Content-Type"
      header_params["Content-Type"] = @api_client.select_header_content_type(["application/json"])

      # cookie parameters
      cookie_params : Hash(String, String) = Hash(String, String).new

      # query parameters
      query_params : Hash(String, (String | Array(String) | JSON::Any)) = Hash(String, (String | Array(String) | JSON::Any)).new

      # form parameters
      form_params : Array(Tuple(String, Crest::ParamsValue)) | Nil = nil

      # http body (model)
      post_body : IO | String | Nil = @api_client.encode(body: bank_transfer_cancel_request, content_type: header_params["Content-Type"]?) if !bank_transfer_cancel_request.nil?

      # auth_names
      auth_names = ["clientId", "plaidVersion", "secret"]

      @api_client.build_api_request(
        http_method: :"POST",
        path: local_var_path,
        operation: "PlaidApi.bank_transfer_cancel",
        post_body: post_body,
        auth_names: auth_names,
        header_params: header_params,
        cookie_params: cookie_params,
        query_params: query_params,
        form_params: form_params
      )
    end

    # Create a bank transfer
    # Use the `/bank_transfer/create` endpoint to initiate a new bank transfer.
    # @required @param bank_transfer_create_request [Plaid::BankTransferCreateRequest?]
    # @return [BankTransferCreateResponse]
    def bank_transfer_create(
      *,
      bank_transfer_create_request : Plaid::BankTransferCreateRequest? = nil
    ) : BankTransferCreateResponse
      data, _status_code, _headers = bank_transfer_create_with_http_info(bank_transfer_create_request: bank_transfer_create_request)
      data
    end

    # Create a bank transfer
    # Use the &#x60;/bank_transfer/create&#x60; endpoint to initiate a new bank transfer.
    # @required @param bank_transfer_create_request [Plaid::BankTransferCreateRequest?]
    # @return [Tuple(BankTransferCreateResponse, Integer, Hash)] BankTransferCreateResponse, response status code and response headers
    def bank_transfer_create_with_http_info(
      *,
      bank_transfer_create_request : Plaid::BankTransferCreateRequest? = nil
    ) : Tuple(BankTransferCreateResponse, Int32, Hash(String, Array(String) | String))
      request = build_api_request_for_bank_transfer_create(bank_transfer_create_request: bank_transfer_create_request)

      body, status_code, headers = @api_client.execute_api_request(request)

      if debugging?
        Log.debug { "API called: PlaidApi#bank_transfer_create\nBody: #{body.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}" }
      end

      Tuple.new(BankTransferCreateResponse.from_json(body), status_code, headers)
    end

    # Create a bank transfer
    # Use the &#x60;/bank_transfer/create&#x60; endpoint to initiate a new bank transfer.
    # @required @param bank_transfer_create_request [Plaid::BankTransferCreateRequest?]
    # @return nil
    def bank_transfer_create(
      *,
      bank_transfer_create_request : Plaid::BankTransferCreateRequest? = nil,
      &block : Crest::Response ->
    ) : Nil
      build_api_request_for_bank_transfer_create(bank_transfer_create_request: bank_transfer_create_request).execute(&block)
    end

    # @return Crest::Request
    def build_api_request_for_bank_transfer_create(
      *,
      bank_transfer_create_request : Plaid::BankTransferCreateRequest? = nil
    ) : Crest::Request
      if debugging?
        Log.debug { "Calling API: PlaidApi.bank_transfer_create ..." }
      end

      if client_side_validation?
        raise ArgumentError.new("\"bank_transfer_create_request\" is required and cannot be null") if bank_transfer_create_request.nil?
        unless (_bank_transfer_create_request = bank_transfer_create_request).nil?
          _bank_transfer_create_request.validate if _bank_transfer_create_request.is_a?(OpenApi::Validatable)
        end
      end

      # resource path
      local_var_path = "/bank_transfer/create"

      # header parameters
      header_params : Hash(String, String) = Hash(String, String).new
      # HTTP header "Accept" (if needed)
      header_params["Accept"] = @api_client.select_header_accept(["application/json"])
      # HTTP header "Content-Type"
      header_params["Content-Type"] = @api_client.select_header_content_type(["application/json"])

      # cookie parameters
      cookie_params : Hash(String, String) = Hash(String, String).new

      # query parameters
      query_params : Hash(String, (String | Array(String) | JSON::Any)) = Hash(String, (String | Array(String) | JSON::Any)).new

      # form parameters
      form_params : Array(Tuple(String, Crest::ParamsValue)) | Nil = nil

      # http body (model)
      post_body : IO | String | Nil = @api_client.encode(body: bank_transfer_create_request, content_type: header_params["Content-Type"]?) if !bank_transfer_create_request.nil?

      # auth_names
      auth_names = ["clientId", "plaidVersion", "secret"]

      @api_client.build_api_request(
        http_method: :"POST",
        path: local_var_path,
        operation: "PlaidApi.bank_transfer_create",
        post_body: post_body,
        auth_names: auth_names,
        header_params: header_params,
        cookie_params: cookie_params,
        query_params: query_params,
        form_params: form_params
      )
    end

    # List bank transfer events
    # Use the `/bank_transfer/event/list` endpoint to get a list of Plaid-initiated ACH or bank transfer events based on specified filter criteria. When using Auth with micro-deposit verification enabled, this endpoint can be used to fetch status updates on ACH micro-deposits. For more details, see [micro-deposit events](https://plaid.com/docs/auth/coverage/microdeposit-events/).
    # @required @param bank_transfer_event_list_request [Plaid::BankTransferEventListRequest?]
    # @return [BankTransferEventListResponse]
    def bank_transfer_event_list(
      *,
      bank_transfer_event_list_request : Plaid::BankTransferEventListRequest? = nil
    ) : BankTransferEventListResponse
      data, _status_code, _headers = bank_transfer_event_list_with_http_info(bank_transfer_event_list_request: bank_transfer_event_list_request)
      data
    end

    # List bank transfer events
    # Use the &#x60;/bank_transfer/event/list&#x60; endpoint to get a list of Plaid-initiated ACH or bank transfer events based on specified filter criteria. When using Auth with micro-deposit verification enabled, this endpoint can be used to fetch status updates on ACH micro-deposits. For more details, see [micro-deposit events](https://plaid.com/docs/auth/coverage/microdeposit-events/).
    # @required @param bank_transfer_event_list_request [Plaid::BankTransferEventListRequest?]
    # @return [Tuple(BankTransferEventListResponse, Integer, Hash)] BankTransferEventListResponse, response status code and response headers
    def bank_transfer_event_list_with_http_info(
      *,
      bank_transfer_event_list_request : Plaid::BankTransferEventListRequest? = nil
    ) : Tuple(BankTransferEventListResponse, Int32, Hash(String, Array(String) | String))
      request = build_api_request_for_bank_transfer_event_list(bank_transfer_event_list_request: bank_transfer_event_list_request)

      body, status_code, headers = @api_client.execute_api_request(request)

      if debugging?
        Log.debug { "API called: PlaidApi#bank_transfer_event_list\nBody: #{body.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}" }
      end

      Tuple.new(BankTransferEventListResponse.from_json(body), status_code, headers)
    end

    # List bank transfer events
    # Use the &#x60;/bank_transfer/event/list&#x60; endpoint to get a list of Plaid-initiated ACH or bank transfer events based on specified filter criteria. When using Auth with micro-deposit verification enabled, this endpoint can be used to fetch status updates on ACH micro-deposits. For more details, see [micro-deposit events](https://plaid.com/docs/auth/coverage/microdeposit-events/).
    # @required @param bank_transfer_event_list_request [Plaid::BankTransferEventListRequest?]
    # @return nil
    def bank_transfer_event_list(
      *,
      bank_transfer_event_list_request : Plaid::BankTransferEventListRequest? = nil,
      &block : Crest::Response ->
    ) : Nil
      build_api_request_for_bank_transfer_event_list(bank_transfer_event_list_request: bank_transfer_event_list_request).execute(&block)
    end

    # @return Crest::Request
    def build_api_request_for_bank_transfer_event_list(
      *,
      bank_transfer_event_list_request : Plaid::BankTransferEventListRequest? = nil
    ) : Crest::Request
      if debugging?
        Log.debug { "Calling API: PlaidApi.bank_transfer_event_list ..." }
      end

      if client_side_validation?
        raise ArgumentError.new("\"bank_transfer_event_list_request\" is required and cannot be null") if bank_transfer_event_list_request.nil?
        unless (_bank_transfer_event_list_request = bank_transfer_event_list_request).nil?
          _bank_transfer_event_list_request.validate if _bank_transfer_event_list_request.is_a?(OpenApi::Validatable)
        end
      end

      # resource path
      local_var_path = "/bank_transfer/event/list"

      # header parameters
      header_params : Hash(String, String) = Hash(String, String).new
      # HTTP header "Accept" (if needed)
      header_params["Accept"] = @api_client.select_header_accept(["application/json"])
      # HTTP header "Content-Type"
      header_params["Content-Type"] = @api_client.select_header_content_type(["application/json"])

      # cookie parameters
      cookie_params : Hash(String, String) = Hash(String, String).new

      # query parameters
      query_params : Hash(String, (String | Array(String) | JSON::Any)) = Hash(String, (String | Array(String) | JSON::Any)).new

      # form parameters
      form_params : Array(Tuple(String, Crest::ParamsValue)) | Nil = nil

      # http body (model)
      post_body : IO | String | Nil = @api_client.encode(body: bank_transfer_event_list_request, content_type: header_params["Content-Type"]?) if !bank_transfer_event_list_request.nil?

      # auth_names
      auth_names = ["clientId", "plaidVersion", "secret"]

      @api_client.build_api_request(
        http_method: :"POST",
        path: local_var_path,
        operation: "PlaidApi.bank_transfer_event_list",
        post_body: post_body,
        auth_names: auth_names,
        header_params: header_params,
        cookie_params: cookie_params,
        query_params: query_params,
        form_params: form_params
      )
    end

    # Sync bank transfer events
    # `/bank_transfer/event/sync` allows you to request up to the next 25 Plaid-initiated bank transfer events that happened after a specific `event_id`. When using Auth with micro-deposit verification enabled, this endpoint can be used to fetch status updates on ACH micro-deposits. For more details, see [micro-deposit events](https://www.plaid.com/docs/auth/coverage/microdeposit-events/).
    # @required @param bank_transfer_event_sync_request [Plaid::BankTransferEventSyncRequest?]
    # @return [BankTransferEventSyncResponse]
    def bank_transfer_event_sync(
      *,
      bank_transfer_event_sync_request : Plaid::BankTransferEventSyncRequest? = nil
    ) : BankTransferEventSyncResponse
      data, _status_code, _headers = bank_transfer_event_sync_with_http_info(bank_transfer_event_sync_request: bank_transfer_event_sync_request)
      data
    end

    # Sync bank transfer events
    # &#x60;/bank_transfer/event/sync&#x60; allows you to request up to the next 25 Plaid-initiated bank transfer events that happened after a specific &#x60;event_id&#x60;. When using Auth with micro-deposit verification enabled, this endpoint can be used to fetch status updates on ACH micro-deposits. For more details, see [micro-deposit events](https://www.plaid.com/docs/auth/coverage/microdeposit-events/).
    # @required @param bank_transfer_event_sync_request [Plaid::BankTransferEventSyncRequest?]
    # @return [Tuple(BankTransferEventSyncResponse, Integer, Hash)] BankTransferEventSyncResponse, response status code and response headers
    def bank_transfer_event_sync_with_http_info(
      *,
      bank_transfer_event_sync_request : Plaid::BankTransferEventSyncRequest? = nil
    ) : Tuple(BankTransferEventSyncResponse, Int32, Hash(String, Array(String) | String))
      request = build_api_request_for_bank_transfer_event_sync(bank_transfer_event_sync_request: bank_transfer_event_sync_request)

      body, status_code, headers = @api_client.execute_api_request(request)

      if debugging?
        Log.debug { "API called: PlaidApi#bank_transfer_event_sync\nBody: #{body.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}" }
      end

      Tuple.new(BankTransferEventSyncResponse.from_json(body), status_code, headers)
    end

    # Sync bank transfer events
    # &#x60;/bank_transfer/event/sync&#x60; allows you to request up to the next 25 Plaid-initiated bank transfer events that happened after a specific &#x60;event_id&#x60;. When using Auth with micro-deposit verification enabled, this endpoint can be used to fetch status updates on ACH micro-deposits. For more details, see [micro-deposit events](https://www.plaid.com/docs/auth/coverage/microdeposit-events/).
    # @required @param bank_transfer_event_sync_request [Plaid::BankTransferEventSyncRequest?]
    # @return nil
    def bank_transfer_event_sync(
      *,
      bank_transfer_event_sync_request : Plaid::BankTransferEventSyncRequest? = nil,
      &block : Crest::Response ->
    ) : Nil
      build_api_request_for_bank_transfer_event_sync(bank_transfer_event_sync_request: bank_transfer_event_sync_request).execute(&block)
    end

    # @return Crest::Request
    def build_api_request_for_bank_transfer_event_sync(
      *,
      bank_transfer_event_sync_request : Plaid::BankTransferEventSyncRequest? = nil
    ) : Crest::Request
      if debugging?
        Log.debug { "Calling API: PlaidApi.bank_transfer_event_sync ..." }
      end

      if client_side_validation?
        raise ArgumentError.new("\"bank_transfer_event_sync_request\" is required and cannot be null") if bank_transfer_event_sync_request.nil?
        unless (_bank_transfer_event_sync_request = bank_transfer_event_sync_request).nil?
          _bank_transfer_event_sync_request.validate if _bank_transfer_event_sync_request.is_a?(OpenApi::Validatable)
        end
      end

      # resource path
      local_var_path = "/bank_transfer/event/sync"

      # header parameters
      header_params : Hash(String, String) = Hash(String, String).new
      # HTTP header "Accept" (if needed)
      header_params["Accept"] = @api_client.select_header_accept(["application/json"])
      # HTTP header "Content-Type"
      header_params["Content-Type"] = @api_client.select_header_content_type(["application/json"])

      # cookie parameters
      cookie_params : Hash(String, String) = Hash(String, String).new

      # query parameters
      query_params : Hash(String, (String | Array(String) | JSON::Any)) = Hash(String, (String | Array(String) | JSON::Any)).new

      # form parameters
      form_params : Array(Tuple(String, Crest::ParamsValue)) | Nil = nil

      # http body (model)
      post_body : IO | String | Nil = @api_client.encode(body: bank_transfer_event_sync_request, content_type: header_params["Content-Type"]?) if !bank_transfer_event_sync_request.nil?

      # auth_names
      auth_names = ["clientId", "plaidVersion", "secret"]

      @api_client.build_api_request(
        http_method: :"POST",
        path: local_var_path,
        operation: "PlaidApi.bank_transfer_event_sync",
        post_body: post_body,
        auth_names: auth_names,
        header_params: header_params,
        cookie_params: cookie_params,
        query_params: query_params,
        form_params: form_params
      )
    end

    # Retrieve a bank transfer
    # The `/bank_transfer/get` fetches information about the bank transfer corresponding to the given `bank_transfer_id`.
    # @required @param bank_transfer_get_request [Plaid::BankTransferGetRequest?]
    # @return [BankTransferGetResponse]
    def bank_transfer_get(
      *,
      bank_transfer_get_request : Plaid::BankTransferGetRequest? = nil
    ) : BankTransferGetResponse
      data, _status_code, _headers = bank_transfer_get_with_http_info(bank_transfer_get_request: bank_transfer_get_request)
      data
    end

    # Retrieve a bank transfer
    # The &#x60;/bank_transfer/get&#x60; fetches information about the bank transfer corresponding to the given &#x60;bank_transfer_id&#x60;.
    # @required @param bank_transfer_get_request [Plaid::BankTransferGetRequest?]
    # @return [Tuple(BankTransferGetResponse, Integer, Hash)] BankTransferGetResponse, response status code and response headers
    def bank_transfer_get_with_http_info(
      *,
      bank_transfer_get_request : Plaid::BankTransferGetRequest? = nil
    ) : Tuple(BankTransferGetResponse, Int32, Hash(String, Array(String) | String))
      request = build_api_request_for_bank_transfer_get(bank_transfer_get_request: bank_transfer_get_request)

      body, status_code, headers = @api_client.execute_api_request(request)

      if debugging?
        Log.debug { "API called: PlaidApi#bank_transfer_get\nBody: #{body.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}" }
      end

      Tuple.new(BankTransferGetResponse.from_json(body), status_code, headers)
    end

    # Retrieve a bank transfer
    # The &#x60;/bank_transfer/get&#x60; fetches information about the bank transfer corresponding to the given &#x60;bank_transfer_id&#x60;.
    # @required @param bank_transfer_get_request [Plaid::BankTransferGetRequest?]
    # @return nil
    def bank_transfer_get(
      *,
      bank_transfer_get_request : Plaid::BankTransferGetRequest? = nil,
      &block : Crest::Response ->
    ) : Nil
      build_api_request_for_bank_transfer_get(bank_transfer_get_request: bank_transfer_get_request).execute(&block)
    end

    # @return Crest::Request
    def build_api_request_for_bank_transfer_get(
      *,
      bank_transfer_get_request : Plaid::BankTransferGetRequest? = nil
    ) : Crest::Request
      if debugging?
        Log.debug { "Calling API: PlaidApi.bank_transfer_get ..." }
      end

      if client_side_validation?
        raise ArgumentError.new("\"bank_transfer_get_request\" is required and cannot be null") if bank_transfer_get_request.nil?
        unless (_bank_transfer_get_request = bank_transfer_get_request).nil?
          _bank_transfer_get_request.validate if _bank_transfer_get_request.is_a?(OpenApi::Validatable)
        end
      end

      # resource path
      local_var_path = "/bank_transfer/get"

      # header parameters
      header_params : Hash(String, String) = Hash(String, String).new
      # HTTP header "Accept" (if needed)
      header_params["Accept"] = @api_client.select_header_accept(["application/json"])
      # HTTP header "Content-Type"
      header_params["Content-Type"] = @api_client.select_header_content_type(["application/json"])

      # cookie parameters
      cookie_params : Hash(String, String) = Hash(String, String).new

      # query parameters
      query_params : Hash(String, (String | Array(String) | JSON::Any)) = Hash(String, (String | Array(String) | JSON::Any)).new

      # form parameters
      form_params : Array(Tuple(String, Crest::ParamsValue)) | Nil = nil

      # http body (model)
      post_body : IO | String | Nil = @api_client.encode(body: bank_transfer_get_request, content_type: header_params["Content-Type"]?) if !bank_transfer_get_request.nil?

      # auth_names
      auth_names = ["clientId", "plaidVersion", "secret"]

      @api_client.build_api_request(
        http_method: :"POST",
        path: local_var_path,
        operation: "PlaidApi.bank_transfer_get",
        post_body: post_body,
        auth_names: auth_names,
        header_params: header_params,
        cookie_params: cookie_params,
        query_params: query_params,
        form_params: form_params
      )
    end

    # List bank transfers
    # Use the `/bank_transfer/list` endpoint to see a list of all your bank transfers and their statuses. Results are paginated; use the `count` and `offset` query parameters to retrieve the desired bank transfers.
    # @required @param bank_transfer_list_request [Plaid::BankTransferListRequest?]
    # @return [BankTransferListResponse]
    def bank_transfer_list(
      *,
      bank_transfer_list_request : Plaid::BankTransferListRequest? = nil
    ) : BankTransferListResponse
      data, _status_code, _headers = bank_transfer_list_with_http_info(bank_transfer_list_request: bank_transfer_list_request)
      data
    end

    # List bank transfers
    # Use the &#x60;/bank_transfer/list&#x60; endpoint to see a list of all your bank transfers and their statuses. Results are paginated; use the &#x60;count&#x60; and &#x60;offset&#x60; query parameters to retrieve the desired bank transfers.
    # @required @param bank_transfer_list_request [Plaid::BankTransferListRequest?]
    # @return [Tuple(BankTransferListResponse, Integer, Hash)] BankTransferListResponse, response status code and response headers
    def bank_transfer_list_with_http_info(
      *,
      bank_transfer_list_request : Plaid::BankTransferListRequest? = nil
    ) : Tuple(BankTransferListResponse, Int32, Hash(String, Array(String) | String))
      request = build_api_request_for_bank_transfer_list(bank_transfer_list_request: bank_transfer_list_request)

      body, status_code, headers = @api_client.execute_api_request(request)

      if debugging?
        Log.debug { "API called: PlaidApi#bank_transfer_list\nBody: #{body.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}" }
      end

      Tuple.new(BankTransferListResponse.from_json(body), status_code, headers)
    end

    # List bank transfers
    # Use the &#x60;/bank_transfer/list&#x60; endpoint to see a list of all your bank transfers and their statuses. Results are paginated; use the &#x60;count&#x60; and &#x60;offset&#x60; query parameters to retrieve the desired bank transfers.
    # @required @param bank_transfer_list_request [Plaid::BankTransferListRequest?]
    # @return nil
    def bank_transfer_list(
      *,
      bank_transfer_list_request : Plaid::BankTransferListRequest? = nil,
      &block : Crest::Response ->
    ) : Nil
      build_api_request_for_bank_transfer_list(bank_transfer_list_request: bank_transfer_list_request).execute(&block)
    end

    # @return Crest::Request
    def build_api_request_for_bank_transfer_list(
      *,
      bank_transfer_list_request : Plaid::BankTransferListRequest? = nil
    ) : Crest::Request
      if debugging?
        Log.debug { "Calling API: PlaidApi.bank_transfer_list ..." }
      end

      if client_side_validation?
        raise ArgumentError.new("\"bank_transfer_list_request\" is required and cannot be null") if bank_transfer_list_request.nil?
        unless (_bank_transfer_list_request = bank_transfer_list_request).nil?
          _bank_transfer_list_request.validate if _bank_transfer_list_request.is_a?(OpenApi::Validatable)
        end
      end

      # resource path
      local_var_path = "/bank_transfer/list"

      # header parameters
      header_params : Hash(String, String) = Hash(String, String).new
      # HTTP header "Accept" (if needed)
      header_params["Accept"] = @api_client.select_header_accept(["application/json"])
      # HTTP header "Content-Type"
      header_params["Content-Type"] = @api_client.select_header_content_type(["application/json"])

      # cookie parameters
      cookie_params : Hash(String, String) = Hash(String, String).new

      # query parameters
      query_params : Hash(String, (String | Array(String) | JSON::Any)) = Hash(String, (String | Array(String) | JSON::Any)).new

      # form parameters
      form_params : Array(Tuple(String, Crest::ParamsValue)) | Nil = nil

      # http body (model)
      post_body : IO | String | Nil = @api_client.encode(body: bank_transfer_list_request, content_type: header_params["Content-Type"]?) if !bank_transfer_list_request.nil?

      # auth_names
      auth_names = ["clientId", "plaidVersion", "secret"]

      @api_client.build_api_request(
        http_method: :"POST",
        path: local_var_path,
        operation: "PlaidApi.bank_transfer_list",
        post_body: post_body,
        auth_names: auth_names,
        header_params: header_params,
        cookie_params: cookie_params,
        query_params: query_params,
        form_params: form_params
      )
    end

    # Migrate account into Bank Transfers
    # As an alternative to adding Items via Link, you can also use the `/bank_transfer/migrate_account` endpoint to migrate known account and routing numbers to Plaid Items.  Note that Items created in this way are not compatible with endpoints for other products, such as `/accounts/balance/get`, and can only be used with Bank Transfer endpoints.  If you require access to other endpoints, create the Item through Link instead.  Access to `/bank_transfer/migrate_account` is not enabled by default; to obtain access, contact your Plaid Account Manager.
    # @required @param bank_transfer_migrate_account_request [Plaid::BankTransferMigrateAccountRequest?]
    # @return [BankTransferMigrateAccountResponse]
    def bank_transfer_migrate_account(
      *,
      bank_transfer_migrate_account_request : Plaid::BankTransferMigrateAccountRequest? = nil
    ) : BankTransferMigrateAccountResponse
      data, _status_code, _headers = bank_transfer_migrate_account_with_http_info(bank_transfer_migrate_account_request: bank_transfer_migrate_account_request)
      data
    end

    # Migrate account into Bank Transfers
    # As an alternative to adding Items via Link, you can also use the &#x60;/bank_transfer/migrate_account&#x60; endpoint to migrate known account and routing numbers to Plaid Items.  Note that Items created in this way are not compatible with endpoints for other products, such as &#x60;/accounts/balance/get&#x60;, and can only be used with Bank Transfer endpoints.  If you require access to other endpoints, create the Item through Link instead.  Access to &#x60;/bank_transfer/migrate_account&#x60; is not enabled by default; to obtain access, contact your Plaid Account Manager.
    # @required @param bank_transfer_migrate_account_request [Plaid::BankTransferMigrateAccountRequest?]
    # @return [Tuple(BankTransferMigrateAccountResponse, Integer, Hash)] BankTransferMigrateAccountResponse, response status code and response headers
    def bank_transfer_migrate_account_with_http_info(
      *,
      bank_transfer_migrate_account_request : Plaid::BankTransferMigrateAccountRequest? = nil
    ) : Tuple(BankTransferMigrateAccountResponse, Int32, Hash(String, Array(String) | String))
      request = build_api_request_for_bank_transfer_migrate_account(bank_transfer_migrate_account_request: bank_transfer_migrate_account_request)

      body, status_code, headers = @api_client.execute_api_request(request)

      if debugging?
        Log.debug { "API called: PlaidApi#bank_transfer_migrate_account\nBody: #{body.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}" }
      end

      Tuple.new(BankTransferMigrateAccountResponse.from_json(body), status_code, headers)
    end

    # Migrate account into Bank Transfers
    # As an alternative to adding Items via Link, you can also use the &#x60;/bank_transfer/migrate_account&#x60; endpoint to migrate known account and routing numbers to Plaid Items.  Note that Items created in this way are not compatible with endpoints for other products, such as &#x60;/accounts/balance/get&#x60;, and can only be used with Bank Transfer endpoints.  If you require access to other endpoints, create the Item through Link instead.  Access to &#x60;/bank_transfer/migrate_account&#x60; is not enabled by default; to obtain access, contact your Plaid Account Manager.
    # @required @param bank_transfer_migrate_account_request [Plaid::BankTransferMigrateAccountRequest?]
    # @return nil
    def bank_transfer_migrate_account(
      *,
      bank_transfer_migrate_account_request : Plaid::BankTransferMigrateAccountRequest? = nil,
      &block : Crest::Response ->
    ) : Nil
      build_api_request_for_bank_transfer_migrate_account(bank_transfer_migrate_account_request: bank_transfer_migrate_account_request).execute(&block)
    end

    # @return Crest::Request
    def build_api_request_for_bank_transfer_migrate_account(
      *,
      bank_transfer_migrate_account_request : Plaid::BankTransferMigrateAccountRequest? = nil
    ) : Crest::Request
      if debugging?
        Log.debug { "Calling API: PlaidApi.bank_transfer_migrate_account ..." }
      end

      if client_side_validation?
        raise ArgumentError.new("\"bank_transfer_migrate_account_request\" is required and cannot be null") if bank_transfer_migrate_account_request.nil?
        unless (_bank_transfer_migrate_account_request = bank_transfer_migrate_account_request).nil?
          _bank_transfer_migrate_account_request.validate if _bank_transfer_migrate_account_request.is_a?(OpenApi::Validatable)
        end
      end

      # resource path
      local_var_path = "/bank_transfer/migrate_account"

      # header parameters
      header_params : Hash(String, String) = Hash(String, String).new
      # HTTP header "Accept" (if needed)
      header_params["Accept"] = @api_client.select_header_accept(["application/json"])
      # HTTP header "Content-Type"
      header_params["Content-Type"] = @api_client.select_header_content_type(["application/json"])

      # cookie parameters
      cookie_params : Hash(String, String) = Hash(String, String).new

      # query parameters
      query_params : Hash(String, (String | Array(String) | JSON::Any)) = Hash(String, (String | Array(String) | JSON::Any)).new

      # form parameters
      form_params : Array(Tuple(String, Crest::ParamsValue)) | Nil = nil

      # http body (model)
      post_body : IO | String | Nil = @api_client.encode(body: bank_transfer_migrate_account_request, content_type: header_params["Content-Type"]?) if !bank_transfer_migrate_account_request.nil?

      # auth_names
      auth_names = ["clientId", "plaidVersion", "secret"]

      @api_client.build_api_request(
        http_method: :"POST",
        path: local_var_path,
        operation: "PlaidApi.bank_transfer_migrate_account",
        post_body: post_body,
        auth_names: auth_names,
        header_params: header_params,
        cookie_params: cookie_params,
        query_params: query_params,
        form_params: form_params
      )
    end

    # Retrieve a sweep
    # The `/bank_transfer/sweep/get` endpoint fetches information about the sweep corresponding to the given `sweep_id`.
    # @required @param bank_transfer_sweep_get_request [Plaid::BankTransferSweepGetRequest?]
    # @return [BankTransferSweepGetResponse]
    def bank_transfer_sweep_get(
      *,
      bank_transfer_sweep_get_request : Plaid::BankTransferSweepGetRequest? = nil
    ) : BankTransferSweepGetResponse
      data, _status_code, _headers = bank_transfer_sweep_get_with_http_info(bank_transfer_sweep_get_request: bank_transfer_sweep_get_request)
      data
    end

    # Retrieve a sweep
    # The &#x60;/bank_transfer/sweep/get&#x60; endpoint fetches information about the sweep corresponding to the given &#x60;sweep_id&#x60;.
    # @required @param bank_transfer_sweep_get_request [Plaid::BankTransferSweepGetRequest?]
    # @return [Tuple(BankTransferSweepGetResponse, Integer, Hash)] BankTransferSweepGetResponse, response status code and response headers
    def bank_transfer_sweep_get_with_http_info(
      *,
      bank_transfer_sweep_get_request : Plaid::BankTransferSweepGetRequest? = nil
    ) : Tuple(BankTransferSweepGetResponse, Int32, Hash(String, Array(String) | String))
      request = build_api_request_for_bank_transfer_sweep_get(bank_transfer_sweep_get_request: bank_transfer_sweep_get_request)

      body, status_code, headers = @api_client.execute_api_request(request)

      if debugging?
        Log.debug { "API called: PlaidApi#bank_transfer_sweep_get\nBody: #{body.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}" }
      end

      Tuple.new(BankTransferSweepGetResponse.from_json(body), status_code, headers)
    end

    # Retrieve a sweep
    # The &#x60;/bank_transfer/sweep/get&#x60; endpoint fetches information about the sweep corresponding to the given &#x60;sweep_id&#x60;.
    # @required @param bank_transfer_sweep_get_request [Plaid::BankTransferSweepGetRequest?]
    # @return nil
    def bank_transfer_sweep_get(
      *,
      bank_transfer_sweep_get_request : Plaid::BankTransferSweepGetRequest? = nil,
      &block : Crest::Response ->
    ) : Nil
      build_api_request_for_bank_transfer_sweep_get(bank_transfer_sweep_get_request: bank_transfer_sweep_get_request).execute(&block)
    end

    # @return Crest::Request
    def build_api_request_for_bank_transfer_sweep_get(
      *,
      bank_transfer_sweep_get_request : Plaid::BankTransferSweepGetRequest? = nil
    ) : Crest::Request
      if debugging?
        Log.debug { "Calling API: PlaidApi.bank_transfer_sweep_get ..." }
      end

      if client_side_validation?
        raise ArgumentError.new("\"bank_transfer_sweep_get_request\" is required and cannot be null") if bank_transfer_sweep_get_request.nil?
        unless (_bank_transfer_sweep_get_request = bank_transfer_sweep_get_request).nil?
          _bank_transfer_sweep_get_request.validate if _bank_transfer_sweep_get_request.is_a?(OpenApi::Validatable)
        end
      end

      # resource path
      local_var_path = "/bank_transfer/sweep/get"

      # header parameters
      header_params : Hash(String, String) = Hash(String, String).new
      # HTTP header "Accept" (if needed)
      header_params["Accept"] = @api_client.select_header_accept(["application/json"])
      # HTTP header "Content-Type"
      header_params["Content-Type"] = @api_client.select_header_content_type(["application/json"])

      # cookie parameters
      cookie_params : Hash(String, String) = Hash(String, String).new

      # query parameters
      query_params : Hash(String, (String | Array(String) | JSON::Any)) = Hash(String, (String | Array(String) | JSON::Any)).new

      # form parameters
      form_params : Array(Tuple(String, Crest::ParamsValue)) | Nil = nil

      # http body (model)
      post_body : IO | String | Nil = @api_client.encode(body: bank_transfer_sweep_get_request, content_type: header_params["Content-Type"]?) if !bank_transfer_sweep_get_request.nil?

      # auth_names
      auth_names = ["clientId", "plaidVersion", "secret"]

      @api_client.build_api_request(
        http_method: :"POST",
        path: local_var_path,
        operation: "PlaidApi.bank_transfer_sweep_get",
        post_body: post_body,
        auth_names: auth_names,
        header_params: header_params,
        cookie_params: cookie_params,
        query_params: query_params,
        form_params: form_params
      )
    end

    # List sweeps
    # The `/bank_transfer/sweep/list` endpoint fetches information about the sweeps matching the given filters.
    # @required @param bank_transfer_sweep_list_request [Plaid::BankTransferSweepListRequest?]
    # @return [BankTransferSweepListResponse]
    def bank_transfer_sweep_list(
      *,
      bank_transfer_sweep_list_request : Plaid::BankTransferSweepListRequest? = nil
    ) : BankTransferSweepListResponse
      data, _status_code, _headers = bank_transfer_sweep_list_with_http_info(bank_transfer_sweep_list_request: bank_transfer_sweep_list_request)
      data
    end

    # List sweeps
    # The &#x60;/bank_transfer/sweep/list&#x60; endpoint fetches information about the sweeps matching the given filters.
    # @required @param bank_transfer_sweep_list_request [Plaid::BankTransferSweepListRequest?]
    # @return [Tuple(BankTransferSweepListResponse, Integer, Hash)] BankTransferSweepListResponse, response status code and response headers
    def bank_transfer_sweep_list_with_http_info(
      *,
      bank_transfer_sweep_list_request : Plaid::BankTransferSweepListRequest? = nil
    ) : Tuple(BankTransferSweepListResponse, Int32, Hash(String, Array(String) | String))
      request = build_api_request_for_bank_transfer_sweep_list(bank_transfer_sweep_list_request: bank_transfer_sweep_list_request)

      body, status_code, headers = @api_client.execute_api_request(request)

      if debugging?
        Log.debug { "API called: PlaidApi#bank_transfer_sweep_list\nBody: #{body.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}" }
      end

      Tuple.new(BankTransferSweepListResponse.from_json(body), status_code, headers)
    end

    # List sweeps
    # The &#x60;/bank_transfer/sweep/list&#x60; endpoint fetches information about the sweeps matching the given filters.
    # @required @param bank_transfer_sweep_list_request [Plaid::BankTransferSweepListRequest?]
    # @return nil
    def bank_transfer_sweep_list(
      *,
      bank_transfer_sweep_list_request : Plaid::BankTransferSweepListRequest? = nil,
      &block : Crest::Response ->
    ) : Nil
      build_api_request_for_bank_transfer_sweep_list(bank_transfer_sweep_list_request: bank_transfer_sweep_list_request).execute(&block)
    end

    # @return Crest::Request
    def build_api_request_for_bank_transfer_sweep_list(
      *,
      bank_transfer_sweep_list_request : Plaid::BankTransferSweepListRequest? = nil
    ) : Crest::Request
      if debugging?
        Log.debug { "Calling API: PlaidApi.bank_transfer_sweep_list ..." }
      end

      if client_side_validation?
        raise ArgumentError.new("\"bank_transfer_sweep_list_request\" is required and cannot be null") if bank_transfer_sweep_list_request.nil?
        unless (_bank_transfer_sweep_list_request = bank_transfer_sweep_list_request).nil?
          _bank_transfer_sweep_list_request.validate if _bank_transfer_sweep_list_request.is_a?(OpenApi::Validatable)
        end
      end

      # resource path
      local_var_path = "/bank_transfer/sweep/list"

      # header parameters
      header_params : Hash(String, String) = Hash(String, String).new
      # HTTP header "Accept" (if needed)
      header_params["Accept"] = @api_client.select_header_accept(["application/json"])
      # HTTP header "Content-Type"
      header_params["Content-Type"] = @api_client.select_header_content_type(["application/json"])

      # cookie parameters
      cookie_params : Hash(String, String) = Hash(String, String).new

      # query parameters
      query_params : Hash(String, (String | Array(String) | JSON::Any)) = Hash(String, (String | Array(String) | JSON::Any)).new

      # form parameters
      form_params : Array(Tuple(String, Crest::ParamsValue)) | Nil = nil

      # http body (model)
      post_body : IO | String | Nil = @api_client.encode(body: bank_transfer_sweep_list_request, content_type: header_params["Content-Type"]?) if !bank_transfer_sweep_list_request.nil?

      # auth_names
      auth_names = ["clientId", "plaidVersion", "secret"]

      @api_client.build_api_request(
        http_method: :"POST",
        path: local_var_path,
        operation: "PlaidApi.bank_transfer_sweep_list",
        post_body: post_body,
        auth_names: auth_names,
        header_params: header_params,
        cookie_params: cookie_params,
        query_params: query_params,
        form_params: form_params
      )
    end

    # Retrieve a Base Report
    # This endpoint allows the customer to retrieve a Base Report. Customers should pass in the `user_token` created in `/link/token/create`.
    # @required @param base_report_get_request [Plaid::BaseReportGetRequest?]
    # @return [BaseReportGetResponse]
    def base_report_get(
      *,
      base_report_get_request : Plaid::BaseReportGetRequest? = nil
    ) : BaseReportGetResponse
      data, _status_code, _headers = base_report_get_with_http_info(base_report_get_request: base_report_get_request)
      data
    end

    # Retrieve a Base Report
    # This endpoint allows the customer to retrieve a Base Report. Customers should pass in the &#x60;user_token&#x60; created in &#x60;/link/token/create&#x60;.
    # @required @param base_report_get_request [Plaid::BaseReportGetRequest?]
    # @return [Tuple(BaseReportGetResponse, Integer, Hash)] BaseReportGetResponse, response status code and response headers
    def base_report_get_with_http_info(
      *,
      base_report_get_request : Plaid::BaseReportGetRequest? = nil
    ) : Tuple(BaseReportGetResponse, Int32, Hash(String, Array(String) | String))
      request = build_api_request_for_base_report_get(base_report_get_request: base_report_get_request)

      body, status_code, headers = @api_client.execute_api_request(request)

      if debugging?
        Log.debug { "API called: PlaidApi#base_report_get\nBody: #{body.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}" }
      end

      Tuple.new(BaseReportGetResponse.from_json(body), status_code, headers)
    end

    # Retrieve a Base Report
    # This endpoint allows the customer to retrieve a Base Report. Customers should pass in the &#x60;user_token&#x60; created in &#x60;/link/token/create&#x60;.
    # @required @param base_report_get_request [Plaid::BaseReportGetRequest?]
    # @return nil
    def base_report_get(
      *,
      base_report_get_request : Plaid::BaseReportGetRequest? = nil,
      &block : Crest::Response ->
    ) : Nil
      build_api_request_for_base_report_get(base_report_get_request: base_report_get_request).execute(&block)
    end

    # @return Crest::Request
    def build_api_request_for_base_report_get(
      *,
      base_report_get_request : Plaid::BaseReportGetRequest? = nil
    ) : Crest::Request
      if debugging?
        Log.debug { "Calling API: PlaidApi.base_report_get ..." }
      end

      if client_side_validation?
        raise ArgumentError.new("\"base_report_get_request\" is required and cannot be null") if base_report_get_request.nil?
        unless (_base_report_get_request = base_report_get_request).nil?
          _base_report_get_request.validate if _base_report_get_request.is_a?(OpenApi::Validatable)
        end
      end

      # resource path
      local_var_path = "/cra/base_report/get"

      # header parameters
      header_params : Hash(String, String) = Hash(String, String).new
      # HTTP header "Accept" (if needed)
      header_params["Accept"] = @api_client.select_header_accept(["application/json"])
      # HTTP header "Content-Type"
      header_params["Content-Type"] = @api_client.select_header_content_type(["application/json"])

      # cookie parameters
      cookie_params : Hash(String, String) = Hash(String, String).new

      # query parameters
      query_params : Hash(String, (String | Array(String) | JSON::Any)) = Hash(String, (String | Array(String) | JSON::Any)).new

      # form parameters
      form_params : Array(Tuple(String, Crest::ParamsValue)) | Nil = nil

      # http body (model)
      post_body : IO | String | Nil = @api_client.encode(body: base_report_get_request, content_type: header_params["Content-Type"]?) if !base_report_get_request.nil?

      # auth_names
      auth_names = ["clientId", "plaidVersion", "secret"]

      @api_client.build_api_request(
        http_method: :"POST",
        path: local_var_path,
        operation: "PlaidApi.base_report_get",
        post_body: post_body,
        auth_names: auth_names,
        header_params: header_params,
        cookie_params: cookie_params,
        query_params: query_params,
        form_params: form_params
      )
    end

    # Create a Beacon Report
    # Create a fraud report for a given Beacon User.  Note: If you are creating users with the express purpose of providing historical fraud data, you should use the `/beacon/user/create` endpoint instead and embed the fraud report in the request. This will ensure that the Beacon User you create will not be subject to any billing costs.
    # @required @param beacon_report_create_request [Plaid::BeaconReportCreateRequest?]
    # @return [BeaconReportCreateResponse]
    def beacon_report_create(
      *,
      beacon_report_create_request : Plaid::BeaconReportCreateRequest? = nil
    ) : BeaconReportCreateResponse
      data, _status_code, _headers = beacon_report_create_with_http_info(beacon_report_create_request: beacon_report_create_request)
      data
    end

    # Create a Beacon Report
    # Create a fraud report for a given Beacon User.  Note: If you are creating users with the express purpose of providing historical fraud data, you should use the &#x60;/beacon/user/create&#x60; endpoint instead and embed the fraud report in the request. This will ensure that the Beacon User you create will not be subject to any billing costs.
    # @required @param beacon_report_create_request [Plaid::BeaconReportCreateRequest?]
    # @return [Tuple(BeaconReportCreateResponse, Integer, Hash)] BeaconReportCreateResponse, response status code and response headers
    def beacon_report_create_with_http_info(
      *,
      beacon_report_create_request : Plaid::BeaconReportCreateRequest? = nil
    ) : Tuple(BeaconReportCreateResponse, Int32, Hash(String, Array(String) | String))
      request = build_api_request_for_beacon_report_create(beacon_report_create_request: beacon_report_create_request)

      body, status_code, headers = @api_client.execute_api_request(request)

      if debugging?
        Log.debug { "API called: PlaidApi#beacon_report_create\nBody: #{body.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}" }
      end

      Tuple.new(BeaconReportCreateResponse.from_json(body), status_code, headers)
    end

    # Create a Beacon Report
    # Create a fraud report for a given Beacon User.  Note: If you are creating users with the express purpose of providing historical fraud data, you should use the &#x60;/beacon/user/create&#x60; endpoint instead and embed the fraud report in the request. This will ensure that the Beacon User you create will not be subject to any billing costs.
    # @required @param beacon_report_create_request [Plaid::BeaconReportCreateRequest?]
    # @return nil
    def beacon_report_create(
      *,
      beacon_report_create_request : Plaid::BeaconReportCreateRequest? = nil,
      &block : Crest::Response ->
    ) : Nil
      build_api_request_for_beacon_report_create(beacon_report_create_request: beacon_report_create_request).execute(&block)
    end

    # @return Crest::Request
    def build_api_request_for_beacon_report_create(
      *,
      beacon_report_create_request : Plaid::BeaconReportCreateRequest? = nil
    ) : Crest::Request
      if debugging?
        Log.debug { "Calling API: PlaidApi.beacon_report_create ..." }
      end

      if client_side_validation?
        raise ArgumentError.new("\"beacon_report_create_request\" is required and cannot be null") if beacon_report_create_request.nil?
        unless (_beacon_report_create_request = beacon_report_create_request).nil?
          _beacon_report_create_request.validate if _beacon_report_create_request.is_a?(OpenApi::Validatable)
        end
      end

      # resource path
      local_var_path = "/beacon/report/create"

      # header parameters
      header_params : Hash(String, String) = Hash(String, String).new
      # HTTP header "Accept" (if needed)
      header_params["Accept"] = @api_client.select_header_accept(["application/json"])
      # HTTP header "Content-Type"
      header_params["Content-Type"] = @api_client.select_header_content_type(["application/json"])

      # cookie parameters
      cookie_params : Hash(String, String) = Hash(String, String).new

      # query parameters
      query_params : Hash(String, (String | Array(String) | JSON::Any)) = Hash(String, (String | Array(String) | JSON::Any)).new

      # form parameters
      form_params : Array(Tuple(String, Crest::ParamsValue)) | Nil = nil

      # http body (model)
      post_body : IO | String | Nil = @api_client.encode(body: beacon_report_create_request, content_type: header_params["Content-Type"]?) if !beacon_report_create_request.nil?

      # auth_names
      auth_names = ["clientId", "plaidVersion", "secret"]

      @api_client.build_api_request(
        http_method: :"POST",
        path: local_var_path,
        operation: "PlaidApi.beacon_report_create",
        post_body: post_body,
        auth_names: auth_names,
        header_params: header_params,
        cookie_params: cookie_params,
        query_params: query_params,
        form_params: form_params
      )
    end

    # Get a Beacon Report
    # Returns a Beacon report for a given Beacon report id.
    # @required @param beacon_report_get_request [Plaid::BeaconReportGetRequest?]
    # @return [BeaconReportGetResponse]
    def beacon_report_get(
      *,
      beacon_report_get_request : Plaid::BeaconReportGetRequest? = nil
    ) : BeaconReportGetResponse
      data, _status_code, _headers = beacon_report_get_with_http_info(beacon_report_get_request: beacon_report_get_request)
      data
    end

    # Get a Beacon Report
    # Returns a Beacon report for a given Beacon report id.
    # @required @param beacon_report_get_request [Plaid::BeaconReportGetRequest?]
    # @return [Tuple(BeaconReportGetResponse, Integer, Hash)] BeaconReportGetResponse, response status code and response headers
    def beacon_report_get_with_http_info(
      *,
      beacon_report_get_request : Plaid::BeaconReportGetRequest? = nil
    ) : Tuple(BeaconReportGetResponse, Int32, Hash(String, Array(String) | String))
      request = build_api_request_for_beacon_report_get(beacon_report_get_request: beacon_report_get_request)

      body, status_code, headers = @api_client.execute_api_request(request)

      if debugging?
        Log.debug { "API called: PlaidApi#beacon_report_get\nBody: #{body.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}" }
      end

      Tuple.new(BeaconReportGetResponse.from_json(body), status_code, headers)
    end

    # Get a Beacon Report
    # Returns a Beacon report for a given Beacon report id.
    # @required @param beacon_report_get_request [Plaid::BeaconReportGetRequest?]
    # @return nil
    def beacon_report_get(
      *,
      beacon_report_get_request : Plaid::BeaconReportGetRequest? = nil,
      &block : Crest::Response ->
    ) : Nil
      build_api_request_for_beacon_report_get(beacon_report_get_request: beacon_report_get_request).execute(&block)
    end

    # @return Crest::Request
    def build_api_request_for_beacon_report_get(
      *,
      beacon_report_get_request : Plaid::BeaconReportGetRequest? = nil
    ) : Crest::Request
      if debugging?
        Log.debug { "Calling API: PlaidApi.beacon_report_get ..." }
      end

      if client_side_validation?
        raise ArgumentError.new("\"beacon_report_get_request\" is required and cannot be null") if beacon_report_get_request.nil?
        unless (_beacon_report_get_request = beacon_report_get_request).nil?
          _beacon_report_get_request.validate if _beacon_report_get_request.is_a?(OpenApi::Validatable)
        end
      end

      # resource path
      local_var_path = "/beacon/report/get"

      # header parameters
      header_params : Hash(String, String) = Hash(String, String).new
      # HTTP header "Accept" (if needed)
      header_params["Accept"] = @api_client.select_header_accept(["application/json"])
      # HTTP header "Content-Type"
      header_params["Content-Type"] = @api_client.select_header_content_type(["application/json"])

      # cookie parameters
      cookie_params : Hash(String, String) = Hash(String, String).new

      # query parameters
      query_params : Hash(String, (String | Array(String) | JSON::Any)) = Hash(String, (String | Array(String) | JSON::Any)).new

      # form parameters
      form_params : Array(Tuple(String, Crest::ParamsValue)) | Nil = nil

      # http body (model)
      post_body : IO | String | Nil = @api_client.encode(body: beacon_report_get_request, content_type: header_params["Content-Type"]?) if !beacon_report_get_request.nil?

      # auth_names
      auth_names = ["clientId", "plaidVersion", "secret"]

      @api_client.build_api_request(
        http_method: :"POST",
        path: local_var_path,
        operation: "PlaidApi.beacon_report_get",
        post_body: post_body,
        auth_names: auth_names,
        header_params: header_params,
        cookie_params: cookie_params,
        query_params: query_params,
        form_params: form_params
      )
    end

    # List Beacon Reports for a Beacon User
    # Use the `/beacon/report/list` endpoint to view all Beacon Reports you created for a specific Beacon User. The reports returned by this endpoint are exclusively reports you created for a specific user. A Beacon User can only have one active report at a time, but a new report can be created if a previous report has been deleted. The results from this endpoint are paginated; the `next_cursor` field will be populated if there is another page of results that can be retrieved. To fetch the next page, pass the `next_cursor` value as the `cursor` parameter in the next request.
    # @required @param beacon_report_list_request [Plaid::BeaconReportListRequest?]
    # @return [BeaconReportListResponse]
    def beacon_report_list(
      *,
      beacon_report_list_request : Plaid::BeaconReportListRequest? = nil
    ) : BeaconReportListResponse
      data, _status_code, _headers = beacon_report_list_with_http_info(beacon_report_list_request: beacon_report_list_request)
      data
    end

    # List Beacon Reports for a Beacon User
    # Use the &#x60;/beacon/report/list&#x60; endpoint to view all Beacon Reports you created for a specific Beacon User. The reports returned by this endpoint are exclusively reports you created for a specific user. A Beacon User can only have one active report at a time, but a new report can be created if a previous report has been deleted. The results from this endpoint are paginated; the &#x60;next_cursor&#x60; field will be populated if there is another page of results that can be retrieved. To fetch the next page, pass the &#x60;next_cursor&#x60; value as the &#x60;cursor&#x60; parameter in the next request.
    # @required @param beacon_report_list_request [Plaid::BeaconReportListRequest?]
    # @return [Tuple(BeaconReportListResponse, Integer, Hash)] BeaconReportListResponse, response status code and response headers
    def beacon_report_list_with_http_info(
      *,
      beacon_report_list_request : Plaid::BeaconReportListRequest? = nil
    ) : Tuple(BeaconReportListResponse, Int32, Hash(String, Array(String) | String))
      request = build_api_request_for_beacon_report_list(beacon_report_list_request: beacon_report_list_request)

      body, status_code, headers = @api_client.execute_api_request(request)

      if debugging?
        Log.debug { "API called: PlaidApi#beacon_report_list\nBody: #{body.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}" }
      end

      Tuple.new(BeaconReportListResponse.from_json(body), status_code, headers)
    end

    # List Beacon Reports for a Beacon User
    # Use the &#x60;/beacon/report/list&#x60; endpoint to view all Beacon Reports you created for a specific Beacon User. The reports returned by this endpoint are exclusively reports you created for a specific user. A Beacon User can only have one active report at a time, but a new report can be created if a previous report has been deleted. The results from this endpoint are paginated; the &#x60;next_cursor&#x60; field will be populated if there is another page of results that can be retrieved. To fetch the next page, pass the &#x60;next_cursor&#x60; value as the &#x60;cursor&#x60; parameter in the next request.
    # @required @param beacon_report_list_request [Plaid::BeaconReportListRequest?]
    # @return nil
    def beacon_report_list(
      *,
      beacon_report_list_request : Plaid::BeaconReportListRequest? = nil,
      &block : Crest::Response ->
    ) : Nil
      build_api_request_for_beacon_report_list(beacon_report_list_request: beacon_report_list_request).execute(&block)
    end

    # @return Crest::Request
    def build_api_request_for_beacon_report_list(
      *,
      beacon_report_list_request : Plaid::BeaconReportListRequest? = nil
    ) : Crest::Request
      if debugging?
        Log.debug { "Calling API: PlaidApi.beacon_report_list ..." }
      end

      if client_side_validation?
        raise ArgumentError.new("\"beacon_report_list_request\" is required and cannot be null") if beacon_report_list_request.nil?
        unless (_beacon_report_list_request = beacon_report_list_request).nil?
          _beacon_report_list_request.validate if _beacon_report_list_request.is_a?(OpenApi::Validatable)
        end
      end

      # resource path
      local_var_path = "/beacon/report/list"

      # header parameters
      header_params : Hash(String, String) = Hash(String, String).new
      # HTTP header "Accept" (if needed)
      header_params["Accept"] = @api_client.select_header_accept(["application/json"])
      # HTTP header "Content-Type"
      header_params["Content-Type"] = @api_client.select_header_content_type(["application/json"])

      # cookie parameters
      cookie_params : Hash(String, String) = Hash(String, String).new

      # query parameters
      query_params : Hash(String, (String | Array(String) | JSON::Any)) = Hash(String, (String | Array(String) | JSON::Any)).new

      # form parameters
      form_params : Array(Tuple(String, Crest::ParamsValue)) | Nil = nil

      # http body (model)
      post_body : IO | String | Nil = @api_client.encode(body: beacon_report_list_request, content_type: header_params["Content-Type"]?) if !beacon_report_list_request.nil?

      # auth_names
      auth_names = ["clientId", "plaidVersion", "secret"]

      @api_client.build_api_request(
        http_method: :"POST",
        path: local_var_path,
        operation: "PlaidApi.beacon_report_list",
        post_body: post_body,
        auth_names: auth_names,
        header_params: header_params,
        cookie_params: cookie_params,
        query_params: query_params,
        form_params: form_params
      )
    end

    # List Beacon Report Syndications for a Beacon User
    # Use the `/beacon/report_syndication/list` endpoint to view all Beacon Reports that have been syndicated to a specific Beacon User. This endpoint returns Beacon Report Syndications which are references to Beacon Reports created either by you, or another Beacon customer, that matched the specified Beacon User. A Beacon User can have multiple active Beacon Report Syndications at once. The results from this endpoint are paginated; the `next_cursor` field will be populated if there is another page of results that can be retrieved. To fetch the next page, pass the `next_cursor` value as the `cursor` parameter in the next request.
    # @required @param beacon_report_syndication_list_request [Plaid::BeaconReportSyndicationListRequest?]
    # @return [BeaconReportSyndicationListResponse]
    def beacon_report_syndication_list(
      *,
      beacon_report_syndication_list_request : Plaid::BeaconReportSyndicationListRequest? = nil
    ) : BeaconReportSyndicationListResponse
      data, _status_code, _headers = beacon_report_syndication_list_with_http_info(beacon_report_syndication_list_request: beacon_report_syndication_list_request)
      data
    end

    # List Beacon Report Syndications for a Beacon User
    # Use the &#x60;/beacon/report_syndication/list&#x60; endpoint to view all Beacon Reports that have been syndicated to a specific Beacon User. This endpoint returns Beacon Report Syndications which are references to Beacon Reports created either by you, or another Beacon customer, that matched the specified Beacon User. A Beacon User can have multiple active Beacon Report Syndications at once. The results from this endpoint are paginated; the &#x60;next_cursor&#x60; field will be populated if there is another page of results that can be retrieved. To fetch the next page, pass the &#x60;next_cursor&#x60; value as the &#x60;cursor&#x60; parameter in the next request.
    # @required @param beacon_report_syndication_list_request [Plaid::BeaconReportSyndicationListRequest?]
    # @return [Tuple(BeaconReportSyndicationListResponse, Integer, Hash)] BeaconReportSyndicationListResponse, response status code and response headers
    def beacon_report_syndication_list_with_http_info(
      *,
      beacon_report_syndication_list_request : Plaid::BeaconReportSyndicationListRequest? = nil
    ) : Tuple(BeaconReportSyndicationListResponse, Int32, Hash(String, Array(String) | String))
      request = build_api_request_for_beacon_report_syndication_list(beacon_report_syndication_list_request: beacon_report_syndication_list_request)

      body, status_code, headers = @api_client.execute_api_request(request)

      if debugging?
        Log.debug { "API called: PlaidApi#beacon_report_syndication_list\nBody: #{body.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}" }
      end

      Tuple.new(BeaconReportSyndicationListResponse.from_json(body), status_code, headers)
    end

    # List Beacon Report Syndications for a Beacon User
    # Use the &#x60;/beacon/report_syndication/list&#x60; endpoint to view all Beacon Reports that have been syndicated to a specific Beacon User. This endpoint returns Beacon Report Syndications which are references to Beacon Reports created either by you, or another Beacon customer, that matched the specified Beacon User. A Beacon User can have multiple active Beacon Report Syndications at once. The results from this endpoint are paginated; the &#x60;next_cursor&#x60; field will be populated if there is another page of results that can be retrieved. To fetch the next page, pass the &#x60;next_cursor&#x60; value as the &#x60;cursor&#x60; parameter in the next request.
    # @required @param beacon_report_syndication_list_request [Plaid::BeaconReportSyndicationListRequest?]
    # @return nil
    def beacon_report_syndication_list(
      *,
      beacon_report_syndication_list_request : Plaid::BeaconReportSyndicationListRequest? = nil,
      &block : Crest::Response ->
    ) : Nil
      build_api_request_for_beacon_report_syndication_list(beacon_report_syndication_list_request: beacon_report_syndication_list_request).execute(&block)
    end

    # @return Crest::Request
    def build_api_request_for_beacon_report_syndication_list(
      *,
      beacon_report_syndication_list_request : Plaid::BeaconReportSyndicationListRequest? = nil
    ) : Crest::Request
      if debugging?
        Log.debug { "Calling API: PlaidApi.beacon_report_syndication_list ..." }
      end

      if client_side_validation?
        raise ArgumentError.new("\"beacon_report_syndication_list_request\" is required and cannot be null") if beacon_report_syndication_list_request.nil?
        unless (_beacon_report_syndication_list_request = beacon_report_syndication_list_request).nil?
          _beacon_report_syndication_list_request.validate if _beacon_report_syndication_list_request.is_a?(OpenApi::Validatable)
        end
      end

      # resource path
      local_var_path = "/beacon/report_syndication/list"

      # header parameters
      header_params : Hash(String, String) = Hash(String, String).new
      # HTTP header "Accept" (if needed)
      header_params["Accept"] = @api_client.select_header_accept(["application/json"])
      # HTTP header "Content-Type"
      header_params["Content-Type"] = @api_client.select_header_content_type(["application/json"])

      # cookie parameters
      cookie_params : Hash(String, String) = Hash(String, String).new

      # query parameters
      query_params : Hash(String, (String | Array(String) | JSON::Any)) = Hash(String, (String | Array(String) | JSON::Any)).new

      # form parameters
      form_params : Array(Tuple(String, Crest::ParamsValue)) | Nil = nil

      # http body (model)
      post_body : IO | String | Nil = @api_client.encode(body: beacon_report_syndication_list_request, content_type: header_params["Content-Type"]?) if !beacon_report_syndication_list_request.nil?

      # auth_names
      auth_names = ["clientId", "plaidVersion", "secret"]

      @api_client.build_api_request(
        http_method: :"POST",
        path: local_var_path,
        operation: "PlaidApi.beacon_report_syndication_list",
        post_body: post_body,
        auth_names: auth_names,
        header_params: header_params,
        cookie_params: cookie_params,
        query_params: query_params,
        form_params: form_params
      )
    end

    # Create a Beacon User
    # Create and scan a Beacon User against your Beacon Program, according to your program's settings.  When you submit a new user to `/beacon/user/create`, several checks are performed immediately:    - The user's PII (provided within the `user` object) is searched against all other users within the Beacon Program you specified. If a match is found that violates your program's \"Duplicate Information Filtering\" settings, the user will be returned with a status of `pending_review`.    - The user's PII is also searched against all fraud reports created by your organization across all of your Beacon Programs. If the user's data matches a fraud report that your team created, the user will be returned with a status of `rejected`.    - Finally, the user's PII is searched against all fraud report shared with the Beacon Network by other companies. If a matching fraud report is found, the user will be returned with a `pending_review` status if your program has enabled automatic flagging based on network fraud.
    # @required @param beacon_user_create_request [Plaid::BeaconUserCreateRequest?]
    # @return [BeaconUserCreateResponse]
    def beacon_user_create(
      *,
      beacon_user_create_request : Plaid::BeaconUserCreateRequest? = nil
    ) : BeaconUserCreateResponse
      data, _status_code, _headers = beacon_user_create_with_http_info(beacon_user_create_request: beacon_user_create_request)
      data
    end

    # Create a Beacon User
    # Create and scan a Beacon User against your Beacon Program, according to your program&#39;s settings.  When you submit a new user to &#x60;/beacon/user/create&#x60;, several checks are performed immediately:    - The user&#39;s PII (provided within the &#x60;user&#x60; object) is searched against all other users within the Beacon Program you specified. If a match is found that violates your program&#39;s \&quot;Duplicate Information Filtering\&quot; settings, the user will be returned with a status of &#x60;pending_review&#x60;.    - The user&#39;s PII is also searched against all fraud reports created by your organization across all of your Beacon Programs. If the user&#39;s data matches a fraud report that your team created, the user will be returned with a status of &#x60;rejected&#x60;.    - Finally, the user&#39;s PII is searched against all fraud report shared with the Beacon Network by other companies. If a matching fraud report is found, the user will be returned with a &#x60;pending_review&#x60; status if your program has enabled automatic flagging based on network fraud.
    # @required @param beacon_user_create_request [Plaid::BeaconUserCreateRequest?]
    # @return [Tuple(BeaconUserCreateResponse, Integer, Hash)] BeaconUserCreateResponse, response status code and response headers
    def beacon_user_create_with_http_info(
      *,
      beacon_user_create_request : Plaid::BeaconUserCreateRequest? = nil
    ) : Tuple(BeaconUserCreateResponse, Int32, Hash(String, Array(String) | String))
      request = build_api_request_for_beacon_user_create(beacon_user_create_request: beacon_user_create_request)

      body, status_code, headers = @api_client.execute_api_request(request)

      if debugging?
        Log.debug { "API called: PlaidApi#beacon_user_create\nBody: #{body.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}" }
      end

      Tuple.new(BeaconUserCreateResponse.from_json(body), status_code, headers)
    end

    # Create a Beacon User
    # Create and scan a Beacon User against your Beacon Program, according to your program&#39;s settings.  When you submit a new user to &#x60;/beacon/user/create&#x60;, several checks are performed immediately:    - The user&#39;s PII (provided within the &#x60;user&#x60; object) is searched against all other users within the Beacon Program you specified. If a match is found that violates your program&#39;s \&quot;Duplicate Information Filtering\&quot; settings, the user will be returned with a status of &#x60;pending_review&#x60;.    - The user&#39;s PII is also searched against all fraud reports created by your organization across all of your Beacon Programs. If the user&#39;s data matches a fraud report that your team created, the user will be returned with a status of &#x60;rejected&#x60;.    - Finally, the user&#39;s PII is searched against all fraud report shared with the Beacon Network by other companies. If a matching fraud report is found, the user will be returned with a &#x60;pending_review&#x60; status if your program has enabled automatic flagging based on network fraud.
    # @required @param beacon_user_create_request [Plaid::BeaconUserCreateRequest?]
    # @return nil
    def beacon_user_create(
      *,
      beacon_user_create_request : Plaid::BeaconUserCreateRequest? = nil,
      &block : Crest::Response ->
    ) : Nil
      build_api_request_for_beacon_user_create(beacon_user_create_request: beacon_user_create_request).execute(&block)
    end

    # @return Crest::Request
    def build_api_request_for_beacon_user_create(
      *,
      beacon_user_create_request : Plaid::BeaconUserCreateRequest? = nil
    ) : Crest::Request
      if debugging?
        Log.debug { "Calling API: PlaidApi.beacon_user_create ..." }
      end

      if client_side_validation?
        raise ArgumentError.new("\"beacon_user_create_request\" is required and cannot be null") if beacon_user_create_request.nil?
        unless (_beacon_user_create_request = beacon_user_create_request).nil?
          _beacon_user_create_request.validate if _beacon_user_create_request.is_a?(OpenApi::Validatable)
        end
      end

      # resource path
      local_var_path = "/beacon/user/create"

      # header parameters
      header_params : Hash(String, String) = Hash(String, String).new
      # HTTP header "Accept" (if needed)
      header_params["Accept"] = @api_client.select_header_accept(["application/json"])
      # HTTP header "Content-Type"
      header_params["Content-Type"] = @api_client.select_header_content_type(["application/json"])

      # cookie parameters
      cookie_params : Hash(String, String) = Hash(String, String).new

      # query parameters
      query_params : Hash(String, (String | Array(String) | JSON::Any)) = Hash(String, (String | Array(String) | JSON::Any)).new

      # form parameters
      form_params : Array(Tuple(String, Crest::ParamsValue)) | Nil = nil

      # http body (model)
      post_body : IO | String | Nil = @api_client.encode(body: beacon_user_create_request, content_type: header_params["Content-Type"]?) if !beacon_user_create_request.nil?

      # auth_names
      auth_names = ["clientId", "plaidVersion", "secret"]

      @api_client.build_api_request(
        http_method: :"POST",
        path: local_var_path,
        operation: "PlaidApi.beacon_user_create",
        post_body: post_body,
        auth_names: auth_names,
        header_params: header_params,
        cookie_params: cookie_params,
        query_params: query_params,
        form_params: form_params
      )
    end

    # Get a Beacon User
    # Fetch a Beacon User.  The Beacon User is returned with all of their associated information and a `status` based on the Beacon Network duplicate record and fraud checks.
    # @required @param beacon_user_get_request [Plaid::BeaconUserGetRequest?]
    # @return [BeaconUserGetResponse]
    def beacon_user_get(
      *,
      beacon_user_get_request : Plaid::BeaconUserGetRequest? = nil
    ) : BeaconUserGetResponse
      data, _status_code, _headers = beacon_user_get_with_http_info(beacon_user_get_request: beacon_user_get_request)
      data
    end

    # Get a Beacon User
    # Fetch a Beacon User.  The Beacon User is returned with all of their associated information and a &#x60;status&#x60; based on the Beacon Network duplicate record and fraud checks.
    # @required @param beacon_user_get_request [Plaid::BeaconUserGetRequest?]
    # @return [Tuple(BeaconUserGetResponse, Integer, Hash)] BeaconUserGetResponse, response status code and response headers
    def beacon_user_get_with_http_info(
      *,
      beacon_user_get_request : Plaid::BeaconUserGetRequest? = nil
    ) : Tuple(BeaconUserGetResponse, Int32, Hash(String, Array(String) | String))
      request = build_api_request_for_beacon_user_get(beacon_user_get_request: beacon_user_get_request)

      body, status_code, headers = @api_client.execute_api_request(request)

      if debugging?
        Log.debug { "API called: PlaidApi#beacon_user_get\nBody: #{body.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}" }
      end

      Tuple.new(BeaconUserGetResponse.from_json(body), status_code, headers)
    end

    # Get a Beacon User
    # Fetch a Beacon User.  The Beacon User is returned with all of their associated information and a &#x60;status&#x60; based on the Beacon Network duplicate record and fraud checks.
    # @required @param beacon_user_get_request [Plaid::BeaconUserGetRequest?]
    # @return nil
    def beacon_user_get(
      *,
      beacon_user_get_request : Plaid::BeaconUserGetRequest? = nil,
      &block : Crest::Response ->
    ) : Nil
      build_api_request_for_beacon_user_get(beacon_user_get_request: beacon_user_get_request).execute(&block)
    end

    # @return Crest::Request
    def build_api_request_for_beacon_user_get(
      *,
      beacon_user_get_request : Plaid::BeaconUserGetRequest? = nil
    ) : Crest::Request
      if debugging?
        Log.debug { "Calling API: PlaidApi.beacon_user_get ..." }
      end

      if client_side_validation?
        raise ArgumentError.new("\"beacon_user_get_request\" is required and cannot be null") if beacon_user_get_request.nil?
        unless (_beacon_user_get_request = beacon_user_get_request).nil?
          _beacon_user_get_request.validate if _beacon_user_get_request.is_a?(OpenApi::Validatable)
        end
      end

      # resource path
      local_var_path = "/beacon/user/get"

      # header parameters
      header_params : Hash(String, String) = Hash(String, String).new
      # HTTP header "Accept" (if needed)
      header_params["Accept"] = @api_client.select_header_accept(["application/json"])
      # HTTP header "Content-Type"
      header_params["Content-Type"] = @api_client.select_header_content_type(["application/json"])

      # cookie parameters
      cookie_params : Hash(String, String) = Hash(String, String).new

      # query parameters
      query_params : Hash(String, (String | Array(String) | JSON::Any)) = Hash(String, (String | Array(String) | JSON::Any)).new

      # form parameters
      form_params : Array(Tuple(String, Crest::ParamsValue)) | Nil = nil

      # http body (model)
      post_body : IO | String | Nil = @api_client.encode(body: beacon_user_get_request, content_type: header_params["Content-Type"]?) if !beacon_user_get_request.nil?

      # auth_names
      auth_names = ["clientId", "plaidVersion", "secret"]

      @api_client.build_api_request(
        http_method: :"POST",
        path: local_var_path,
        operation: "PlaidApi.beacon_user_get",
        post_body: post_body,
        auth_names: auth_names,
        header_params: header_params,
        cookie_params: cookie_params,
        query_params: query_params,
        form_params: form_params
      )
    end

    # Review a Beacon User
    # Update the status of a Beacon User.  When updating a Beacon User's status via this endpoint, Plaid validates that the status change is consistent with the related state for this Beacon User. Specifically, we will check:  1. Whether there are any associated Beacon Reports connected to the Beacon User, and 2. Whether there are any confirmed Beacon Report Syndications connected to the Beacon User.  When updating a Beacon User's status to \"rejected\", we enforce that either a Beacon Report has been created for the Beacon User or a Beacon Report Syndication has been confirmed. When updating a Beacon User's status to \"cleared\", we enforce that there are no active Beacon Reports or confirmed Beacon Report Syndications associated with the user. If you previously created a Beacon Report for this user, you must delete it before updating the Beacon User's status to \"cleared\". There are no restrictions on updating a Beacon User's status to \"pending_review\".  If these conditions are not met, the request will be rejected with an error explaining the issue.
    # @required @param beacon_user_review_request [Plaid::BeaconUserReviewRequest?]
    # @return [BeaconUserGetResponse]
    def beacon_user_review(
      *,
      beacon_user_review_request : Plaid::BeaconUserReviewRequest? = nil
    ) : BeaconUserGetResponse
      data, _status_code, _headers = beacon_user_review_with_http_info(beacon_user_review_request: beacon_user_review_request)
      data
    end

    # Review a Beacon User
    # Update the status of a Beacon User.  When updating a Beacon User&#39;s status via this endpoint, Plaid validates that the status change is consistent with the related state for this Beacon User. Specifically, we will check:  1. Whether there are any associated Beacon Reports connected to the Beacon User, and 2. Whether there are any confirmed Beacon Report Syndications connected to the Beacon User.  When updating a Beacon User&#39;s status to \&quot;rejected\&quot;, we enforce that either a Beacon Report has been created for the Beacon User or a Beacon Report Syndication has been confirmed. When updating a Beacon User&#39;s status to \&quot;cleared\&quot;, we enforce that there are no active Beacon Reports or confirmed Beacon Report Syndications associated with the user. If you previously created a Beacon Report for this user, you must delete it before updating the Beacon User&#39;s status to \&quot;cleared\&quot;. There are no restrictions on updating a Beacon User&#39;s status to \&quot;pending_review\&quot;.  If these conditions are not met, the request will be rejected with an error explaining the issue.
    # @required @param beacon_user_review_request [Plaid::BeaconUserReviewRequest?]
    # @return [Tuple(BeaconUserGetResponse, Integer, Hash)] BeaconUserGetResponse, response status code and response headers
    def beacon_user_review_with_http_info(
      *,
      beacon_user_review_request : Plaid::BeaconUserReviewRequest? = nil
    ) : Tuple(BeaconUserGetResponse, Int32, Hash(String, Array(String) | String))
      request = build_api_request_for_beacon_user_review(beacon_user_review_request: beacon_user_review_request)

      body, status_code, headers = @api_client.execute_api_request(request)

      if debugging?
        Log.debug { "API called: PlaidApi#beacon_user_review\nBody: #{body.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}" }
      end

      Tuple.new(BeaconUserGetResponse.from_json(body), status_code, headers)
    end

    # Review a Beacon User
    # Update the status of a Beacon User.  When updating a Beacon User&#39;s status via this endpoint, Plaid validates that the status change is consistent with the related state for this Beacon User. Specifically, we will check:  1. Whether there are any associated Beacon Reports connected to the Beacon User, and 2. Whether there are any confirmed Beacon Report Syndications connected to the Beacon User.  When updating a Beacon User&#39;s status to \&quot;rejected\&quot;, we enforce that either a Beacon Report has been created for the Beacon User or a Beacon Report Syndication has been confirmed. When updating a Beacon User&#39;s status to \&quot;cleared\&quot;, we enforce that there are no active Beacon Reports or confirmed Beacon Report Syndications associated with the user. If you previously created a Beacon Report for this user, you must delete it before updating the Beacon User&#39;s status to \&quot;cleared\&quot;. There are no restrictions on updating a Beacon User&#39;s status to \&quot;pending_review\&quot;.  If these conditions are not met, the request will be rejected with an error explaining the issue.
    # @required @param beacon_user_review_request [Plaid::BeaconUserReviewRequest?]
    # @return nil
    def beacon_user_review(
      *,
      beacon_user_review_request : Plaid::BeaconUserReviewRequest? = nil,
      &block : Crest::Response ->
    ) : Nil
      build_api_request_for_beacon_user_review(beacon_user_review_request: beacon_user_review_request).execute(&block)
    end

    # @return Crest::Request
    def build_api_request_for_beacon_user_review(
      *,
      beacon_user_review_request : Plaid::BeaconUserReviewRequest? = nil
    ) : Crest::Request
      if debugging?
        Log.debug { "Calling API: PlaidApi.beacon_user_review ..." }
      end

      if client_side_validation?
        raise ArgumentError.new("\"beacon_user_review_request\" is required and cannot be null") if beacon_user_review_request.nil?
        unless (_beacon_user_review_request = beacon_user_review_request).nil?
          _beacon_user_review_request.validate if _beacon_user_review_request.is_a?(OpenApi::Validatable)
        end
      end

      # resource path
      local_var_path = "/beacon/user/review"

      # header parameters
      header_params : Hash(String, String) = Hash(String, String).new
      # HTTP header "Accept" (if needed)
      header_params["Accept"] = @api_client.select_header_accept(["application/json"])
      # HTTP header "Content-Type"
      header_params["Content-Type"] = @api_client.select_header_content_type(["application/json"])

      # cookie parameters
      cookie_params : Hash(String, String) = Hash(String, String).new

      # query parameters
      query_params : Hash(String, (String | Array(String) | JSON::Any)) = Hash(String, (String | Array(String) | JSON::Any)).new

      # form parameters
      form_params : Array(Tuple(String, Crest::ParamsValue)) | Nil = nil

      # http body (model)
      post_body : IO | String | Nil = @api_client.encode(body: beacon_user_review_request, content_type: header_params["Content-Type"]?) if !beacon_user_review_request.nil?

      # auth_names
      auth_names = ["clientId", "plaidVersion", "secret"]

      @api_client.build_api_request(
        http_method: :"POST",
        path: local_var_path,
        operation: "PlaidApi.beacon_user_review",
        post_body: post_body,
        auth_names: auth_names,
        header_params: header_params,
        cookie_params: cookie_params,
        query_params: query_params,
        form_params: form_params
      )
    end

    # Get categories
    # Send a request to the `/categories/get` endpoint to get detailed information on categories returned by Plaid. This endpoint does not require authentication.  All implementations are recommended to use the newer `personal_finance_category` taxonomy instead of the older `category` taxonomy supported by this endpoint. The [`personal_finance_category taxonomy` CSV file](https://plaid.com/documents/transactions-personal-finance-category-taxonomy.csv) is available for download and is not accessible via API.
    # @required @param body [Object?]
    # @return [CategoriesGetResponse]
    def categories_get(
      *,
      body : Object? = nil
    ) : CategoriesGetResponse
      data, _status_code, _headers = categories_get_with_http_info(body: body)
      data
    end

    # Get categories
    # Send a request to the &#x60;/categories/get&#x60; endpoint to get detailed information on categories returned by Plaid. This endpoint does not require authentication.  All implementations are recommended to use the newer &#x60;personal_finance_category&#x60; taxonomy instead of the older &#x60;category&#x60; taxonomy supported by this endpoint. The [&#x60;personal_finance_category taxonomy&#x60; CSV file](https://plaid.com/documents/transactions-personal-finance-category-taxonomy.csv) is available for download and is not accessible via API.
    # @required @param body [Object?]
    # @return [Tuple(CategoriesGetResponse, Integer, Hash)] CategoriesGetResponse, response status code and response headers
    def categories_get_with_http_info(
      *,
      body : Object? = nil
    ) : Tuple(CategoriesGetResponse, Int32, Hash(String, Array(String) | String))
      request = build_api_request_for_categories_get(body: body)

      body, status_code, headers = @api_client.execute_api_request(request)

      if debugging?
        Log.debug { "API called: PlaidApi#categories_get\nBody: #{body.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}" }
      end

      Tuple.new(CategoriesGetResponse.from_json(body), status_code, headers)
    end

    # Get categories
    # Send a request to the &#x60;/categories/get&#x60; endpoint to get detailed information on categories returned by Plaid. This endpoint does not require authentication.  All implementations are recommended to use the newer &#x60;personal_finance_category&#x60; taxonomy instead of the older &#x60;category&#x60; taxonomy supported by this endpoint. The [&#x60;personal_finance_category taxonomy&#x60; CSV file](https://plaid.com/documents/transactions-personal-finance-category-taxonomy.csv) is available for download and is not accessible via API.
    # @required @param body [Object?]
    # @return nil
    def categories_get(
      *,
      body : Object? = nil,
      &block : Crest::Response ->
    ) : Nil
      build_api_request_for_categories_get(body: body).execute(&block)
    end

    # @return Crest::Request
    def build_api_request_for_categories_get(
      *,
      body : Object? = nil
    ) : Crest::Request
      if debugging?
        Log.debug { "Calling API: PlaidApi.categories_get ..." }
      end

      if client_side_validation?
        raise ArgumentError.new("\"body\" is required and cannot be null") if body.nil?
        unless (_body = body).nil?
        end
      end

      # resource path
      local_var_path = "/categories/get"

      # header parameters
      header_params : Hash(String, String) = Hash(String, String).new
      # HTTP header "Accept" (if needed)
      header_params["Accept"] = @api_client.select_header_accept(["application/json"])
      # HTTP header "Content-Type"
      header_params["Content-Type"] = @api_client.select_header_content_type(["application/json"])

      # cookie parameters
      cookie_params : Hash(String, String) = Hash(String, String).new

      # query parameters
      query_params : Hash(String, (String | Array(String) | JSON::Any)) = Hash(String, (String | Array(String) | JSON::Any)).new

      # form parameters
      form_params : Array(Tuple(String, Crest::ParamsValue)) | Nil = nil

      # http body (model)
      post_body : IO | String | Nil = @api_client.encode(body: body, content_type: header_params["Content-Type"]?) if !body.nil?

      # auth_names
      auth_names = [] of String

      @api_client.build_api_request(
        http_method: :"POST",
        path: local_var_path,
        operation: "PlaidApi.categories_get",
        post_body: post_body,
        auth_names: auth_names,
        header_params: header_params,
        cookie_params: cookie_params,
        query_params: query_params,
        form_params: form_params
      )
    end

    # Retrieve information from the bank accounts used for income verification
    # `/cra/bank_income/get` returns the bank income report(s) for a specified user.
    # @required @param cra_bank_income_get_request [Plaid::CraBankIncomeGetRequest?]
    # @return [CraBankIncomeGetResponse]
    def cra_bank_income_get(
      *,
      cra_bank_income_get_request : Plaid::CraBankIncomeGetRequest? = nil
    ) : CraBankIncomeGetResponse
      data, _status_code, _headers = cra_bank_income_get_with_http_info(cra_bank_income_get_request: cra_bank_income_get_request)
      data
    end

    # Retrieve information from the bank accounts used for income verification
    # &#x60;/cra/bank_income/get&#x60; returns the bank income report(s) for a specified user.
    # @required @param cra_bank_income_get_request [Plaid::CraBankIncomeGetRequest?]
    # @return [Tuple(CraBankIncomeGetResponse, Integer, Hash)] CraBankIncomeGetResponse, response status code and response headers
    def cra_bank_income_get_with_http_info(
      *,
      cra_bank_income_get_request : Plaid::CraBankIncomeGetRequest? = nil
    ) : Tuple(CraBankIncomeGetResponse, Int32, Hash(String, Array(String) | String))
      request = build_api_request_for_cra_bank_income_get(cra_bank_income_get_request: cra_bank_income_get_request)

      body, status_code, headers = @api_client.execute_api_request(request)

      if debugging?
        Log.debug { "API called: PlaidApi#cra_bank_income_get\nBody: #{body.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}" }
      end

      Tuple.new(CraBankIncomeGetResponse.from_json(body), status_code, headers)
    end

    # Retrieve information from the bank accounts used for income verification
    # &#x60;/cra/bank_income/get&#x60; returns the bank income report(s) for a specified user.
    # @required @param cra_bank_income_get_request [Plaid::CraBankIncomeGetRequest?]
    # @return nil
    def cra_bank_income_get(
      *,
      cra_bank_income_get_request : Plaid::CraBankIncomeGetRequest? = nil,
      &block : Crest::Response ->
    ) : Nil
      build_api_request_for_cra_bank_income_get(cra_bank_income_get_request: cra_bank_income_get_request).execute(&block)
    end

    # @return Crest::Request
    def build_api_request_for_cra_bank_income_get(
      *,
      cra_bank_income_get_request : Plaid::CraBankIncomeGetRequest? = nil
    ) : Crest::Request
      if debugging?
        Log.debug { "Calling API: PlaidApi.cra_bank_income_get ..." }
      end

      if client_side_validation?
        raise ArgumentError.new("\"cra_bank_income_get_request\" is required and cannot be null") if cra_bank_income_get_request.nil?
        unless (_cra_bank_income_get_request = cra_bank_income_get_request).nil?
          _cra_bank_income_get_request.validate if _cra_bank_income_get_request.is_a?(OpenApi::Validatable)
        end
      end

      # resource path
      local_var_path = "/cra/bank_income/get"

      # header parameters
      header_params : Hash(String, String) = Hash(String, String).new
      # HTTP header "Accept" (if needed)
      header_params["Accept"] = @api_client.select_header_accept(["application/json"])
      # HTTP header "Content-Type"
      header_params["Content-Type"] = @api_client.select_header_content_type(["application/json"])

      # cookie parameters
      cookie_params : Hash(String, String) = Hash(String, String).new

      # query parameters
      query_params : Hash(String, (String | Array(String) | JSON::Any)) = Hash(String, (String | Array(String) | JSON::Any)).new

      # form parameters
      form_params : Array(Tuple(String, Crest::ParamsValue)) | Nil = nil

      # http body (model)
      post_body : IO | String | Nil = @api_client.encode(body: cra_bank_income_get_request, content_type: header_params["Content-Type"]?) if !cra_bank_income_get_request.nil?

      # auth_names
      auth_names = ["clientId", "plaidVersion", "secret"]

      @api_client.build_api_request(
        http_method: :"POST",
        path: local_var_path,
        operation: "PlaidApi.cra_bank_income_get",
        post_body: post_body,
        auth_names: auth_names,
        header_params: header_params,
        cookie_params: cookie_params,
        query_params: query_params,
        form_params: form_params
      )
    end

    # Create payment token
    # The `/payment_initiation/payment/token/create` endpoint has been deprecated. New Plaid customers will be unable to use this endpoint, and existing customers are encouraged to migrate to the newer, `link_token`-based flow. The recommended flow is to provide the `payment_id` to `/link/token/create`, which returns a `link_token` used to initialize Link.  The `/payment_initiation/payment/token/create` is used to create a `payment_token`, which can then be used in Link initialization to enter a payment initiation flow. You can only use a `payment_token` once. If this attempt fails, the end user aborts the flow, or the token expires, you will need to create a new payment token. Creating a new payment token does not require end user input.
    # @required @param payment_initiation_payment_token_create_request [Plaid::PaymentInitiationPaymentTokenCreateRequest?]
    # @return [PaymentInitiationPaymentTokenCreateResponse]
    def create_payment_token(
      *,
      payment_initiation_payment_token_create_request : Plaid::PaymentInitiationPaymentTokenCreateRequest? = nil
    ) : PaymentInitiationPaymentTokenCreateResponse
      data, _status_code, _headers = create_payment_token_with_http_info(payment_initiation_payment_token_create_request: payment_initiation_payment_token_create_request)
      data
    end

    # Create payment token
    # The &#x60;/payment_initiation/payment/token/create&#x60; endpoint has been deprecated. New Plaid customers will be unable to use this endpoint, and existing customers are encouraged to migrate to the newer, &#x60;link_token&#x60;-based flow. The recommended flow is to provide the &#x60;payment_id&#x60; to &#x60;/link/token/create&#x60;, which returns a &#x60;link_token&#x60; used to initialize Link.  The &#x60;/payment_initiation/payment/token/create&#x60; is used to create a &#x60;payment_token&#x60;, which can then be used in Link initialization to enter a payment initiation flow. You can only use a &#x60;payment_token&#x60; once. If this attempt fails, the end user aborts the flow, or the token expires, you will need to create a new payment token. Creating a new payment token does not require end user input.
    # @required @param payment_initiation_payment_token_create_request [Plaid::PaymentInitiationPaymentTokenCreateRequest?]
    # @return [Tuple(PaymentInitiationPaymentTokenCreateResponse, Integer, Hash)] PaymentInitiationPaymentTokenCreateResponse, response status code and response headers
    def create_payment_token_with_http_info(
      *,
      payment_initiation_payment_token_create_request : Plaid::PaymentInitiationPaymentTokenCreateRequest? = nil
    ) : Tuple(PaymentInitiationPaymentTokenCreateResponse, Int32, Hash(String, Array(String) | String))
      request = build_api_request_for_create_payment_token(payment_initiation_payment_token_create_request: payment_initiation_payment_token_create_request)

      body, status_code, headers = @api_client.execute_api_request(request)

      if debugging?
        Log.debug { "API called: PlaidApi#create_payment_token\nBody: #{body.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}" }
      end

      Tuple.new(PaymentInitiationPaymentTokenCreateResponse.from_json(body), status_code, headers)
    end

    # Create payment token
    # The &#x60;/payment_initiation/payment/token/create&#x60; endpoint has been deprecated. New Plaid customers will be unable to use this endpoint, and existing customers are encouraged to migrate to the newer, &#x60;link_token&#x60;-based flow. The recommended flow is to provide the &#x60;payment_id&#x60; to &#x60;/link/token/create&#x60;, which returns a &#x60;link_token&#x60; used to initialize Link.  The &#x60;/payment_initiation/payment/token/create&#x60; is used to create a &#x60;payment_token&#x60;, which can then be used in Link initialization to enter a payment initiation flow. You can only use a &#x60;payment_token&#x60; once. If this attempt fails, the end user aborts the flow, or the token expires, you will need to create a new payment token. Creating a new payment token does not require end user input.
    # @required @param payment_initiation_payment_token_create_request [Plaid::PaymentInitiationPaymentTokenCreateRequest?]
    # @return nil
    def create_payment_token(
      *,
      payment_initiation_payment_token_create_request : Plaid::PaymentInitiationPaymentTokenCreateRequest? = nil,
      &block : Crest::Response ->
    ) : Nil
      build_api_request_for_create_payment_token(payment_initiation_payment_token_create_request: payment_initiation_payment_token_create_request).execute(&block)
    end

    # @return Crest::Request
    def build_api_request_for_create_payment_token(
      *,
      payment_initiation_payment_token_create_request : Plaid::PaymentInitiationPaymentTokenCreateRequest? = nil
    ) : Crest::Request
      if debugging?
        Log.debug { "Calling API: PlaidApi.create_payment_token ..." }
      end

      if client_side_validation?
        raise ArgumentError.new("\"payment_initiation_payment_token_create_request\" is required and cannot be null") if payment_initiation_payment_token_create_request.nil?
        unless (_payment_initiation_payment_token_create_request = payment_initiation_payment_token_create_request).nil?
          _payment_initiation_payment_token_create_request.validate if _payment_initiation_payment_token_create_request.is_a?(OpenApi::Validatable)
        end
      end

      # resource path
      local_var_path = "/payment_initiation/payment/token/create"

      # header parameters
      header_params : Hash(String, String) = Hash(String, String).new
      # HTTP header "Accept" (if needed)
      header_params["Accept"] = @api_client.select_header_accept(["application/json"])
      # HTTP header "Content-Type"
      header_params["Content-Type"] = @api_client.select_header_content_type(["application/json"])

      # cookie parameters
      cookie_params : Hash(String, String) = Hash(String, String).new

      # query parameters
      query_params : Hash(String, (String | Array(String) | JSON::Any)) = Hash(String, (String | Array(String) | JSON::Any)).new

      # form parameters
      form_params : Array(Tuple(String, Crest::ParamsValue)) | Nil = nil

      # http body (model)
      post_body : IO | String | Nil = @api_client.encode(body: payment_initiation_payment_token_create_request, content_type: header_params["Content-Type"]?) if !payment_initiation_payment_token_create_request.nil?

      # auth_names
      auth_names = ["clientId", "plaidVersion", "secret"]

      @api_client.build_api_request(
        http_method: :"POST",
        path: local_var_path,
        operation: "PlaidApi.create_payment_token",
        post_body: post_body,
        auth_names: auth_names,
        header_params: header_params,
        cookie_params: cookie_params,
        query_params: query_params,
        form_params: form_params
      )
    end

    # Retrieve an Asset Report with Freddie Mac format. Only Freddie Mac can use this endpoint.
    # The `credit/asset_report/freddie_mac/get` endpoint retrieves the Asset Report in Freddie Mac's JSON format.
    # @required @param asset_report_freddie_get_request [Plaid::AssetReportFreddieGetRequest?]
    # @return [AssetReportFreddieGetResponse]
    def credit_asset_report_freddie_mac_get(
      *,
      asset_report_freddie_get_request : Plaid::AssetReportFreddieGetRequest? = nil
    ) : AssetReportFreddieGetResponse
      data, _status_code, _headers = credit_asset_report_freddie_mac_get_with_http_info(asset_report_freddie_get_request: asset_report_freddie_get_request)
      data
    end

    # Retrieve an Asset Report with Freddie Mac format. Only Freddie Mac can use this endpoint.
    # The &#x60;credit/asset_report/freddie_mac/get&#x60; endpoint retrieves the Asset Report in Freddie Mac&#39;s JSON format.
    # @required @param asset_report_freddie_get_request [Plaid::AssetReportFreddieGetRequest?]
    # @return [Tuple(AssetReportFreddieGetResponse, Integer, Hash)] AssetReportFreddieGetResponse, response status code and response headers
    def credit_asset_report_freddie_mac_get_with_http_info(
      *,
      asset_report_freddie_get_request : Plaid::AssetReportFreddieGetRequest? = nil
    ) : Tuple(AssetReportFreddieGetResponse, Int32, Hash(String, Array(String) | String))
      request = build_api_request_for_credit_asset_report_freddie_mac_get(asset_report_freddie_get_request: asset_report_freddie_get_request)

      body, status_code, headers = @api_client.execute_api_request(request)

      if debugging?
        Log.debug { "API called: PlaidApi#credit_asset_report_freddie_mac_get\nBody: #{body.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}" }
      end

      Tuple.new(AssetReportFreddieGetResponse.from_json(body), status_code, headers)
    end

    # Retrieve an Asset Report with Freddie Mac format. Only Freddie Mac can use this endpoint.
    # The &#x60;credit/asset_report/freddie_mac/get&#x60; endpoint retrieves the Asset Report in Freddie Mac&#39;s JSON format.
    # @required @param asset_report_freddie_get_request [Plaid::AssetReportFreddieGetRequest?]
    # @return nil
    def credit_asset_report_freddie_mac_get(
      *,
      asset_report_freddie_get_request : Plaid::AssetReportFreddieGetRequest? = nil,
      &block : Crest::Response ->
    ) : Nil
      build_api_request_for_credit_asset_report_freddie_mac_get(asset_report_freddie_get_request: asset_report_freddie_get_request).execute(&block)
    end

    # @return Crest::Request
    def build_api_request_for_credit_asset_report_freddie_mac_get(
      *,
      asset_report_freddie_get_request : Plaid::AssetReportFreddieGetRequest? = nil
    ) : Crest::Request
      if debugging?
        Log.debug { "Calling API: PlaidApi.credit_asset_report_freddie_mac_get ..." }
      end

      if client_side_validation?
        raise ArgumentError.new("\"asset_report_freddie_get_request\" is required and cannot be null") if asset_report_freddie_get_request.nil?
        unless (_asset_report_freddie_get_request = asset_report_freddie_get_request).nil?
          _asset_report_freddie_get_request.validate if _asset_report_freddie_get_request.is_a?(OpenApi::Validatable)
        end
      end

      # resource path
      local_var_path = "/credit/asset_report/freddie_mac/get"

      # header parameters
      header_params : Hash(String, String) = Hash(String, String).new
      # HTTP header "Accept" (if needed)
      header_params["Accept"] = @api_client.select_header_accept(["application/json"])
      # HTTP header "Content-Type"
      header_params["Content-Type"] = @api_client.select_header_content_type(["application/json"])

      # cookie parameters
      cookie_params : Hash(String, String) = Hash(String, String).new

      # query parameters
      query_params : Hash(String, (String | Array(String) | JSON::Any)) = Hash(String, (String | Array(String) | JSON::Any)).new

      # form parameters
      form_params : Array(Tuple(String, Crest::ParamsValue)) | Nil = nil

      # http body (model)
      post_body : IO | String | Nil = @api_client.encode(body: asset_report_freddie_get_request, content_type: header_params["Content-Type"]?) if !asset_report_freddie_get_request.nil?

      # auth_names
      auth_names = ["clientId", "plaidVersion", "secret"]

      @api_client.build_api_request(
        http_method: :"POST",
        path: local_var_path,
        operation: "PlaidApi.credit_asset_report_freddie_mac_get",
        post_body: post_body,
        auth_names: auth_names,
        header_params: header_params,
        cookie_params: cookie_params,
        query_params: query_params,
        form_params: form_params
      )
    end

    # Create Asset or Income Report Audit Copy Token
    # Plaid can create an Audit Copy token of an Asset Report and/or Income Report to share with participating Government Sponsored Entity (GSE). If you participate in the Day 1 Certainty™ program, Plaid can supply an Audit Copy token directly to Fannie Mae on your behalf. An Audit Copy token contains the same underlying data as the Asset Report and/or Income Report (result of /credit/payroll_income/get).  Use the `/credit/audit_copy_token/create` endpoint to create an `audit_copy_token` and then pass that token to the GSE who needs access.
    # @required @param credit_audit_copy_token_create_request [Plaid::CreditAuditCopyTokenCreateRequest?]
    # @return [CreditAuditCopyTokenCreateResponse]
    def credit_audit_copy_token_create(
      *,
      credit_audit_copy_token_create_request : Plaid::CreditAuditCopyTokenCreateRequest? = nil
    ) : CreditAuditCopyTokenCreateResponse
      data, _status_code, _headers = credit_audit_copy_token_create_with_http_info(credit_audit_copy_token_create_request: credit_audit_copy_token_create_request)
      data
    end

    # Create Asset or Income Report Audit Copy Token
    # Plaid can create an Audit Copy token of an Asset Report and/or Income Report to share with participating Government Sponsored Entity (GSE). If you participate in the Day 1 Certainty™ program, Plaid can supply an Audit Copy token directly to Fannie Mae on your behalf. An Audit Copy token contains the same underlying data as the Asset Report and/or Income Report (result of /credit/payroll_income/get).  Use the &#x60;/credit/audit_copy_token/create&#x60; endpoint to create an &#x60;audit_copy_token&#x60; and then pass that token to the GSE who needs access.
    # @required @param credit_audit_copy_token_create_request [Plaid::CreditAuditCopyTokenCreateRequest?]
    # @return [Tuple(CreditAuditCopyTokenCreateResponse, Integer, Hash)] CreditAuditCopyTokenCreateResponse, response status code and response headers
    def credit_audit_copy_token_create_with_http_info(
      *,
      credit_audit_copy_token_create_request : Plaid::CreditAuditCopyTokenCreateRequest? = nil
    ) : Tuple(CreditAuditCopyTokenCreateResponse, Int32, Hash(String, Array(String) | String))
      request = build_api_request_for_credit_audit_copy_token_create(credit_audit_copy_token_create_request: credit_audit_copy_token_create_request)

      body, status_code, headers = @api_client.execute_api_request(request)

      if debugging?
        Log.debug { "API called: PlaidApi#credit_audit_copy_token_create\nBody: #{body.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}" }
      end

      Tuple.new(CreditAuditCopyTokenCreateResponse.from_json(body), status_code, headers)
    end

    # Create Asset or Income Report Audit Copy Token
    # Plaid can create an Audit Copy token of an Asset Report and/or Income Report to share with participating Government Sponsored Entity (GSE). If you participate in the Day 1 Certainty™ program, Plaid can supply an Audit Copy token directly to Fannie Mae on your behalf. An Audit Copy token contains the same underlying data as the Asset Report and/or Income Report (result of /credit/payroll_income/get).  Use the &#x60;/credit/audit_copy_token/create&#x60; endpoint to create an &#x60;audit_copy_token&#x60; and then pass that token to the GSE who needs access.
    # @required @param credit_audit_copy_token_create_request [Plaid::CreditAuditCopyTokenCreateRequest?]
    # @return nil
    def credit_audit_copy_token_create(
      *,
      credit_audit_copy_token_create_request : Plaid::CreditAuditCopyTokenCreateRequest? = nil,
      &block : Crest::Response ->
    ) : Nil
      build_api_request_for_credit_audit_copy_token_create(credit_audit_copy_token_create_request: credit_audit_copy_token_create_request).execute(&block)
    end

    # @return Crest::Request
    def build_api_request_for_credit_audit_copy_token_create(
      *,
      credit_audit_copy_token_create_request : Plaid::CreditAuditCopyTokenCreateRequest? = nil
    ) : Crest::Request
      if debugging?
        Log.debug { "Calling API: PlaidApi.credit_audit_copy_token_create ..." }
      end

      if client_side_validation?
        raise ArgumentError.new("\"credit_audit_copy_token_create_request\" is required and cannot be null") if credit_audit_copy_token_create_request.nil?
        unless (_credit_audit_copy_token_create_request = credit_audit_copy_token_create_request).nil?
          _credit_audit_copy_token_create_request.validate if _credit_audit_copy_token_create_request.is_a?(OpenApi::Validatable)
        end
      end

      # resource path
      local_var_path = "/credit/audit_copy_token/create"

      # header parameters
      header_params : Hash(String, String) = Hash(String, String).new
      # HTTP header "Accept" (if needed)
      header_params["Accept"] = @api_client.select_header_accept(["application/json"])
      # HTTP header "Content-Type"
      header_params["Content-Type"] = @api_client.select_header_content_type(["application/json"])

      # cookie parameters
      cookie_params : Hash(String, String) = Hash(String, String).new

      # query parameters
      query_params : Hash(String, (String | Array(String) | JSON::Any)) = Hash(String, (String | Array(String) | JSON::Any)).new

      # form parameters
      form_params : Array(Tuple(String, Crest::ParamsValue)) | Nil = nil

      # http body (model)
      post_body : IO | String | Nil = @api_client.encode(body: credit_audit_copy_token_create_request, content_type: header_params["Content-Type"]?) if !credit_audit_copy_token_create_request.nil?

      # auth_names
      auth_names = ["clientId", "plaidVersion", "secret"]

      @api_client.build_api_request(
        http_method: :"POST",
        path: local_var_path,
        operation: "PlaidApi.credit_audit_copy_token_create",
        post_body: post_body,
        auth_names: auth_names,
        header_params: header_params,
        cookie_params: cookie_params,
        query_params: query_params,
        form_params: form_params
      )
    end

    # Update an Audit Copy Token
    # The `/credit/audit_copy_token/update` endpoint updates an existing  Audit Copy Token by adding the report tokens in the `report_tokens` field to the `audit_copy_token`. If the Audit Copy Token already contains a report of a certain type, it will be replaced with the token provided in the `report_tokens` field.
    # @required @param credit_audit_copy_token_update_request [Plaid::CreditAuditCopyTokenUpdateRequest?]
    # @return [CreditAuditCopyTokenUpdateResponse]
    def credit_audit_copy_token_update(
      *,
      credit_audit_copy_token_update_request : Plaid::CreditAuditCopyTokenUpdateRequest? = nil
    ) : CreditAuditCopyTokenUpdateResponse
      data, _status_code, _headers = credit_audit_copy_token_update_with_http_info(credit_audit_copy_token_update_request: credit_audit_copy_token_update_request)
      data
    end

    # Update an Audit Copy Token
    # The &#x60;/credit/audit_copy_token/update&#x60; endpoint updates an existing  Audit Copy Token by adding the report tokens in the &#x60;report_tokens&#x60; field to the &#x60;audit_copy_token&#x60;. If the Audit Copy Token already contains a report of a certain type, it will be replaced with the token provided in the &#x60;report_tokens&#x60; field.
    # @required @param credit_audit_copy_token_update_request [Plaid::CreditAuditCopyTokenUpdateRequest?]
    # @return [Tuple(CreditAuditCopyTokenUpdateResponse, Integer, Hash)] CreditAuditCopyTokenUpdateResponse, response status code and response headers
    def credit_audit_copy_token_update_with_http_info(
      *,
      credit_audit_copy_token_update_request : Plaid::CreditAuditCopyTokenUpdateRequest? = nil
    ) : Tuple(CreditAuditCopyTokenUpdateResponse, Int32, Hash(String, Array(String) | String))
      request = build_api_request_for_credit_audit_copy_token_update(credit_audit_copy_token_update_request: credit_audit_copy_token_update_request)

      body, status_code, headers = @api_client.execute_api_request(request)

      if debugging?
        Log.debug { "API called: PlaidApi#credit_audit_copy_token_update\nBody: #{body.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}" }
      end

      Tuple.new(CreditAuditCopyTokenUpdateResponse.from_json(body), status_code, headers)
    end

    # Update an Audit Copy Token
    # The &#x60;/credit/audit_copy_token/update&#x60; endpoint updates an existing  Audit Copy Token by adding the report tokens in the &#x60;report_tokens&#x60; field to the &#x60;audit_copy_token&#x60;. If the Audit Copy Token already contains a report of a certain type, it will be replaced with the token provided in the &#x60;report_tokens&#x60; field.
    # @required @param credit_audit_copy_token_update_request [Plaid::CreditAuditCopyTokenUpdateRequest?]
    # @return nil
    def credit_audit_copy_token_update(
      *,
      credit_audit_copy_token_update_request : Plaid::CreditAuditCopyTokenUpdateRequest? = nil,
      &block : Crest::Response ->
    ) : Nil
      build_api_request_for_credit_audit_copy_token_update(credit_audit_copy_token_update_request: credit_audit_copy_token_update_request).execute(&block)
    end

    # @return Crest::Request
    def build_api_request_for_credit_audit_copy_token_update(
      *,
      credit_audit_copy_token_update_request : Plaid::CreditAuditCopyTokenUpdateRequest? = nil
    ) : Crest::Request
      if debugging?
        Log.debug { "Calling API: PlaidApi.credit_audit_copy_token_update ..." }
      end

      if client_side_validation?
        raise ArgumentError.new("\"credit_audit_copy_token_update_request\" is required and cannot be null") if credit_audit_copy_token_update_request.nil?
        unless (_credit_audit_copy_token_update_request = credit_audit_copy_token_update_request).nil?
          _credit_audit_copy_token_update_request.validate if _credit_audit_copy_token_update_request.is_a?(OpenApi::Validatable)
        end
      end

      # resource path
      local_var_path = "/credit/audit_copy_token/update"

      # header parameters
      header_params : Hash(String, String) = Hash(String, String).new
      # HTTP header "Accept" (if needed)
      header_params["Accept"] = @api_client.select_header_accept(["application/json"])
      # HTTP header "Content-Type"
      header_params["Content-Type"] = @api_client.select_header_content_type(["application/json"])

      # cookie parameters
      cookie_params : Hash(String, String) = Hash(String, String).new

      # query parameters
      query_params : Hash(String, (String | Array(String) | JSON::Any)) = Hash(String, (String | Array(String) | JSON::Any)).new

      # form parameters
      form_params : Array(Tuple(String, Crest::ParamsValue)) | Nil = nil

      # http body (model)
      post_body : IO | String | Nil = @api_client.encode(body: credit_audit_copy_token_update_request, content_type: header_params["Content-Type"]?) if !credit_audit_copy_token_update_request.nil?

      # auth_names
      auth_names = ["clientId", "plaidVersion", "secret"]

      @api_client.build_api_request(
        http_method: :"POST",
        path: local_var_path,
        operation: "PlaidApi.credit_audit_copy_token_update",
        post_body: post_body,
        auth_names: auth_names,
        header_params: header_params,
        cookie_params: cookie_params,
        query_params: query_params,
        form_params: form_params
      )
    end

    # Retrieve information from the bank accounts used for employment verification
    # `/credit/bank_employment/get` returns the employment report(s) derived from bank transaction data for a specified user.
    # @required @param credit_bank_employment_get_request [Plaid::CreditBankEmploymentGetRequest?]
    # @return [CreditBankEmploymentGetResponse]
    def credit_bank_employment_get(
      *,
      credit_bank_employment_get_request : Plaid::CreditBankEmploymentGetRequest? = nil
    ) : CreditBankEmploymentGetResponse
      data, _status_code, _headers = credit_bank_employment_get_with_http_info(credit_bank_employment_get_request: credit_bank_employment_get_request)
      data
    end

    # Retrieve information from the bank accounts used for employment verification
    # &#x60;/credit/bank_employment/get&#x60; returns the employment report(s) derived from bank transaction data for a specified user.
    # @required @param credit_bank_employment_get_request [Plaid::CreditBankEmploymentGetRequest?]
    # @return [Tuple(CreditBankEmploymentGetResponse, Integer, Hash)] CreditBankEmploymentGetResponse, response status code and response headers
    def credit_bank_employment_get_with_http_info(
      *,
      credit_bank_employment_get_request : Plaid::CreditBankEmploymentGetRequest? = nil
    ) : Tuple(CreditBankEmploymentGetResponse, Int32, Hash(String, Array(String) | String))
      request = build_api_request_for_credit_bank_employment_get(credit_bank_employment_get_request: credit_bank_employment_get_request)

      body, status_code, headers = @api_client.execute_api_request(request)

      if debugging?
        Log.debug { "API called: PlaidApi#credit_bank_employment_get\nBody: #{body.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}" }
      end

      Tuple.new(CreditBankEmploymentGetResponse.from_json(body), status_code, headers)
    end

    # Retrieve information from the bank accounts used for employment verification
    # &#x60;/credit/bank_employment/get&#x60; returns the employment report(s) derived from bank transaction data for a specified user.
    # @required @param credit_bank_employment_get_request [Plaid::CreditBankEmploymentGetRequest?]
    # @return nil
    def credit_bank_employment_get(
      *,
      credit_bank_employment_get_request : Plaid::CreditBankEmploymentGetRequest? = nil,
      &block : Crest::Response ->
    ) : Nil
      build_api_request_for_credit_bank_employment_get(credit_bank_employment_get_request: credit_bank_employment_get_request).execute(&block)
    end

    # @return Crest::Request
    def build_api_request_for_credit_bank_employment_get(
      *,
      credit_bank_employment_get_request : Plaid::CreditBankEmploymentGetRequest? = nil
    ) : Crest::Request
      if debugging?
        Log.debug { "Calling API: PlaidApi.credit_bank_employment_get ..." }
      end

      if client_side_validation?
        raise ArgumentError.new("\"credit_bank_employment_get_request\" is required and cannot be null") if credit_bank_employment_get_request.nil?
        unless (_credit_bank_employment_get_request = credit_bank_employment_get_request).nil?
          _credit_bank_employment_get_request.validate if _credit_bank_employment_get_request.is_a?(OpenApi::Validatable)
        end
      end

      # resource path
      local_var_path = "/beta/credit/v1/bank_employment/get"

      # header parameters
      header_params : Hash(String, String) = Hash(String, String).new
      # HTTP header "Accept" (if needed)
      header_params["Accept"] = @api_client.select_header_accept(["application/json"])
      # HTTP header "Content-Type"
      header_params["Content-Type"] = @api_client.select_header_content_type(["application/json"])

      # cookie parameters
      cookie_params : Hash(String, String) = Hash(String, String).new

      # query parameters
      query_params : Hash(String, (String | Array(String) | JSON::Any)) = Hash(String, (String | Array(String) | JSON::Any)).new

      # form parameters
      form_params : Array(Tuple(String, Crest::ParamsValue)) | Nil = nil

      # http body (model)
      post_body : IO | String | Nil = @api_client.encode(body: credit_bank_employment_get_request, content_type: header_params["Content-Type"]?) if !credit_bank_employment_get_request.nil?

      # auth_names
      auth_names = ["clientId", "plaidVersion", "secret"]

      @api_client.build_api_request(
        http_method: :"POST",
        path: local_var_path,
        operation: "PlaidApi.credit_bank_employment_get",
        post_body: post_body,
        auth_names: auth_names,
        header_params: header_params,
        cookie_params: cookie_params,
        query_params: query_params,
        form_params: form_params
      )
    end

    # Retrieve information from the bank accounts used for income verification
    # `/credit/bank_income/get` returns the bank income report(s) for a specified user.
    # @required @param credit_bank_income_get_request [Plaid::CreditBankIncomeGetRequest?]
    # @return [CreditBankIncomeGetResponse]
    def credit_bank_income_get(
      *,
      credit_bank_income_get_request : Plaid::CreditBankIncomeGetRequest? = nil
    ) : CreditBankIncomeGetResponse
      data, _status_code, _headers = credit_bank_income_get_with_http_info(credit_bank_income_get_request: credit_bank_income_get_request)
      data
    end

    # Retrieve information from the bank accounts used for income verification
    # &#x60;/credit/bank_income/get&#x60; returns the bank income report(s) for a specified user.
    # @required @param credit_bank_income_get_request [Plaid::CreditBankIncomeGetRequest?]
    # @return [Tuple(CreditBankIncomeGetResponse, Integer, Hash)] CreditBankIncomeGetResponse, response status code and response headers
    def credit_bank_income_get_with_http_info(
      *,
      credit_bank_income_get_request : Plaid::CreditBankIncomeGetRequest? = nil
    ) : Tuple(CreditBankIncomeGetResponse, Int32, Hash(String, Array(String) | String))
      request = build_api_request_for_credit_bank_income_get(credit_bank_income_get_request: credit_bank_income_get_request)

      body, status_code, headers = @api_client.execute_api_request(request)

      if debugging?
        Log.debug { "API called: PlaidApi#credit_bank_income_get\nBody: #{body.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}" }
      end

      Tuple.new(CreditBankIncomeGetResponse.from_json(body), status_code, headers)
    end

    # Retrieve information from the bank accounts used for income verification
    # &#x60;/credit/bank_income/get&#x60; returns the bank income report(s) for a specified user.
    # @required @param credit_bank_income_get_request [Plaid::CreditBankIncomeGetRequest?]
    # @return nil
    def credit_bank_income_get(
      *,
      credit_bank_income_get_request : Plaid::CreditBankIncomeGetRequest? = nil,
      &block : Crest::Response ->
    ) : Nil
      build_api_request_for_credit_bank_income_get(credit_bank_income_get_request: credit_bank_income_get_request).execute(&block)
    end

    # @return Crest::Request
    def build_api_request_for_credit_bank_income_get(
      *,
      credit_bank_income_get_request : Plaid::CreditBankIncomeGetRequest? = nil
    ) : Crest::Request
      if debugging?
        Log.debug { "Calling API: PlaidApi.credit_bank_income_get ..." }
      end

      if client_side_validation?
        raise ArgumentError.new("\"credit_bank_income_get_request\" is required and cannot be null") if credit_bank_income_get_request.nil?
        unless (_credit_bank_income_get_request = credit_bank_income_get_request).nil?
          _credit_bank_income_get_request.validate if _credit_bank_income_get_request.is_a?(OpenApi::Validatable)
        end
      end

      # resource path
      local_var_path = "/credit/bank_income/get"

      # header parameters
      header_params : Hash(String, String) = Hash(String, String).new
      # HTTP header "Accept" (if needed)
      header_params["Accept"] = @api_client.select_header_accept(["application/json"])
      # HTTP header "Content-Type"
      header_params["Content-Type"] = @api_client.select_header_content_type(["application/json"])

      # cookie parameters
      cookie_params : Hash(String, String) = Hash(String, String).new

      # query parameters
      query_params : Hash(String, (String | Array(String) | JSON::Any)) = Hash(String, (String | Array(String) | JSON::Any)).new

      # form parameters
      form_params : Array(Tuple(String, Crest::ParamsValue)) | Nil = nil

      # http body (model)
      post_body : IO | String | Nil = @api_client.encode(body: credit_bank_income_get_request, content_type: header_params["Content-Type"]?) if !credit_bank_income_get_request.nil?

      # auth_names
      auth_names = ["clientId", "plaidVersion", "secret"]

      @api_client.build_api_request(
        http_method: :"POST",
        path: local_var_path,
        operation: "PlaidApi.credit_bank_income_get",
        post_body: post_body,
        auth_names: auth_names,
        header_params: header_params,
        cookie_params: cookie_params,
        query_params: query_params,
        form_params: form_params
      )
    end

    # Retrieve information from the bank accounts used for income verification in PDF format
    # `/credit/bank_income/pdf/get` returns the most recent bank income report for a specified user in PDF format.
    # @required @param credit_bank_income_pdf_get_request [Plaid::CreditBankIncomePDFGetRequest?]
    # @return [::File]
    def credit_bank_income_pdf_get(
      *,
      credit_bank_income_pdf_get_request : Plaid::CreditBankIncomePDFGetRequest? = nil
    ) : ::File
      data, _status_code, _headers = credit_bank_income_pdf_get_with_http_info(credit_bank_income_pdf_get_request: credit_bank_income_pdf_get_request)
      data
    end

    # Retrieve information from the bank accounts used for income verification in PDF format
    # &#x60;/credit/bank_income/pdf/get&#x60; returns the most recent bank income report for a specified user in PDF format.
    # @required @param credit_bank_income_pdf_get_request [Plaid::CreditBankIncomePDFGetRequest?]
    # @return [Tuple(::File, Integer, Hash)] ::File, response status code and response headers
    def credit_bank_income_pdf_get_with_http_info(
      *,
      credit_bank_income_pdf_get_request : Plaid::CreditBankIncomePDFGetRequest? = nil
    ) : Tuple(::File, Int32, Hash(String, Array(String) | String))
      request = build_api_request_for_credit_bank_income_pdf_get(credit_bank_income_pdf_get_request: credit_bank_income_pdf_get_request)

      body, status_code, headers = @api_client.execute_api_request(request)

      if debugging?
        Log.debug { "API called: PlaidApi#credit_bank_income_pdf_get\nBody: #{body.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}" }
      end

      Tuple.new(::File.from_json(body), status_code, headers)
    end

    # Retrieve information from the bank accounts used for income verification in PDF format
    # &#x60;/credit/bank_income/pdf/get&#x60; returns the most recent bank income report for a specified user in PDF format.
    # @required @param credit_bank_income_pdf_get_request [Plaid::CreditBankIncomePDFGetRequest?]
    # @return nil
    def credit_bank_income_pdf_get(
      *,
      credit_bank_income_pdf_get_request : Plaid::CreditBankIncomePDFGetRequest? = nil,
      &block : Crest::Response ->
    ) : Nil
      build_api_request_for_credit_bank_income_pdf_get(credit_bank_income_pdf_get_request: credit_bank_income_pdf_get_request).execute(&block)
    end

    # @return Crest::Request
    def build_api_request_for_credit_bank_income_pdf_get(
      *,
      credit_bank_income_pdf_get_request : Plaid::CreditBankIncomePDFGetRequest? = nil
    ) : Crest::Request
      if debugging?
        Log.debug { "Calling API: PlaidApi.credit_bank_income_pdf_get ..." }
      end

      if client_side_validation?
        raise ArgumentError.new("\"credit_bank_income_pdf_get_request\" is required and cannot be null") if credit_bank_income_pdf_get_request.nil?
        unless (_credit_bank_income_pdf_get_request = credit_bank_income_pdf_get_request).nil?
          _credit_bank_income_pdf_get_request.validate if _credit_bank_income_pdf_get_request.is_a?(OpenApi::Validatable)
        end
      end

      # resource path
      local_var_path = "/credit/bank_income/pdf/get"

      # header parameters
      header_params : Hash(String, String) = Hash(String, String).new
      # HTTP header "Accept" (if needed)
      header_params["Accept"] = @api_client.select_header_accept(["application/pdf"])
      # HTTP header "Content-Type"
      header_params["Content-Type"] = @api_client.select_header_content_type(["application/json"])

      # cookie parameters
      cookie_params : Hash(String, String) = Hash(String, String).new

      # query parameters
      query_params : Hash(String, (String | Array(String) | JSON::Any)) = Hash(String, (String | Array(String) | JSON::Any)).new

      # form parameters
      form_params : Array(Tuple(String, Crest::ParamsValue)) | Nil = nil

      # http body (model)
      post_body : IO | String | Nil = @api_client.encode(body: credit_bank_income_pdf_get_request, content_type: header_params["Content-Type"]?) if !credit_bank_income_pdf_get_request.nil?

      # auth_names
      auth_names = ["clientId", "plaidVersion", "secret"]

      @api_client.build_api_request(
        http_method: :"POST",
        path: local_var_path,
        operation: "PlaidApi.credit_bank_income_pdf_get",
        post_body: post_body,
        auth_names: auth_names,
        header_params: header_params,
        cookie_params: cookie_params,
        query_params: query_params,
        form_params: form_params
      )
    end

    # Refresh a user's bank income information
    # `/credit/bank_income/refresh` refreshes the bank income report data for a specific user.
    # @required @param credit_bank_income_refresh_request [Plaid::CreditBankIncomeRefreshRequest?]
    # @return [CreditBankIncomeRefreshResponse]
    def credit_bank_income_refresh(
      *,
      credit_bank_income_refresh_request : Plaid::CreditBankIncomeRefreshRequest? = nil
    ) : CreditBankIncomeRefreshResponse
      data, _status_code, _headers = credit_bank_income_refresh_with_http_info(credit_bank_income_refresh_request: credit_bank_income_refresh_request)
      data
    end

    # Refresh a user&#39;s bank income information
    # &#x60;/credit/bank_income/refresh&#x60; refreshes the bank income report data for a specific user.
    # @required @param credit_bank_income_refresh_request [Plaid::CreditBankIncomeRefreshRequest?]
    # @return [Tuple(CreditBankIncomeRefreshResponse, Integer, Hash)] CreditBankIncomeRefreshResponse, response status code and response headers
    def credit_bank_income_refresh_with_http_info(
      *,
      credit_bank_income_refresh_request : Plaid::CreditBankIncomeRefreshRequest? = nil
    ) : Tuple(CreditBankIncomeRefreshResponse, Int32, Hash(String, Array(String) | String))
      request = build_api_request_for_credit_bank_income_refresh(credit_bank_income_refresh_request: credit_bank_income_refresh_request)

      body, status_code, headers = @api_client.execute_api_request(request)

      if debugging?
        Log.debug { "API called: PlaidApi#credit_bank_income_refresh\nBody: #{body.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}" }
      end

      Tuple.new(CreditBankIncomeRefreshResponse.from_json(body), status_code, headers)
    end

    # Refresh a user&#39;s bank income information
    # &#x60;/credit/bank_income/refresh&#x60; refreshes the bank income report data for a specific user.
    # @required @param credit_bank_income_refresh_request [Plaid::CreditBankIncomeRefreshRequest?]
    # @return nil
    def credit_bank_income_refresh(
      *,
      credit_bank_income_refresh_request : Plaid::CreditBankIncomeRefreshRequest? = nil,
      &block : Crest::Response ->
    ) : Nil
      build_api_request_for_credit_bank_income_refresh(credit_bank_income_refresh_request: credit_bank_income_refresh_request).execute(&block)
    end

    # @return Crest::Request
    def build_api_request_for_credit_bank_income_refresh(
      *,
      credit_bank_income_refresh_request : Plaid::CreditBankIncomeRefreshRequest? = nil
    ) : Crest::Request
      if debugging?
        Log.debug { "Calling API: PlaidApi.credit_bank_income_refresh ..." }
      end

      if client_side_validation?
        raise ArgumentError.new("\"credit_bank_income_refresh_request\" is required and cannot be null") if credit_bank_income_refresh_request.nil?
        unless (_credit_bank_income_refresh_request = credit_bank_income_refresh_request).nil?
          _credit_bank_income_refresh_request.validate if _credit_bank_income_refresh_request.is_a?(OpenApi::Validatable)
        end
      end

      # resource path
      local_var_path = "/credit/bank_income/refresh"

      # header parameters
      header_params : Hash(String, String) = Hash(String, String).new
      # HTTP header "Accept" (if needed)
      header_params["Accept"] = @api_client.select_header_accept(["application/json"])
      # HTTP header "Content-Type"
      header_params["Content-Type"] = @api_client.select_header_content_type(["application/json"])

      # cookie parameters
      cookie_params : Hash(String, String) = Hash(String, String).new

      # query parameters
      query_params : Hash(String, (String | Array(String) | JSON::Any)) = Hash(String, (String | Array(String) | JSON::Any)).new

      # form parameters
      form_params : Array(Tuple(String, Crest::ParamsValue)) | Nil = nil

      # http body (model)
      post_body : IO | String | Nil = @api_client.encode(body: credit_bank_income_refresh_request, content_type: header_params["Content-Type"]?) if !credit_bank_income_refresh_request.nil?

      # auth_names
      auth_names = ["clientId", "plaidVersion", "secret"]

      @api_client.build_api_request(
        http_method: :"POST",
        path: local_var_path,
        operation: "PlaidApi.credit_bank_income_refresh",
        post_body: post_body,
        auth_names: auth_names,
        header_params: header_params,
        cookie_params: cookie_params,
        query_params: query_params,
        form_params: form_params
      )
    end

    # Subscribe and unsubscribe to proactive notifications for a user's income profile
    # `/credit/bank_income/webhook/update` allows you to subscribe or unsubscribe a user for income webhook notifications. By default, all users start out unsubscribed.  If a user is subscribed, on significant changes to the user's income profile, you will receive a `BANK_INCOME_REFRESH_UPDATE` webhook, prompting you to refresh bank income data for the user.
    # @required @param credit_bank_income_webhook_update_request [Plaid::CreditBankIncomeWebhookUpdateRequest?]
    # @return [CreditBankIncomeWebhookUpdateResponse]
    def credit_bank_income_webhook_update(
      *,
      credit_bank_income_webhook_update_request : Plaid::CreditBankIncomeWebhookUpdateRequest? = nil
    ) : CreditBankIncomeWebhookUpdateResponse
      data, _status_code, _headers = credit_bank_income_webhook_update_with_http_info(credit_bank_income_webhook_update_request: credit_bank_income_webhook_update_request)
      data
    end

    # Subscribe and unsubscribe to proactive notifications for a user&#39;s income profile
    # &#x60;/credit/bank_income/webhook/update&#x60; allows you to subscribe or unsubscribe a user for income webhook notifications. By default, all users start out unsubscribed.  If a user is subscribed, on significant changes to the user&#39;s income profile, you will receive a &#x60;BANK_INCOME_REFRESH_UPDATE&#x60; webhook, prompting you to refresh bank income data for the user.
    # @required @param credit_bank_income_webhook_update_request [Plaid::CreditBankIncomeWebhookUpdateRequest?]
    # @return [Tuple(CreditBankIncomeWebhookUpdateResponse, Integer, Hash)] CreditBankIncomeWebhookUpdateResponse, response status code and response headers
    def credit_bank_income_webhook_update_with_http_info(
      *,
      credit_bank_income_webhook_update_request : Plaid::CreditBankIncomeWebhookUpdateRequest? = nil
    ) : Tuple(CreditBankIncomeWebhookUpdateResponse, Int32, Hash(String, Array(String) | String))
      request = build_api_request_for_credit_bank_income_webhook_update(credit_bank_income_webhook_update_request: credit_bank_income_webhook_update_request)

      body, status_code, headers = @api_client.execute_api_request(request)

      if debugging?
        Log.debug { "API called: PlaidApi#credit_bank_income_webhook_update\nBody: #{body.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}" }
      end

      Tuple.new(CreditBankIncomeWebhookUpdateResponse.from_json(body), status_code, headers)
    end

    # Subscribe and unsubscribe to proactive notifications for a user&#39;s income profile
    # &#x60;/credit/bank_income/webhook/update&#x60; allows you to subscribe or unsubscribe a user for income webhook notifications. By default, all users start out unsubscribed.  If a user is subscribed, on significant changes to the user&#39;s income profile, you will receive a &#x60;BANK_INCOME_REFRESH_UPDATE&#x60; webhook, prompting you to refresh bank income data for the user.
    # @required @param credit_bank_income_webhook_update_request [Plaid::CreditBankIncomeWebhookUpdateRequest?]
    # @return nil
    def credit_bank_income_webhook_update(
      *,
      credit_bank_income_webhook_update_request : Plaid::CreditBankIncomeWebhookUpdateRequest? = nil,
      &block : Crest::Response ->
    ) : Nil
      build_api_request_for_credit_bank_income_webhook_update(credit_bank_income_webhook_update_request: credit_bank_income_webhook_update_request).execute(&block)
    end

    # @return Crest::Request
    def build_api_request_for_credit_bank_income_webhook_update(
      *,
      credit_bank_income_webhook_update_request : Plaid::CreditBankIncomeWebhookUpdateRequest? = nil
    ) : Crest::Request
      if debugging?
        Log.debug { "Calling API: PlaidApi.credit_bank_income_webhook_update ..." }
      end

      if client_side_validation?
        raise ArgumentError.new("\"credit_bank_income_webhook_update_request\" is required and cannot be null") if credit_bank_income_webhook_update_request.nil?
        unless (_credit_bank_income_webhook_update_request = credit_bank_income_webhook_update_request).nil?
          _credit_bank_income_webhook_update_request.validate if _credit_bank_income_webhook_update_request.is_a?(OpenApi::Validatable)
        end
      end

      # resource path
      local_var_path = "/credit/bank_income/webhook/update"

      # header parameters
      header_params : Hash(String, String) = Hash(String, String).new
      # HTTP header "Accept" (if needed)
      header_params["Accept"] = @api_client.select_header_accept(["application/json"])
      # HTTP header "Content-Type"
      header_params["Content-Type"] = @api_client.select_header_content_type(["application/json"])

      # cookie parameters
      cookie_params : Hash(String, String) = Hash(String, String).new

      # query parameters
      query_params : Hash(String, (String | Array(String) | JSON::Any)) = Hash(String, (String | Array(String) | JSON::Any)).new

      # form parameters
      form_params : Array(Tuple(String, Crest::ParamsValue)) | Nil = nil

      # http body (model)
      post_body : IO | String | Nil = @api_client.encode(body: credit_bank_income_webhook_update_request, content_type: header_params["Content-Type"]?) if !credit_bank_income_webhook_update_request.nil?

      # auth_names
      auth_names = ["clientId", "plaidVersion", "secret"]

      @api_client.build_api_request(
        http_method: :"POST",
        path: local_var_path,
        operation: "PlaidApi.credit_bank_income_webhook_update",
        post_body: post_body,
        auth_names: auth_names,
        header_params: header_params,
        cookie_params: cookie_params,
        query_params: query_params,
        form_params: form_params
      )
    end

    # Retrieve data for a user's uploaded bank statements
    # `/credit/bank_statements/uploads/get` returns parsed data from bank statements uploaded by users as part of the Document Income flow. If your account is not enabled for Document Parsing, contact your account manager to request access.
    # @required @param credit_bank_statements_uploads_get_request [Plaid::CreditBankStatementsUploadsGetRequest?]
    # @return [CreditBankStatementsUploadsGetResponse]
    def credit_bank_statements_uploads_get(
      *,
      credit_bank_statements_uploads_get_request : Plaid::CreditBankStatementsUploadsGetRequest? = nil
    ) : CreditBankStatementsUploadsGetResponse
      data, _status_code, _headers = credit_bank_statements_uploads_get_with_http_info(credit_bank_statements_uploads_get_request: credit_bank_statements_uploads_get_request)
      data
    end

    # Retrieve data for a user&#39;s uploaded bank statements
    # &#x60;/credit/bank_statements/uploads/get&#x60; returns parsed data from bank statements uploaded by users as part of the Document Income flow. If your account is not enabled for Document Parsing, contact your account manager to request access.
    # @required @param credit_bank_statements_uploads_get_request [Plaid::CreditBankStatementsUploadsGetRequest?]
    # @return [Tuple(CreditBankStatementsUploadsGetResponse, Integer, Hash)] CreditBankStatementsUploadsGetResponse, response status code and response headers
    def credit_bank_statements_uploads_get_with_http_info(
      *,
      credit_bank_statements_uploads_get_request : Plaid::CreditBankStatementsUploadsGetRequest? = nil
    ) : Tuple(CreditBankStatementsUploadsGetResponse, Int32, Hash(String, Array(String) | String))
      request = build_api_request_for_credit_bank_statements_uploads_get(credit_bank_statements_uploads_get_request: credit_bank_statements_uploads_get_request)

      body, status_code, headers = @api_client.execute_api_request(request)

      if debugging?
        Log.debug { "API called: PlaidApi#credit_bank_statements_uploads_get\nBody: #{body.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}" }
      end

      Tuple.new(CreditBankStatementsUploadsGetResponse.from_json(body), status_code, headers)
    end

    # Retrieve data for a user&#39;s uploaded bank statements
    # &#x60;/credit/bank_statements/uploads/get&#x60; returns parsed data from bank statements uploaded by users as part of the Document Income flow. If your account is not enabled for Document Parsing, contact your account manager to request access.
    # @required @param credit_bank_statements_uploads_get_request [Plaid::CreditBankStatementsUploadsGetRequest?]
    # @return nil
    def credit_bank_statements_uploads_get(
      *,
      credit_bank_statements_uploads_get_request : Plaid::CreditBankStatementsUploadsGetRequest? = nil,
      &block : Crest::Response ->
    ) : Nil
      build_api_request_for_credit_bank_statements_uploads_get(credit_bank_statements_uploads_get_request: credit_bank_statements_uploads_get_request).execute(&block)
    end

    # @return Crest::Request
    def build_api_request_for_credit_bank_statements_uploads_get(
      *,
      credit_bank_statements_uploads_get_request : Plaid::CreditBankStatementsUploadsGetRequest? = nil
    ) : Crest::Request
      if debugging?
        Log.debug { "Calling API: PlaidApi.credit_bank_statements_uploads_get ..." }
      end

      if client_side_validation?
        raise ArgumentError.new("\"credit_bank_statements_uploads_get_request\" is required and cannot be null") if credit_bank_statements_uploads_get_request.nil?
        unless (_credit_bank_statements_uploads_get_request = credit_bank_statements_uploads_get_request).nil?
          _credit_bank_statements_uploads_get_request.validate if _credit_bank_statements_uploads_get_request.is_a?(OpenApi::Validatable)
        end
      end

      # resource path
      local_var_path = "/credit/bank_statements/uploads/get"

      # header parameters
      header_params : Hash(String, String) = Hash(String, String).new
      # HTTP header "Accept" (if needed)
      header_params["Accept"] = @api_client.select_header_accept(["application/json"])
      # HTTP header "Content-Type"
      header_params["Content-Type"] = @api_client.select_header_content_type(["application/json"])

      # cookie parameters
      cookie_params : Hash(String, String) = Hash(String, String).new

      # query parameters
      query_params : Hash(String, (String | Array(String) | JSON::Any)) = Hash(String, (String | Array(String) | JSON::Any)).new

      # form parameters
      form_params : Array(Tuple(String, Crest::ParamsValue)) | Nil = nil

      # http body (model)
      post_body : IO | String | Nil = @api_client.encode(body: credit_bank_statements_uploads_get_request, content_type: header_params["Content-Type"]?) if !credit_bank_statements_uploads_get_request.nil?

      # auth_names
      auth_names = ["clientId", "plaidVersion", "secret"]

      @api_client.build_api_request(
        http_method: :"POST",
        path: local_var_path,
        operation: "PlaidApi.credit_bank_statements_uploads_get",
        post_body: post_body,
        auth_names: auth_names,
        header_params: header_params,
        cookie_params: cookie_params,
        query_params: query_params,
        form_params: form_params
      )
    end

    # Retrieve a summary of an individual's employment information
    # `/credit/employment/get` returns a list of items with employment information from a user's payroll provider that was verified by an end user.
    # @required @param credit_employment_get_request [Plaid::CreditEmploymentGetRequest?]
    # @return [CreditEmploymentGetResponse]
    def credit_employment_get(
      *,
      credit_employment_get_request : Plaid::CreditEmploymentGetRequest? = nil
    ) : CreditEmploymentGetResponse
      data, _status_code, _headers = credit_employment_get_with_http_info(credit_employment_get_request: credit_employment_get_request)
      data
    end

    # Retrieve a summary of an individual&#39;s employment information
    # &#x60;/credit/employment/get&#x60; returns a list of items with employment information from a user&#39;s payroll provider that was verified by an end user.
    # @required @param credit_employment_get_request [Plaid::CreditEmploymentGetRequest?]
    # @return [Tuple(CreditEmploymentGetResponse, Integer, Hash)] CreditEmploymentGetResponse, response status code and response headers
    def credit_employment_get_with_http_info(
      *,
      credit_employment_get_request : Plaid::CreditEmploymentGetRequest? = nil
    ) : Tuple(CreditEmploymentGetResponse, Int32, Hash(String, Array(String) | String))
      request = build_api_request_for_credit_employment_get(credit_employment_get_request: credit_employment_get_request)

      body, status_code, headers = @api_client.execute_api_request(request)

      if debugging?
        Log.debug { "API called: PlaidApi#credit_employment_get\nBody: #{body.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}" }
      end

      Tuple.new(CreditEmploymentGetResponse.from_json(body), status_code, headers)
    end

    # Retrieve a summary of an individual&#39;s employment information
    # &#x60;/credit/employment/get&#x60; returns a list of items with employment information from a user&#39;s payroll provider that was verified by an end user.
    # @required @param credit_employment_get_request [Plaid::CreditEmploymentGetRequest?]
    # @return nil
    def credit_employment_get(
      *,
      credit_employment_get_request : Plaid::CreditEmploymentGetRequest? = nil,
      &block : Crest::Response ->
    ) : Nil
      build_api_request_for_credit_employment_get(credit_employment_get_request: credit_employment_get_request).execute(&block)
    end

    # @return Crest::Request
    def build_api_request_for_credit_employment_get(
      *,
      credit_employment_get_request : Plaid::CreditEmploymentGetRequest? = nil
    ) : Crest::Request
      if debugging?
        Log.debug { "Calling API: PlaidApi.credit_employment_get ..." }
      end

      if client_side_validation?
        raise ArgumentError.new("\"credit_employment_get_request\" is required and cannot be null") if credit_employment_get_request.nil?
        unless (_credit_employment_get_request = credit_employment_get_request).nil?
          _credit_employment_get_request.validate if _credit_employment_get_request.is_a?(OpenApi::Validatable)
        end
      end

      # resource path
      local_var_path = "/credit/employment/get"

      # header parameters
      header_params : Hash(String, String) = Hash(String, String).new
      # HTTP header "Accept" (if needed)
      header_params["Accept"] = @api_client.select_header_accept(["application/json"])
      # HTTP header "Content-Type"
      header_params["Content-Type"] = @api_client.select_header_content_type(["application/json"])

      # cookie parameters
      cookie_params : Hash(String, String) = Hash(String, String).new

      # query parameters
      query_params : Hash(String, (String | Array(String) | JSON::Any)) = Hash(String, (String | Array(String) | JSON::Any)).new

      # form parameters
      form_params : Array(Tuple(String, Crest::ParamsValue)) | Nil = nil

      # http body (model)
      post_body : IO | String | Nil = @api_client.encode(body: credit_employment_get_request, content_type: header_params["Content-Type"]?) if !credit_employment_get_request.nil?

      # auth_names
      auth_names = ["clientId", "plaidVersion", "secret"]

      @api_client.build_api_request(
        http_method: :"POST",
        path: local_var_path,
        operation: "PlaidApi.credit_employment_get",
        post_body: post_body,
        auth_names: auth_names,
        header_params: header_params,
        cookie_params: cookie_params,
        query_params: query_params,
        form_params: form_params
      )
    end

    # Retrieve an Asset Report with Freddie Mac format (aka VOA - Verification Of Assets), and a Verification Of Employment (VOE) report if this one is available. Only Freddie Mac can use this endpoint.
    # The `credit/asset_report/freddie_mac/get` endpoint retrieves the Verification of Assets and Verification of Employment reports.
    # @required @param credit_freddie_mac_reports_get_request [Plaid::CreditFreddieMacReportsGetRequest?]
    # @return [CreditFreddieMacReportsGetResponse]
    def credit_freddie_mac_reports_get(
      *,
      credit_freddie_mac_reports_get_request : Plaid::CreditFreddieMacReportsGetRequest? = nil
    ) : CreditFreddieMacReportsGetResponse
      data, _status_code, _headers = credit_freddie_mac_reports_get_with_http_info(credit_freddie_mac_reports_get_request: credit_freddie_mac_reports_get_request)
      data
    end

    # Retrieve an Asset Report with Freddie Mac format (aka VOA - Verification Of Assets), and a Verification Of Employment (VOE) report if this one is available. Only Freddie Mac can use this endpoint.
    # The &#x60;credit/asset_report/freddie_mac/get&#x60; endpoint retrieves the Verification of Assets and Verification of Employment reports.
    # @required @param credit_freddie_mac_reports_get_request [Plaid::CreditFreddieMacReportsGetRequest?]
    # @return [Tuple(CreditFreddieMacReportsGetResponse, Integer, Hash)] CreditFreddieMacReportsGetResponse, response status code and response headers
    def credit_freddie_mac_reports_get_with_http_info(
      *,
      credit_freddie_mac_reports_get_request : Plaid::CreditFreddieMacReportsGetRequest? = nil
    ) : Tuple(CreditFreddieMacReportsGetResponse, Int32, Hash(String, Array(String) | String))
      request = build_api_request_for_credit_freddie_mac_reports_get(credit_freddie_mac_reports_get_request: credit_freddie_mac_reports_get_request)

      body, status_code, headers = @api_client.execute_api_request(request)

      if debugging?
        Log.debug { "API called: PlaidApi#credit_freddie_mac_reports_get\nBody: #{body.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}" }
      end

      Tuple.new(CreditFreddieMacReportsGetResponse.from_json(body), status_code, headers)
    end

    # Retrieve an Asset Report with Freddie Mac format (aka VOA - Verification Of Assets), and a Verification Of Employment (VOE) report if this one is available. Only Freddie Mac can use this endpoint.
    # The &#x60;credit/asset_report/freddie_mac/get&#x60; endpoint retrieves the Verification of Assets and Verification of Employment reports.
    # @required @param credit_freddie_mac_reports_get_request [Plaid::CreditFreddieMacReportsGetRequest?]
    # @return nil
    def credit_freddie_mac_reports_get(
      *,
      credit_freddie_mac_reports_get_request : Plaid::CreditFreddieMacReportsGetRequest? = nil,
      &block : Crest::Response ->
    ) : Nil
      build_api_request_for_credit_freddie_mac_reports_get(credit_freddie_mac_reports_get_request: credit_freddie_mac_reports_get_request).execute(&block)
    end

    # @return Crest::Request
    def build_api_request_for_credit_freddie_mac_reports_get(
      *,
      credit_freddie_mac_reports_get_request : Plaid::CreditFreddieMacReportsGetRequest? = nil
    ) : Crest::Request
      if debugging?
        Log.debug { "Calling API: PlaidApi.credit_freddie_mac_reports_get ..." }
      end

      if client_side_validation?
        raise ArgumentError.new("\"credit_freddie_mac_reports_get_request\" is required and cannot be null") if credit_freddie_mac_reports_get_request.nil?
        unless (_credit_freddie_mac_reports_get_request = credit_freddie_mac_reports_get_request).nil?
          _credit_freddie_mac_reports_get_request.validate if _credit_freddie_mac_reports_get_request.is_a?(OpenApi::Validatable)
        end
      end

      # resource path
      local_var_path = "/credit/freddie_mac/reports/get"

      # header parameters
      header_params : Hash(String, String) = Hash(String, String).new
      # HTTP header "Accept" (if needed)
      header_params["Accept"] = @api_client.select_header_accept(["application/json"])
      # HTTP header "Content-Type"
      header_params["Content-Type"] = @api_client.select_header_content_type(["application/json"])

      # cookie parameters
      cookie_params : Hash(String, String) = Hash(String, String).new

      # query parameters
      query_params : Hash(String, (String | Array(String) | JSON::Any)) = Hash(String, (String | Array(String) | JSON::Any)).new

      # form parameters
      form_params : Array(Tuple(String, Crest::ParamsValue)) | Nil = nil

      # http body (model)
      post_body : IO | String | Nil = @api_client.encode(body: credit_freddie_mac_reports_get_request, content_type: header_params["Content-Type"]?) if !credit_freddie_mac_reports_get_request.nil?

      # auth_names
      auth_names = ["clientId", "plaidVersion", "secret"]

      @api_client.build_api_request(
        http_method: :"POST",
        path: local_var_path,
        operation: "PlaidApi.credit_freddie_mac_reports_get",
        post_body: post_body,
        auth_names: auth_names,
        header_params: header_params,
        cookie_params: cookie_params,
        query_params: query_params,
        form_params: form_params
      )
    end

    # Retrieve a user's payroll information
    # This endpoint gets payroll income information for a specific user, either as a result of the user connecting to their payroll provider or uploading a pay related document.
    # @required @param credit_payroll_income_get_request [Plaid::CreditPayrollIncomeGetRequest?]
    # @return [CreditPayrollIncomeGetResponse]
    def credit_payroll_income_get(
      *,
      credit_payroll_income_get_request : Plaid::CreditPayrollIncomeGetRequest? = nil
    ) : CreditPayrollIncomeGetResponse
      data, _status_code, _headers = credit_payroll_income_get_with_http_info(credit_payroll_income_get_request: credit_payroll_income_get_request)
      data
    end

    # Retrieve a user&#39;s payroll information
    # This endpoint gets payroll income information for a specific user, either as a result of the user connecting to their payroll provider or uploading a pay related document.
    # @required @param credit_payroll_income_get_request [Plaid::CreditPayrollIncomeGetRequest?]
    # @return [Tuple(CreditPayrollIncomeGetResponse, Integer, Hash)] CreditPayrollIncomeGetResponse, response status code and response headers
    def credit_payroll_income_get_with_http_info(
      *,
      credit_payroll_income_get_request : Plaid::CreditPayrollIncomeGetRequest? = nil
    ) : Tuple(CreditPayrollIncomeGetResponse, Int32, Hash(String, Array(String) | String))
      request = build_api_request_for_credit_payroll_income_get(credit_payroll_income_get_request: credit_payroll_income_get_request)

      body, status_code, headers = @api_client.execute_api_request(request)

      if debugging?
        Log.debug { "API called: PlaidApi#credit_payroll_income_get\nBody: #{body.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}" }
      end

      Tuple.new(CreditPayrollIncomeGetResponse.from_json(body), status_code, headers)
    end

    # Retrieve a user&#39;s payroll information
    # This endpoint gets payroll income information for a specific user, either as a result of the user connecting to their payroll provider or uploading a pay related document.
    # @required @param credit_payroll_income_get_request [Plaid::CreditPayrollIncomeGetRequest?]
    # @return nil
    def credit_payroll_income_get(
      *,
      credit_payroll_income_get_request : Plaid::CreditPayrollIncomeGetRequest? = nil,
      &block : Crest::Response ->
    ) : Nil
      build_api_request_for_credit_payroll_income_get(credit_payroll_income_get_request: credit_payroll_income_get_request).execute(&block)
    end

    # @return Crest::Request
    def build_api_request_for_credit_payroll_income_get(
      *,
      credit_payroll_income_get_request : Plaid::CreditPayrollIncomeGetRequest? = nil
    ) : Crest::Request
      if debugging?
        Log.debug { "Calling API: PlaidApi.credit_payroll_income_get ..." }
      end

      if client_side_validation?
        raise ArgumentError.new("\"credit_payroll_income_get_request\" is required and cannot be null") if credit_payroll_income_get_request.nil?
        unless (_credit_payroll_income_get_request = credit_payroll_income_get_request).nil?
          _credit_payroll_income_get_request.validate if _credit_payroll_income_get_request.is_a?(OpenApi::Validatable)
        end
      end

      # resource path
      local_var_path = "/credit/payroll_income/get"

      # header parameters
      header_params : Hash(String, String) = Hash(String, String).new
      # HTTP header "Accept" (if needed)
      header_params["Accept"] = @api_client.select_header_accept(["application/json"])
      # HTTP header "Content-Type"
      header_params["Content-Type"] = @api_client.select_header_content_type(["application/json"])

      # cookie parameters
      cookie_params : Hash(String, String) = Hash(String, String).new

      # query parameters
      query_params : Hash(String, (String | Array(String) | JSON::Any)) = Hash(String, (String | Array(String) | JSON::Any)).new

      # form parameters
      form_params : Array(Tuple(String, Crest::ParamsValue)) | Nil = nil

      # http body (model)
      post_body : IO | String | Nil = @api_client.encode(body: credit_payroll_income_get_request, content_type: header_params["Content-Type"]?) if !credit_payroll_income_get_request.nil?

      # auth_names
      auth_names = ["clientId", "plaidVersion", "secret"]

      @api_client.build_api_request(
        http_method: :"POST",
        path: local_var_path,
        operation: "PlaidApi.credit_payroll_income_get",
        post_body: post_body,
        auth_names: auth_names,
        header_params: header_params,
        cookie_params: cookie_params,
        query_params: query_params,
        form_params: form_params
      )
    end

    # Update the parsing configuration for a document income verification
    # `/credit/payroll_income/parsing_config/update` updates the parsing configuration for a document income verification.
    # @required @param credit_payroll_income_parsing_config_update_request [Plaid::CreditPayrollIncomeParsingConfigUpdateRequest?]
    # @return [CreditPayrollIncomeParsingConfigUpdateResponse]
    def credit_payroll_income_parsing_config_update(
      *,
      credit_payroll_income_parsing_config_update_request : Plaid::CreditPayrollIncomeParsingConfigUpdateRequest? = nil
    ) : CreditPayrollIncomeParsingConfigUpdateResponse
      data, _status_code, _headers = credit_payroll_income_parsing_config_update_with_http_info(credit_payroll_income_parsing_config_update_request: credit_payroll_income_parsing_config_update_request)
      data
    end

    # Update the parsing configuration for a document income verification
    # &#x60;/credit/payroll_income/parsing_config/update&#x60; updates the parsing configuration for a document income verification.
    # @required @param credit_payroll_income_parsing_config_update_request [Plaid::CreditPayrollIncomeParsingConfigUpdateRequest?]
    # @return [Tuple(CreditPayrollIncomeParsingConfigUpdateResponse, Integer, Hash)] CreditPayrollIncomeParsingConfigUpdateResponse, response status code and response headers
    def credit_payroll_income_parsing_config_update_with_http_info(
      *,
      credit_payroll_income_parsing_config_update_request : Plaid::CreditPayrollIncomeParsingConfigUpdateRequest? = nil
    ) : Tuple(CreditPayrollIncomeParsingConfigUpdateResponse, Int32, Hash(String, Array(String) | String))
      request = build_api_request_for_credit_payroll_income_parsing_config_update(credit_payroll_income_parsing_config_update_request: credit_payroll_income_parsing_config_update_request)

      body, status_code, headers = @api_client.execute_api_request(request)

      if debugging?
        Log.debug { "API called: PlaidApi#credit_payroll_income_parsing_config_update\nBody: #{body.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}" }
      end

      Tuple.new(CreditPayrollIncomeParsingConfigUpdateResponse.from_json(body), status_code, headers)
    end

    # Update the parsing configuration for a document income verification
    # &#x60;/credit/payroll_income/parsing_config/update&#x60; updates the parsing configuration for a document income verification.
    # @required @param credit_payroll_income_parsing_config_update_request [Plaid::CreditPayrollIncomeParsingConfigUpdateRequest?]
    # @return nil
    def credit_payroll_income_parsing_config_update(
      *,
      credit_payroll_income_parsing_config_update_request : Plaid::CreditPayrollIncomeParsingConfigUpdateRequest? = nil,
      &block : Crest::Response ->
    ) : Nil
      build_api_request_for_credit_payroll_income_parsing_config_update(credit_payroll_income_parsing_config_update_request: credit_payroll_income_parsing_config_update_request).execute(&block)
    end

    # @return Crest::Request
    def build_api_request_for_credit_payroll_income_parsing_config_update(
      *,
      credit_payroll_income_parsing_config_update_request : Plaid::CreditPayrollIncomeParsingConfigUpdateRequest? = nil
    ) : Crest::Request
      if debugging?
        Log.debug { "Calling API: PlaidApi.credit_payroll_income_parsing_config_update ..." }
      end

      if client_side_validation?
        raise ArgumentError.new("\"credit_payroll_income_parsing_config_update_request\" is required and cannot be null") if credit_payroll_income_parsing_config_update_request.nil?
        unless (_credit_payroll_income_parsing_config_update_request = credit_payroll_income_parsing_config_update_request).nil?
          _credit_payroll_income_parsing_config_update_request.validate if _credit_payroll_income_parsing_config_update_request.is_a?(OpenApi::Validatable)
        end
      end

      # resource path
      local_var_path = "/credit/payroll_income/parsing_config/update"

      # header parameters
      header_params : Hash(String, String) = Hash(String, String).new
      # HTTP header "Accept" (if needed)
      header_params["Accept"] = @api_client.select_header_accept(["application/json"])
      # HTTP header "Content-Type"
      header_params["Content-Type"] = @api_client.select_header_content_type(["application/json"])

      # cookie parameters
      cookie_params : Hash(String, String) = Hash(String, String).new

      # query parameters
      query_params : Hash(String, (String | Array(String) | JSON::Any)) = Hash(String, (String | Array(String) | JSON::Any)).new

      # form parameters
      form_params : Array(Tuple(String, Crest::ParamsValue)) | Nil = nil

      # http body (model)
      post_body : IO | String | Nil = @api_client.encode(body: credit_payroll_income_parsing_config_update_request, content_type: header_params["Content-Type"]?) if !credit_payroll_income_parsing_config_update_request.nil?

      # auth_names
      auth_names = ["clientId", "plaidVersion", "secret"]

      @api_client.build_api_request(
        http_method: :"POST",
        path: local_var_path,
        operation: "PlaidApi.credit_payroll_income_parsing_config_update",
        post_body: post_body,
        auth_names: auth_names,
        header_params: header_params,
        cookie_params: cookie_params,
        query_params: query_params,
        form_params: form_params
      )
    end

    # Check income verification eligibility and optimize conversion
    # `/credit/payroll_income/precheck` is an optional endpoint that can be called before initializing a Link session for income verification. It evaluates whether a given user is supportable by digital income verification. If the user is eligible for digital verification, that information will be associated with the user token, and in this way will generate a Link UI optimized for the end user and their specific employer. If the user cannot be confirmed as eligible, the user can still use the income verification flow, but they may be required to manually upload a paystub to verify their income.  While all request fields are optional, providing `employer` data will increase the chance of receiving a useful result.  When testing in Sandbox, you can control the results by providing special test values in the `employer` and `access_tokens` fields. `employer_good` and `employer_bad` will result in `HIGH` and `LOW` confidence values, respectively. `employer_multi` will result in a `HIGH` confidence with multiple payroll options. Likewise, `access_good` and `access_bad` will result in `HIGH` and `LOW` confidence values, respectively. Any other value for `employer` and `access_tokens` in Sandbox will result in `UNKNOWN` confidence.
    # @required @param credit_payroll_income_precheck_request [Plaid::CreditPayrollIncomePrecheckRequest?]
    # @return [CreditPayrollIncomePrecheckResponse]
    def credit_payroll_income_precheck(
      *,
      credit_payroll_income_precheck_request : Plaid::CreditPayrollIncomePrecheckRequest? = nil
    ) : CreditPayrollIncomePrecheckResponse
      data, _status_code, _headers = credit_payroll_income_precheck_with_http_info(credit_payroll_income_precheck_request: credit_payroll_income_precheck_request)
      data
    end

    # Check income verification eligibility and optimize conversion
    # &#x60;/credit/payroll_income/precheck&#x60; is an optional endpoint that can be called before initializing a Link session for income verification. It evaluates whether a given user is supportable by digital income verification. If the user is eligible for digital verification, that information will be associated with the user token, and in this way will generate a Link UI optimized for the end user and their specific employer. If the user cannot be confirmed as eligible, the user can still use the income verification flow, but they may be required to manually upload a paystub to verify their income.  While all request fields are optional, providing &#x60;employer&#x60; data will increase the chance of receiving a useful result.  When testing in Sandbox, you can control the results by providing special test values in the &#x60;employer&#x60; and &#x60;access_tokens&#x60; fields. &#x60;employer_good&#x60; and &#x60;employer_bad&#x60; will result in &#x60;HIGH&#x60; and &#x60;LOW&#x60; confidence values, respectively. &#x60;employer_multi&#x60; will result in a &#x60;HIGH&#x60; confidence with multiple payroll options. Likewise, &#x60;access_good&#x60; and &#x60;access_bad&#x60; will result in &#x60;HIGH&#x60; and &#x60;LOW&#x60; confidence values, respectively. Any other value for &#x60;employer&#x60; and &#x60;access_tokens&#x60; in Sandbox will result in &#x60;UNKNOWN&#x60; confidence.
    # @required @param credit_payroll_income_precheck_request [Plaid::CreditPayrollIncomePrecheckRequest?]
    # @return [Tuple(CreditPayrollIncomePrecheckResponse, Integer, Hash)] CreditPayrollIncomePrecheckResponse, response status code and response headers
    def credit_payroll_income_precheck_with_http_info(
      *,
      credit_payroll_income_precheck_request : Plaid::CreditPayrollIncomePrecheckRequest? = nil
    ) : Tuple(CreditPayrollIncomePrecheckResponse, Int32, Hash(String, Array(String) | String))
      request = build_api_request_for_credit_payroll_income_precheck(credit_payroll_income_precheck_request: credit_payroll_income_precheck_request)

      body, status_code, headers = @api_client.execute_api_request(request)

      if debugging?
        Log.debug { "API called: PlaidApi#credit_payroll_income_precheck\nBody: #{body.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}" }
      end

      Tuple.new(CreditPayrollIncomePrecheckResponse.from_json(body), status_code, headers)
    end

    # Check income verification eligibility and optimize conversion
    # &#x60;/credit/payroll_income/precheck&#x60; is an optional endpoint that can be called before initializing a Link session for income verification. It evaluates whether a given user is supportable by digital income verification. If the user is eligible for digital verification, that information will be associated with the user token, and in this way will generate a Link UI optimized for the end user and their specific employer. If the user cannot be confirmed as eligible, the user can still use the income verification flow, but they may be required to manually upload a paystub to verify their income.  While all request fields are optional, providing &#x60;employer&#x60; data will increase the chance of receiving a useful result.  When testing in Sandbox, you can control the results by providing special test values in the &#x60;employer&#x60; and &#x60;access_tokens&#x60; fields. &#x60;employer_good&#x60; and &#x60;employer_bad&#x60; will result in &#x60;HIGH&#x60; and &#x60;LOW&#x60; confidence values, respectively. &#x60;employer_multi&#x60; will result in a &#x60;HIGH&#x60; confidence with multiple payroll options. Likewise, &#x60;access_good&#x60; and &#x60;access_bad&#x60; will result in &#x60;HIGH&#x60; and &#x60;LOW&#x60; confidence values, respectively. Any other value for &#x60;employer&#x60; and &#x60;access_tokens&#x60; in Sandbox will result in &#x60;UNKNOWN&#x60; confidence.
    # @required @param credit_payroll_income_precheck_request [Plaid::CreditPayrollIncomePrecheckRequest?]
    # @return nil
    def credit_payroll_income_precheck(
      *,
      credit_payroll_income_precheck_request : Plaid::CreditPayrollIncomePrecheckRequest? = nil,
      &block : Crest::Response ->
    ) : Nil
      build_api_request_for_credit_payroll_income_precheck(credit_payroll_income_precheck_request: credit_payroll_income_precheck_request).execute(&block)
    end

    # @return Crest::Request
    def build_api_request_for_credit_payroll_income_precheck(
      *,
      credit_payroll_income_precheck_request : Plaid::CreditPayrollIncomePrecheckRequest? = nil
    ) : Crest::Request
      if debugging?
        Log.debug { "Calling API: PlaidApi.credit_payroll_income_precheck ..." }
      end

      if client_side_validation?
        raise ArgumentError.new("\"credit_payroll_income_precheck_request\" is required and cannot be null") if credit_payroll_income_precheck_request.nil?
        unless (_credit_payroll_income_precheck_request = credit_payroll_income_precheck_request).nil?
          _credit_payroll_income_precheck_request.validate if _credit_payroll_income_precheck_request.is_a?(OpenApi::Validatable)
        end
      end

      # resource path
      local_var_path = "/credit/payroll_income/precheck"

      # header parameters
      header_params : Hash(String, String) = Hash(String, String).new
      # HTTP header "Accept" (if needed)
      header_params["Accept"] = @api_client.select_header_accept(["application/json"])
      # HTTP header "Content-Type"
      header_params["Content-Type"] = @api_client.select_header_content_type(["application/json"])

      # cookie parameters
      cookie_params : Hash(String, String) = Hash(String, String).new

      # query parameters
      query_params : Hash(String, (String | Array(String) | JSON::Any)) = Hash(String, (String | Array(String) | JSON::Any)).new

      # form parameters
      form_params : Array(Tuple(String, Crest::ParamsValue)) | Nil = nil

      # http body (model)
      post_body : IO | String | Nil = @api_client.encode(body: credit_payroll_income_precheck_request, content_type: header_params["Content-Type"]?) if !credit_payroll_income_precheck_request.nil?

      # auth_names
      auth_names = ["clientId", "plaidVersion", "secret"]

      @api_client.build_api_request(
        http_method: :"POST",
        path: local_var_path,
        operation: "PlaidApi.credit_payroll_income_precheck",
        post_body: post_body,
        auth_names: auth_names,
        header_params: header_params,
        cookie_params: cookie_params,
        query_params: query_params,
        form_params: form_params
      )
    end

    # Refresh a digital payroll income verification
    # `/credit/payroll_income/refresh` refreshes a given digital payroll income verification.
    # @required @param credit_payroll_income_refresh_request [Plaid::CreditPayrollIncomeRefreshRequest?]
    # @return [CreditPayrollIncomeRefreshResponse]
    def credit_payroll_income_refresh(
      *,
      credit_payroll_income_refresh_request : Plaid::CreditPayrollIncomeRefreshRequest? = nil
    ) : CreditPayrollIncomeRefreshResponse
      data, _status_code, _headers = credit_payroll_income_refresh_with_http_info(credit_payroll_income_refresh_request: credit_payroll_income_refresh_request)
      data
    end

    # Refresh a digital payroll income verification
    # &#x60;/credit/payroll_income/refresh&#x60; refreshes a given digital payroll income verification.
    # @required @param credit_payroll_income_refresh_request [Plaid::CreditPayrollIncomeRefreshRequest?]
    # @return [Tuple(CreditPayrollIncomeRefreshResponse, Integer, Hash)] CreditPayrollIncomeRefreshResponse, response status code and response headers
    def credit_payroll_income_refresh_with_http_info(
      *,
      credit_payroll_income_refresh_request : Plaid::CreditPayrollIncomeRefreshRequest? = nil
    ) : Tuple(CreditPayrollIncomeRefreshResponse, Int32, Hash(String, Array(String) | String))
      request = build_api_request_for_credit_payroll_income_refresh(credit_payroll_income_refresh_request: credit_payroll_income_refresh_request)

      body, status_code, headers = @api_client.execute_api_request(request)

      if debugging?
        Log.debug { "API called: PlaidApi#credit_payroll_income_refresh\nBody: #{body.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}" }
      end

      Tuple.new(CreditPayrollIncomeRefreshResponse.from_json(body), status_code, headers)
    end

    # Refresh a digital payroll income verification
    # &#x60;/credit/payroll_income/refresh&#x60; refreshes a given digital payroll income verification.
    # @required @param credit_payroll_income_refresh_request [Plaid::CreditPayrollIncomeRefreshRequest?]
    # @return nil
    def credit_payroll_income_refresh(
      *,
      credit_payroll_income_refresh_request : Plaid::CreditPayrollIncomeRefreshRequest? = nil,
      &block : Crest::Response ->
    ) : Nil
      build_api_request_for_credit_payroll_income_refresh(credit_payroll_income_refresh_request: credit_payroll_income_refresh_request).execute(&block)
    end

    # @return Crest::Request
    def build_api_request_for_credit_payroll_income_refresh(
      *,
      credit_payroll_income_refresh_request : Plaid::CreditPayrollIncomeRefreshRequest? = nil
    ) : Crest::Request
      if debugging?
        Log.debug { "Calling API: PlaidApi.credit_payroll_income_refresh ..." }
      end

      if client_side_validation?
        raise ArgumentError.new("\"credit_payroll_income_refresh_request\" is required and cannot be null") if credit_payroll_income_refresh_request.nil?
        unless (_credit_payroll_income_refresh_request = credit_payroll_income_refresh_request).nil?
          _credit_payroll_income_refresh_request.validate if _credit_payroll_income_refresh_request.is_a?(OpenApi::Validatable)
        end
      end

      # resource path
      local_var_path = "/credit/payroll_income/refresh"

      # header parameters
      header_params : Hash(String, String) = Hash(String, String).new
      # HTTP header "Accept" (if needed)
      header_params["Accept"] = @api_client.select_header_accept(["application/json"])
      # HTTP header "Content-Type"
      header_params["Content-Type"] = @api_client.select_header_content_type(["application/json"])

      # cookie parameters
      cookie_params : Hash(String, String) = Hash(String, String).new

      # query parameters
      query_params : Hash(String, (String | Array(String) | JSON::Any)) = Hash(String, (String | Array(String) | JSON::Any)).new

      # form parameters
      form_params : Array(Tuple(String, Crest::ParamsValue)) | Nil = nil

      # http body (model)
      post_body : IO | String | Nil = @api_client.encode(body: credit_payroll_income_refresh_request, content_type: header_params["Content-Type"]?) if !credit_payroll_income_refresh_request.nil?

      # auth_names
      auth_names = ["clientId", "plaidVersion", "secret"]

      @api_client.build_api_request(
        http_method: :"POST",
        path: local_var_path,
        operation: "PlaidApi.credit_payroll_income_refresh",
        post_body: post_body,
        auth_names: auth_names,
        header_params: header_params,
        cookie_params: cookie_params,
        query_params: query_params,
        form_params: form_params
      )
    end

    # Retrieve fraud insights for a user's manually uploaded document(s).
    # `/credit/payroll_income/risk_signals/get` can be used as part of the Document Income flow to assess a user-uploaded document for signs of potential fraud or tampering. It returns a risk score for each uploaded document that indicates the likelihood of the document being fraudulent, in addition to details on the individual risk signals contributing to the score.  To trigger risk signal generation for an Item, call `/link/token/create` with `parsing_config` set to include `fraud_risk`, or call `/credit/payroll_income/parsing_config/update`. Once risk signal generation has been triggered, `/credit/payroll_income/risk_signals/get` can be called at any time after the `INCOME_VERIFICATION_RISK_SIGNALS` webhook has been fired.  `/credit/payroll_income/risk_signals/get` is offered as an add-on to Document Income and is billed separately. To request access to this endpoint, submit a product access request or contact your Plaid account manager.
    # @required @param credit_payroll_income_risk_signals_get_request [Plaid::CreditPayrollIncomeRiskSignalsGetRequest?]
    # @return [CreditPayrollIncomeRiskSignalsGetResponse]
    def credit_payroll_income_risk_signals_get(
      *,
      credit_payroll_income_risk_signals_get_request : Plaid::CreditPayrollIncomeRiskSignalsGetRequest? = nil
    ) : CreditPayrollIncomeRiskSignalsGetResponse
      data, _status_code, _headers = credit_payroll_income_risk_signals_get_with_http_info(credit_payroll_income_risk_signals_get_request: credit_payroll_income_risk_signals_get_request)
      data
    end

    # Retrieve fraud insights for a user&#39;s manually uploaded document(s).
    # &#x60;/credit/payroll_income/risk_signals/get&#x60; can be used as part of the Document Income flow to assess a user-uploaded document for signs of potential fraud or tampering. It returns a risk score for each uploaded document that indicates the likelihood of the document being fraudulent, in addition to details on the individual risk signals contributing to the score.  To trigger risk signal generation for an Item, call &#x60;/link/token/create&#x60; with &#x60;parsing_config&#x60; set to include &#x60;fraud_risk&#x60;, or call &#x60;/credit/payroll_income/parsing_config/update&#x60;. Once risk signal generation has been triggered, &#x60;/credit/payroll_income/risk_signals/get&#x60; can be called at any time after the &#x60;INCOME_VERIFICATION_RISK_SIGNALS&#x60; webhook has been fired.  &#x60;/credit/payroll_income/risk_signals/get&#x60; is offered as an add-on to Document Income and is billed separately. To request access to this endpoint, submit a product access request or contact your Plaid account manager.
    # @required @param credit_payroll_income_risk_signals_get_request [Plaid::CreditPayrollIncomeRiskSignalsGetRequest?]
    # @return [Tuple(CreditPayrollIncomeRiskSignalsGetResponse, Integer, Hash)] CreditPayrollIncomeRiskSignalsGetResponse, response status code and response headers
    def credit_payroll_income_risk_signals_get_with_http_info(
      *,
      credit_payroll_income_risk_signals_get_request : Plaid::CreditPayrollIncomeRiskSignalsGetRequest? = nil
    ) : Tuple(CreditPayrollIncomeRiskSignalsGetResponse, Int32, Hash(String, Array(String) | String))
      request = build_api_request_for_credit_payroll_income_risk_signals_get(credit_payroll_income_risk_signals_get_request: credit_payroll_income_risk_signals_get_request)

      body, status_code, headers = @api_client.execute_api_request(request)

      if debugging?
        Log.debug { "API called: PlaidApi#credit_payroll_income_risk_signals_get\nBody: #{body.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}" }
      end

      Tuple.new(CreditPayrollIncomeRiskSignalsGetResponse.from_json(body), status_code, headers)
    end

    # Retrieve fraud insights for a user&#39;s manually uploaded document(s).
    # &#x60;/credit/payroll_income/risk_signals/get&#x60; can be used as part of the Document Income flow to assess a user-uploaded document for signs of potential fraud or tampering. It returns a risk score for each uploaded document that indicates the likelihood of the document being fraudulent, in addition to details on the individual risk signals contributing to the score.  To trigger risk signal generation for an Item, call &#x60;/link/token/create&#x60; with &#x60;parsing_config&#x60; set to include &#x60;fraud_risk&#x60;, or call &#x60;/credit/payroll_income/parsing_config/update&#x60;. Once risk signal generation has been triggered, &#x60;/credit/payroll_income/risk_signals/get&#x60; can be called at any time after the &#x60;INCOME_VERIFICATION_RISK_SIGNALS&#x60; webhook has been fired.  &#x60;/credit/payroll_income/risk_signals/get&#x60; is offered as an add-on to Document Income and is billed separately. To request access to this endpoint, submit a product access request or contact your Plaid account manager.
    # @required @param credit_payroll_income_risk_signals_get_request [Plaid::CreditPayrollIncomeRiskSignalsGetRequest?]
    # @return nil
    def credit_payroll_income_risk_signals_get(
      *,
      credit_payroll_income_risk_signals_get_request : Plaid::CreditPayrollIncomeRiskSignalsGetRequest? = nil,
      &block : Crest::Response ->
    ) : Nil
      build_api_request_for_credit_payroll_income_risk_signals_get(credit_payroll_income_risk_signals_get_request: credit_payroll_income_risk_signals_get_request).execute(&block)
    end

    # @return Crest::Request
    def build_api_request_for_credit_payroll_income_risk_signals_get(
      *,
      credit_payroll_income_risk_signals_get_request : Plaid::CreditPayrollIncomeRiskSignalsGetRequest? = nil
    ) : Crest::Request
      if debugging?
        Log.debug { "Calling API: PlaidApi.credit_payroll_income_risk_signals_get ..." }
      end

      if client_side_validation?
        raise ArgumentError.new("\"credit_payroll_income_risk_signals_get_request\" is required and cannot be null") if credit_payroll_income_risk_signals_get_request.nil?
        unless (_credit_payroll_income_risk_signals_get_request = credit_payroll_income_risk_signals_get_request).nil?
          _credit_payroll_income_risk_signals_get_request.validate if _credit_payroll_income_risk_signals_get_request.is_a?(OpenApi::Validatable)
        end
      end

      # resource path
      local_var_path = "/credit/payroll_income/risk_signals/get"

      # header parameters
      header_params : Hash(String, String) = Hash(String, String).new
      # HTTP header "Accept" (if needed)
      header_params["Accept"] = @api_client.select_header_accept(["application/json"])
      # HTTP header "Content-Type"
      header_params["Content-Type"] = @api_client.select_header_content_type(["application/json"])

      # cookie parameters
      cookie_params : Hash(String, String) = Hash(String, String).new

      # query parameters
      query_params : Hash(String, (String | Array(String) | JSON::Any)) = Hash(String, (String | Array(String) | JSON::Any)).new

      # form parameters
      form_params : Array(Tuple(String, Crest::ParamsValue)) | Nil = nil

      # http body (model)
      post_body : IO | String | Nil = @api_client.encode(body: credit_payroll_income_risk_signals_get_request, content_type: header_params["Content-Type"]?) if !credit_payroll_income_risk_signals_get_request.nil?

      # auth_names
      auth_names = ["clientId", "plaidVersion", "secret"]

      @api_client.build_api_request(
        http_method: :"POST",
        path: local_var_path,
        operation: "PlaidApi.credit_payroll_income_risk_signals_get",
        post_body: post_body,
        auth_names: auth_names,
        header_params: header_params,
        cookie_params: cookie_params,
        query_params: query_params,
        form_params: form_params
      )
    end

    # Create a relay token to share an Asset Report with a partner client (beta)
    # Plaid can share an Asset Report directly with a participating third party on your behalf. The shared Asset Report is the exact same Asset Report originally created in `/asset_report/create`.  To grant a third party access to an Asset Report, use the `/credit/relay/create` endpoint to create a `relay_token` and then pass that token to your third party. Each third party has its own `secondary_client_id`; for example, `ce5bd328dcd34123456`. You'll need to create a separate `relay_token` for each third party that needs access to the report on your behalf.
    # @required @param credit_relay_create_request [Plaid::CreditRelayCreateRequest?]
    # @return [CreditRelayCreateResponse]
    def credit_relay_create(
      *,
      credit_relay_create_request : Plaid::CreditRelayCreateRequest? = nil
    ) : CreditRelayCreateResponse
      data, _status_code, _headers = credit_relay_create_with_http_info(credit_relay_create_request: credit_relay_create_request)
      data
    end

    # Create a relay token to share an Asset Report with a partner client (beta)
    # Plaid can share an Asset Report directly with a participating third party on your behalf. The shared Asset Report is the exact same Asset Report originally created in &#x60;/asset_report/create&#x60;.  To grant a third party access to an Asset Report, use the &#x60;/credit/relay/create&#x60; endpoint to create a &#x60;relay_token&#x60; and then pass that token to your third party. Each third party has its own &#x60;secondary_client_id&#x60;; for example, &#x60;ce5bd328dcd34123456&#x60;. You&#39;ll need to create a separate &#x60;relay_token&#x60; for each third party that needs access to the report on your behalf.
    # @required @param credit_relay_create_request [Plaid::CreditRelayCreateRequest?]
    # @return [Tuple(CreditRelayCreateResponse, Integer, Hash)] CreditRelayCreateResponse, response status code and response headers
    def credit_relay_create_with_http_info(
      *,
      credit_relay_create_request : Plaid::CreditRelayCreateRequest? = nil
    ) : Tuple(CreditRelayCreateResponse, Int32, Hash(String, Array(String) | String))
      request = build_api_request_for_credit_relay_create(credit_relay_create_request: credit_relay_create_request)

      body, status_code, headers = @api_client.execute_api_request(request)

      if debugging?
        Log.debug { "API called: PlaidApi#credit_relay_create\nBody: #{body.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}" }
      end

      Tuple.new(CreditRelayCreateResponse.from_json(body), status_code, headers)
    end

    # Create a relay token to share an Asset Report with a partner client (beta)
    # Plaid can share an Asset Report directly with a participating third party on your behalf. The shared Asset Report is the exact same Asset Report originally created in &#x60;/asset_report/create&#x60;.  To grant a third party access to an Asset Report, use the &#x60;/credit/relay/create&#x60; endpoint to create a &#x60;relay_token&#x60; and then pass that token to your third party. Each third party has its own &#x60;secondary_client_id&#x60;; for example, &#x60;ce5bd328dcd34123456&#x60;. You&#39;ll need to create a separate &#x60;relay_token&#x60; for each third party that needs access to the report on your behalf.
    # @required @param credit_relay_create_request [Plaid::CreditRelayCreateRequest?]
    # @return nil
    def credit_relay_create(
      *,
      credit_relay_create_request : Plaid::CreditRelayCreateRequest? = nil,
      &block : Crest::Response ->
    ) : Nil
      build_api_request_for_credit_relay_create(credit_relay_create_request: credit_relay_create_request).execute(&block)
    end

    # @return Crest::Request
    def build_api_request_for_credit_relay_create(
      *,
      credit_relay_create_request : Plaid::CreditRelayCreateRequest? = nil
    ) : Crest::Request
      if debugging?
        Log.debug { "Calling API: PlaidApi.credit_relay_create ..." }
      end

      if client_side_validation?
        raise ArgumentError.new("\"credit_relay_create_request\" is required and cannot be null") if credit_relay_create_request.nil?
        unless (_credit_relay_create_request = credit_relay_create_request).nil?
          _credit_relay_create_request.validate if _credit_relay_create_request.is_a?(OpenApi::Validatable)
        end
      end

      # resource path
      local_var_path = "/credit/relay/create"

      # header parameters
      header_params : Hash(String, String) = Hash(String, String).new
      # HTTP header "Accept" (if needed)
      header_params["Accept"] = @api_client.select_header_accept(["application/json"])
      # HTTP header "Content-Type"
      header_params["Content-Type"] = @api_client.select_header_content_type(["application/json"])

      # cookie parameters
      cookie_params : Hash(String, String) = Hash(String, String).new

      # query parameters
      query_params : Hash(String, (String | Array(String) | JSON::Any)) = Hash(String, (String | Array(String) | JSON::Any)).new

      # form parameters
      form_params : Array(Tuple(String, Crest::ParamsValue)) | Nil = nil

      # http body (model)
      post_body : IO | String | Nil = @api_client.encode(body: credit_relay_create_request, content_type: header_params["Content-Type"]?) if !credit_relay_create_request.nil?

      # auth_names
      auth_names = ["clientId", "plaidVersion", "secret"]

      @api_client.build_api_request(
        http_method: :"POST",
        path: local_var_path,
        operation: "PlaidApi.credit_relay_create",
        post_body: post_body,
        auth_names: auth_names,
        header_params: header_params,
        cookie_params: cookie_params,
        query_params: query_params,
        form_params: form_params
      )
    end

    # Retrieve the reports associated with a relay token that was shared with you (beta)
    # `/credit/relay/get` allows third parties to receive a report that was shared with them, using a `relay_token` that was created by the report owner.
    # @required @param credit_relay_get_request [Plaid::CreditRelayGetRequest?]
    # @return [AssetReportGetResponse]
    def credit_relay_get(
      *,
      credit_relay_get_request : Plaid::CreditRelayGetRequest? = nil
    ) : AssetReportGetResponse
      data, _status_code, _headers = credit_relay_get_with_http_info(credit_relay_get_request: credit_relay_get_request)
      data
    end

    # Retrieve the reports associated with a relay token that was shared with you (beta)
    # &#x60;/credit/relay/get&#x60; allows third parties to receive a report that was shared with them, using a &#x60;relay_token&#x60; that was created by the report owner.
    # @required @param credit_relay_get_request [Plaid::CreditRelayGetRequest?]
    # @return [Tuple(AssetReportGetResponse, Integer, Hash)] AssetReportGetResponse, response status code and response headers
    def credit_relay_get_with_http_info(
      *,
      credit_relay_get_request : Plaid::CreditRelayGetRequest? = nil
    ) : Tuple(AssetReportGetResponse, Int32, Hash(String, Array(String) | String))
      request = build_api_request_for_credit_relay_get(credit_relay_get_request: credit_relay_get_request)

      body, status_code, headers = @api_client.execute_api_request(request)

      if debugging?
        Log.debug { "API called: PlaidApi#credit_relay_get\nBody: #{body.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}" }
      end

      Tuple.new(AssetReportGetResponse.from_json(body), status_code, headers)
    end

    # Retrieve the reports associated with a relay token that was shared with you (beta)
    # &#x60;/credit/relay/get&#x60; allows third parties to receive a report that was shared with them, using a &#x60;relay_token&#x60; that was created by the report owner.
    # @required @param credit_relay_get_request [Plaid::CreditRelayGetRequest?]
    # @return nil
    def credit_relay_get(
      *,
      credit_relay_get_request : Plaid::CreditRelayGetRequest? = nil,
      &block : Crest::Response ->
    ) : Nil
      build_api_request_for_credit_relay_get(credit_relay_get_request: credit_relay_get_request).execute(&block)
    end

    # @return Crest::Request
    def build_api_request_for_credit_relay_get(
      *,
      credit_relay_get_request : Plaid::CreditRelayGetRequest? = nil
    ) : Crest::Request
      if debugging?
        Log.debug { "Calling API: PlaidApi.credit_relay_get ..." }
      end

      if client_side_validation?
        raise ArgumentError.new("\"credit_relay_get_request\" is required and cannot be null") if credit_relay_get_request.nil?
        unless (_credit_relay_get_request = credit_relay_get_request).nil?
          _credit_relay_get_request.validate if _credit_relay_get_request.is_a?(OpenApi::Validatable)
        end
      end

      # resource path
      local_var_path = "/credit/relay/get"

      # header parameters
      header_params : Hash(String, String) = Hash(String, String).new
      # HTTP header "Accept" (if needed)
      header_params["Accept"] = @api_client.select_header_accept(["application/json"])
      # HTTP header "Content-Type"
      header_params["Content-Type"] = @api_client.select_header_content_type(["application/json"])

      # cookie parameters
      cookie_params : Hash(String, String) = Hash(String, String).new

      # query parameters
      query_params : Hash(String, (String | Array(String) | JSON::Any)) = Hash(String, (String | Array(String) | JSON::Any)).new

      # form parameters
      form_params : Array(Tuple(String, Crest::ParamsValue)) | Nil = nil

      # http body (model)
      post_body : IO | String | Nil = @api_client.encode(body: credit_relay_get_request, content_type: header_params["Content-Type"]?) if !credit_relay_get_request.nil?

      # auth_names
      auth_names = ["clientId", "plaidVersion", "secret"]

      @api_client.build_api_request(
        http_method: :"POST",
        path: local_var_path,
        operation: "PlaidApi.credit_relay_get",
        post_body: post_body,
        auth_names: auth_names,
        header_params: header_params,
        cookie_params: cookie_params,
        query_params: query_params,
        form_params: form_params
      )
    end

    # Retrieve the pdf reports associated with a relay token that was shared with you (beta)
    # `/credit/relay/pdf/get` allows third parties to receive a pdf report that was shared with them, using a `relay_token` that was created by the report owner.  The `/credit/relay/pdf/get` endpoint retrieves the Asset Report in PDF format. Before calling `/credit/relay/pdf/get`, you must first create the Asset Report using `/credit/relay/create` and then wait for the [`PRODUCT_READY`](https://plaid.com/docs/api/products/assets/#product_ready) webhook to fire, indicating that the Report is ready to be retrieved.  The response to `/credit/relay/pdf/get` is the PDF binary data. The `request_id` is returned in the `Plaid-Request-ID` header.  [View a sample PDF Asset Report](https://plaid.com/documents/sample-asset-report.pdf).
    # @required @param credit_relay_pdf_get_request [Plaid::CreditRelayPDFGetRequest?]
    # @return [::File]
    def credit_relay_pdf_get(
      *,
      credit_relay_pdf_get_request : Plaid::CreditRelayPDFGetRequest? = nil
    ) : ::File
      data, _status_code, _headers = credit_relay_pdf_get_with_http_info(credit_relay_pdf_get_request: credit_relay_pdf_get_request)
      data
    end

    # Retrieve the pdf reports associated with a relay token that was shared with you (beta)
    # &#x60;/credit/relay/pdf/get&#x60; allows third parties to receive a pdf report that was shared with them, using a &#x60;relay_token&#x60; that was created by the report owner.  The &#x60;/credit/relay/pdf/get&#x60; endpoint retrieves the Asset Report in PDF format. Before calling &#x60;/credit/relay/pdf/get&#x60;, you must first create the Asset Report using &#x60;/credit/relay/create&#x60; and then wait for the [&#x60;PRODUCT_READY&#x60;](https://plaid.com/docs/api/products/assets/#product_ready) webhook to fire, indicating that the Report is ready to be retrieved.  The response to &#x60;/credit/relay/pdf/get&#x60; is the PDF binary data. The &#x60;request_id&#x60; is returned in the &#x60;Plaid-Request-ID&#x60; header.  [View a sample PDF Asset Report](https://plaid.com/documents/sample-asset-report.pdf).
    # @required @param credit_relay_pdf_get_request [Plaid::CreditRelayPDFGetRequest?]
    # @return [Tuple(::File, Integer, Hash)] ::File, response status code and response headers
    def credit_relay_pdf_get_with_http_info(
      *,
      credit_relay_pdf_get_request : Plaid::CreditRelayPDFGetRequest? = nil
    ) : Tuple(::File, Int32, Hash(String, Array(String) | String))
      request = build_api_request_for_credit_relay_pdf_get(credit_relay_pdf_get_request: credit_relay_pdf_get_request)

      body, status_code, headers = @api_client.execute_api_request(request)

      if debugging?
        Log.debug { "API called: PlaidApi#credit_relay_pdf_get\nBody: #{body.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}" }
      end

      Tuple.new(::File.from_json(body), status_code, headers)
    end

    # Retrieve the pdf reports associated with a relay token that was shared with you (beta)
    # &#x60;/credit/relay/pdf/get&#x60; allows third parties to receive a pdf report that was shared with them, using a &#x60;relay_token&#x60; that was created by the report owner.  The &#x60;/credit/relay/pdf/get&#x60; endpoint retrieves the Asset Report in PDF format. Before calling &#x60;/credit/relay/pdf/get&#x60;, you must first create the Asset Report using &#x60;/credit/relay/create&#x60; and then wait for the [&#x60;PRODUCT_READY&#x60;](https://plaid.com/docs/api/products/assets/#product_ready) webhook to fire, indicating that the Report is ready to be retrieved.  The response to &#x60;/credit/relay/pdf/get&#x60; is the PDF binary data. The &#x60;request_id&#x60; is returned in the &#x60;Plaid-Request-ID&#x60; header.  [View a sample PDF Asset Report](https://plaid.com/documents/sample-asset-report.pdf).
    # @required @param credit_relay_pdf_get_request [Plaid::CreditRelayPDFGetRequest?]
    # @return nil
    def credit_relay_pdf_get(
      *,
      credit_relay_pdf_get_request : Plaid::CreditRelayPDFGetRequest? = nil,
      &block : Crest::Response ->
    ) : Nil
      build_api_request_for_credit_relay_pdf_get(credit_relay_pdf_get_request: credit_relay_pdf_get_request).execute(&block)
    end

    # @return Crest::Request
    def build_api_request_for_credit_relay_pdf_get(
      *,
      credit_relay_pdf_get_request : Plaid::CreditRelayPDFGetRequest? = nil
    ) : Crest::Request
      if debugging?
        Log.debug { "Calling API: PlaidApi.credit_relay_pdf_get ..." }
      end

      if client_side_validation?
        raise ArgumentError.new("\"credit_relay_pdf_get_request\" is required and cannot be null") if credit_relay_pdf_get_request.nil?
        unless (_credit_relay_pdf_get_request = credit_relay_pdf_get_request).nil?
          _credit_relay_pdf_get_request.validate if _credit_relay_pdf_get_request.is_a?(OpenApi::Validatable)
        end
      end

      # resource path
      local_var_path = "/credit/relay/pdf/get"

      # header parameters
      header_params : Hash(String, String) = Hash(String, String).new
      # HTTP header "Accept" (if needed)
      header_params["Accept"] = @api_client.select_header_accept(["application/pdf"])
      # HTTP header "Content-Type"
      header_params["Content-Type"] = @api_client.select_header_content_type(["application/json"])

      # cookie parameters
      cookie_params : Hash(String, String) = Hash(String, String).new

      # query parameters
      query_params : Hash(String, (String | Array(String) | JSON::Any)) = Hash(String, (String | Array(String) | JSON::Any)).new

      # form parameters
      form_params : Array(Tuple(String, Crest::ParamsValue)) | Nil = nil

      # http body (model)
      post_body : IO | String | Nil = @api_client.encode(body: credit_relay_pdf_get_request, content_type: header_params["Content-Type"]?) if !credit_relay_pdf_get_request.nil?

      # auth_names
      auth_names = ["clientId", "plaidVersion", "secret"]

      @api_client.build_api_request(
        http_method: :"POST",
        path: local_var_path,
        operation: "PlaidApi.credit_relay_pdf_get",
        post_body: post_body,
        auth_names: auth_names,
        header_params: header_params,
        cookie_params: cookie_params,
        query_params: query_params,
        form_params: form_params
      )
    end

    # Refresh a report of a relay token (beta)
    # The `/credit/relay/refresh` endpoint allows third parties to refresh a report that was relayed to them, using a `relay_token` that was created by the report owner. A new report will be created with the original report parameters, but with the most recent data available based on the `days_requested` value of the original report.
    # @required @param credit_relay_refresh_request [Plaid::CreditRelayRefreshRequest?]
    # @return [CreditRelayRefreshResponse]
    def credit_relay_refresh(
      *,
      credit_relay_refresh_request : Plaid::CreditRelayRefreshRequest? = nil
    ) : CreditRelayRefreshResponse
      data, _status_code, _headers = credit_relay_refresh_with_http_info(credit_relay_refresh_request: credit_relay_refresh_request)
      data
    end

    # Refresh a report of a relay token (beta)
    # The &#x60;/credit/relay/refresh&#x60; endpoint allows third parties to refresh a report that was relayed to them, using a &#x60;relay_token&#x60; that was created by the report owner. A new report will be created with the original report parameters, but with the most recent data available based on the &#x60;days_requested&#x60; value of the original report.
    # @required @param credit_relay_refresh_request [Plaid::CreditRelayRefreshRequest?]
    # @return [Tuple(CreditRelayRefreshResponse, Integer, Hash)] CreditRelayRefreshResponse, response status code and response headers
    def credit_relay_refresh_with_http_info(
      *,
      credit_relay_refresh_request : Plaid::CreditRelayRefreshRequest? = nil
    ) : Tuple(CreditRelayRefreshResponse, Int32, Hash(String, Array(String) | String))
      request = build_api_request_for_credit_relay_refresh(credit_relay_refresh_request: credit_relay_refresh_request)

      body, status_code, headers = @api_client.execute_api_request(request)

      if debugging?
        Log.debug { "API called: PlaidApi#credit_relay_refresh\nBody: #{body.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}" }
      end

      Tuple.new(CreditRelayRefreshResponse.from_json(body), status_code, headers)
    end

    # Refresh a report of a relay token (beta)
    # The &#x60;/credit/relay/refresh&#x60; endpoint allows third parties to refresh a report that was relayed to them, using a &#x60;relay_token&#x60; that was created by the report owner. A new report will be created with the original report parameters, but with the most recent data available based on the &#x60;days_requested&#x60; value of the original report.
    # @required @param credit_relay_refresh_request [Plaid::CreditRelayRefreshRequest?]
    # @return nil
    def credit_relay_refresh(
      *,
      credit_relay_refresh_request : Plaid::CreditRelayRefreshRequest? = nil,
      &block : Crest::Response ->
    ) : Nil
      build_api_request_for_credit_relay_refresh(credit_relay_refresh_request: credit_relay_refresh_request).execute(&block)
    end

    # @return Crest::Request
    def build_api_request_for_credit_relay_refresh(
      *,
      credit_relay_refresh_request : Plaid::CreditRelayRefreshRequest? = nil
    ) : Crest::Request
      if debugging?
        Log.debug { "Calling API: PlaidApi.credit_relay_refresh ..." }
      end

      if client_side_validation?
        raise ArgumentError.new("\"credit_relay_refresh_request\" is required and cannot be null") if credit_relay_refresh_request.nil?
        unless (_credit_relay_refresh_request = credit_relay_refresh_request).nil?
          _credit_relay_refresh_request.validate if _credit_relay_refresh_request.is_a?(OpenApi::Validatable)
        end
      end

      # resource path
      local_var_path = "/credit/relay/refresh"

      # header parameters
      header_params : Hash(String, String) = Hash(String, String).new
      # HTTP header "Accept" (if needed)
      header_params["Accept"] = @api_client.select_header_accept(["application/json"])
      # HTTP header "Content-Type"
      header_params["Content-Type"] = @api_client.select_header_content_type(["application/json"])

      # cookie parameters
      cookie_params : Hash(String, String) = Hash(String, String).new

      # query parameters
      query_params : Hash(String, (String | Array(String) | JSON::Any)) = Hash(String, (String | Array(String) | JSON::Any)).new

      # form parameters
      form_params : Array(Tuple(String, Crest::ParamsValue)) | Nil = nil

      # http body (model)
      post_body : IO | String | Nil = @api_client.encode(body: credit_relay_refresh_request, content_type: header_params["Content-Type"]?) if !credit_relay_refresh_request.nil?

      # auth_names
      auth_names = ["clientId", "plaidVersion", "secret"]

      @api_client.build_api_request(
        http_method: :"POST",
        path: local_var_path,
        operation: "PlaidApi.credit_relay_refresh",
        post_body: post_body,
        auth_names: auth_names,
        header_params: header_params,
        cookie_params: cookie_params,
        query_params: query_params,
        form_params: form_params
      )
    end

    # Remove relay token (beta)
    # The `/credit/relay/remove` endpoint allows you to invalidate a `relay_token`. The third party holding the token will no longer be able to access or refresh the reports which the `relay_token` gives access to. The original report, associated Items, and other relay tokens that provide access to the same report are not affected and will remain accessible after removing the given `relay_token`.
    # @required @param credit_relay_remove_request [Plaid::CreditRelayRemoveRequest?]
    # @return [CreditRelayRemoveResponse]
    def credit_relay_remove(
      *,
      credit_relay_remove_request : Plaid::CreditRelayRemoveRequest? = nil
    ) : CreditRelayRemoveResponse
      data, _status_code, _headers = credit_relay_remove_with_http_info(credit_relay_remove_request: credit_relay_remove_request)
      data
    end

    # Remove relay token (beta)
    # The &#x60;/credit/relay/remove&#x60; endpoint allows you to invalidate a &#x60;relay_token&#x60;. The third party holding the token will no longer be able to access or refresh the reports which the &#x60;relay_token&#x60; gives access to. The original report, associated Items, and other relay tokens that provide access to the same report are not affected and will remain accessible after removing the given &#x60;relay_token&#x60;.
    # @required @param credit_relay_remove_request [Plaid::CreditRelayRemoveRequest?]
    # @return [Tuple(CreditRelayRemoveResponse, Integer, Hash)] CreditRelayRemoveResponse, response status code and response headers
    def credit_relay_remove_with_http_info(
      *,
      credit_relay_remove_request : Plaid::CreditRelayRemoveRequest? = nil
    ) : Tuple(CreditRelayRemoveResponse, Int32, Hash(String, Array(String) | String))
      request = build_api_request_for_credit_relay_remove(credit_relay_remove_request: credit_relay_remove_request)

      body, status_code, headers = @api_client.execute_api_request(request)

      if debugging?
        Log.debug { "API called: PlaidApi#credit_relay_remove\nBody: #{body.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}" }
      end

      Tuple.new(CreditRelayRemoveResponse.from_json(body), status_code, headers)
    end

    # Remove relay token (beta)
    # The &#x60;/credit/relay/remove&#x60; endpoint allows you to invalidate a &#x60;relay_token&#x60;. The third party holding the token will no longer be able to access or refresh the reports which the &#x60;relay_token&#x60; gives access to. The original report, associated Items, and other relay tokens that provide access to the same report are not affected and will remain accessible after removing the given &#x60;relay_token&#x60;.
    # @required @param credit_relay_remove_request [Plaid::CreditRelayRemoveRequest?]
    # @return nil
    def credit_relay_remove(
      *,
      credit_relay_remove_request : Plaid::CreditRelayRemoveRequest? = nil,
      &block : Crest::Response ->
    ) : Nil
      build_api_request_for_credit_relay_remove(credit_relay_remove_request: credit_relay_remove_request).execute(&block)
    end

    # @return Crest::Request
    def build_api_request_for_credit_relay_remove(
      *,
      credit_relay_remove_request : Plaid::CreditRelayRemoveRequest? = nil
    ) : Crest::Request
      if debugging?
        Log.debug { "Calling API: PlaidApi.credit_relay_remove ..." }
      end

      if client_side_validation?
        raise ArgumentError.new("\"credit_relay_remove_request\" is required and cannot be null") if credit_relay_remove_request.nil?
        unless (_credit_relay_remove_request = credit_relay_remove_request).nil?
          _credit_relay_remove_request.validate if _credit_relay_remove_request.is_a?(OpenApi::Validatable)
        end
      end

      # resource path
      local_var_path = "/credit/relay/remove"

      # header parameters
      header_params : Hash(String, String) = Hash(String, String).new
      # HTTP header "Accept" (if needed)
      header_params["Accept"] = @api_client.select_header_accept(["application/json"])
      # HTTP header "Content-Type"
      header_params["Content-Type"] = @api_client.select_header_content_type(["application/json"])

      # cookie parameters
      cookie_params : Hash(String, String) = Hash(String, String).new

      # query parameters
      query_params : Hash(String, (String | Array(String) | JSON::Any)) = Hash(String, (String | Array(String) | JSON::Any)).new

      # form parameters
      form_params : Array(Tuple(String, Crest::ParamsValue)) | Nil = nil

      # http body (model)
      post_body : IO | String | Nil = @api_client.encode(body: credit_relay_remove_request, content_type: header_params["Content-Type"]?) if !credit_relay_remove_request.nil?

      # auth_names
      auth_names = ["clientId", "plaidVersion", "secret"]

      @api_client.build_api_request(
        http_method: :"POST",
        path: local_var_path,
        operation: "PlaidApi.credit_relay_remove",
        post_body: post_body,
        auth_names: auth_names,
        header_params: header_params,
        cookie_params: cookie_params,
        query_params: query_params,
        form_params: form_params
      )
    end

    # Remove an Audit Copy token
    # The `/credit/audit_copy_token/remove` endpoint allows you to remove an Audit Copy. Removing an Audit Copy invalidates the `audit_copy_token` associated with it, meaning both you and any third parties holding the token will no longer be able to use it to access Report data. Items associated with the Report data and other Audit Copies of it are not affected and will remain accessible after removing the given Audit Copy.
    # @required @param credit_audit_copy_token_remove_request [Plaid::CreditAuditCopyTokenRemoveRequest?]
    # @return [CreditAuditCopyTokenRemoveResponse]
    def credit_report_audit_copy_remove(
      *,
      credit_audit_copy_token_remove_request : Plaid::CreditAuditCopyTokenRemoveRequest? = nil
    ) : CreditAuditCopyTokenRemoveResponse
      data, _status_code, _headers = credit_report_audit_copy_remove_with_http_info(credit_audit_copy_token_remove_request: credit_audit_copy_token_remove_request)
      data
    end

    # Remove an Audit Copy token
    # The &#x60;/credit/audit_copy_token/remove&#x60; endpoint allows you to remove an Audit Copy. Removing an Audit Copy invalidates the &#x60;audit_copy_token&#x60; associated with it, meaning both you and any third parties holding the token will no longer be able to use it to access Report data. Items associated with the Report data and other Audit Copies of it are not affected and will remain accessible after removing the given Audit Copy.
    # @required @param credit_audit_copy_token_remove_request [Plaid::CreditAuditCopyTokenRemoveRequest?]
    # @return [Tuple(CreditAuditCopyTokenRemoveResponse, Integer, Hash)] CreditAuditCopyTokenRemoveResponse, response status code and response headers
    def credit_report_audit_copy_remove_with_http_info(
      *,
      credit_audit_copy_token_remove_request : Plaid::CreditAuditCopyTokenRemoveRequest? = nil
    ) : Tuple(CreditAuditCopyTokenRemoveResponse, Int32, Hash(String, Array(String) | String))
      request = build_api_request_for_credit_report_audit_copy_remove(credit_audit_copy_token_remove_request: credit_audit_copy_token_remove_request)

      body, status_code, headers = @api_client.execute_api_request(request)

      if debugging?
        Log.debug { "API called: PlaidApi#credit_report_audit_copy_remove\nBody: #{body.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}" }
      end

      Tuple.new(CreditAuditCopyTokenRemoveResponse.from_json(body), status_code, headers)
    end

    # Remove an Audit Copy token
    # The &#x60;/credit/audit_copy_token/remove&#x60; endpoint allows you to remove an Audit Copy. Removing an Audit Copy invalidates the &#x60;audit_copy_token&#x60; associated with it, meaning both you and any third parties holding the token will no longer be able to use it to access Report data. Items associated with the Report data and other Audit Copies of it are not affected and will remain accessible after removing the given Audit Copy.
    # @required @param credit_audit_copy_token_remove_request [Plaid::CreditAuditCopyTokenRemoveRequest?]
    # @return nil
    def credit_report_audit_copy_remove(
      *,
      credit_audit_copy_token_remove_request : Plaid::CreditAuditCopyTokenRemoveRequest? = nil,
      &block : Crest::Response ->
    ) : Nil
      build_api_request_for_credit_report_audit_copy_remove(credit_audit_copy_token_remove_request: credit_audit_copy_token_remove_request).execute(&block)
    end

    # @return Crest::Request
    def build_api_request_for_credit_report_audit_copy_remove(
      *,
      credit_audit_copy_token_remove_request : Plaid::CreditAuditCopyTokenRemoveRequest? = nil
    ) : Crest::Request
      if debugging?
        Log.debug { "Calling API: PlaidApi.credit_report_audit_copy_remove ..." }
      end

      if client_side_validation?
        raise ArgumentError.new("\"credit_audit_copy_token_remove_request\" is required and cannot be null") if credit_audit_copy_token_remove_request.nil?
        unless (_credit_audit_copy_token_remove_request = credit_audit_copy_token_remove_request).nil?
          _credit_audit_copy_token_remove_request.validate if _credit_audit_copy_token_remove_request.is_a?(OpenApi::Validatable)
        end
      end

      # resource path
      local_var_path = "/credit/audit_copy_token/remove"

      # header parameters
      header_params : Hash(String, String) = Hash(String, String).new
      # HTTP header "Accept" (if needed)
      header_params["Accept"] = @api_client.select_header_accept(["application/json"])
      # HTTP header "Content-Type"
      header_params["Content-Type"] = @api_client.select_header_content_type(["application/json"])

      # cookie parameters
      cookie_params : Hash(String, String) = Hash(String, String).new

      # query parameters
      query_params : Hash(String, (String | Array(String) | JSON::Any)) = Hash(String, (String | Array(String) | JSON::Any)).new

      # form parameters
      form_params : Array(Tuple(String, Crest::ParamsValue)) | Nil = nil

      # http body (model)
      post_body : IO | String | Nil = @api_client.encode(body: credit_audit_copy_token_remove_request, content_type: header_params["Content-Type"]?) if !credit_audit_copy_token_remove_request.nil?

      # auth_names
      auth_names = ["clientId", "plaidVersion", "secret"]

      @api_client.build_api_request(
        http_method: :"POST",
        path: local_var_path,
        operation: "PlaidApi.credit_report_audit_copy_remove",
        post_body: post_body,
        auth_names: auth_names,
        header_params: header_params,
        cookie_params: cookie_params,
        query_params: query_params,
        form_params: form_params
      )
    end

    # Retrieve Link sessions for your user
    # This endpoint can be used for your end users after they complete the Link flow. This endpoint returns a list of Link sessions that your user completed, where each session includes the results from the Link flow.  These results include details about the Item that was created and some product related metadata (showing, for example, whether the user finished the bank income verification step).
    # @required @param credit_sessions_get_request [Plaid::CreditSessionsGetRequest?]
    # @return [CreditSessionsGetResponse]
    def credit_sessions_get(
      *,
      credit_sessions_get_request : Plaid::CreditSessionsGetRequest? = nil
    ) : CreditSessionsGetResponse
      data, _status_code, _headers = credit_sessions_get_with_http_info(credit_sessions_get_request: credit_sessions_get_request)
      data
    end

    # Retrieve Link sessions for your user
    # This endpoint can be used for your end users after they complete the Link flow. This endpoint returns a list of Link sessions that your user completed, where each session includes the results from the Link flow.  These results include details about the Item that was created and some product related metadata (showing, for example, whether the user finished the bank income verification step).
    # @required @param credit_sessions_get_request [Plaid::CreditSessionsGetRequest?]
    # @return [Tuple(CreditSessionsGetResponse, Integer, Hash)] CreditSessionsGetResponse, response status code and response headers
    def credit_sessions_get_with_http_info(
      *,
      credit_sessions_get_request : Plaid::CreditSessionsGetRequest? = nil
    ) : Tuple(CreditSessionsGetResponse, Int32, Hash(String, Array(String) | String))
      request = build_api_request_for_credit_sessions_get(credit_sessions_get_request: credit_sessions_get_request)

      body, status_code, headers = @api_client.execute_api_request(request)

      if debugging?
        Log.debug { "API called: PlaidApi#credit_sessions_get\nBody: #{body.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}" }
      end

      Tuple.new(CreditSessionsGetResponse.from_json(body), status_code, headers)
    end

    # Retrieve Link sessions for your user
    # This endpoint can be used for your end users after they complete the Link flow. This endpoint returns a list of Link sessions that your user completed, where each session includes the results from the Link flow.  These results include details about the Item that was created and some product related metadata (showing, for example, whether the user finished the bank income verification step).
    # @required @param credit_sessions_get_request [Plaid::CreditSessionsGetRequest?]
    # @return nil
    def credit_sessions_get(
      *,
      credit_sessions_get_request : Plaid::CreditSessionsGetRequest? = nil,
      &block : Crest::Response ->
    ) : Nil
      build_api_request_for_credit_sessions_get(credit_sessions_get_request: credit_sessions_get_request).execute(&block)
    end

    # @return Crest::Request
    def build_api_request_for_credit_sessions_get(
      *,
      credit_sessions_get_request : Plaid::CreditSessionsGetRequest? = nil
    ) : Crest::Request
      if debugging?
        Log.debug { "Calling API: PlaidApi.credit_sessions_get ..." }
      end

      if client_side_validation?
        raise ArgumentError.new("\"credit_sessions_get_request\" is required and cannot be null") if credit_sessions_get_request.nil?
        unless (_credit_sessions_get_request = credit_sessions_get_request).nil?
          _credit_sessions_get_request.validate if _credit_sessions_get_request.is_a?(OpenApi::Validatable)
        end
      end

      # resource path
      local_var_path = "/credit/sessions/get"

      # header parameters
      header_params : Hash(String, String) = Hash(String, String).new
      # HTTP header "Accept" (if needed)
      header_params["Accept"] = @api_client.select_header_accept(["application/json"])
      # HTTP header "Content-Type"
      header_params["Content-Type"] = @api_client.select_header_content_type(["application/json"])

      # cookie parameters
      cookie_params : Hash(String, String) = Hash(String, String).new

      # query parameters
      query_params : Hash(String, (String | Array(String) | JSON::Any)) = Hash(String, (String | Array(String) | JSON::Any)).new

      # form parameters
      form_params : Array(Tuple(String, Crest::ParamsValue)) | Nil = nil

      # http body (model)
      post_body : IO | String | Nil = @api_client.encode(body: credit_sessions_get_request, content_type: header_params["Content-Type"]?) if !credit_sessions_get_request.nil?

      # auth_names
      auth_names = ["clientId", "plaidVersion", "secret"]

      @api_client.build_api_request(
        http_method: :"POST",
        path: local_var_path,
        operation: "PlaidApi.credit_sessions_get",
        post_body: post_body,
        auth_names: auth_names,
        header_params: header_params,
        cookie_params: cookie_params,
        query_params: query_params,
        form_params: form_params
      )
    end

    # Retrieve a dashboard user
    # Retrieve information about a dashboard user.
    # @required @param dashboard_user_get_request [Plaid::DashboardUserGetRequest?]
    # @return [DashboardUserGetResponse]
    def dashboard_user_get(
      *,
      dashboard_user_get_request : Plaid::DashboardUserGetRequest? = nil
    ) : DashboardUserGetResponse
      data, _status_code, _headers = dashboard_user_get_with_http_info(dashboard_user_get_request: dashboard_user_get_request)
      data
    end

    # Retrieve a dashboard user
    # Retrieve information about a dashboard user.
    # @required @param dashboard_user_get_request [Plaid::DashboardUserGetRequest?]
    # @return [Tuple(DashboardUserGetResponse, Integer, Hash)] DashboardUserGetResponse, response status code and response headers
    def dashboard_user_get_with_http_info(
      *,
      dashboard_user_get_request : Plaid::DashboardUserGetRequest? = nil
    ) : Tuple(DashboardUserGetResponse, Int32, Hash(String, Array(String) | String))
      request = build_api_request_for_dashboard_user_get(dashboard_user_get_request: dashboard_user_get_request)

      body, status_code, headers = @api_client.execute_api_request(request)

      if debugging?
        Log.debug { "API called: PlaidApi#dashboard_user_get\nBody: #{body.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}" }
      end

      Tuple.new(DashboardUserGetResponse.from_json(body), status_code, headers)
    end

    # Retrieve a dashboard user
    # Retrieve information about a dashboard user.
    # @required @param dashboard_user_get_request [Plaid::DashboardUserGetRequest?]
    # @return nil
    def dashboard_user_get(
      *,
      dashboard_user_get_request : Plaid::DashboardUserGetRequest? = nil,
      &block : Crest::Response ->
    ) : Nil
      build_api_request_for_dashboard_user_get(dashboard_user_get_request: dashboard_user_get_request).execute(&block)
    end

    # @return Crest::Request
    def build_api_request_for_dashboard_user_get(
      *,
      dashboard_user_get_request : Plaid::DashboardUserGetRequest? = nil
    ) : Crest::Request
      if debugging?
        Log.debug { "Calling API: PlaidApi.dashboard_user_get ..." }
      end

      if client_side_validation?
        raise ArgumentError.new("\"dashboard_user_get_request\" is required and cannot be null") if dashboard_user_get_request.nil?
        unless (_dashboard_user_get_request = dashboard_user_get_request).nil?
          _dashboard_user_get_request.validate if _dashboard_user_get_request.is_a?(OpenApi::Validatable)
        end
      end

      # resource path
      local_var_path = "/dashboard_user/get"

      # header parameters
      header_params : Hash(String, String) = Hash(String, String).new
      # HTTP header "Accept" (if needed)
      header_params["Accept"] = @api_client.select_header_accept(["application/json"])
      # HTTP header "Content-Type"
      header_params["Content-Type"] = @api_client.select_header_content_type(["application/json"])

      # cookie parameters
      cookie_params : Hash(String, String) = Hash(String, String).new

      # query parameters
      query_params : Hash(String, (String | Array(String) | JSON::Any)) = Hash(String, (String | Array(String) | JSON::Any)).new

      # form parameters
      form_params : Array(Tuple(String, Crest::ParamsValue)) | Nil = nil

      # http body (model)
      post_body : IO | String | Nil = @api_client.encode(body: dashboard_user_get_request, content_type: header_params["Content-Type"]?) if !dashboard_user_get_request.nil?

      # auth_names
      auth_names = ["clientId", "plaidVersion", "secret"]

      @api_client.build_api_request(
        http_method: :"POST",
        path: local_var_path,
        operation: "PlaidApi.dashboard_user_get",
        post_body: post_body,
        auth_names: auth_names,
        header_params: header_params,
        cookie_params: cookie_params,
        query_params: query_params,
        form_params: form_params
      )
    end

    # List dashboard users
    # List all dashboard users associated with your account.
    # @required @param dashboard_user_list_request [Plaid::DashboardUserListRequest?]
    # @return [DashboardUserListResponse]
    def dashboard_user_list(
      *,
      dashboard_user_list_request : Plaid::DashboardUserListRequest? = nil
    ) : DashboardUserListResponse
      data, _status_code, _headers = dashboard_user_list_with_http_info(dashboard_user_list_request: dashboard_user_list_request)
      data
    end

    # List dashboard users
    # List all dashboard users associated with your account.
    # @required @param dashboard_user_list_request [Plaid::DashboardUserListRequest?]
    # @return [Tuple(DashboardUserListResponse, Integer, Hash)] DashboardUserListResponse, response status code and response headers
    def dashboard_user_list_with_http_info(
      *,
      dashboard_user_list_request : Plaid::DashboardUserListRequest? = nil
    ) : Tuple(DashboardUserListResponse, Int32, Hash(String, Array(String) | String))
      request = build_api_request_for_dashboard_user_list(dashboard_user_list_request: dashboard_user_list_request)

      body, status_code, headers = @api_client.execute_api_request(request)

      if debugging?
        Log.debug { "API called: PlaidApi#dashboard_user_list\nBody: #{body.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}" }
      end

      Tuple.new(DashboardUserListResponse.from_json(body), status_code, headers)
    end

    # List dashboard users
    # List all dashboard users associated with your account.
    # @required @param dashboard_user_list_request [Plaid::DashboardUserListRequest?]
    # @return nil
    def dashboard_user_list(
      *,
      dashboard_user_list_request : Plaid::DashboardUserListRequest? = nil,
      &block : Crest::Response ->
    ) : Nil
      build_api_request_for_dashboard_user_list(dashboard_user_list_request: dashboard_user_list_request).execute(&block)
    end

    # @return Crest::Request
    def build_api_request_for_dashboard_user_list(
      *,
      dashboard_user_list_request : Plaid::DashboardUserListRequest? = nil
    ) : Crest::Request
      if debugging?
        Log.debug { "Calling API: PlaidApi.dashboard_user_list ..." }
      end

      if client_side_validation?
        raise ArgumentError.new("\"dashboard_user_list_request\" is required and cannot be null") if dashboard_user_list_request.nil?
        unless (_dashboard_user_list_request = dashboard_user_list_request).nil?
          _dashboard_user_list_request.validate if _dashboard_user_list_request.is_a?(OpenApi::Validatable)
        end
      end

      # resource path
      local_var_path = "/dashboard_user/list"

      # header parameters
      header_params : Hash(String, String) = Hash(String, String).new
      # HTTP header "Accept" (if needed)
      header_params["Accept"] = @api_client.select_header_accept(["application/json"])
      # HTTP header "Content-Type"
      header_params["Content-Type"] = @api_client.select_header_content_type(["application/json"])

      # cookie parameters
      cookie_params : Hash(String, String) = Hash(String, String).new

      # query parameters
      query_params : Hash(String, (String | Array(String) | JSON::Any)) = Hash(String, (String | Array(String) | JSON::Any)).new

      # form parameters
      form_params : Array(Tuple(String, Crest::ParamsValue)) | Nil = nil

      # http body (model)
      post_body : IO | String | Nil = @api_client.encode(body: dashboard_user_list_request, content_type: header_params["Content-Type"]?) if !dashboard_user_list_request.nil?

      # auth_names
      auth_names = ["clientId", "plaidVersion", "secret"]

      @api_client.build_api_request(
        http_method: :"POST",
        path: local_var_path,
        operation: "PlaidApi.dashboard_user_list",
        post_body: post_body,
        auth_names: auth_names,
        header_params: header_params,
        cookie_params: cookie_params,
        query_params: query_params,
        form_params: form_params
      )
    end

    # Create a deposit switch without using Plaid Exchange
    # This endpoint provides an alternative to `/deposit_switch/create` for customers who have not yet fully integrated with Plaid Exchange. Like `/deposit_switch/create`, it creates a deposit switch entity that will be persisted throughout the lifecycle of the switch.
    # @required @param deposit_switch_alt_create_request [Plaid::DepositSwitchAltCreateRequest?]
    # @return [DepositSwitchAltCreateResponse]
    def deposit_switch_alt_create(
      *,
      deposit_switch_alt_create_request : Plaid::DepositSwitchAltCreateRequest? = nil
    ) : DepositSwitchAltCreateResponse
      data, _status_code, _headers = deposit_switch_alt_create_with_http_info(deposit_switch_alt_create_request: deposit_switch_alt_create_request)
      data
    end

    # Create a deposit switch without using Plaid Exchange
    # This endpoint provides an alternative to &#x60;/deposit_switch/create&#x60; for customers who have not yet fully integrated with Plaid Exchange. Like &#x60;/deposit_switch/create&#x60;, it creates a deposit switch entity that will be persisted throughout the lifecycle of the switch.
    # @required @param deposit_switch_alt_create_request [Plaid::DepositSwitchAltCreateRequest?]
    # @return [Tuple(DepositSwitchAltCreateResponse, Integer, Hash)] DepositSwitchAltCreateResponse, response status code and response headers
    def deposit_switch_alt_create_with_http_info(
      *,
      deposit_switch_alt_create_request : Plaid::DepositSwitchAltCreateRequest? = nil
    ) : Tuple(DepositSwitchAltCreateResponse, Int32, Hash(String, Array(String) | String))
      request = build_api_request_for_deposit_switch_alt_create(deposit_switch_alt_create_request: deposit_switch_alt_create_request)

      body, status_code, headers = @api_client.execute_api_request(request)

      if debugging?
        Log.debug { "API called: PlaidApi#deposit_switch_alt_create\nBody: #{body.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}" }
      end

      Tuple.new(DepositSwitchAltCreateResponse.from_json(body), status_code, headers)
    end

    # Create a deposit switch without using Plaid Exchange
    # This endpoint provides an alternative to &#x60;/deposit_switch/create&#x60; for customers who have not yet fully integrated with Plaid Exchange. Like &#x60;/deposit_switch/create&#x60;, it creates a deposit switch entity that will be persisted throughout the lifecycle of the switch.
    # @required @param deposit_switch_alt_create_request [Plaid::DepositSwitchAltCreateRequest?]
    # @return nil
    def deposit_switch_alt_create(
      *,
      deposit_switch_alt_create_request : Plaid::DepositSwitchAltCreateRequest? = nil,
      &block : Crest::Response ->
    ) : Nil
      build_api_request_for_deposit_switch_alt_create(deposit_switch_alt_create_request: deposit_switch_alt_create_request).execute(&block)
    end

    # @return Crest::Request
    def build_api_request_for_deposit_switch_alt_create(
      *,
      deposit_switch_alt_create_request : Plaid::DepositSwitchAltCreateRequest? = nil
    ) : Crest::Request
      if debugging?
        Log.debug { "Calling API: PlaidApi.deposit_switch_alt_create ..." }
      end

      if client_side_validation?
        raise ArgumentError.new("\"deposit_switch_alt_create_request\" is required and cannot be null") if deposit_switch_alt_create_request.nil?
        unless (_deposit_switch_alt_create_request = deposit_switch_alt_create_request).nil?
          _deposit_switch_alt_create_request.validate if _deposit_switch_alt_create_request.is_a?(OpenApi::Validatable)
        end
      end

      # resource path
      local_var_path = "/deposit_switch/alt/create"

      # header parameters
      header_params : Hash(String, String) = Hash(String, String).new
      # HTTP header "Accept" (if needed)
      header_params["Accept"] = @api_client.select_header_accept(["application/json"])
      # HTTP header "Content-Type"
      header_params["Content-Type"] = @api_client.select_header_content_type(["application/json"])

      # cookie parameters
      cookie_params : Hash(String, String) = Hash(String, String).new

      # query parameters
      query_params : Hash(String, (String | Array(String) | JSON::Any)) = Hash(String, (String | Array(String) | JSON::Any)).new

      # form parameters
      form_params : Array(Tuple(String, Crest::ParamsValue)) | Nil = nil

      # http body (model)
      post_body : IO | String | Nil = @api_client.encode(body: deposit_switch_alt_create_request, content_type: header_params["Content-Type"]?) if !deposit_switch_alt_create_request.nil?

      # auth_names
      auth_names = ["clientId", "plaidVersion", "secret"]

      @api_client.build_api_request(
        http_method: :"POST",
        path: local_var_path,
        operation: "PlaidApi.deposit_switch_alt_create",
        post_body: post_body,
        auth_names: auth_names,
        header_params: header_params,
        cookie_params: cookie_params,
        query_params: query_params,
        form_params: form_params
      )
    end

    # Create a deposit switch
    # This endpoint creates a deposit switch entity that will be persisted throughout the lifecycle of the switch.
    # @required @param deposit_switch_create_request [Plaid::DepositSwitchCreateRequest?]
    # @return [DepositSwitchCreateResponse]
    def deposit_switch_create(
      *,
      deposit_switch_create_request : Plaid::DepositSwitchCreateRequest? = nil
    ) : DepositSwitchCreateResponse
      data, _status_code, _headers = deposit_switch_create_with_http_info(deposit_switch_create_request: deposit_switch_create_request)
      data
    end

    # Create a deposit switch
    # This endpoint creates a deposit switch entity that will be persisted throughout the lifecycle of the switch.
    # @required @param deposit_switch_create_request [Plaid::DepositSwitchCreateRequest?]
    # @return [Tuple(DepositSwitchCreateResponse, Integer, Hash)] DepositSwitchCreateResponse, response status code and response headers
    def deposit_switch_create_with_http_info(
      *,
      deposit_switch_create_request : Plaid::DepositSwitchCreateRequest? = nil
    ) : Tuple(DepositSwitchCreateResponse, Int32, Hash(String, Array(String) | String))
      request = build_api_request_for_deposit_switch_create(deposit_switch_create_request: deposit_switch_create_request)

      body, status_code, headers = @api_client.execute_api_request(request)

      if debugging?
        Log.debug { "API called: PlaidApi#deposit_switch_create\nBody: #{body.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}" }
      end

      Tuple.new(DepositSwitchCreateResponse.from_json(body), status_code, headers)
    end

    # Create a deposit switch
    # This endpoint creates a deposit switch entity that will be persisted throughout the lifecycle of the switch.
    # @required @param deposit_switch_create_request [Plaid::DepositSwitchCreateRequest?]
    # @return nil
    def deposit_switch_create(
      *,
      deposit_switch_create_request : Plaid::DepositSwitchCreateRequest? = nil,
      &block : Crest::Response ->
    ) : Nil
      build_api_request_for_deposit_switch_create(deposit_switch_create_request: deposit_switch_create_request).execute(&block)
    end

    # @return Crest::Request
    def build_api_request_for_deposit_switch_create(
      *,
      deposit_switch_create_request : Plaid::DepositSwitchCreateRequest? = nil
    ) : Crest::Request
      if debugging?
        Log.debug { "Calling API: PlaidApi.deposit_switch_create ..." }
      end

      if client_side_validation?
        raise ArgumentError.new("\"deposit_switch_create_request\" is required and cannot be null") if deposit_switch_create_request.nil?
        unless (_deposit_switch_create_request = deposit_switch_create_request).nil?
          _deposit_switch_create_request.validate if _deposit_switch_create_request.is_a?(OpenApi::Validatable)
        end
      end

      # resource path
      local_var_path = "/deposit_switch/create"

      # header parameters
      header_params : Hash(String, String) = Hash(String, String).new
      # HTTP header "Accept" (if needed)
      header_params["Accept"] = @api_client.select_header_accept(["application/json"])
      # HTTP header "Content-Type"
      header_params["Content-Type"] = @api_client.select_header_content_type(["application/json"])

      # cookie parameters
      cookie_params : Hash(String, String) = Hash(String, String).new

      # query parameters
      query_params : Hash(String, (String | Array(String) | JSON::Any)) = Hash(String, (String | Array(String) | JSON::Any)).new

      # form parameters
      form_params : Array(Tuple(String, Crest::ParamsValue)) | Nil = nil

      # http body (model)
      post_body : IO | String | Nil = @api_client.encode(body: deposit_switch_create_request, content_type: header_params["Content-Type"]?) if !deposit_switch_create_request.nil?

      # auth_names
      auth_names = ["clientId", "plaidVersion", "secret"]

      @api_client.build_api_request(
        http_method: :"POST",
        path: local_var_path,
        operation: "PlaidApi.deposit_switch_create",
        post_body: post_body,
        auth_names: auth_names,
        header_params: header_params,
        cookie_params: cookie_params,
        query_params: query_params,
        form_params: form_params
      )
    end

    # Retrieve a deposit switch
    # This endpoint returns information related to how the user has configured their payroll allocation and the state of the switch. You can use this information to build logic related to the user's direct deposit allocation preferences.
    # @required @param deposit_switch_get_request [Plaid::DepositSwitchGetRequest?]
    # @return [DepositSwitchGetResponse]
    def deposit_switch_get(
      *,
      deposit_switch_get_request : Plaid::DepositSwitchGetRequest? = nil
    ) : DepositSwitchGetResponse
      data, _status_code, _headers = deposit_switch_get_with_http_info(deposit_switch_get_request: deposit_switch_get_request)
      data
    end

    # Retrieve a deposit switch
    # This endpoint returns information related to how the user has configured their payroll allocation and the state of the switch. You can use this information to build logic related to the user&#39;s direct deposit allocation preferences.
    # @required @param deposit_switch_get_request [Plaid::DepositSwitchGetRequest?]
    # @return [Tuple(DepositSwitchGetResponse, Integer, Hash)] DepositSwitchGetResponse, response status code and response headers
    def deposit_switch_get_with_http_info(
      *,
      deposit_switch_get_request : Plaid::DepositSwitchGetRequest? = nil
    ) : Tuple(DepositSwitchGetResponse, Int32, Hash(String, Array(String) | String))
      request = build_api_request_for_deposit_switch_get(deposit_switch_get_request: deposit_switch_get_request)

      body, status_code, headers = @api_client.execute_api_request(request)

      if debugging?
        Log.debug { "API called: PlaidApi#deposit_switch_get\nBody: #{body.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}" }
      end

      Tuple.new(DepositSwitchGetResponse.from_json(body), status_code, headers)
    end

    # Retrieve a deposit switch
    # This endpoint returns information related to how the user has configured their payroll allocation and the state of the switch. You can use this information to build logic related to the user&#39;s direct deposit allocation preferences.
    # @required @param deposit_switch_get_request [Plaid::DepositSwitchGetRequest?]
    # @return nil
    def deposit_switch_get(
      *,
      deposit_switch_get_request : Plaid::DepositSwitchGetRequest? = nil,
      &block : Crest::Response ->
    ) : Nil
      build_api_request_for_deposit_switch_get(deposit_switch_get_request: deposit_switch_get_request).execute(&block)
    end

    # @return Crest::Request
    def build_api_request_for_deposit_switch_get(
      *,
      deposit_switch_get_request : Plaid::DepositSwitchGetRequest? = nil
    ) : Crest::Request
      if debugging?
        Log.debug { "Calling API: PlaidApi.deposit_switch_get ..." }
      end

      if client_side_validation?
        raise ArgumentError.new("\"deposit_switch_get_request\" is required and cannot be null") if deposit_switch_get_request.nil?
        unless (_deposit_switch_get_request = deposit_switch_get_request).nil?
          _deposit_switch_get_request.validate if _deposit_switch_get_request.is_a?(OpenApi::Validatable)
        end
      end

      # resource path
      local_var_path = "/deposit_switch/get"

      # header parameters
      header_params : Hash(String, String) = Hash(String, String).new
      # HTTP header "Accept" (if needed)
      header_params["Accept"] = @api_client.select_header_accept(["application/json"])
      # HTTP header "Content-Type"
      header_params["Content-Type"] = @api_client.select_header_content_type(["application/json"])

      # cookie parameters
      cookie_params : Hash(String, String) = Hash(String, String).new

      # query parameters
      query_params : Hash(String, (String | Array(String) | JSON::Any)) = Hash(String, (String | Array(String) | JSON::Any)).new

      # form parameters
      form_params : Array(Tuple(String, Crest::ParamsValue)) | Nil = nil

      # http body (model)
      post_body : IO | String | Nil = @api_client.encode(body: deposit_switch_get_request, content_type: header_params["Content-Type"]?) if !deposit_switch_get_request.nil?

      # auth_names
      auth_names = ["clientId", "plaidVersion", "secret"]

      @api_client.build_api_request(
        http_method: :"POST",
        path: local_var_path,
        operation: "PlaidApi.deposit_switch_get",
        post_body: post_body,
        auth_names: auth_names,
        header_params: header_params,
        cookie_params: cookie_params,
        query_params: query_params,
        form_params: form_params
      )
    end

    # Create a deposit switch token
    # In order for the end user to take action, you will need to create a public token representing the deposit switch. This token is used to initialize Link. It can be used one time and expires after 30 minutes.
    # @required @param deposit_switch_token_create_request [Plaid::DepositSwitchTokenCreateRequest?]
    # @return [DepositSwitchTokenCreateResponse]
    def deposit_switch_token_create(
      *,
      deposit_switch_token_create_request : Plaid::DepositSwitchTokenCreateRequest? = nil
    ) : DepositSwitchTokenCreateResponse
      data, _status_code, _headers = deposit_switch_token_create_with_http_info(deposit_switch_token_create_request: deposit_switch_token_create_request)
      data
    end

    # Create a deposit switch token
    # In order for the end user to take action, you will need to create a public token representing the deposit switch. This token is used to initialize Link. It can be used one time and expires after 30 minutes.
    # @required @param deposit_switch_token_create_request [Plaid::DepositSwitchTokenCreateRequest?]
    # @return [Tuple(DepositSwitchTokenCreateResponse, Integer, Hash)] DepositSwitchTokenCreateResponse, response status code and response headers
    def deposit_switch_token_create_with_http_info(
      *,
      deposit_switch_token_create_request : Plaid::DepositSwitchTokenCreateRequest? = nil
    ) : Tuple(DepositSwitchTokenCreateResponse, Int32, Hash(String, Array(String) | String))
      request = build_api_request_for_deposit_switch_token_create(deposit_switch_token_create_request: deposit_switch_token_create_request)

      body, status_code, headers = @api_client.execute_api_request(request)

      if debugging?
        Log.debug { "API called: PlaidApi#deposit_switch_token_create\nBody: #{body.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}" }
      end

      Tuple.new(DepositSwitchTokenCreateResponse.from_json(body), status_code, headers)
    end

    # Create a deposit switch token
    # In order for the end user to take action, you will need to create a public token representing the deposit switch. This token is used to initialize Link. It can be used one time and expires after 30 minutes.
    # @required @param deposit_switch_token_create_request [Plaid::DepositSwitchTokenCreateRequest?]
    # @return nil
    def deposit_switch_token_create(
      *,
      deposit_switch_token_create_request : Plaid::DepositSwitchTokenCreateRequest? = nil,
      &block : Crest::Response ->
    ) : Nil
      build_api_request_for_deposit_switch_token_create(deposit_switch_token_create_request: deposit_switch_token_create_request).execute(&block)
    end

    # @return Crest::Request
    def build_api_request_for_deposit_switch_token_create(
      *,
      deposit_switch_token_create_request : Plaid::DepositSwitchTokenCreateRequest? = nil
    ) : Crest::Request
      if debugging?
        Log.debug { "Calling API: PlaidApi.deposit_switch_token_create ..." }
      end

      if client_side_validation?
        raise ArgumentError.new("\"deposit_switch_token_create_request\" is required and cannot be null") if deposit_switch_token_create_request.nil?
        unless (_deposit_switch_token_create_request = deposit_switch_token_create_request).nil?
          _deposit_switch_token_create_request.validate if _deposit_switch_token_create_request.is_a?(OpenApi::Validatable)
        end
      end

      # resource path
      local_var_path = "/deposit_switch/token/create"

      # header parameters
      header_params : Hash(String, String) = Hash(String, String).new
      # HTTP header "Accept" (if needed)
      header_params["Accept"] = @api_client.select_header_accept(["application/json"])
      # HTTP header "Content-Type"
      header_params["Content-Type"] = @api_client.select_header_content_type(["application/json"])

      # cookie parameters
      cookie_params : Hash(String, String) = Hash(String, String).new

      # query parameters
      query_params : Hash(String, (String | Array(String) | JSON::Any)) = Hash(String, (String | Array(String) | JSON::Any)).new

      # form parameters
      form_params : Array(Tuple(String, Crest::ParamsValue)) | Nil = nil

      # http body (model)
      post_body : IO | String | Nil = @api_client.encode(body: deposit_switch_token_create_request, content_type: header_params["Content-Type"]?) if !deposit_switch_token_create_request.nil?

      # auth_names
      auth_names = ["clientId", "plaidVersion", "secret"]

      @api_client.build_api_request(
        http_method: :"POST",
        path: local_var_path,
        operation: "PlaidApi.deposit_switch_token_create",
        post_body: post_body,
        auth_names: auth_names,
        header_params: header_params,
        cookie_params: cookie_params,
        query_params: query_params,
        form_params: form_params
      )
    end

    # Search employer database
    # `/employers/search` allows you the ability to search Plaid’s database of known employers, for use with Deposit Switch. You can use this endpoint to look up a user's employer in order to confirm that they are supported. Users with non-supported employers can then be routed out of the Deposit Switch flow.  The data in the employer database is currently limited. As the Deposit Switch and Income products progress through their respective beta periods, more employers are being regularly added. Because the employer database is frequently updated, we recommend that you do not cache or store data from this endpoint for more than a day.
    # @required @param employers_search_request [Plaid::EmployersSearchRequest?]
    # @return [EmployersSearchResponse]
    def employers_search(
      *,
      employers_search_request : Plaid::EmployersSearchRequest? = nil
    ) : EmployersSearchResponse
      data, _status_code, _headers = employers_search_with_http_info(employers_search_request: employers_search_request)
      data
    end

    # Search employer database
    # &#x60;/employers/search&#x60; allows you the ability to search Plaid’s database of known employers, for use with Deposit Switch. You can use this endpoint to look up a user&#39;s employer in order to confirm that they are supported. Users with non-supported employers can then be routed out of the Deposit Switch flow.  The data in the employer database is currently limited. As the Deposit Switch and Income products progress through their respective beta periods, more employers are being regularly added. Because the employer database is frequently updated, we recommend that you do not cache or store data from this endpoint for more than a day.
    # @required @param employers_search_request [Plaid::EmployersSearchRequest?]
    # @return [Tuple(EmployersSearchResponse, Integer, Hash)] EmployersSearchResponse, response status code and response headers
    def employers_search_with_http_info(
      *,
      employers_search_request : Plaid::EmployersSearchRequest? = nil
    ) : Tuple(EmployersSearchResponse, Int32, Hash(String, Array(String) | String))
      request = build_api_request_for_employers_search(employers_search_request: employers_search_request)

      body, status_code, headers = @api_client.execute_api_request(request)

      if debugging?
        Log.debug { "API called: PlaidApi#employers_search\nBody: #{body.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}" }
      end

      Tuple.new(EmployersSearchResponse.from_json(body), status_code, headers)
    end

    # Search employer database
    # &#x60;/employers/search&#x60; allows you the ability to search Plaid’s database of known employers, for use with Deposit Switch. You can use this endpoint to look up a user&#39;s employer in order to confirm that they are supported. Users with non-supported employers can then be routed out of the Deposit Switch flow.  The data in the employer database is currently limited. As the Deposit Switch and Income products progress through their respective beta periods, more employers are being regularly added. Because the employer database is frequently updated, we recommend that you do not cache or store data from this endpoint for more than a day.
    # @required @param employers_search_request [Plaid::EmployersSearchRequest?]
    # @return nil
    def employers_search(
      *,
      employers_search_request : Plaid::EmployersSearchRequest? = nil,
      &block : Crest::Response ->
    ) : Nil
      build_api_request_for_employers_search(employers_search_request: employers_search_request).execute(&block)
    end

    # @return Crest::Request
    def build_api_request_for_employers_search(
      *,
      employers_search_request : Plaid::EmployersSearchRequest? = nil
    ) : Crest::Request
      if debugging?
        Log.debug { "Calling API: PlaidApi.employers_search ..." }
      end

      if client_side_validation?
        raise ArgumentError.new("\"employers_search_request\" is required and cannot be null") if employers_search_request.nil?
        unless (_employers_search_request = employers_search_request).nil?
          _employers_search_request.validate if _employers_search_request.is_a?(OpenApi::Validatable)
        end
      end

      # resource path
      local_var_path = "/employers/search"

      # header parameters
      header_params : Hash(String, String) = Hash(String, String).new
      # HTTP header "Accept" (if needed)
      header_params["Accept"] = @api_client.select_header_accept(["application/json"])
      # HTTP header "Content-Type"
      header_params["Content-Type"] = @api_client.select_header_content_type(["application/json"])

      # cookie parameters
      cookie_params : Hash(String, String) = Hash(String, String).new

      # query parameters
      query_params : Hash(String, (String | Array(String) | JSON::Any)) = Hash(String, (String | Array(String) | JSON::Any)).new

      # form parameters
      form_params : Array(Tuple(String, Crest::ParamsValue)) | Nil = nil

      # http body (model)
      post_body : IO | String | Nil = @api_client.encode(body: employers_search_request, content_type: header_params["Content-Type"]?) if !employers_search_request.nil?

      # auth_names
      auth_names = ["clientId", "plaidVersion", "secret"]

      @api_client.build_api_request(
        http_method: :"POST",
        path: local_var_path,
        operation: "PlaidApi.employers_search",
        post_body: post_body,
        auth_names: auth_names,
        header_params: header_params,
        cookie_params: cookie_params,
        query_params: query_params,
        form_params: form_params
      )
    end

    # (Deprecated) Retrieve a summary of an individual's employment information
    # `/employment/verification/get` returns a list of employments through a user payroll that was verified by an end user.  This endpoint has been deprecated; new integrations should use `/credit/employment/get` instead.
    # @required @param employment_verification_get_request [Plaid::EmploymentVerificationGetRequest?]
    # @return [EmploymentVerificationGetResponse]
    def employment_verification_get(
      *,
      employment_verification_get_request : Plaid::EmploymentVerificationGetRequest? = nil
    ) : EmploymentVerificationGetResponse
      data, _status_code, _headers = employment_verification_get_with_http_info(employment_verification_get_request: employment_verification_get_request)
      data
    end

    # (Deprecated) Retrieve a summary of an individual&#39;s employment information
    # &#x60;/employment/verification/get&#x60; returns a list of employments through a user payroll that was verified by an end user.  This endpoint has been deprecated; new integrations should use &#x60;/credit/employment/get&#x60; instead.
    # @required @param employment_verification_get_request [Plaid::EmploymentVerificationGetRequest?]
    # @return [Tuple(EmploymentVerificationGetResponse, Integer, Hash)] EmploymentVerificationGetResponse, response status code and response headers
    def employment_verification_get_with_http_info(
      *,
      employment_verification_get_request : Plaid::EmploymentVerificationGetRequest? = nil
    ) : Tuple(EmploymentVerificationGetResponse, Int32, Hash(String, Array(String) | String))
      request = build_api_request_for_employment_verification_get(employment_verification_get_request: employment_verification_get_request)

      body, status_code, headers = @api_client.execute_api_request(request)

      if debugging?
        Log.debug { "API called: PlaidApi#employment_verification_get\nBody: #{body.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}" }
      end

      Tuple.new(EmploymentVerificationGetResponse.from_json(body), status_code, headers)
    end

    # (Deprecated) Retrieve a summary of an individual&#39;s employment information
    # &#x60;/employment/verification/get&#x60; returns a list of employments through a user payroll that was verified by an end user.  This endpoint has been deprecated; new integrations should use &#x60;/credit/employment/get&#x60; instead.
    # @required @param employment_verification_get_request [Plaid::EmploymentVerificationGetRequest?]
    # @return nil
    def employment_verification_get(
      *,
      employment_verification_get_request : Plaid::EmploymentVerificationGetRequest? = nil,
      &block : Crest::Response ->
    ) : Nil
      build_api_request_for_employment_verification_get(employment_verification_get_request: employment_verification_get_request).execute(&block)
    end

    # @return Crest::Request
    def build_api_request_for_employment_verification_get(
      *,
      employment_verification_get_request : Plaid::EmploymentVerificationGetRequest? = nil
    ) : Crest::Request
      if debugging?
        Log.debug { "Calling API: PlaidApi.employment_verification_get ..." }
      end

      if client_side_validation?
        raise ArgumentError.new("\"employment_verification_get_request\" is required and cannot be null") if employment_verification_get_request.nil?
        unless (_employment_verification_get_request = employment_verification_get_request).nil?
          _employment_verification_get_request.validate if _employment_verification_get_request.is_a?(OpenApi::Validatable)
        end
      end

      # resource path
      local_var_path = "/employment/verification/get"

      # header parameters
      header_params : Hash(String, String) = Hash(String, String).new
      # HTTP header "Accept" (if needed)
      header_params["Accept"] = @api_client.select_header_accept(["application/json"])
      # HTTP header "Content-Type"
      header_params["Content-Type"] = @api_client.select_header_content_type(["application/json"])

      # cookie parameters
      cookie_params : Hash(String, String) = Hash(String, String).new

      # query parameters
      query_params : Hash(String, (String | Array(String) | JSON::Any)) = Hash(String, (String | Array(String) | JSON::Any)).new

      # form parameters
      form_params : Array(Tuple(String, Crest::ParamsValue)) | Nil = nil

      # http body (model)
      post_body : IO | String | Nil = @api_client.encode(body: employment_verification_get_request, content_type: header_params["Content-Type"]?) if !employment_verification_get_request.nil?

      # auth_names
      auth_names = ["clientId", "plaidVersion", "secret"]

      @api_client.build_api_request(
        http_method: :"POST",
        path: local_var_path,
        operation: "PlaidApi.employment_verification_get",
        post_body: post_body,
        auth_names: auth_names,
        header_params: header_params,
        cookie_params: cookie_params,
        query_params: query_params,
        form_params: form_params
      )
    end

    # Webhook receiver for fdx notifications
    # A generic webhook receiver endpoint for FDX Event Notifications
    # @required @param fdx_notification [Plaid::FDXNotification?]
    # @return [Nil]
    def fdx_notifications(
      *,
      fdx_notification : Plaid::FDXNotification? = nil
    ) : Nil
      fdx_notifications_with_http_info(fdx_notification: fdx_notification)
      nil
    end

    # Webhook receiver for fdx notifications
    # A generic webhook receiver endpoint for FDX Event Notifications
    # @required @param fdx_notification [Plaid::FDXNotification?]
    # @return [Tuple(Nil, Integer, Hash)] Nil, response status code and response headers
    def fdx_notifications_with_http_info(
      *,
      fdx_notification : Plaid::FDXNotification? = nil
    ) : Tuple(Nil, Int32, Hash(String, Array(String) | String))
      request = build_api_request_for_fdx_notifications(fdx_notification: fdx_notification)

      body, status_code, headers = @api_client.execute_api_request(request)

      if debugging?
        Log.debug { "API called: PlaidApi#fdx_notifications\nBody: #{body.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}" }
      end

      Tuple.new(nil, status_code, headers)
    end

    # Webhook receiver for fdx notifications
    # A generic webhook receiver endpoint for FDX Event Notifications
    # @required @param fdx_notification [Plaid::FDXNotification?]
    # @return nil
    def fdx_notifications(
      *,
      fdx_notification : Plaid::FDXNotification? = nil,
      &block : Crest::Response ->
    ) : Nil
      build_api_request_for_fdx_notifications(fdx_notification: fdx_notification).execute(&block)
    end

    # @return Crest::Request
    def build_api_request_for_fdx_notifications(
      *,
      fdx_notification : Plaid::FDXNotification? = nil
    ) : Crest::Request
      if debugging?
        Log.debug { "Calling API: PlaidApi.fdx_notifications ..." }
      end

      if client_side_validation?
        raise ArgumentError.new("\"fdx_notification\" is required and cannot be null") if fdx_notification.nil?
        unless (_fdx_notification = fdx_notification).nil?
          _fdx_notification.validate if _fdx_notification.is_a?(OpenApi::Validatable)
        end
      end

      # resource path
      local_var_path = "/fdx/notifications"

      # header parameters
      header_params : Hash(String, String) = Hash(String, String).new
      # HTTP header "Accept" (if needed)
      header_params["Accept"] = @api_client.select_header_accept(["application/json"])
      # HTTP header "Content-Type"
      header_params["Content-Type"] = @api_client.select_header_content_type(["application/json"])

      # cookie parameters
      cookie_params : Hash(String, String) = Hash(String, String).new

      # query parameters
      query_params : Hash(String, (String | Array(String) | JSON::Any)) = Hash(String, (String | Array(String) | JSON::Any)).new

      # form parameters
      form_params : Array(Tuple(String, Crest::ParamsValue)) | Nil = nil

      # http body (model)
      post_body : IO | String | Nil = @api_client.encode(body: fdx_notification, content_type: header_params["Content-Type"]?) if !fdx_notification.nil?

      # auth_names
      auth_names = ["clientId", "plaidVersion", "secret"]

      @api_client.build_api_request(
        http_method: :"POST",
        path: local_var_path,
        operation: "PlaidApi.fdx_notifications",
        post_body: post_body,
        auth_names: auth_names,
        header_params: header_params,
        cookie_params: cookie_params,
        query_params: query_params,
        form_params: form_params
      )
    end

    # Retrieve identity data
    # The `/identity/get` endpoint allows you to retrieve various account holder information on file with the financial institution, including names, emails, phone numbers, and addresses. Only name data is guaranteed to be returned; other fields will be empty arrays if not provided by the institution.  This request may take some time to complete if identity was not specified as an initial product when creating the Item. This is because Plaid must communicate directly with the institution to retrieve the data.  Note: In API versions 2018-05-22 and earlier, the `owners` object is not returned, and instead identity information is returned in the top level `identity` object. For more details, see [Plaid API versioning](https://plaid.com/docs/api/versioning/#version-2019-05-29).
    # @required @param identity_get_request [Plaid::IdentityGetRequest?]
    # @return [IdentityGetResponse]
    def identity_get(
      *,
      identity_get_request : Plaid::IdentityGetRequest? = nil
    ) : IdentityGetResponse
      data, _status_code, _headers = identity_get_with_http_info(identity_get_request: identity_get_request)
      data
    end

    # Retrieve identity data
    # The &#x60;/identity/get&#x60; endpoint allows you to retrieve various account holder information on file with the financial institution, including names, emails, phone numbers, and addresses. Only name data is guaranteed to be returned; other fields will be empty arrays if not provided by the institution.  This request may take some time to complete if identity was not specified as an initial product when creating the Item. This is because Plaid must communicate directly with the institution to retrieve the data.  Note: In API versions 2018-05-22 and earlier, the &#x60;owners&#x60; object is not returned, and instead identity information is returned in the top level &#x60;identity&#x60; object. For more details, see [Plaid API versioning](https://plaid.com/docs/api/versioning/#version-2019-05-29).
    # @required @param identity_get_request [Plaid::IdentityGetRequest?]
    # @return [Tuple(IdentityGetResponse, Integer, Hash)] IdentityGetResponse, response status code and response headers
    def identity_get_with_http_info(
      *,
      identity_get_request : Plaid::IdentityGetRequest? = nil
    ) : Tuple(IdentityGetResponse, Int32, Hash(String, Array(String) | String))
      request = build_api_request_for_identity_get(identity_get_request: identity_get_request)

      body, status_code, headers = @api_client.execute_api_request(request)

      if debugging?
        Log.debug { "API called: PlaidApi#identity_get\nBody: #{body.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}" }
      end

      Tuple.new(IdentityGetResponse.from_json(body), status_code, headers)
    end

    # Retrieve identity data
    # The &#x60;/identity/get&#x60; endpoint allows you to retrieve various account holder information on file with the financial institution, including names, emails, phone numbers, and addresses. Only name data is guaranteed to be returned; other fields will be empty arrays if not provided by the institution.  This request may take some time to complete if identity was not specified as an initial product when creating the Item. This is because Plaid must communicate directly with the institution to retrieve the data.  Note: In API versions 2018-05-22 and earlier, the &#x60;owners&#x60; object is not returned, and instead identity information is returned in the top level &#x60;identity&#x60; object. For more details, see [Plaid API versioning](https://plaid.com/docs/api/versioning/#version-2019-05-29).
    # @required @param identity_get_request [Plaid::IdentityGetRequest?]
    # @return nil
    def identity_get(
      *,
      identity_get_request : Plaid::IdentityGetRequest? = nil,
      &block : Crest::Response ->
    ) : Nil
      build_api_request_for_identity_get(identity_get_request: identity_get_request).execute(&block)
    end

    # @return Crest::Request
    def build_api_request_for_identity_get(
      *,
      identity_get_request : Plaid::IdentityGetRequest? = nil
    ) : Crest::Request
      if debugging?
        Log.debug { "Calling API: PlaidApi.identity_get ..." }
      end

      if client_side_validation?
        raise ArgumentError.new("\"identity_get_request\" is required and cannot be null") if identity_get_request.nil?
        unless (_identity_get_request = identity_get_request).nil?
          _identity_get_request.validate if _identity_get_request.is_a?(OpenApi::Validatable)
        end
      end

      # resource path
      local_var_path = "/identity/get"

      # header parameters
      header_params : Hash(String, String) = Hash(String, String).new
      # HTTP header "Accept" (if needed)
      header_params["Accept"] = @api_client.select_header_accept(["application/json"])
      # HTTP header "Content-Type"
      header_params["Content-Type"] = @api_client.select_header_content_type(["application/json"])

      # cookie parameters
      cookie_params : Hash(String, String) = Hash(String, String).new

      # query parameters
      query_params : Hash(String, (String | Array(String) | JSON::Any)) = Hash(String, (String | Array(String) | JSON::Any)).new

      # form parameters
      form_params : Array(Tuple(String, Crest::ParamsValue)) | Nil = nil

      # http body (model)
      post_body : IO | String | Nil = @api_client.encode(body: identity_get_request, content_type: header_params["Content-Type"]?) if !identity_get_request.nil?

      # auth_names
      auth_names = ["clientId", "plaidVersion", "secret"]

      @api_client.build_api_request(
        http_method: :"POST",
        path: local_var_path,
        operation: "PlaidApi.identity_get",
        post_body: post_body,
        auth_names: auth_names,
        header_params: header_params,
        cookie_params: cookie_params,
        query_params: query_params,
        form_params: form_params
      )
    end

    # Retrieve identity match score
    # The `/identity/match` endpoint generates a match score, which indicates how well the provided identity data matches the identity information on file with the account holder's financial institution.  Fields within the `balances` object will always be null when retrieved by `/identity/match`. Instead, use the free `/accounts/get` endpoint to request balance cached data, or `/accounts/balance/get` for real-time data.  This request may take some time to complete if Identity was not specified as an initial product when creating the Item. This is because Plaid must communicate directly with the institution to retrieve the data.
    # @required @param identity_match_request [Plaid::IdentityMatchRequest?]
    # @return [IdentityMatchResponse]
    def identity_match(
      *,
      identity_match_request : Plaid::IdentityMatchRequest? = nil
    ) : IdentityMatchResponse
      data, _status_code, _headers = identity_match_with_http_info(identity_match_request: identity_match_request)
      data
    end

    # Retrieve identity match score
    # The &#x60;/identity/match&#x60; endpoint generates a match score, which indicates how well the provided identity data matches the identity information on file with the account holder&#39;s financial institution.  Fields within the &#x60;balances&#x60; object will always be null when retrieved by &#x60;/identity/match&#x60;. Instead, use the free &#x60;/accounts/get&#x60; endpoint to request balance cached data, or &#x60;/accounts/balance/get&#x60; for real-time data.  This request may take some time to complete if Identity was not specified as an initial product when creating the Item. This is because Plaid must communicate directly with the institution to retrieve the data.
    # @required @param identity_match_request [Plaid::IdentityMatchRequest?]
    # @return [Tuple(IdentityMatchResponse, Integer, Hash)] IdentityMatchResponse, response status code and response headers
    def identity_match_with_http_info(
      *,
      identity_match_request : Plaid::IdentityMatchRequest? = nil
    ) : Tuple(IdentityMatchResponse, Int32, Hash(String, Array(String) | String))
      request = build_api_request_for_identity_match(identity_match_request: identity_match_request)

      body, status_code, headers = @api_client.execute_api_request(request)

      if debugging?
        Log.debug { "API called: PlaidApi#identity_match\nBody: #{body.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}" }
      end

      Tuple.new(IdentityMatchResponse.from_json(body), status_code, headers)
    end

    # Retrieve identity match score
    # The &#x60;/identity/match&#x60; endpoint generates a match score, which indicates how well the provided identity data matches the identity information on file with the account holder&#39;s financial institution.  Fields within the &#x60;balances&#x60; object will always be null when retrieved by &#x60;/identity/match&#x60;. Instead, use the free &#x60;/accounts/get&#x60; endpoint to request balance cached data, or &#x60;/accounts/balance/get&#x60; for real-time data.  This request may take some time to complete if Identity was not specified as an initial product when creating the Item. This is because Plaid must communicate directly with the institution to retrieve the data.
    # @required @param identity_match_request [Plaid::IdentityMatchRequest?]
    # @return nil
    def identity_match(
      *,
      identity_match_request : Plaid::IdentityMatchRequest? = nil,
      &block : Crest::Response ->
    ) : Nil
      build_api_request_for_identity_match(identity_match_request: identity_match_request).execute(&block)
    end

    # @return Crest::Request
    def build_api_request_for_identity_match(
      *,
      identity_match_request : Plaid::IdentityMatchRequest? = nil
    ) : Crest::Request
      if debugging?
        Log.debug { "Calling API: PlaidApi.identity_match ..." }
      end

      if client_side_validation?
        raise ArgumentError.new("\"identity_match_request\" is required and cannot be null") if identity_match_request.nil?
        unless (_identity_match_request = identity_match_request).nil?
          _identity_match_request.validate if _identity_match_request.is_a?(OpenApi::Validatable)
        end
      end

      # resource path
      local_var_path = "/identity/match"

      # header parameters
      header_params : Hash(String, String) = Hash(String, String).new
      # HTTP header "Accept" (if needed)
      header_params["Accept"] = @api_client.select_header_accept(["application/json"])
      # HTTP header "Content-Type"
      header_params["Content-Type"] = @api_client.select_header_content_type(["application/json"])

      # cookie parameters
      cookie_params : Hash(String, String) = Hash(String, String).new

      # query parameters
      query_params : Hash(String, (String | Array(String) | JSON::Any)) = Hash(String, (String | Array(String) | JSON::Any)).new

      # form parameters
      form_params : Array(Tuple(String, Crest::ParamsValue)) | Nil = nil

      # http body (model)
      post_body : IO | String | Nil = @api_client.encode(body: identity_match_request, content_type: header_params["Content-Type"]?) if !identity_match_request.nil?

      # auth_names
      auth_names = ["clientId", "plaidVersion", "secret"]

      @api_client.build_api_request(
        http_method: :"POST",
        path: local_var_path,
        operation: "PlaidApi.identity_match",
        post_body: post_body,
        auth_names: auth_names,
        header_params: header_params,
        cookie_params: cookie_params,
        query_params: query_params,
        form_params: form_params
      )
    end

    # Refresh identity data
    # `/identity/refresh` is an optional endpoint for users of the Identity product. It initiates an on-demand extraction to fetch the most up to date Identity information from the Financial Institution. This on-demand extraction takes place in addition to the periodic extractions that automatically occur any Identity-enabled Item. If changes to Identity are discovered after calling `/identity/refresh`, Plaid will fire a webhook [`DEFAULT_UPDATE`](https://plaid.com/docs/api/products/identity/#default_update). `/identity/refresh` is offered as an add-on to Identity and has a separate [fee model](/docs/account/billing/#per-request-flat-fee). To request access to this endpoint, submit a [product access request](https://dashboard.plaid.com/team/products) or contact your Plaid account manager.
    # @required @param identity_refresh_request [Plaid::IdentityRefreshRequest?]
    # @return [IdentityRefreshResponse]
    def identity_refresh(
      *,
      identity_refresh_request : Plaid::IdentityRefreshRequest? = nil
    ) : IdentityRefreshResponse
      data, _status_code, _headers = identity_refresh_with_http_info(identity_refresh_request: identity_refresh_request)
      data
    end

    # Refresh identity data
    # &#x60;/identity/refresh&#x60; is an optional endpoint for users of the Identity product. It initiates an on-demand extraction to fetch the most up to date Identity information from the Financial Institution. This on-demand extraction takes place in addition to the periodic extractions that automatically occur any Identity-enabled Item. If changes to Identity are discovered after calling &#x60;/identity/refresh&#x60;, Plaid will fire a webhook [&#x60;DEFAULT_UPDATE&#x60;](https://plaid.com/docs/api/products/identity/#default_update). &#x60;/identity/refresh&#x60; is offered as an add-on to Identity and has a separate [fee model](/docs/account/billing/#per-request-flat-fee). To request access to this endpoint, submit a [product access request](https://dashboard.plaid.com/team/products) or contact your Plaid account manager.
    # @required @param identity_refresh_request [Plaid::IdentityRefreshRequest?]
    # @return [Tuple(IdentityRefreshResponse, Integer, Hash)] IdentityRefreshResponse, response status code and response headers
    def identity_refresh_with_http_info(
      *,
      identity_refresh_request : Plaid::IdentityRefreshRequest? = nil
    ) : Tuple(IdentityRefreshResponse, Int32, Hash(String, Array(String) | String))
      request = build_api_request_for_identity_refresh(identity_refresh_request: identity_refresh_request)

      body, status_code, headers = @api_client.execute_api_request(request)

      if debugging?
        Log.debug { "API called: PlaidApi#identity_refresh\nBody: #{body.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}" }
      end

      Tuple.new(IdentityRefreshResponse.from_json(body), status_code, headers)
    end

    # Refresh identity data
    # &#x60;/identity/refresh&#x60; is an optional endpoint for users of the Identity product. It initiates an on-demand extraction to fetch the most up to date Identity information from the Financial Institution. This on-demand extraction takes place in addition to the periodic extractions that automatically occur any Identity-enabled Item. If changes to Identity are discovered after calling &#x60;/identity/refresh&#x60;, Plaid will fire a webhook [&#x60;DEFAULT_UPDATE&#x60;](https://plaid.com/docs/api/products/identity/#default_update). &#x60;/identity/refresh&#x60; is offered as an add-on to Identity and has a separate [fee model](/docs/account/billing/#per-request-flat-fee). To request access to this endpoint, submit a [product access request](https://dashboard.plaid.com/team/products) or contact your Plaid account manager.
    # @required @param identity_refresh_request [Plaid::IdentityRefreshRequest?]
    # @return nil
    def identity_refresh(
      *,
      identity_refresh_request : Plaid::IdentityRefreshRequest? = nil,
      &block : Crest::Response ->
    ) : Nil
      build_api_request_for_identity_refresh(identity_refresh_request: identity_refresh_request).execute(&block)
    end

    # @return Crest::Request
    def build_api_request_for_identity_refresh(
      *,
      identity_refresh_request : Plaid::IdentityRefreshRequest? = nil
    ) : Crest::Request
      if debugging?
        Log.debug { "Calling API: PlaidApi.identity_refresh ..." }
      end

      if client_side_validation?
        raise ArgumentError.new("\"identity_refresh_request\" is required and cannot be null") if identity_refresh_request.nil?
        unless (_identity_refresh_request = identity_refresh_request).nil?
          _identity_refresh_request.validate if _identity_refresh_request.is_a?(OpenApi::Validatable)
        end
      end

      # resource path
      local_var_path = "/identity/refresh"

      # header parameters
      header_params : Hash(String, String) = Hash(String, String).new
      # HTTP header "Accept" (if needed)
      header_params["Accept"] = @api_client.select_header_accept(["application/json"])
      # HTTP header "Content-Type"
      header_params["Content-Type"] = @api_client.select_header_content_type(["application/json"])

      # cookie parameters
      cookie_params : Hash(String, String) = Hash(String, String).new

      # query parameters
      query_params : Hash(String, (String | Array(String) | JSON::Any)) = Hash(String, (String | Array(String) | JSON::Any)).new

      # form parameters
      form_params : Array(Tuple(String, Crest::ParamsValue)) | Nil = nil

      # http body (model)
      post_body : IO | String | Nil = @api_client.encode(body: identity_refresh_request, content_type: header_params["Content-Type"]?) if !identity_refresh_request.nil?

      # auth_names
      auth_names = ["clientId", "plaidVersion", "secret"]

      @api_client.build_api_request(
        http_method: :"POST",
        path: local_var_path,
        operation: "PlaidApi.identity_refresh",
        post_body: post_body,
        auth_names: auth_names,
        header_params: header_params,
        cookie_params: cookie_params,
        query_params: query_params,
        form_params: form_params
      )
    end

    # Create a new identity verification
    # Create a new Identity Verification for the user specified by the `client_user_id` field. The requirements and behavior of the verification are determined by the `template_id` provided. If you don't know whether the associated user already has an active Identity Verification, you can specify `\"is_idempotent\": true` in the request body. With idempotency enabled, a new Identity Verification will only be created if one does not already exist for the associated `client_user_id` and `template_id`. If an Identity Verification is found, it will be returned unmodified with an `200 OK` HTTP status code.  You can also use this endpoint to supply information you already have collected about the user; if any of these fields are specified, the screens prompting the user to enter them will be skipped during the Link flow.
    # @required @param identity_verification_create_request [Plaid::IdentityVerificationCreateRequest?]
    # @return [IdentityVerificationCreateResponse]
    def identity_verification_create(
      *,
      identity_verification_create_request : Plaid::IdentityVerificationCreateRequest? = nil
    ) : IdentityVerificationCreateResponse
      data, _status_code, _headers = identity_verification_create_with_http_info(identity_verification_create_request: identity_verification_create_request)
      data
    end

    # Create a new identity verification
    # Create a new Identity Verification for the user specified by the &#x60;client_user_id&#x60; field. The requirements and behavior of the verification are determined by the &#x60;template_id&#x60; provided. If you don&#39;t know whether the associated user already has an active Identity Verification, you can specify &#x60;\&quot;is_idempotent\&quot;: true&#x60; in the request body. With idempotency enabled, a new Identity Verification will only be created if one does not already exist for the associated &#x60;client_user_id&#x60; and &#x60;template_id&#x60;. If an Identity Verification is found, it will be returned unmodified with an &#x60;200 OK&#x60; HTTP status code.  You can also use this endpoint to supply information you already have collected about the user; if any of these fields are specified, the screens prompting the user to enter them will be skipped during the Link flow.
    # @required @param identity_verification_create_request [Plaid::IdentityVerificationCreateRequest?]
    # @return [Tuple(IdentityVerificationCreateResponse, Integer, Hash)] IdentityVerificationCreateResponse, response status code and response headers
    def identity_verification_create_with_http_info(
      *,
      identity_verification_create_request : Plaid::IdentityVerificationCreateRequest? = nil
    ) : Tuple(IdentityVerificationCreateResponse, Int32, Hash(String, Array(String) | String))
      request = build_api_request_for_identity_verification_create(identity_verification_create_request: identity_verification_create_request)

      body, status_code, headers = @api_client.execute_api_request(request)

      if debugging?
        Log.debug { "API called: PlaidApi#identity_verification_create\nBody: #{body.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}" }
      end

      Tuple.new(IdentityVerificationCreateResponse.from_json(body), status_code, headers)
    end

    # Create a new identity verification
    # Create a new Identity Verification for the user specified by the &#x60;client_user_id&#x60; field. The requirements and behavior of the verification are determined by the &#x60;template_id&#x60; provided. If you don&#39;t know whether the associated user already has an active Identity Verification, you can specify &#x60;\&quot;is_idempotent\&quot;: true&#x60; in the request body. With idempotency enabled, a new Identity Verification will only be created if one does not already exist for the associated &#x60;client_user_id&#x60; and &#x60;template_id&#x60;. If an Identity Verification is found, it will be returned unmodified with an &#x60;200 OK&#x60; HTTP status code.  You can also use this endpoint to supply information you already have collected about the user; if any of these fields are specified, the screens prompting the user to enter them will be skipped during the Link flow.
    # @required @param identity_verification_create_request [Plaid::IdentityVerificationCreateRequest?]
    # @return nil
    def identity_verification_create(
      *,
      identity_verification_create_request : Plaid::IdentityVerificationCreateRequest? = nil,
      &block : Crest::Response ->
    ) : Nil
      build_api_request_for_identity_verification_create(identity_verification_create_request: identity_verification_create_request).execute(&block)
    end

    # @return Crest::Request
    def build_api_request_for_identity_verification_create(
      *,
      identity_verification_create_request : Plaid::IdentityVerificationCreateRequest? = nil
    ) : Crest::Request
      if debugging?
        Log.debug { "Calling API: PlaidApi.identity_verification_create ..." }
      end

      if client_side_validation?
        raise ArgumentError.new("\"identity_verification_create_request\" is required and cannot be null") if identity_verification_create_request.nil?
        unless (_identity_verification_create_request = identity_verification_create_request).nil?
          _identity_verification_create_request.validate if _identity_verification_create_request.is_a?(OpenApi::Validatable)
        end
      end

      # resource path
      local_var_path = "/identity_verification/create"

      # header parameters
      header_params : Hash(String, String) = Hash(String, String).new
      # HTTP header "Accept" (if needed)
      header_params["Accept"] = @api_client.select_header_accept(["application/json"])
      # HTTP header "Content-Type"
      header_params["Content-Type"] = @api_client.select_header_content_type(["application/json"])

      # cookie parameters
      cookie_params : Hash(String, String) = Hash(String, String).new

      # query parameters
      query_params : Hash(String, (String | Array(String) | JSON::Any)) = Hash(String, (String | Array(String) | JSON::Any)).new

      # form parameters
      form_params : Array(Tuple(String, Crest::ParamsValue)) | Nil = nil

      # http body (model)
      post_body : IO | String | Nil = @api_client.encode(body: identity_verification_create_request, content_type: header_params["Content-Type"]?) if !identity_verification_create_request.nil?

      # auth_names
      auth_names = ["clientId", "plaidVersion", "secret"]

      @api_client.build_api_request(
        http_method: :"POST",
        path: local_var_path,
        operation: "PlaidApi.identity_verification_create",
        post_body: post_body,
        auth_names: auth_names,
        header_params: header_params,
        cookie_params: cookie_params,
        query_params: query_params,
        form_params: form_params
      )
    end

    # Retrieve Identity Verification
    # Retrieve a previously created identity verification.
    # @required @param identity_verification_get_request [Plaid::IdentityVerificationGetRequest?]
    # @return [IdentityVerificationGetResponse]
    def identity_verification_get(
      *,
      identity_verification_get_request : Plaid::IdentityVerificationGetRequest? = nil
    ) : IdentityVerificationGetResponse
      data, _status_code, _headers = identity_verification_get_with_http_info(identity_verification_get_request: identity_verification_get_request)
      data
    end

    # Retrieve Identity Verification
    # Retrieve a previously created identity verification.
    # @required @param identity_verification_get_request [Plaid::IdentityVerificationGetRequest?]
    # @return [Tuple(IdentityVerificationGetResponse, Integer, Hash)] IdentityVerificationGetResponse, response status code and response headers
    def identity_verification_get_with_http_info(
      *,
      identity_verification_get_request : Plaid::IdentityVerificationGetRequest? = nil
    ) : Tuple(IdentityVerificationGetResponse, Int32, Hash(String, Array(String) | String))
      request = build_api_request_for_identity_verification_get(identity_verification_get_request: identity_verification_get_request)

      body, status_code, headers = @api_client.execute_api_request(request)

      if debugging?
        Log.debug { "API called: PlaidApi#identity_verification_get\nBody: #{body.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}" }
      end

      Tuple.new(IdentityVerificationGetResponse.from_json(body), status_code, headers)
    end

    # Retrieve Identity Verification
    # Retrieve a previously created identity verification.
    # @required @param identity_verification_get_request [Plaid::IdentityVerificationGetRequest?]
    # @return nil
    def identity_verification_get(
      *,
      identity_verification_get_request : Plaid::IdentityVerificationGetRequest? = nil,
      &block : Crest::Response ->
    ) : Nil
      build_api_request_for_identity_verification_get(identity_verification_get_request: identity_verification_get_request).execute(&block)
    end

    # @return Crest::Request
    def build_api_request_for_identity_verification_get(
      *,
      identity_verification_get_request : Plaid::IdentityVerificationGetRequest? = nil
    ) : Crest::Request
      if debugging?
        Log.debug { "Calling API: PlaidApi.identity_verification_get ..." }
      end

      if client_side_validation?
        raise ArgumentError.new("\"identity_verification_get_request\" is required and cannot be null") if identity_verification_get_request.nil?
        unless (_identity_verification_get_request = identity_verification_get_request).nil?
          _identity_verification_get_request.validate if _identity_verification_get_request.is_a?(OpenApi::Validatable)
        end
      end

      # resource path
      local_var_path = "/identity_verification/get"

      # header parameters
      header_params : Hash(String, String) = Hash(String, String).new
      # HTTP header "Accept" (if needed)
      header_params["Accept"] = @api_client.select_header_accept(["application/json"])
      # HTTP header "Content-Type"
      header_params["Content-Type"] = @api_client.select_header_content_type(["application/json"])

      # cookie parameters
      cookie_params : Hash(String, String) = Hash(String, String).new

      # query parameters
      query_params : Hash(String, (String | Array(String) | JSON::Any)) = Hash(String, (String | Array(String) | JSON::Any)).new

      # form parameters
      form_params : Array(Tuple(String, Crest::ParamsValue)) | Nil = nil

      # http body (model)
      post_body : IO | String | Nil = @api_client.encode(body: identity_verification_get_request, content_type: header_params["Content-Type"]?) if !identity_verification_get_request.nil?

      # auth_names
      auth_names = ["clientId", "plaidVersion", "secret"]

      @api_client.build_api_request(
        http_method: :"POST",
        path: local_var_path,
        operation: "PlaidApi.identity_verification_get",
        post_body: post_body,
        auth_names: auth_names,
        header_params: header_params,
        cookie_params: cookie_params,
        query_params: query_params,
        form_params: form_params
      )
    end

    # List Identity Verifications
    # Filter and list Identity Verifications created by your account
    # @required @param identity_verification_list_request [Plaid::IdentityVerificationListRequest?]
    # @return [IdentityVerificationListResponse]
    def identity_verification_list(
      *,
      identity_verification_list_request : Plaid::IdentityVerificationListRequest? = nil
    ) : IdentityVerificationListResponse
      data, _status_code, _headers = identity_verification_list_with_http_info(identity_verification_list_request: identity_verification_list_request)
      data
    end

    # List Identity Verifications
    # Filter and list Identity Verifications created by your account
    # @required @param identity_verification_list_request [Plaid::IdentityVerificationListRequest?]
    # @return [Tuple(IdentityVerificationListResponse, Integer, Hash)] IdentityVerificationListResponse, response status code and response headers
    def identity_verification_list_with_http_info(
      *,
      identity_verification_list_request : Plaid::IdentityVerificationListRequest? = nil
    ) : Tuple(IdentityVerificationListResponse, Int32, Hash(String, Array(String) | String))
      request = build_api_request_for_identity_verification_list(identity_verification_list_request: identity_verification_list_request)

      body, status_code, headers = @api_client.execute_api_request(request)

      if debugging?
        Log.debug { "API called: PlaidApi#identity_verification_list\nBody: #{body.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}" }
      end

      Tuple.new(IdentityVerificationListResponse.from_json(body), status_code, headers)
    end

    # List Identity Verifications
    # Filter and list Identity Verifications created by your account
    # @required @param identity_verification_list_request [Plaid::IdentityVerificationListRequest?]
    # @return nil
    def identity_verification_list(
      *,
      identity_verification_list_request : Plaid::IdentityVerificationListRequest? = nil,
      &block : Crest::Response ->
    ) : Nil
      build_api_request_for_identity_verification_list(identity_verification_list_request: identity_verification_list_request).execute(&block)
    end

    # @return Crest::Request
    def build_api_request_for_identity_verification_list(
      *,
      identity_verification_list_request : Plaid::IdentityVerificationListRequest? = nil
    ) : Crest::Request
      if debugging?
        Log.debug { "Calling API: PlaidApi.identity_verification_list ..." }
      end

      if client_side_validation?
        raise ArgumentError.new("\"identity_verification_list_request\" is required and cannot be null") if identity_verification_list_request.nil?
        unless (_identity_verification_list_request = identity_verification_list_request).nil?
          _identity_verification_list_request.validate if _identity_verification_list_request.is_a?(OpenApi::Validatable)
        end
      end

      # resource path
      local_var_path = "/identity_verification/list"

      # header parameters
      header_params : Hash(String, String) = Hash(String, String).new
      # HTTP header "Accept" (if needed)
      header_params["Accept"] = @api_client.select_header_accept(["application/json"])
      # HTTP header "Content-Type"
      header_params["Content-Type"] = @api_client.select_header_content_type(["application/json"])

      # cookie parameters
      cookie_params : Hash(String, String) = Hash(String, String).new

      # query parameters
      query_params : Hash(String, (String | Array(String) | JSON::Any)) = Hash(String, (String | Array(String) | JSON::Any)).new

      # form parameters
      form_params : Array(Tuple(String, Crest::ParamsValue)) | Nil = nil

      # http body (model)
      post_body : IO | String | Nil = @api_client.encode(body: identity_verification_list_request, content_type: header_params["Content-Type"]?) if !identity_verification_list_request.nil?

      # auth_names
      auth_names = ["clientId", "plaidVersion", "secret"]

      @api_client.build_api_request(
        http_method: :"POST",
        path: local_var_path,
        operation: "PlaidApi.identity_verification_list",
        post_body: post_body,
        auth_names: auth_names,
        header_params: header_params,
        cookie_params: cookie_params,
        query_params: query_params,
        form_params: form_params
      )
    end

    # Retry an Identity Verification
    # Allow a customer to retry their identity verification
    # @required @param identity_verification_retry_request [Plaid::IdentityVerificationRetryRequest?]
    # @return [IdentityVerificationRetryResponse]
    def identity_verification_retry(
      *,
      identity_verification_retry_request : Plaid::IdentityVerificationRetryRequest? = nil
    ) : IdentityVerificationRetryResponse
      data, _status_code, _headers = identity_verification_retry_with_http_info(identity_verification_retry_request: identity_verification_retry_request)
      data
    end

    # Retry an Identity Verification
    # Allow a customer to retry their identity verification
    # @required @param identity_verification_retry_request [Plaid::IdentityVerificationRetryRequest?]
    # @return [Tuple(IdentityVerificationRetryResponse, Integer, Hash)] IdentityVerificationRetryResponse, response status code and response headers
    def identity_verification_retry_with_http_info(
      *,
      identity_verification_retry_request : Plaid::IdentityVerificationRetryRequest? = nil
    ) : Tuple(IdentityVerificationRetryResponse, Int32, Hash(String, Array(String) | String))
      request = build_api_request_for_identity_verification_retry(identity_verification_retry_request: identity_verification_retry_request)

      body, status_code, headers = @api_client.execute_api_request(request)

      if debugging?
        Log.debug { "API called: PlaidApi#identity_verification_retry\nBody: #{body.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}" }
      end

      Tuple.new(IdentityVerificationRetryResponse.from_json(body), status_code, headers)
    end

    # Retry an Identity Verification
    # Allow a customer to retry their identity verification
    # @required @param identity_verification_retry_request [Plaid::IdentityVerificationRetryRequest?]
    # @return nil
    def identity_verification_retry(
      *,
      identity_verification_retry_request : Plaid::IdentityVerificationRetryRequest? = nil,
      &block : Crest::Response ->
    ) : Nil
      build_api_request_for_identity_verification_retry(identity_verification_retry_request: identity_verification_retry_request).execute(&block)
    end

    # @return Crest::Request
    def build_api_request_for_identity_verification_retry(
      *,
      identity_verification_retry_request : Plaid::IdentityVerificationRetryRequest? = nil
    ) : Crest::Request
      if debugging?
        Log.debug { "Calling API: PlaidApi.identity_verification_retry ..." }
      end

      if client_side_validation?
        raise ArgumentError.new("\"identity_verification_retry_request\" is required and cannot be null") if identity_verification_retry_request.nil?
        unless (_identity_verification_retry_request = identity_verification_retry_request).nil?
          _identity_verification_retry_request.validate if _identity_verification_retry_request.is_a?(OpenApi::Validatable)
        end
      end

      # resource path
      local_var_path = "/identity_verification/retry"

      # header parameters
      header_params : Hash(String, String) = Hash(String, String).new
      # HTTP header "Accept" (if needed)
      header_params["Accept"] = @api_client.select_header_accept(["application/json"])
      # HTTP header "Content-Type"
      header_params["Content-Type"] = @api_client.select_header_content_type(["application/json"])

      # cookie parameters
      cookie_params : Hash(String, String) = Hash(String, String).new

      # query parameters
      query_params : Hash(String, (String | Array(String) | JSON::Any)) = Hash(String, (String | Array(String) | JSON::Any)).new

      # form parameters
      form_params : Array(Tuple(String, Crest::ParamsValue)) | Nil = nil

      # http body (model)
      post_body : IO | String | Nil = @api_client.encode(body: identity_verification_retry_request, content_type: header_params["Content-Type"]?) if !identity_verification_retry_request.nil?

      # auth_names
      auth_names = ["clientId", "plaidVersion", "secret"]

      @api_client.build_api_request(
        http_method: :"POST",
        path: local_var_path,
        operation: "PlaidApi.identity_verification_retry",
        post_body: post_body,
        auth_names: auth_names,
        header_params: header_params,
        cookie_params: cookie_params,
        query_params: query_params,
        form_params: form_params
      )
    end

    # (Deprecated) Create an income verification instance
    # `/income/verification/create` begins the income verification process by returning an `income_verification_id`. You can then provide the `income_verification_id` to `/link/token/create` under the `income_verification` parameter in order to create a Link instance that will prompt the user to go through the income verification flow. Plaid will fire an `INCOME` webhook once the user completes the Payroll Income flow, or when the uploaded documents in the Document Income flow have finished processing.
    # @required @param income_verification_create_request [Plaid::IncomeVerificationCreateRequest?]
    # @return [IncomeVerificationCreateResponse]
    def income_verification_create(
      *,
      income_verification_create_request : Plaid::IncomeVerificationCreateRequest? = nil
    ) : IncomeVerificationCreateResponse
      data, _status_code, _headers = income_verification_create_with_http_info(income_verification_create_request: income_verification_create_request)
      data
    end

    # (Deprecated) Create an income verification instance
    # &#x60;/income/verification/create&#x60; begins the income verification process by returning an &#x60;income_verification_id&#x60;. You can then provide the &#x60;income_verification_id&#x60; to &#x60;/link/token/create&#x60; under the &#x60;income_verification&#x60; parameter in order to create a Link instance that will prompt the user to go through the income verification flow. Plaid will fire an &#x60;INCOME&#x60; webhook once the user completes the Payroll Income flow, or when the uploaded documents in the Document Income flow have finished processing.
    # @required @param income_verification_create_request [Plaid::IncomeVerificationCreateRequest?]
    # @return [Tuple(IncomeVerificationCreateResponse, Integer, Hash)] IncomeVerificationCreateResponse, response status code and response headers
    def income_verification_create_with_http_info(
      *,
      income_verification_create_request : Plaid::IncomeVerificationCreateRequest? = nil
    ) : Tuple(IncomeVerificationCreateResponse, Int32, Hash(String, Array(String) | String))
      request = build_api_request_for_income_verification_create(income_verification_create_request: income_verification_create_request)

      body, status_code, headers = @api_client.execute_api_request(request)

      if debugging?
        Log.debug { "API called: PlaidApi#income_verification_create\nBody: #{body.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}" }
      end

      Tuple.new(IncomeVerificationCreateResponse.from_json(body), status_code, headers)
    end

    # (Deprecated) Create an income verification instance
    # &#x60;/income/verification/create&#x60; begins the income verification process by returning an &#x60;income_verification_id&#x60;. You can then provide the &#x60;income_verification_id&#x60; to &#x60;/link/token/create&#x60; under the &#x60;income_verification&#x60; parameter in order to create a Link instance that will prompt the user to go through the income verification flow. Plaid will fire an &#x60;INCOME&#x60; webhook once the user completes the Payroll Income flow, or when the uploaded documents in the Document Income flow have finished processing.
    # @required @param income_verification_create_request [Plaid::IncomeVerificationCreateRequest?]
    # @return nil
    def income_verification_create(
      *,
      income_verification_create_request : Plaid::IncomeVerificationCreateRequest? = nil,
      &block : Crest::Response ->
    ) : Nil
      build_api_request_for_income_verification_create(income_verification_create_request: income_verification_create_request).execute(&block)
    end

    # @return Crest::Request
    def build_api_request_for_income_verification_create(
      *,
      income_verification_create_request : Plaid::IncomeVerificationCreateRequest? = nil
    ) : Crest::Request
      if debugging?
        Log.debug { "Calling API: PlaidApi.income_verification_create ..." }
      end

      if client_side_validation?
        raise ArgumentError.new("\"income_verification_create_request\" is required and cannot be null") if income_verification_create_request.nil?
        unless (_income_verification_create_request = income_verification_create_request).nil?
          _income_verification_create_request.validate if _income_verification_create_request.is_a?(OpenApi::Validatable)
        end
      end

      # resource path
      local_var_path = "/income/verification/create"

      # header parameters
      header_params : Hash(String, String) = Hash(String, String).new
      # HTTP header "Accept" (if needed)
      header_params["Accept"] = @api_client.select_header_accept(["application/json"])
      # HTTP header "Content-Type"
      header_params["Content-Type"] = @api_client.select_header_content_type(["application/json"])

      # cookie parameters
      cookie_params : Hash(String, String) = Hash(String, String).new

      # query parameters
      query_params : Hash(String, (String | Array(String) | JSON::Any)) = Hash(String, (String | Array(String) | JSON::Any)).new

      # form parameters
      form_params : Array(Tuple(String, Crest::ParamsValue)) | Nil = nil

      # http body (model)
      post_body : IO | String | Nil = @api_client.encode(body: income_verification_create_request, content_type: header_params["Content-Type"]?) if !income_verification_create_request.nil?

      # auth_names
      auth_names = ["clientId", "plaidVersion", "secret"]

      @api_client.build_api_request(
        http_method: :"POST",
        path: local_var_path,
        operation: "PlaidApi.income_verification_create",
        post_body: post_body,
        auth_names: auth_names,
        header_params: header_params,
        cookie_params: cookie_params,
        query_params: query_params,
        form_params: form_params
      )
    end

    # (Deprecated) Download the original documents used for income verification
    # `/income/verification/documents/download` provides the ability to download the source documents associated with the verification.  If Document Income was used, the documents will be those the user provided in Link. For Payroll Income, the most recent files available for download from the payroll provider will be available from this endpoint.  The response to `/income/verification/documents/download` is a ZIP file in binary data. If a `document_id` is passed, a single document will be contained in this file. If not, the response will contain all documents associated with the verification.  The `request_id` is returned in the `Plaid-Request-ID` header.
    # @required @param income_verification_documents_download_request [Plaid::IncomeVerificationDocumentsDownloadRequest?]
    # @return [::File]
    def income_verification_documents_download(
      *,
      income_verification_documents_download_request : Plaid::IncomeVerificationDocumentsDownloadRequest? = nil
    ) : ::File
      data, _status_code, _headers = income_verification_documents_download_with_http_info(income_verification_documents_download_request: income_verification_documents_download_request)
      data
    end

    # (Deprecated) Download the original documents used for income verification
    # &#x60;/income/verification/documents/download&#x60; provides the ability to download the source documents associated with the verification.  If Document Income was used, the documents will be those the user provided in Link. For Payroll Income, the most recent files available for download from the payroll provider will be available from this endpoint.  The response to &#x60;/income/verification/documents/download&#x60; is a ZIP file in binary data. If a &#x60;document_id&#x60; is passed, a single document will be contained in this file. If not, the response will contain all documents associated with the verification.  The &#x60;request_id&#x60; is returned in the &#x60;Plaid-Request-ID&#x60; header.
    # @required @param income_verification_documents_download_request [Plaid::IncomeVerificationDocumentsDownloadRequest?]
    # @return [Tuple(::File, Integer, Hash)] ::File, response status code and response headers
    def income_verification_documents_download_with_http_info(
      *,
      income_verification_documents_download_request : Plaid::IncomeVerificationDocumentsDownloadRequest? = nil
    ) : Tuple(::File, Int32, Hash(String, Array(String) | String))
      request = build_api_request_for_income_verification_documents_download(income_verification_documents_download_request: income_verification_documents_download_request)

      body, status_code, headers = @api_client.execute_api_request(request)

      if debugging?
        Log.debug { "API called: PlaidApi#income_verification_documents_download\nBody: #{body.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}" }
      end

      Tuple.new(::File.from_json(body), status_code, headers)
    end

    # (Deprecated) Download the original documents used for income verification
    # &#x60;/income/verification/documents/download&#x60; provides the ability to download the source documents associated with the verification.  If Document Income was used, the documents will be those the user provided in Link. For Payroll Income, the most recent files available for download from the payroll provider will be available from this endpoint.  The response to &#x60;/income/verification/documents/download&#x60; is a ZIP file in binary data. If a &#x60;document_id&#x60; is passed, a single document will be contained in this file. If not, the response will contain all documents associated with the verification.  The &#x60;request_id&#x60; is returned in the &#x60;Plaid-Request-ID&#x60; header.
    # @required @param income_verification_documents_download_request [Plaid::IncomeVerificationDocumentsDownloadRequest?]
    # @return nil
    def income_verification_documents_download(
      *,
      income_verification_documents_download_request : Plaid::IncomeVerificationDocumentsDownloadRequest? = nil,
      &block : Crest::Response ->
    ) : Nil
      build_api_request_for_income_verification_documents_download(income_verification_documents_download_request: income_verification_documents_download_request).execute(&block)
    end

    # @return Crest::Request
    def build_api_request_for_income_verification_documents_download(
      *,
      income_verification_documents_download_request : Plaid::IncomeVerificationDocumentsDownloadRequest? = nil
    ) : Crest::Request
      if debugging?
        Log.debug { "Calling API: PlaidApi.income_verification_documents_download ..." }
      end

      if client_side_validation?
        raise ArgumentError.new("\"income_verification_documents_download_request\" is required and cannot be null") if income_verification_documents_download_request.nil?
        unless (_income_verification_documents_download_request = income_verification_documents_download_request).nil?
          _income_verification_documents_download_request.validate if _income_verification_documents_download_request.is_a?(OpenApi::Validatable)
        end
      end

      # resource path
      local_var_path = "/income/verification/documents/download"

      # header parameters
      header_params : Hash(String, String) = Hash(String, String).new
      # HTTP header "Accept" (if needed)
      header_params["Accept"] = @api_client.select_header_accept(["application/zip"])
      # HTTP header "Content-Type"
      header_params["Content-Type"] = @api_client.select_header_content_type(["application/json"])

      # cookie parameters
      cookie_params : Hash(String, String) = Hash(String, String).new

      # query parameters
      query_params : Hash(String, (String | Array(String) | JSON::Any)) = Hash(String, (String | Array(String) | JSON::Any)).new

      # form parameters
      form_params : Array(Tuple(String, Crest::ParamsValue)) | Nil = nil

      # http body (model)
      post_body : IO | String | Nil = @api_client.encode(body: income_verification_documents_download_request, content_type: header_params["Content-Type"]?) if !income_verification_documents_download_request.nil?

      # auth_names
      auth_names = ["clientId", "plaidVersion", "secret"]

      @api_client.build_api_request(
        http_method: :"POST",
        path: local_var_path,
        operation: "PlaidApi.income_verification_documents_download",
        post_body: post_body,
        auth_names: auth_names,
        header_params: header_params,
        cookie_params: cookie_params,
        query_params: query_params,
        form_params: form_params
      )
    end

    # (Deprecated) Retrieve information from the paystubs used for income verification
    # `/income/verification/paystubs/get` returns the information collected from the paystubs that were used to verify an end user's income. It can be called once the status of the verification has been set to `VERIFICATION_STATUS_PROCESSING_COMPLETE`, as reported by the `INCOME: verification_status` webhook. Attempting to call the endpoint before verification has been completed will result in an error.  This endpoint has been deprecated; new integrations should use `/credit/payroll_income/get` instead.
    # @required @param income_verification_paystubs_get_request [Plaid::IncomeVerificationPaystubsGetRequest?]
    # @return [IncomeVerificationPaystubsGetResponse]
    def income_verification_paystubs_get(
      *,
      income_verification_paystubs_get_request : Plaid::IncomeVerificationPaystubsGetRequest? = nil
    ) : IncomeVerificationPaystubsGetResponse
      data, _status_code, _headers = income_verification_paystubs_get_with_http_info(income_verification_paystubs_get_request: income_verification_paystubs_get_request)
      data
    end

    # (Deprecated) Retrieve information from the paystubs used for income verification
    # &#x60;/income/verification/paystubs/get&#x60; returns the information collected from the paystubs that were used to verify an end user&#39;s income. It can be called once the status of the verification has been set to &#x60;VERIFICATION_STATUS_PROCESSING_COMPLETE&#x60;, as reported by the &#x60;INCOME: verification_status&#x60; webhook. Attempting to call the endpoint before verification has been completed will result in an error.  This endpoint has been deprecated; new integrations should use &#x60;/credit/payroll_income/get&#x60; instead.
    # @required @param income_verification_paystubs_get_request [Plaid::IncomeVerificationPaystubsGetRequest?]
    # @return [Tuple(IncomeVerificationPaystubsGetResponse, Integer, Hash)] IncomeVerificationPaystubsGetResponse, response status code and response headers
    def income_verification_paystubs_get_with_http_info(
      *,
      income_verification_paystubs_get_request : Plaid::IncomeVerificationPaystubsGetRequest? = nil
    ) : Tuple(IncomeVerificationPaystubsGetResponse, Int32, Hash(String, Array(String) | String))
      request = build_api_request_for_income_verification_paystubs_get(income_verification_paystubs_get_request: income_verification_paystubs_get_request)

      body, status_code, headers = @api_client.execute_api_request(request)

      if debugging?
        Log.debug { "API called: PlaidApi#income_verification_paystubs_get\nBody: #{body.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}" }
      end

      Tuple.new(IncomeVerificationPaystubsGetResponse.from_json(body), status_code, headers)
    end

    # (Deprecated) Retrieve information from the paystubs used for income verification
    # &#x60;/income/verification/paystubs/get&#x60; returns the information collected from the paystubs that were used to verify an end user&#39;s income. It can be called once the status of the verification has been set to &#x60;VERIFICATION_STATUS_PROCESSING_COMPLETE&#x60;, as reported by the &#x60;INCOME: verification_status&#x60; webhook. Attempting to call the endpoint before verification has been completed will result in an error.  This endpoint has been deprecated; new integrations should use &#x60;/credit/payroll_income/get&#x60; instead.
    # @required @param income_verification_paystubs_get_request [Plaid::IncomeVerificationPaystubsGetRequest?]
    # @return nil
    def income_verification_paystubs_get(
      *,
      income_verification_paystubs_get_request : Plaid::IncomeVerificationPaystubsGetRequest? = nil,
      &block : Crest::Response ->
    ) : Nil
      build_api_request_for_income_verification_paystubs_get(income_verification_paystubs_get_request: income_verification_paystubs_get_request).execute(&block)
    end

    # @return Crest::Request
    def build_api_request_for_income_verification_paystubs_get(
      *,
      income_verification_paystubs_get_request : Plaid::IncomeVerificationPaystubsGetRequest? = nil
    ) : Crest::Request
      if debugging?
        Log.debug { "Calling API: PlaidApi.income_verification_paystubs_get ..." }
      end

      if client_side_validation?
        raise ArgumentError.new("\"income_verification_paystubs_get_request\" is required and cannot be null") if income_verification_paystubs_get_request.nil?
        unless (_income_verification_paystubs_get_request = income_verification_paystubs_get_request).nil?
          _income_verification_paystubs_get_request.validate if _income_verification_paystubs_get_request.is_a?(OpenApi::Validatable)
        end
      end

      # resource path
      local_var_path = "/income/verification/paystubs/get"

      # header parameters
      header_params : Hash(String, String) = Hash(String, String).new
      # HTTP header "Accept" (if needed)
      header_params["Accept"] = @api_client.select_header_accept(["application/json"])
      # HTTP header "Content-Type"
      header_params["Content-Type"] = @api_client.select_header_content_type(["application/json"])

      # cookie parameters
      cookie_params : Hash(String, String) = Hash(String, String).new

      # query parameters
      query_params : Hash(String, (String | Array(String) | JSON::Any)) = Hash(String, (String | Array(String) | JSON::Any)).new

      # form parameters
      form_params : Array(Tuple(String, Crest::ParamsValue)) | Nil = nil

      # http body (model)
      post_body : IO | String | Nil = @api_client.encode(body: income_verification_paystubs_get_request, content_type: header_params["Content-Type"]?) if !income_verification_paystubs_get_request.nil?

      # auth_names
      auth_names = ["clientId", "plaidVersion", "secret"]

      @api_client.build_api_request(
        http_method: :"POST",
        path: local_var_path,
        operation: "PlaidApi.income_verification_paystubs_get",
        post_body: post_body,
        auth_names: auth_names,
        header_params: header_params,
        cookie_params: cookie_params,
        query_params: query_params,
        form_params: form_params
      )
    end

    # (Deprecated) Check digital income verification eligibility and optimize conversion
    # `/income/verification/precheck` is an optional endpoint that can be called before initializing a Link session for income verification. It evaluates whether a given user is supportable by digital income verification and returns a `precheck_id` that can be provided to `/link/token/create`. If the user is eligible for digital verification, providing the `precheck_id` in this way will generate a Link UI optimized for the end user and their specific employer. If the user cannot be confirmed as eligible, the `precheck_id` can still be provided to `/link/token/create` and the user can still use the income verification flow, but they may be required to manually upload a paystub to verify their income.  While all request fields are optional, providing either `employer` or `transactions_access_tokens` data will increase the chance of receiving a useful result.  This endpoint has been deprecated; new integrations should use `/credit/payroll_income/precheck` instead.
    # @required @param income_verification_precheck_request [Plaid::IncomeVerificationPrecheckRequest?]
    # @return [IncomeVerificationPrecheckResponse]
    def income_verification_precheck(
      *,
      income_verification_precheck_request : Plaid::IncomeVerificationPrecheckRequest? = nil
    ) : IncomeVerificationPrecheckResponse
      data, _status_code, _headers = income_verification_precheck_with_http_info(income_verification_precheck_request: income_verification_precheck_request)
      data
    end

    # (Deprecated) Check digital income verification eligibility and optimize conversion
    # &#x60;/income/verification/precheck&#x60; is an optional endpoint that can be called before initializing a Link session for income verification. It evaluates whether a given user is supportable by digital income verification and returns a &#x60;precheck_id&#x60; that can be provided to &#x60;/link/token/create&#x60;. If the user is eligible for digital verification, providing the &#x60;precheck_id&#x60; in this way will generate a Link UI optimized for the end user and their specific employer. If the user cannot be confirmed as eligible, the &#x60;precheck_id&#x60; can still be provided to &#x60;/link/token/create&#x60; and the user can still use the income verification flow, but they may be required to manually upload a paystub to verify their income.  While all request fields are optional, providing either &#x60;employer&#x60; or &#x60;transactions_access_tokens&#x60; data will increase the chance of receiving a useful result.  This endpoint has been deprecated; new integrations should use &#x60;/credit/payroll_income/precheck&#x60; instead.
    # @required @param income_verification_precheck_request [Plaid::IncomeVerificationPrecheckRequest?]
    # @return [Tuple(IncomeVerificationPrecheckResponse, Integer, Hash)] IncomeVerificationPrecheckResponse, response status code and response headers
    def income_verification_precheck_with_http_info(
      *,
      income_verification_precheck_request : Plaid::IncomeVerificationPrecheckRequest? = nil
    ) : Tuple(IncomeVerificationPrecheckResponse, Int32, Hash(String, Array(String) | String))
      request = build_api_request_for_income_verification_precheck(income_verification_precheck_request: income_verification_precheck_request)

      body, status_code, headers = @api_client.execute_api_request(request)

      if debugging?
        Log.debug { "API called: PlaidApi#income_verification_precheck\nBody: #{body.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}" }
      end

      Tuple.new(IncomeVerificationPrecheckResponse.from_json(body), status_code, headers)
    end

    # (Deprecated) Check digital income verification eligibility and optimize conversion
    # &#x60;/income/verification/precheck&#x60; is an optional endpoint that can be called before initializing a Link session for income verification. It evaluates whether a given user is supportable by digital income verification and returns a &#x60;precheck_id&#x60; that can be provided to &#x60;/link/token/create&#x60;. If the user is eligible for digital verification, providing the &#x60;precheck_id&#x60; in this way will generate a Link UI optimized for the end user and their specific employer. If the user cannot be confirmed as eligible, the &#x60;precheck_id&#x60; can still be provided to &#x60;/link/token/create&#x60; and the user can still use the income verification flow, but they may be required to manually upload a paystub to verify their income.  While all request fields are optional, providing either &#x60;employer&#x60; or &#x60;transactions_access_tokens&#x60; data will increase the chance of receiving a useful result.  This endpoint has been deprecated; new integrations should use &#x60;/credit/payroll_income/precheck&#x60; instead.
    # @required @param income_verification_precheck_request [Plaid::IncomeVerificationPrecheckRequest?]
    # @return nil
    def income_verification_precheck(
      *,
      income_verification_precheck_request : Plaid::IncomeVerificationPrecheckRequest? = nil,
      &block : Crest::Response ->
    ) : Nil
      build_api_request_for_income_verification_precheck(income_verification_precheck_request: income_verification_precheck_request).execute(&block)
    end

    # @return Crest::Request
    def build_api_request_for_income_verification_precheck(
      *,
      income_verification_precheck_request : Plaid::IncomeVerificationPrecheckRequest? = nil
    ) : Crest::Request
      if debugging?
        Log.debug { "Calling API: PlaidApi.income_verification_precheck ..." }
      end

      if client_side_validation?
        raise ArgumentError.new("\"income_verification_precheck_request\" is required and cannot be null") if income_verification_precheck_request.nil?
        unless (_income_verification_precheck_request = income_verification_precheck_request).nil?
          _income_verification_precheck_request.validate if _income_verification_precheck_request.is_a?(OpenApi::Validatable)
        end
      end

      # resource path
      local_var_path = "/income/verification/precheck"

      # header parameters
      header_params : Hash(String, String) = Hash(String, String).new
      # HTTP header "Accept" (if needed)
      header_params["Accept"] = @api_client.select_header_accept(["application/json"])
      # HTTP header "Content-Type"
      header_params["Content-Type"] = @api_client.select_header_content_type(["application/json"])

      # cookie parameters
      cookie_params : Hash(String, String) = Hash(String, String).new

      # query parameters
      query_params : Hash(String, (String | Array(String) | JSON::Any)) = Hash(String, (String | Array(String) | JSON::Any)).new

      # form parameters
      form_params : Array(Tuple(String, Crest::ParamsValue)) | Nil = nil

      # http body (model)
      post_body : IO | String | Nil = @api_client.encode(body: income_verification_precheck_request, content_type: header_params["Content-Type"]?) if !income_verification_precheck_request.nil?

      # auth_names
      auth_names = ["clientId", "plaidVersion", "secret"]

      @api_client.build_api_request(
        http_method: :"POST",
        path: local_var_path,
        operation: "PlaidApi.income_verification_precheck",
        post_body: post_body,
        auth_names: auth_names,
        header_params: header_params,
        cookie_params: cookie_params,
        query_params: query_params,
        form_params: form_params
      )
    end

    # (Deprecated) Retrieve information from the tax documents used for income verification
    # `/income/verification/taxforms/get` returns the information collected from forms that were used to verify an end user''s income. It can be called once the status of the verification has been set to `VERIFICATION_STATUS_PROCESSING_COMPLETE`, as reported by the `INCOME: verification_status` webhook. Attempting to call the endpoint before verification has been completed will result in an error.  This endpoint has been deprecated; new integrations should use `/credit/payroll_income/get` instead.
    # @required @param income_verification_taxforms_get_request [Plaid::IncomeVerificationTaxformsGetRequest?]
    # @return [IncomeVerificationTaxformsGetResponse]
    def income_verification_taxforms_get(
      *,
      income_verification_taxforms_get_request : Plaid::IncomeVerificationTaxformsGetRequest? = nil
    ) : IncomeVerificationTaxformsGetResponse
      data, _status_code, _headers = income_verification_taxforms_get_with_http_info(income_verification_taxforms_get_request: income_verification_taxforms_get_request)
      data
    end

    # (Deprecated) Retrieve information from the tax documents used for income verification
    # &#x60;/income/verification/taxforms/get&#x60; returns the information collected from forms that were used to verify an end user&#39;&#39;s income. It can be called once the status of the verification has been set to &#x60;VERIFICATION_STATUS_PROCESSING_COMPLETE&#x60;, as reported by the &#x60;INCOME: verification_status&#x60; webhook. Attempting to call the endpoint before verification has been completed will result in an error.  This endpoint has been deprecated; new integrations should use &#x60;/credit/payroll_income/get&#x60; instead.
    # @required @param income_verification_taxforms_get_request [Plaid::IncomeVerificationTaxformsGetRequest?]
    # @return [Tuple(IncomeVerificationTaxformsGetResponse, Integer, Hash)] IncomeVerificationTaxformsGetResponse, response status code and response headers
    def income_verification_taxforms_get_with_http_info(
      *,
      income_verification_taxforms_get_request : Plaid::IncomeVerificationTaxformsGetRequest? = nil
    ) : Tuple(IncomeVerificationTaxformsGetResponse, Int32, Hash(String, Array(String) | String))
      request = build_api_request_for_income_verification_taxforms_get(income_verification_taxforms_get_request: income_verification_taxforms_get_request)

      body, status_code, headers = @api_client.execute_api_request(request)

      if debugging?
        Log.debug { "API called: PlaidApi#income_verification_taxforms_get\nBody: #{body.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}" }
      end

      Tuple.new(IncomeVerificationTaxformsGetResponse.from_json(body), status_code, headers)
    end

    # (Deprecated) Retrieve information from the tax documents used for income verification
    # &#x60;/income/verification/taxforms/get&#x60; returns the information collected from forms that were used to verify an end user&#39;&#39;s income. It can be called once the status of the verification has been set to &#x60;VERIFICATION_STATUS_PROCESSING_COMPLETE&#x60;, as reported by the &#x60;INCOME: verification_status&#x60; webhook. Attempting to call the endpoint before verification has been completed will result in an error.  This endpoint has been deprecated; new integrations should use &#x60;/credit/payroll_income/get&#x60; instead.
    # @required @param income_verification_taxforms_get_request [Plaid::IncomeVerificationTaxformsGetRequest?]
    # @return nil
    def income_verification_taxforms_get(
      *,
      income_verification_taxforms_get_request : Plaid::IncomeVerificationTaxformsGetRequest? = nil,
      &block : Crest::Response ->
    ) : Nil
      build_api_request_for_income_verification_taxforms_get(income_verification_taxforms_get_request: income_verification_taxforms_get_request).execute(&block)
    end

    # @return Crest::Request
    def build_api_request_for_income_verification_taxforms_get(
      *,
      income_verification_taxforms_get_request : Plaid::IncomeVerificationTaxformsGetRequest? = nil
    ) : Crest::Request
      if debugging?
        Log.debug { "Calling API: PlaidApi.income_verification_taxforms_get ..." }
      end

      if client_side_validation?
        raise ArgumentError.new("\"income_verification_taxforms_get_request\" is required and cannot be null") if income_verification_taxforms_get_request.nil?
        unless (_income_verification_taxforms_get_request = income_verification_taxforms_get_request).nil?
          _income_verification_taxforms_get_request.validate if _income_verification_taxforms_get_request.is_a?(OpenApi::Validatable)
        end
      end

      # resource path
      local_var_path = "/income/verification/taxforms/get"

      # header parameters
      header_params : Hash(String, String) = Hash(String, String).new
      # HTTP header "Accept" (if needed)
      header_params["Accept"] = @api_client.select_header_accept(["application/json"])
      # HTTP header "Content-Type"
      header_params["Content-Type"] = @api_client.select_header_content_type(["application/json"])

      # cookie parameters
      cookie_params : Hash(String, String) = Hash(String, String).new

      # query parameters
      query_params : Hash(String, (String | Array(String) | JSON::Any)) = Hash(String, (String | Array(String) | JSON::Any)).new

      # form parameters
      form_params : Array(Tuple(String, Crest::ParamsValue)) | Nil = nil

      # http body (model)
      post_body : IO | String | Nil = @api_client.encode(body: income_verification_taxforms_get_request, content_type: header_params["Content-Type"]?) if !income_verification_taxforms_get_request.nil?

      # auth_names
      auth_names = ["clientId", "plaidVersion", "secret"]

      @api_client.build_api_request(
        http_method: :"POST",
        path: local_var_path,
        operation: "PlaidApi.income_verification_taxforms_get",
        post_body: post_body,
        auth_names: auth_names,
        header_params: header_params,
        cookie_params: cookie_params,
        query_params: query_params,
        form_params: form_params
      )
    end

    # Get details of all supported institutions
    # Returns a JSON response containing details on all financial institutions currently supported by Plaid. Because Plaid supports thousands of institutions, results are paginated.  If there is no overlap between an institution’s enabled products and a client’s enabled products, then the institution will be filtered out from the response. As a result, the number of institutions returned may not match the count specified in the call.
    # @required @param institutions_get_request [Plaid::InstitutionsGetRequest?]
    # @return [InstitutionsGetResponse]
    def institutions_get(
      *,
      institutions_get_request : Plaid::InstitutionsGetRequest? = nil
    ) : InstitutionsGetResponse
      data, _status_code, _headers = institutions_get_with_http_info(institutions_get_request: institutions_get_request)
      data
    end

    # Get details of all supported institutions
    # Returns a JSON response containing details on all financial institutions currently supported by Plaid. Because Plaid supports thousands of institutions, results are paginated.  If there is no overlap between an institution’s enabled products and a client’s enabled products, then the institution will be filtered out from the response. As a result, the number of institutions returned may not match the count specified in the call.
    # @required @param institutions_get_request [Plaid::InstitutionsGetRequest?]
    # @return [Tuple(InstitutionsGetResponse, Integer, Hash)] InstitutionsGetResponse, response status code and response headers
    def institutions_get_with_http_info(
      *,
      institutions_get_request : Plaid::InstitutionsGetRequest? = nil
    ) : Tuple(InstitutionsGetResponse, Int32, Hash(String, Array(String) | String))
      request = build_api_request_for_institutions_get(institutions_get_request: institutions_get_request)

      body, status_code, headers = @api_client.execute_api_request(request)

      if debugging?
        Log.debug { "API called: PlaidApi#institutions_get\nBody: #{body.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}" }
      end

      Tuple.new(InstitutionsGetResponse.from_json(body), status_code, headers)
    end

    # Get details of all supported institutions
    # Returns a JSON response containing details on all financial institutions currently supported by Plaid. Because Plaid supports thousands of institutions, results are paginated.  If there is no overlap between an institution’s enabled products and a client’s enabled products, then the institution will be filtered out from the response. As a result, the number of institutions returned may not match the count specified in the call.
    # @required @param institutions_get_request [Plaid::InstitutionsGetRequest?]
    # @return nil
    def institutions_get(
      *,
      institutions_get_request : Plaid::InstitutionsGetRequest? = nil,
      &block : Crest::Response ->
    ) : Nil
      build_api_request_for_institutions_get(institutions_get_request: institutions_get_request).execute(&block)
    end

    # @return Crest::Request
    def build_api_request_for_institutions_get(
      *,
      institutions_get_request : Plaid::InstitutionsGetRequest? = nil
    ) : Crest::Request
      if debugging?
        Log.debug { "Calling API: PlaidApi.institutions_get ..." }
      end

      if client_side_validation?
        raise ArgumentError.new("\"institutions_get_request\" is required and cannot be null") if institutions_get_request.nil?
        unless (_institutions_get_request = institutions_get_request).nil?
          _institutions_get_request.validate if _institutions_get_request.is_a?(OpenApi::Validatable)
        end
      end

      # resource path
      local_var_path = "/institutions/get"

      # header parameters
      header_params : Hash(String, String) = Hash(String, String).new
      # HTTP header "Accept" (if needed)
      header_params["Accept"] = @api_client.select_header_accept(["application/json"])
      # HTTP header "Content-Type"
      header_params["Content-Type"] = @api_client.select_header_content_type(["application/json"])

      # cookie parameters
      cookie_params : Hash(String, String) = Hash(String, String).new

      # query parameters
      query_params : Hash(String, (String | Array(String) | JSON::Any)) = Hash(String, (String | Array(String) | JSON::Any)).new

      # form parameters
      form_params : Array(Tuple(String, Crest::ParamsValue)) | Nil = nil

      # http body (model)
      post_body : IO | String | Nil = @api_client.encode(body: institutions_get_request, content_type: header_params["Content-Type"]?) if !institutions_get_request.nil?

      # auth_names
      auth_names = ["clientId", "plaidVersion", "secret"]

      @api_client.build_api_request(
        http_method: :"POST",
        path: local_var_path,
        operation: "PlaidApi.institutions_get",
        post_body: post_body,
        auth_names: auth_names,
        header_params: header_params,
        cookie_params: cookie_params,
        query_params: query_params,
        form_params: form_params
      )
    end

    # Get details of an institution
    # Returns a JSON response containing details on a specified financial institution currently supported by Plaid.  Versioning note: API versions 2019-05-29 and earlier allow use of the `public_key` parameter instead of the `client_id` and `secret` to authenticate to this endpoint. The `public_key` has been deprecated; all customers are encouraged to use `client_id` and `secret` instead.
    # @required @param institutions_get_by_id_request [Plaid::InstitutionsGetByIdRequest?]
    # @return [InstitutionsGetByIdResponse]
    def institutions_get_by_id(
      *,
      institutions_get_by_id_request : Plaid::InstitutionsGetByIdRequest? = nil
    ) : InstitutionsGetByIdResponse
      data, _status_code, _headers = institutions_get_by_id_with_http_info(institutions_get_by_id_request: institutions_get_by_id_request)
      data
    end

    # Get details of an institution
    # Returns a JSON response containing details on a specified financial institution currently supported by Plaid.  Versioning note: API versions 2019-05-29 and earlier allow use of the &#x60;public_key&#x60; parameter instead of the &#x60;client_id&#x60; and &#x60;secret&#x60; to authenticate to this endpoint. The &#x60;public_key&#x60; has been deprecated; all customers are encouraged to use &#x60;client_id&#x60; and &#x60;secret&#x60; instead.
    # @required @param institutions_get_by_id_request [Plaid::InstitutionsGetByIdRequest?]
    # @return [Tuple(InstitutionsGetByIdResponse, Integer, Hash)] InstitutionsGetByIdResponse, response status code and response headers
    def institutions_get_by_id_with_http_info(
      *,
      institutions_get_by_id_request : Plaid::InstitutionsGetByIdRequest? = nil
    ) : Tuple(InstitutionsGetByIdResponse, Int32, Hash(String, Array(String) | String))
      request = build_api_request_for_institutions_get_by_id(institutions_get_by_id_request: institutions_get_by_id_request)

      body, status_code, headers = @api_client.execute_api_request(request)

      if debugging?
        Log.debug { "API called: PlaidApi#institutions_get_by_id\nBody: #{body.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}" }
      end

      Tuple.new(InstitutionsGetByIdResponse.from_json(body), status_code, headers)
    end

    # Get details of an institution
    # Returns a JSON response containing details on a specified financial institution currently supported by Plaid.  Versioning note: API versions 2019-05-29 and earlier allow use of the &#x60;public_key&#x60; parameter instead of the &#x60;client_id&#x60; and &#x60;secret&#x60; to authenticate to this endpoint. The &#x60;public_key&#x60; has been deprecated; all customers are encouraged to use &#x60;client_id&#x60; and &#x60;secret&#x60; instead.
    # @required @param institutions_get_by_id_request [Plaid::InstitutionsGetByIdRequest?]
    # @return nil
    def institutions_get_by_id(
      *,
      institutions_get_by_id_request : Plaid::InstitutionsGetByIdRequest? = nil,
      &block : Crest::Response ->
    ) : Nil
      build_api_request_for_institutions_get_by_id(institutions_get_by_id_request: institutions_get_by_id_request).execute(&block)
    end

    # @return Crest::Request
    def build_api_request_for_institutions_get_by_id(
      *,
      institutions_get_by_id_request : Plaid::InstitutionsGetByIdRequest? = nil
    ) : Crest::Request
      if debugging?
        Log.debug { "Calling API: PlaidApi.institutions_get_by_id ..." }
      end

      if client_side_validation?
        raise ArgumentError.new("\"institutions_get_by_id_request\" is required and cannot be null") if institutions_get_by_id_request.nil?
        unless (_institutions_get_by_id_request = institutions_get_by_id_request).nil?
          _institutions_get_by_id_request.validate if _institutions_get_by_id_request.is_a?(OpenApi::Validatable)
        end
      end

      # resource path
      local_var_path = "/institutions/get_by_id"

      # header parameters
      header_params : Hash(String, String) = Hash(String, String).new
      # HTTP header "Accept" (if needed)
      header_params["Accept"] = @api_client.select_header_accept(["application/json"])
      # HTTP header "Content-Type"
      header_params["Content-Type"] = @api_client.select_header_content_type(["application/json"])

      # cookie parameters
      cookie_params : Hash(String, String) = Hash(String, String).new

      # query parameters
      query_params : Hash(String, (String | Array(String) | JSON::Any)) = Hash(String, (String | Array(String) | JSON::Any)).new

      # form parameters
      form_params : Array(Tuple(String, Crest::ParamsValue)) | Nil = nil

      # http body (model)
      post_body : IO | String | Nil = @api_client.encode(body: institutions_get_by_id_request, content_type: header_params["Content-Type"]?) if !institutions_get_by_id_request.nil?

      # auth_names
      auth_names = ["clientId", "plaidVersion", "secret"]

      @api_client.build_api_request(
        http_method: :"POST",
        path: local_var_path,
        operation: "PlaidApi.institutions_get_by_id",
        post_body: post_body,
        auth_names: auth_names,
        header_params: header_params,
        cookie_params: cookie_params,
        query_params: query_params,
        form_params: form_params
      )
    end

    # Search institutions
    # Returns a JSON response containing details for institutions that match the query parameters, up to a maximum of ten institutions per query.  Versioning note: API versions 2019-05-29 and earlier allow use of the `public_key` parameter instead of the `client_id` and `secret` parameters to authenticate to this endpoint. The `public_key` parameter has since been deprecated; all customers are encouraged to use `client_id` and `secret` instead.
    # @required @param institutions_search_request [Plaid::InstitutionsSearchRequest?]
    # @return [InstitutionsSearchResponse]
    def institutions_search(
      *,
      institutions_search_request : Plaid::InstitutionsSearchRequest? = nil
    ) : InstitutionsSearchResponse
      data, _status_code, _headers = institutions_search_with_http_info(institutions_search_request: institutions_search_request)
      data
    end

    # Search institutions
    # Returns a JSON response containing details for institutions that match the query parameters, up to a maximum of ten institutions per query.  Versioning note: API versions 2019-05-29 and earlier allow use of the &#x60;public_key&#x60; parameter instead of the &#x60;client_id&#x60; and &#x60;secret&#x60; parameters to authenticate to this endpoint. The &#x60;public_key&#x60; parameter has since been deprecated; all customers are encouraged to use &#x60;client_id&#x60; and &#x60;secret&#x60; instead.
    # @required @param institutions_search_request [Plaid::InstitutionsSearchRequest?]
    # @return [Tuple(InstitutionsSearchResponse, Integer, Hash)] InstitutionsSearchResponse, response status code and response headers
    def institutions_search_with_http_info(
      *,
      institutions_search_request : Plaid::InstitutionsSearchRequest? = nil
    ) : Tuple(InstitutionsSearchResponse, Int32, Hash(String, Array(String) | String))
      request = build_api_request_for_institutions_search(institutions_search_request: institutions_search_request)

      body, status_code, headers = @api_client.execute_api_request(request)

      if debugging?
        Log.debug { "API called: PlaidApi#institutions_search\nBody: #{body.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}" }
      end

      Tuple.new(InstitutionsSearchResponse.from_json(body), status_code, headers)
    end

    # Search institutions
    # Returns a JSON response containing details for institutions that match the query parameters, up to a maximum of ten institutions per query.  Versioning note: API versions 2019-05-29 and earlier allow use of the &#x60;public_key&#x60; parameter instead of the &#x60;client_id&#x60; and &#x60;secret&#x60; parameters to authenticate to this endpoint. The &#x60;public_key&#x60; parameter has since been deprecated; all customers are encouraged to use &#x60;client_id&#x60; and &#x60;secret&#x60; instead.
    # @required @param institutions_search_request [Plaid::InstitutionsSearchRequest?]
    # @return nil
    def institutions_search(
      *,
      institutions_search_request : Plaid::InstitutionsSearchRequest? = nil,
      &block : Crest::Response ->
    ) : Nil
      build_api_request_for_institutions_search(institutions_search_request: institutions_search_request).execute(&block)
    end

    # @return Crest::Request
    def build_api_request_for_institutions_search(
      *,
      institutions_search_request : Plaid::InstitutionsSearchRequest? = nil
    ) : Crest::Request
      if debugging?
        Log.debug { "Calling API: PlaidApi.institutions_search ..." }
      end

      if client_side_validation?
        raise ArgumentError.new("\"institutions_search_request\" is required and cannot be null") if institutions_search_request.nil?
        unless (_institutions_search_request = institutions_search_request).nil?
          _institutions_search_request.validate if _institutions_search_request.is_a?(OpenApi::Validatable)
        end
      end

      # resource path
      local_var_path = "/institutions/search"

      # header parameters
      header_params : Hash(String, String) = Hash(String, String).new
      # HTTP header "Accept" (if needed)
      header_params["Accept"] = @api_client.select_header_accept(["application/json"])
      # HTTP header "Content-Type"
      header_params["Content-Type"] = @api_client.select_header_content_type(["application/json"])

      # cookie parameters
      cookie_params : Hash(String, String) = Hash(String, String).new

      # query parameters
      query_params : Hash(String, (String | Array(String) | JSON::Any)) = Hash(String, (String | Array(String) | JSON::Any)).new

      # form parameters
      form_params : Array(Tuple(String, Crest::ParamsValue)) | Nil = nil

      # http body (model)
      post_body : IO | String | Nil = @api_client.encode(body: institutions_search_request, content_type: header_params["Content-Type"]?) if !institutions_search_request.nil?

      # auth_names
      auth_names = ["clientId", "plaidVersion", "secret"]

      @api_client.build_api_request(
        http_method: :"POST",
        path: local_var_path,
        operation: "PlaidApi.institutions_search",
        post_body: post_body,
        auth_names: auth_names,
        header_params: header_params,
        cookie_params: cookie_params,
        query_params: query_params,
        form_params: form_params
      )
    end

    # Get data needed to authorize an investments transfer
    # The `/investments/auth/get` endpoint allows developers to receive user-authorized data to facilitate the transfer of holdings
    # @required @param investments_auth_get_request [Plaid::InvestmentsAuthGetRequest?]
    # @return [InvestmentsAuthGetResponse]
    def investments_auth_get(
      *,
      investments_auth_get_request : Plaid::InvestmentsAuthGetRequest? = nil
    ) : InvestmentsAuthGetResponse
      data, _status_code, _headers = investments_auth_get_with_http_info(investments_auth_get_request: investments_auth_get_request)
      data
    end

    # Get data needed to authorize an investments transfer
    # The &#x60;/investments/auth/get&#x60; endpoint allows developers to receive user-authorized data to facilitate the transfer of holdings
    # @required @param investments_auth_get_request [Plaid::InvestmentsAuthGetRequest?]
    # @return [Tuple(InvestmentsAuthGetResponse, Integer, Hash)] InvestmentsAuthGetResponse, response status code and response headers
    def investments_auth_get_with_http_info(
      *,
      investments_auth_get_request : Plaid::InvestmentsAuthGetRequest? = nil
    ) : Tuple(InvestmentsAuthGetResponse, Int32, Hash(String, Array(String) | String))
      request = build_api_request_for_investments_auth_get(investments_auth_get_request: investments_auth_get_request)

      body, status_code, headers = @api_client.execute_api_request(request)

      if debugging?
        Log.debug { "API called: PlaidApi#investments_auth_get\nBody: #{body.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}" }
      end

      Tuple.new(InvestmentsAuthGetResponse.from_json(body), status_code, headers)
    end

    # Get data needed to authorize an investments transfer
    # The &#x60;/investments/auth/get&#x60; endpoint allows developers to receive user-authorized data to facilitate the transfer of holdings
    # @required @param investments_auth_get_request [Plaid::InvestmentsAuthGetRequest?]
    # @return nil
    def investments_auth_get(
      *,
      investments_auth_get_request : Plaid::InvestmentsAuthGetRequest? = nil,
      &block : Crest::Response ->
    ) : Nil
      build_api_request_for_investments_auth_get(investments_auth_get_request: investments_auth_get_request).execute(&block)
    end

    # @return Crest::Request
    def build_api_request_for_investments_auth_get(
      *,
      investments_auth_get_request : Plaid::InvestmentsAuthGetRequest? = nil
    ) : Crest::Request
      if debugging?
        Log.debug { "Calling API: PlaidApi.investments_auth_get ..." }
      end

      if client_side_validation?
        raise ArgumentError.new("\"investments_auth_get_request\" is required and cannot be null") if investments_auth_get_request.nil?
        unless (_investments_auth_get_request = investments_auth_get_request).nil?
          _investments_auth_get_request.validate if _investments_auth_get_request.is_a?(OpenApi::Validatable)
        end
      end

      # resource path
      local_var_path = "/investments/auth/get"

      # header parameters
      header_params : Hash(String, String) = Hash(String, String).new
      # HTTP header "Accept" (if needed)
      header_params["Accept"] = @api_client.select_header_accept(["application/json"])
      # HTTP header "Content-Type"
      header_params["Content-Type"] = @api_client.select_header_content_type(["application/json"])

      # cookie parameters
      cookie_params : Hash(String, String) = Hash(String, String).new

      # query parameters
      query_params : Hash(String, (String | Array(String) | JSON::Any)) = Hash(String, (String | Array(String) | JSON::Any)).new

      # form parameters
      form_params : Array(Tuple(String, Crest::ParamsValue)) | Nil = nil

      # http body (model)
      post_body : IO | String | Nil = @api_client.encode(body: investments_auth_get_request, content_type: header_params["Content-Type"]?) if !investments_auth_get_request.nil?

      # auth_names
      auth_names = ["clientId", "plaidVersion", "secret"]

      @api_client.build_api_request(
        http_method: :"POST",
        path: local_var_path,
        operation: "PlaidApi.investments_auth_get",
        post_body: post_body,
        auth_names: auth_names,
        header_params: header_params,
        cookie_params: cookie_params,
        query_params: query_params,
        form_params: form_params
      )
    end

    # Get Investment holdings
    # The `/investments/holdings/get` endpoint allows developers to receive user-authorized stock position data for `investment`-type accounts.
    # @required @param investments_holdings_get_request [Plaid::InvestmentsHoldingsGetRequest?]
    # @return [InvestmentsHoldingsGetResponse]
    def investments_holdings_get(
      *,
      investments_holdings_get_request : Plaid::InvestmentsHoldingsGetRequest? = nil
    ) : InvestmentsHoldingsGetResponse
      data, _status_code, _headers = investments_holdings_get_with_http_info(investments_holdings_get_request: investments_holdings_get_request)
      data
    end

    # Get Investment holdings
    # The &#x60;/investments/holdings/get&#x60; endpoint allows developers to receive user-authorized stock position data for &#x60;investment&#x60;-type accounts.
    # @required @param investments_holdings_get_request [Plaid::InvestmentsHoldingsGetRequest?]
    # @return [Tuple(InvestmentsHoldingsGetResponse, Integer, Hash)] InvestmentsHoldingsGetResponse, response status code and response headers
    def investments_holdings_get_with_http_info(
      *,
      investments_holdings_get_request : Plaid::InvestmentsHoldingsGetRequest? = nil
    ) : Tuple(InvestmentsHoldingsGetResponse, Int32, Hash(String, Array(String) | String))
      request = build_api_request_for_investments_holdings_get(investments_holdings_get_request: investments_holdings_get_request)

      body, status_code, headers = @api_client.execute_api_request(request)

      if debugging?
        Log.debug { "API called: PlaidApi#investments_holdings_get\nBody: #{body.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}" }
      end

      Tuple.new(InvestmentsHoldingsGetResponse.from_json(body), status_code, headers)
    end

    # Get Investment holdings
    # The &#x60;/investments/holdings/get&#x60; endpoint allows developers to receive user-authorized stock position data for &#x60;investment&#x60;-type accounts.
    # @required @param investments_holdings_get_request [Plaid::InvestmentsHoldingsGetRequest?]
    # @return nil
    def investments_holdings_get(
      *,
      investments_holdings_get_request : Plaid::InvestmentsHoldingsGetRequest? = nil,
      &block : Crest::Response ->
    ) : Nil
      build_api_request_for_investments_holdings_get(investments_holdings_get_request: investments_holdings_get_request).execute(&block)
    end

    # @return Crest::Request
    def build_api_request_for_investments_holdings_get(
      *,
      investments_holdings_get_request : Plaid::InvestmentsHoldingsGetRequest? = nil
    ) : Crest::Request
      if debugging?
        Log.debug { "Calling API: PlaidApi.investments_holdings_get ..." }
      end

      if client_side_validation?
        raise ArgumentError.new("\"investments_holdings_get_request\" is required and cannot be null") if investments_holdings_get_request.nil?
        unless (_investments_holdings_get_request = investments_holdings_get_request).nil?
          _investments_holdings_get_request.validate if _investments_holdings_get_request.is_a?(OpenApi::Validatable)
        end
      end

      # resource path
      local_var_path = "/investments/holdings/get"

      # header parameters
      header_params : Hash(String, String) = Hash(String, String).new
      # HTTP header "Accept" (if needed)
      header_params["Accept"] = @api_client.select_header_accept(["application/json"])
      # HTTP header "Content-Type"
      header_params["Content-Type"] = @api_client.select_header_content_type(["application/json"])

      # cookie parameters
      cookie_params : Hash(String, String) = Hash(String, String).new

      # query parameters
      query_params : Hash(String, (String | Array(String) | JSON::Any)) = Hash(String, (String | Array(String) | JSON::Any)).new

      # form parameters
      form_params : Array(Tuple(String, Crest::ParamsValue)) | Nil = nil

      # http body (model)
      post_body : IO | String | Nil = @api_client.encode(body: investments_holdings_get_request, content_type: header_params["Content-Type"]?) if !investments_holdings_get_request.nil?

      # auth_names
      auth_names = ["clientId", "plaidVersion", "secret"]

      @api_client.build_api_request(
        http_method: :"POST",
        path: local_var_path,
        operation: "PlaidApi.investments_holdings_get",
        post_body: post_body,
        auth_names: auth_names,
        header_params: header_params,
        cookie_params: cookie_params,
        query_params: query_params,
        form_params: form_params
      )
    end

    # Refresh investment data
    # `/investments/refresh` is an optional endpoint for users of the Investments product. It initiates an on-demand extraction to fetch the newest investments, holdings and investment transactions for an Item. This on-demand extraction takes place in addition to the periodic extractions that automatically occur multiple times a day for any Investments-enabled Item. If changes to investments are discovered after calling `/investments/refresh`, Plaid will fire webhooks: [`HOLDINGS: DEFAULT_UPDATE`](https://plaid.com/docs/api/products/investments/#holdings-default_update) if any new holdings are detected, and [INVESTMENTS_TRANSACTIONS: DEFAULT_UPDATE](https://plaid.com/docs/api/products/investments/#investments_transactions-default_update) if any new investment transactions are detected. Updated holdings and investment transactions can be fetched by calling `/investments/holdings/get` and `/investments/transactions/get`. \"Note that the `/investments/refresh` endpoint is not supported by all institutions. If called on an Item from an institution that does not support this functionality, it will return a `PRODUCT_NOT_SUPPORTED` error. `/investments/refresh` is offered as an add-on to Investments and has a separate [fee model](/docs/account/billing/#per-request-flat-fee). To request access to this endpoint, submit a [product access request](https://dashboard.plaid.com/team/products) or contact your Plaid account manager.
    # @required @param investments_refresh_request [Plaid::InvestmentsRefreshRequest?]
    # @return [InvestmentsRefreshResponse]
    def investments_refresh(
      *,
      investments_refresh_request : Plaid::InvestmentsRefreshRequest? = nil
    ) : InvestmentsRefreshResponse
      data, _status_code, _headers = investments_refresh_with_http_info(investments_refresh_request: investments_refresh_request)
      data
    end

    # Refresh investment data
    # &#x60;/investments/refresh&#x60; is an optional endpoint for users of the Investments product. It initiates an on-demand extraction to fetch the newest investments, holdings and investment transactions for an Item. This on-demand extraction takes place in addition to the periodic extractions that automatically occur multiple times a day for any Investments-enabled Item. If changes to investments are discovered after calling &#x60;/investments/refresh&#x60;, Plaid will fire webhooks: [&#x60;HOLDINGS: DEFAULT_UPDATE&#x60;](https://plaid.com/docs/api/products/investments/#holdings-default_update) if any new holdings are detected, and [INVESTMENTS_TRANSACTIONS: DEFAULT_UPDATE](https://plaid.com/docs/api/products/investments/#investments_transactions-default_update) if any new investment transactions are detected. Updated holdings and investment transactions can be fetched by calling &#x60;/investments/holdings/get&#x60; and &#x60;/investments/transactions/get&#x60;. \&quot;Note that the &#x60;/investments/refresh&#x60; endpoint is not supported by all institutions. If called on an Item from an institution that does not support this functionality, it will return a &#x60;PRODUCT_NOT_SUPPORTED&#x60; error. &#x60;/investments/refresh&#x60; is offered as an add-on to Investments and has a separate [fee model](/docs/account/billing/#per-request-flat-fee). To request access to this endpoint, submit a [product access request](https://dashboard.plaid.com/team/products) or contact your Plaid account manager.
    # @required @param investments_refresh_request [Plaid::InvestmentsRefreshRequest?]
    # @return [Tuple(InvestmentsRefreshResponse, Integer, Hash)] InvestmentsRefreshResponse, response status code and response headers
    def investments_refresh_with_http_info(
      *,
      investments_refresh_request : Plaid::InvestmentsRefreshRequest? = nil
    ) : Tuple(InvestmentsRefreshResponse, Int32, Hash(String, Array(String) | String))
      request = build_api_request_for_investments_refresh(investments_refresh_request: investments_refresh_request)

      body, status_code, headers = @api_client.execute_api_request(request)

      if debugging?
        Log.debug { "API called: PlaidApi#investments_refresh\nBody: #{body.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}" }
      end

      Tuple.new(InvestmentsRefreshResponse.from_json(body), status_code, headers)
    end

    # Refresh investment data
    # &#x60;/investments/refresh&#x60; is an optional endpoint for users of the Investments product. It initiates an on-demand extraction to fetch the newest investments, holdings and investment transactions for an Item. This on-demand extraction takes place in addition to the periodic extractions that automatically occur multiple times a day for any Investments-enabled Item. If changes to investments are discovered after calling &#x60;/investments/refresh&#x60;, Plaid will fire webhooks: [&#x60;HOLDINGS: DEFAULT_UPDATE&#x60;](https://plaid.com/docs/api/products/investments/#holdings-default_update) if any new holdings are detected, and [INVESTMENTS_TRANSACTIONS: DEFAULT_UPDATE](https://plaid.com/docs/api/products/investments/#investments_transactions-default_update) if any new investment transactions are detected. Updated holdings and investment transactions can be fetched by calling &#x60;/investments/holdings/get&#x60; and &#x60;/investments/transactions/get&#x60;. \&quot;Note that the &#x60;/investments/refresh&#x60; endpoint is not supported by all institutions. If called on an Item from an institution that does not support this functionality, it will return a &#x60;PRODUCT_NOT_SUPPORTED&#x60; error. &#x60;/investments/refresh&#x60; is offered as an add-on to Investments and has a separate [fee model](/docs/account/billing/#per-request-flat-fee). To request access to this endpoint, submit a [product access request](https://dashboard.plaid.com/team/products) or contact your Plaid account manager.
    # @required @param investments_refresh_request [Plaid::InvestmentsRefreshRequest?]
    # @return nil
    def investments_refresh(
      *,
      investments_refresh_request : Plaid::InvestmentsRefreshRequest? = nil,
      &block : Crest::Response ->
    ) : Nil
      build_api_request_for_investments_refresh(investments_refresh_request: investments_refresh_request).execute(&block)
    end

    # @return Crest::Request
    def build_api_request_for_investments_refresh(
      *,
      investments_refresh_request : Plaid::InvestmentsRefreshRequest? = nil
    ) : Crest::Request
      if debugging?
        Log.debug { "Calling API: PlaidApi.investments_refresh ..." }
      end

      if client_side_validation?
        raise ArgumentError.new("\"investments_refresh_request\" is required and cannot be null") if investments_refresh_request.nil?
        unless (_investments_refresh_request = investments_refresh_request).nil?
          _investments_refresh_request.validate if _investments_refresh_request.is_a?(OpenApi::Validatable)
        end
      end

      # resource path
      local_var_path = "/investments/refresh"

      # header parameters
      header_params : Hash(String, String) = Hash(String, String).new
      # HTTP header "Accept" (if needed)
      header_params["Accept"] = @api_client.select_header_accept(["application/json"])
      # HTTP header "Content-Type"
      header_params["Content-Type"] = @api_client.select_header_content_type(["application/json"])

      # cookie parameters
      cookie_params : Hash(String, String) = Hash(String, String).new

      # query parameters
      query_params : Hash(String, (String | Array(String) | JSON::Any)) = Hash(String, (String | Array(String) | JSON::Any)).new

      # form parameters
      form_params : Array(Tuple(String, Crest::ParamsValue)) | Nil = nil

      # http body (model)
      post_body : IO | String | Nil = @api_client.encode(body: investments_refresh_request, content_type: header_params["Content-Type"]?) if !investments_refresh_request.nil?

      # auth_names
      auth_names = ["clientId", "plaidVersion", "secret"]

      @api_client.build_api_request(
        http_method: :"POST",
        path: local_var_path,
        operation: "PlaidApi.investments_refresh",
        post_body: post_body,
        auth_names: auth_names,
        header_params: header_params,
        cookie_params: cookie_params,
        query_params: query_params,
        form_params: form_params
      )
    end

    # Get investment transactions
    # The `/investments/transactions/get` endpoint allows developers to retrieve up to 24 months of user-authorized transaction data for investment accounts.  Transactions are returned in reverse-chronological order, and the sequence of transaction ordering is stable and will not shift.  Due to the potentially large number of investment transactions associated with an Item, results are paginated. Manipulate the count and offset parameters in conjunction with the `total_investment_transactions` response body field to fetch all available investment transactions.  Note that Investments does not have a webhook to indicate when initial transaction data has loaded (unless you use the `async_update` option). Instead, if transactions data is not ready when `/investments/transactions/get` is first called, Plaid will wait for the data. For this reason, calling `/investments/transactions/get` immediately after Link may take up to one to two minutes to return.  Data returned by the asynchronous investments extraction flow (when `async_update` is set to true) may not be immediately available to `/investments/transactions/get`. To be alerted when the data is ready to be fetched, listen for the `HISTORICAL_UPDATE` webhook. If no investments history is ready when `/investments/transactions/get` is called, it will return a `PRODUCT_NOT_READY` error.
    # @required @param investments_transactions_get_request [Plaid::InvestmentsTransactionsGetRequest?]
    # @return [InvestmentsTransactionsGetResponse]
    def investments_transactions_get(
      *,
      investments_transactions_get_request : Plaid::InvestmentsTransactionsGetRequest? = nil
    ) : InvestmentsTransactionsGetResponse
      data, _status_code, _headers = investments_transactions_get_with_http_info(investments_transactions_get_request: investments_transactions_get_request)
      data
    end

    # Get investment transactions
    # The &#x60;/investments/transactions/get&#x60; endpoint allows developers to retrieve up to 24 months of user-authorized transaction data for investment accounts.  Transactions are returned in reverse-chronological order, and the sequence of transaction ordering is stable and will not shift.  Due to the potentially large number of investment transactions associated with an Item, results are paginated. Manipulate the count and offset parameters in conjunction with the &#x60;total_investment_transactions&#x60; response body field to fetch all available investment transactions.  Note that Investments does not have a webhook to indicate when initial transaction data has loaded (unless you use the &#x60;async_update&#x60; option). Instead, if transactions data is not ready when &#x60;/investments/transactions/get&#x60; is first called, Plaid will wait for the data. For this reason, calling &#x60;/investments/transactions/get&#x60; immediately after Link may take up to one to two minutes to return.  Data returned by the asynchronous investments extraction flow (when &#x60;async_update&#x60; is set to true) may not be immediately available to &#x60;/investments/transactions/get&#x60;. To be alerted when the data is ready to be fetched, listen for the &#x60;HISTORICAL_UPDATE&#x60; webhook. If no investments history is ready when &#x60;/investments/transactions/get&#x60; is called, it will return a &#x60;PRODUCT_NOT_READY&#x60; error.
    # @required @param investments_transactions_get_request [Plaid::InvestmentsTransactionsGetRequest?]
    # @return [Tuple(InvestmentsTransactionsGetResponse, Integer, Hash)] InvestmentsTransactionsGetResponse, response status code and response headers
    def investments_transactions_get_with_http_info(
      *,
      investments_transactions_get_request : Plaid::InvestmentsTransactionsGetRequest? = nil
    ) : Tuple(InvestmentsTransactionsGetResponse, Int32, Hash(String, Array(String) | String))
      request = build_api_request_for_investments_transactions_get(investments_transactions_get_request: investments_transactions_get_request)

      body, status_code, headers = @api_client.execute_api_request(request)

      if debugging?
        Log.debug { "API called: PlaidApi#investments_transactions_get\nBody: #{body.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}" }
      end

      Tuple.new(InvestmentsTransactionsGetResponse.from_json(body), status_code, headers)
    end

    # Get investment transactions
    # The &#x60;/investments/transactions/get&#x60; endpoint allows developers to retrieve up to 24 months of user-authorized transaction data for investment accounts.  Transactions are returned in reverse-chronological order, and the sequence of transaction ordering is stable and will not shift.  Due to the potentially large number of investment transactions associated with an Item, results are paginated. Manipulate the count and offset parameters in conjunction with the &#x60;total_investment_transactions&#x60; response body field to fetch all available investment transactions.  Note that Investments does not have a webhook to indicate when initial transaction data has loaded (unless you use the &#x60;async_update&#x60; option). Instead, if transactions data is not ready when &#x60;/investments/transactions/get&#x60; is first called, Plaid will wait for the data. For this reason, calling &#x60;/investments/transactions/get&#x60; immediately after Link may take up to one to two minutes to return.  Data returned by the asynchronous investments extraction flow (when &#x60;async_update&#x60; is set to true) may not be immediately available to &#x60;/investments/transactions/get&#x60;. To be alerted when the data is ready to be fetched, listen for the &#x60;HISTORICAL_UPDATE&#x60; webhook. If no investments history is ready when &#x60;/investments/transactions/get&#x60; is called, it will return a &#x60;PRODUCT_NOT_READY&#x60; error.
    # @required @param investments_transactions_get_request [Plaid::InvestmentsTransactionsGetRequest?]
    # @return nil
    def investments_transactions_get(
      *,
      investments_transactions_get_request : Plaid::InvestmentsTransactionsGetRequest? = nil,
      &block : Crest::Response ->
    ) : Nil
      build_api_request_for_investments_transactions_get(investments_transactions_get_request: investments_transactions_get_request).execute(&block)
    end

    # @return Crest::Request
    def build_api_request_for_investments_transactions_get(
      *,
      investments_transactions_get_request : Plaid::InvestmentsTransactionsGetRequest? = nil
    ) : Crest::Request
      if debugging?
        Log.debug { "Calling API: PlaidApi.investments_transactions_get ..." }
      end

      if client_side_validation?
        raise ArgumentError.new("\"investments_transactions_get_request\" is required and cannot be null") if investments_transactions_get_request.nil?
        unless (_investments_transactions_get_request = investments_transactions_get_request).nil?
          _investments_transactions_get_request.validate if _investments_transactions_get_request.is_a?(OpenApi::Validatable)
        end
      end

      # resource path
      local_var_path = "/investments/transactions/get"

      # header parameters
      header_params : Hash(String, String) = Hash(String, String).new
      # HTTP header "Accept" (if needed)
      header_params["Accept"] = @api_client.select_header_accept(["application/json"])
      # HTTP header "Content-Type"
      header_params["Content-Type"] = @api_client.select_header_content_type(["application/json"])

      # cookie parameters
      cookie_params : Hash(String, String) = Hash(String, String).new

      # query parameters
      query_params : Hash(String, (String | Array(String) | JSON::Any)) = Hash(String, (String | Array(String) | JSON::Any)).new

      # form parameters
      form_params : Array(Tuple(String, Crest::ParamsValue)) | Nil = nil

      # http body (model)
      post_body : IO | String | Nil = @api_client.encode(body: investments_transactions_get_request, content_type: header_params["Content-Type"]?) if !investments_transactions_get_request.nil?

      # auth_names
      auth_names = ["clientId", "plaidVersion", "secret"]

      @api_client.build_api_request(
        http_method: :"POST",
        path: local_var_path,
        operation: "PlaidApi.investments_transactions_get",
        post_body: post_body,
        auth_names: auth_names,
        header_params: header_params,
        cookie_params: cookie_params,
        query_params: query_params,
        form_params: form_params
      )
    end

    # Invalidate access_token
    # By default, the `access_token` associated with an Item does not expire and should be stored in a persistent, secure manner.  You can use the `/item/access_token/invalidate` endpoint to rotate the `access_token` associated with an Item. The endpoint returns a new `access_token` and immediately invalidates the previous `access_token`.
    # @required @param item_access_token_invalidate_request [Plaid::ItemAccessTokenInvalidateRequest?]
    # @return [ItemAccessTokenInvalidateResponse]
    def item_access_token_invalidate(
      *,
      item_access_token_invalidate_request : Plaid::ItemAccessTokenInvalidateRequest? = nil
    ) : ItemAccessTokenInvalidateResponse
      data, _status_code, _headers = item_access_token_invalidate_with_http_info(item_access_token_invalidate_request: item_access_token_invalidate_request)
      data
    end

    # Invalidate access_token
    # By default, the &#x60;access_token&#x60; associated with an Item does not expire and should be stored in a persistent, secure manner.  You can use the &#x60;/item/access_token/invalidate&#x60; endpoint to rotate the &#x60;access_token&#x60; associated with an Item. The endpoint returns a new &#x60;access_token&#x60; and immediately invalidates the previous &#x60;access_token&#x60;.
    # @required @param item_access_token_invalidate_request [Plaid::ItemAccessTokenInvalidateRequest?]
    # @return [Tuple(ItemAccessTokenInvalidateResponse, Integer, Hash)] ItemAccessTokenInvalidateResponse, response status code and response headers
    def item_access_token_invalidate_with_http_info(
      *,
      item_access_token_invalidate_request : Plaid::ItemAccessTokenInvalidateRequest? = nil
    ) : Tuple(ItemAccessTokenInvalidateResponse, Int32, Hash(String, Array(String) | String))
      request = build_api_request_for_item_access_token_invalidate(item_access_token_invalidate_request: item_access_token_invalidate_request)

      body, status_code, headers = @api_client.execute_api_request(request)

      if debugging?
        Log.debug { "API called: PlaidApi#item_access_token_invalidate\nBody: #{body.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}" }
      end

      Tuple.new(ItemAccessTokenInvalidateResponse.from_json(body), status_code, headers)
    end

    # Invalidate access_token
    # By default, the &#x60;access_token&#x60; associated with an Item does not expire and should be stored in a persistent, secure manner.  You can use the &#x60;/item/access_token/invalidate&#x60; endpoint to rotate the &#x60;access_token&#x60; associated with an Item. The endpoint returns a new &#x60;access_token&#x60; and immediately invalidates the previous &#x60;access_token&#x60;.
    # @required @param item_access_token_invalidate_request [Plaid::ItemAccessTokenInvalidateRequest?]
    # @return nil
    def item_access_token_invalidate(
      *,
      item_access_token_invalidate_request : Plaid::ItemAccessTokenInvalidateRequest? = nil,
      &block : Crest::Response ->
    ) : Nil
      build_api_request_for_item_access_token_invalidate(item_access_token_invalidate_request: item_access_token_invalidate_request).execute(&block)
    end

    # @return Crest::Request
    def build_api_request_for_item_access_token_invalidate(
      *,
      item_access_token_invalidate_request : Plaid::ItemAccessTokenInvalidateRequest? = nil
    ) : Crest::Request
      if debugging?
        Log.debug { "Calling API: PlaidApi.item_access_token_invalidate ..." }
      end

      if client_side_validation?
        raise ArgumentError.new("\"item_access_token_invalidate_request\" is required and cannot be null") if item_access_token_invalidate_request.nil?
        unless (_item_access_token_invalidate_request = item_access_token_invalidate_request).nil?
          _item_access_token_invalidate_request.validate if _item_access_token_invalidate_request.is_a?(OpenApi::Validatable)
        end
      end

      # resource path
      local_var_path = "/item/access_token/invalidate"

      # header parameters
      header_params : Hash(String, String) = Hash(String, String).new
      # HTTP header "Accept" (if needed)
      header_params["Accept"] = @api_client.select_header_accept(["application/json"])
      # HTTP header "Content-Type"
      header_params["Content-Type"] = @api_client.select_header_content_type(["application/json"])

      # cookie parameters
      cookie_params : Hash(String, String) = Hash(String, String).new

      # query parameters
      query_params : Hash(String, (String | Array(String) | JSON::Any)) = Hash(String, (String | Array(String) | JSON::Any)).new

      # form parameters
      form_params : Array(Tuple(String, Crest::ParamsValue)) | Nil = nil

      # http body (model)
      post_body : IO | String | Nil = @api_client.encode(body: item_access_token_invalidate_request, content_type: header_params["Content-Type"]?) if !item_access_token_invalidate_request.nil?

      # auth_names
      auth_names = ["clientId", "plaidVersion", "secret"]

      @api_client.build_api_request(
        http_method: :"POST",
        path: local_var_path,
        operation: "PlaidApi.item_access_token_invalidate",
        post_body: post_body,
        auth_names: auth_names,
        header_params: header_params,
        cookie_params: cookie_params,
        query_params: query_params,
        form_params: form_params
      )
    end

    # List a historical log of user consent events
    # List a historical log of user consent events
    # @required @param item_activity_list_request [Plaid::ItemActivityListRequest?]
    # @return [ItemActivityListResponse]
    def item_activity_list(
      *,
      item_activity_list_request : Plaid::ItemActivityListRequest? = nil
    ) : ItemActivityListResponse
      data, _status_code, _headers = item_activity_list_with_http_info(item_activity_list_request: item_activity_list_request)
      data
    end

    # List a historical log of user consent events
    # List a historical log of user consent events
    # @required @param item_activity_list_request [Plaid::ItemActivityListRequest?]
    # @return [Tuple(ItemActivityListResponse, Integer, Hash)] ItemActivityListResponse, response status code and response headers
    def item_activity_list_with_http_info(
      *,
      item_activity_list_request : Plaid::ItemActivityListRequest? = nil
    ) : Tuple(ItemActivityListResponse, Int32, Hash(String, Array(String) | String))
      request = build_api_request_for_item_activity_list(item_activity_list_request: item_activity_list_request)

      body, status_code, headers = @api_client.execute_api_request(request)

      if debugging?
        Log.debug { "API called: PlaidApi#item_activity_list\nBody: #{body.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}" }
      end

      Tuple.new(ItemActivityListResponse.from_json(body), status_code, headers)
    end

    # List a historical log of user consent events
    # List a historical log of user consent events
    # @required @param item_activity_list_request [Plaid::ItemActivityListRequest?]
    # @return nil
    def item_activity_list(
      *,
      item_activity_list_request : Plaid::ItemActivityListRequest? = nil,
      &block : Crest::Response ->
    ) : Nil
      build_api_request_for_item_activity_list(item_activity_list_request: item_activity_list_request).execute(&block)
    end

    # @return Crest::Request
    def build_api_request_for_item_activity_list(
      *,
      item_activity_list_request : Plaid::ItemActivityListRequest? = nil
    ) : Crest::Request
      if debugging?
        Log.debug { "Calling API: PlaidApi.item_activity_list ..." }
      end

      if client_side_validation?
        raise ArgumentError.new("\"item_activity_list_request\" is required and cannot be null") if item_activity_list_request.nil?
        unless (_item_activity_list_request = item_activity_list_request).nil?
          _item_activity_list_request.validate if _item_activity_list_request.is_a?(OpenApi::Validatable)
        end
      end

      # resource path
      local_var_path = "/item/activity/list"

      # header parameters
      header_params : Hash(String, String) = Hash(String, String).new
      # HTTP header "Accept" (if needed)
      header_params["Accept"] = @api_client.select_header_accept(["application/json"])
      # HTTP header "Content-Type"
      header_params["Content-Type"] = @api_client.select_header_content_type(["application/json"])

      # cookie parameters
      cookie_params : Hash(String, String) = Hash(String, String).new

      # query parameters
      query_params : Hash(String, (String | Array(String) | JSON::Any)) = Hash(String, (String | Array(String) | JSON::Any)).new

      # form parameters
      form_params : Array(Tuple(String, Crest::ParamsValue)) | Nil = nil

      # http body (model)
      post_body : IO | String | Nil = @api_client.encode(body: item_activity_list_request, content_type: header_params["Content-Type"]?) if !item_activity_list_request.nil?

      # auth_names
      auth_names = ["clientId", "plaidVersion", "secret"]

      @api_client.build_api_request(
        http_method: :"POST",
        path: local_var_path,
        operation: "PlaidApi.item_activity_list",
        post_body: post_body,
        auth_names: auth_names,
        header_params: header_params,
        cookie_params: cookie_params,
        query_params: query_params,
        form_params: form_params
      )
    end

    # List a user’s connected applications
    # List a user’s connected applications
    # @required @param item_application_list_request [Plaid::ItemApplicationListRequest?]
    # @return [ItemApplicationListResponse]
    def item_application_list(
      *,
      item_application_list_request : Plaid::ItemApplicationListRequest? = nil
    ) : ItemApplicationListResponse
      data, _status_code, _headers = item_application_list_with_http_info(item_application_list_request: item_application_list_request)
      data
    end

    # List a user’s connected applications
    # List a user’s connected applications
    # @required @param item_application_list_request [Plaid::ItemApplicationListRequest?]
    # @return [Tuple(ItemApplicationListResponse, Integer, Hash)] ItemApplicationListResponse, response status code and response headers
    def item_application_list_with_http_info(
      *,
      item_application_list_request : Plaid::ItemApplicationListRequest? = nil
    ) : Tuple(ItemApplicationListResponse, Int32, Hash(String, Array(String) | String))
      request = build_api_request_for_item_application_list(item_application_list_request: item_application_list_request)

      body, status_code, headers = @api_client.execute_api_request(request)

      if debugging?
        Log.debug { "API called: PlaidApi#item_application_list\nBody: #{body.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}" }
      end

      Tuple.new(ItemApplicationListResponse.from_json(body), status_code, headers)
    end

    # List a user’s connected applications
    # List a user’s connected applications
    # @required @param item_application_list_request [Plaid::ItemApplicationListRequest?]
    # @return nil
    def item_application_list(
      *,
      item_application_list_request : Plaid::ItemApplicationListRequest? = nil,
      &block : Crest::Response ->
    ) : Nil
      build_api_request_for_item_application_list(item_application_list_request: item_application_list_request).execute(&block)
    end

    # @return Crest::Request
    def build_api_request_for_item_application_list(
      *,
      item_application_list_request : Plaid::ItemApplicationListRequest? = nil
    ) : Crest::Request
      if debugging?
        Log.debug { "Calling API: PlaidApi.item_application_list ..." }
      end

      if client_side_validation?
        raise ArgumentError.new("\"item_application_list_request\" is required and cannot be null") if item_application_list_request.nil?
        unless (_item_application_list_request = item_application_list_request).nil?
          _item_application_list_request.validate if _item_application_list_request.is_a?(OpenApi::Validatable)
        end
      end

      # resource path
      local_var_path = "/item/application/list"

      # header parameters
      header_params : Hash(String, String) = Hash(String, String).new
      # HTTP header "Accept" (if needed)
      header_params["Accept"] = @api_client.select_header_accept(["application/json"])
      # HTTP header "Content-Type"
      header_params["Content-Type"] = @api_client.select_header_content_type(["application/json"])

      # cookie parameters
      cookie_params : Hash(String, String) = Hash(String, String).new

      # query parameters
      query_params : Hash(String, (String | Array(String) | JSON::Any)) = Hash(String, (String | Array(String) | JSON::Any)).new

      # form parameters
      form_params : Array(Tuple(String, Crest::ParamsValue)) | Nil = nil

      # http body (model)
      post_body : IO | String | Nil = @api_client.encode(body: item_application_list_request, content_type: header_params["Content-Type"]?) if !item_application_list_request.nil?

      # auth_names
      auth_names = ["clientId", "plaidVersion", "secret"]

      @api_client.build_api_request(
        http_method: :"POST",
        path: local_var_path,
        operation: "PlaidApi.item_application_list",
        post_body: post_body,
        auth_names: auth_names,
        header_params: header_params,
        cookie_params: cookie_params,
        query_params: query_params,
        form_params: form_params
      )
    end

    # Update the scopes of access for a particular application
    # Enable consumers to update product access on selected accounts for an application.
    # @required @param item_application_scopes_update_request [Plaid::ItemApplicationScopesUpdateRequest?]
    # @return [ItemApplicationScopesUpdateResponse]
    def item_application_scopes_update(
      *,
      item_application_scopes_update_request : Plaid::ItemApplicationScopesUpdateRequest? = nil
    ) : ItemApplicationScopesUpdateResponse
      data, _status_code, _headers = item_application_scopes_update_with_http_info(item_application_scopes_update_request: item_application_scopes_update_request)
      data
    end

    # Update the scopes of access for a particular application
    # Enable consumers to update product access on selected accounts for an application.
    # @required @param item_application_scopes_update_request [Plaid::ItemApplicationScopesUpdateRequest?]
    # @return [Tuple(ItemApplicationScopesUpdateResponse, Integer, Hash)] ItemApplicationScopesUpdateResponse, response status code and response headers
    def item_application_scopes_update_with_http_info(
      *,
      item_application_scopes_update_request : Plaid::ItemApplicationScopesUpdateRequest? = nil
    ) : Tuple(ItemApplicationScopesUpdateResponse, Int32, Hash(String, Array(String) | String))
      request = build_api_request_for_item_application_scopes_update(item_application_scopes_update_request: item_application_scopes_update_request)

      body, status_code, headers = @api_client.execute_api_request(request)

      if debugging?
        Log.debug { "API called: PlaidApi#item_application_scopes_update\nBody: #{body.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}" }
      end

      Tuple.new(ItemApplicationScopesUpdateResponse.from_json(body), status_code, headers)
    end

    # Update the scopes of access for a particular application
    # Enable consumers to update product access on selected accounts for an application.
    # @required @param item_application_scopes_update_request [Plaid::ItemApplicationScopesUpdateRequest?]
    # @return nil
    def item_application_scopes_update(
      *,
      item_application_scopes_update_request : Plaid::ItemApplicationScopesUpdateRequest? = nil,
      &block : Crest::Response ->
    ) : Nil
      build_api_request_for_item_application_scopes_update(item_application_scopes_update_request: item_application_scopes_update_request).execute(&block)
    end

    # @return Crest::Request
    def build_api_request_for_item_application_scopes_update(
      *,
      item_application_scopes_update_request : Plaid::ItemApplicationScopesUpdateRequest? = nil
    ) : Crest::Request
      if debugging?
        Log.debug { "Calling API: PlaidApi.item_application_scopes_update ..." }
      end

      if client_side_validation?
        raise ArgumentError.new("\"item_application_scopes_update_request\" is required and cannot be null") if item_application_scopes_update_request.nil?
        unless (_item_application_scopes_update_request = item_application_scopes_update_request).nil?
          _item_application_scopes_update_request.validate if _item_application_scopes_update_request.is_a?(OpenApi::Validatable)
        end
      end

      # resource path
      local_var_path = "/item/application/scopes/update"

      # header parameters
      header_params : Hash(String, String) = Hash(String, String).new
      # HTTP header "Accept" (if needed)
      header_params["Accept"] = @api_client.select_header_accept(["application/json"])
      # HTTP header "Content-Type"
      header_params["Content-Type"] = @api_client.select_header_content_type(["application/json"])

      # cookie parameters
      cookie_params : Hash(String, String) = Hash(String, String).new

      # query parameters
      query_params : Hash(String, (String | Array(String) | JSON::Any)) = Hash(String, (String | Array(String) | JSON::Any)).new

      # form parameters
      form_params : Array(Tuple(String, Crest::ParamsValue)) | Nil = nil

      # http body (model)
      post_body : IO | String | Nil = @api_client.encode(body: item_application_scopes_update_request, content_type: header_params["Content-Type"]?) if !item_application_scopes_update_request.nil?

      # auth_names
      auth_names = ["clientId", "plaidVersion", "secret"]

      @api_client.build_api_request(
        http_method: :"POST",
        path: local_var_path,
        operation: "PlaidApi.item_application_scopes_update",
        post_body: post_body,
        auth_names: auth_names,
        header_params: header_params,
        cookie_params: cookie_params,
        query_params: query_params,
        form_params: form_params
      )
    end

    # Unlink a user’s connected application
    # Unlink a user’s connected application. On an unlink request, Plaid will immediately revoke the Application’s access to the User’s data.  The User will have to redo the OAuth authentication process in order to restore functionality.  This endpoint only removes ongoing data access permissions, therefore the User will need to reach out to the Application itself in order to disable and delete their account and delete any data that the Application already received (if the Application does not do so by default).  This endpoint should be called in real time as the User is unlinking an Application, and should not be batched in order to ensure that the change is reflected as soon as possible.
    # @required @param item_application_unlink_request [Plaid::ItemApplicationUnlinkRequest?]
    # @return [ItemApplicationUnlinkResponse]
    def item_application_unlink(
      *,
      item_application_unlink_request : Plaid::ItemApplicationUnlinkRequest? = nil
    ) : ItemApplicationUnlinkResponse
      data, _status_code, _headers = item_application_unlink_with_http_info(item_application_unlink_request: item_application_unlink_request)
      data
    end

    # Unlink a user’s connected application
    # Unlink a user’s connected application. On an unlink request, Plaid will immediately revoke the Application’s access to the User’s data.  The User will have to redo the OAuth authentication process in order to restore functionality.  This endpoint only removes ongoing data access permissions, therefore the User will need to reach out to the Application itself in order to disable and delete their account and delete any data that the Application already received (if the Application does not do so by default).  This endpoint should be called in real time as the User is unlinking an Application, and should not be batched in order to ensure that the change is reflected as soon as possible.
    # @required @param item_application_unlink_request [Plaid::ItemApplicationUnlinkRequest?]
    # @return [Tuple(ItemApplicationUnlinkResponse, Integer, Hash)] ItemApplicationUnlinkResponse, response status code and response headers
    def item_application_unlink_with_http_info(
      *,
      item_application_unlink_request : Plaid::ItemApplicationUnlinkRequest? = nil
    ) : Tuple(ItemApplicationUnlinkResponse, Int32, Hash(String, Array(String) | String))
      request = build_api_request_for_item_application_unlink(item_application_unlink_request: item_application_unlink_request)

      body, status_code, headers = @api_client.execute_api_request(request)

      if debugging?
        Log.debug { "API called: PlaidApi#item_application_unlink\nBody: #{body.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}" }
      end

      Tuple.new(ItemApplicationUnlinkResponse.from_json(body), status_code, headers)
    end

    # Unlink a user’s connected application
    # Unlink a user’s connected application. On an unlink request, Plaid will immediately revoke the Application’s access to the User’s data.  The User will have to redo the OAuth authentication process in order to restore functionality.  This endpoint only removes ongoing data access permissions, therefore the User will need to reach out to the Application itself in order to disable and delete their account and delete any data that the Application already received (if the Application does not do so by default).  This endpoint should be called in real time as the User is unlinking an Application, and should not be batched in order to ensure that the change is reflected as soon as possible.
    # @required @param item_application_unlink_request [Plaid::ItemApplicationUnlinkRequest?]
    # @return nil
    def item_application_unlink(
      *,
      item_application_unlink_request : Plaid::ItemApplicationUnlinkRequest? = nil,
      &block : Crest::Response ->
    ) : Nil
      build_api_request_for_item_application_unlink(item_application_unlink_request: item_application_unlink_request).execute(&block)
    end

    # @return Crest::Request
    def build_api_request_for_item_application_unlink(
      *,
      item_application_unlink_request : Plaid::ItemApplicationUnlinkRequest? = nil
    ) : Crest::Request
      if debugging?
        Log.debug { "Calling API: PlaidApi.item_application_unlink ..." }
      end

      if client_side_validation?
        raise ArgumentError.new("\"item_application_unlink_request\" is required and cannot be null") if item_application_unlink_request.nil?
        unless (_item_application_unlink_request = item_application_unlink_request).nil?
          _item_application_unlink_request.validate if _item_application_unlink_request.is_a?(OpenApi::Validatable)
        end
      end

      # resource path
      local_var_path = "/item/application/unlink"

      # header parameters
      header_params : Hash(String, String) = Hash(String, String).new
      # HTTP header "Accept" (if needed)
      header_params["Accept"] = @api_client.select_header_accept(["application/json"])
      # HTTP header "Content-Type"
      header_params["Content-Type"] = @api_client.select_header_content_type(["application/json"])

      # cookie parameters
      cookie_params : Hash(String, String) = Hash(String, String).new

      # query parameters
      query_params : Hash(String, (String | Array(String) | JSON::Any)) = Hash(String, (String | Array(String) | JSON::Any)).new

      # form parameters
      form_params : Array(Tuple(String, Crest::ParamsValue)) | Nil = nil

      # http body (model)
      post_body : IO | String | Nil = @api_client.encode(body: item_application_unlink_request, content_type: header_params["Content-Type"]?) if !item_application_unlink_request.nil?

      # auth_names
      auth_names = ["clientId", "plaidVersion", "secret"]

      @api_client.build_api_request(
        http_method: :"POST",
        path: local_var_path,
        operation: "PlaidApi.item_application_unlink",
        post_body: post_body,
        auth_names: auth_names,
        header_params: header_params,
        cookie_params: cookie_params,
        query_params: query_params,
        form_params: form_params
      )
    end

    # Create public token
    # Note: As of July 2020, the `/item/public_token/create` endpoint is deprecated. Instead, use `/link/token/create` with an `access_token` to create a Link token for use with [update mode](https://plaid.com/docs/link/update-mode).  If you need your user to take action to restore or resolve an error associated with an Item, generate a public token with the `/item/public_token/create` endpoint and then initialize Link with that `public_token`.  A `public_token` is one-time use and expires after 30 minutes. You use a `public_token` to initialize Link in [update mode](https://plaid.com/docs/link/update-mode) for a particular Item. You can generate a `public_token` for an Item even if you did not use Link to create the Item originally.  The `/item/public_token/create` endpoint is **not** used to create your initial `public_token`. If you have not already received an `access_token` for a specific Item, use Link to obtain your `public_token` instead. See the [Quickstart](https://plaid.com/docs/quickstart) for more information.
    # @required @param item_public_token_create_request [Plaid::ItemPublicTokenCreateRequest?]
    # @return [ItemPublicTokenCreateResponse]
    def item_create_public_token(
      *,
      item_public_token_create_request : Plaid::ItemPublicTokenCreateRequest? = nil
    ) : ItemPublicTokenCreateResponse
      data, _status_code, _headers = item_create_public_token_with_http_info(item_public_token_create_request: item_public_token_create_request)
      data
    end

    # Create public token
    # Note: As of July 2020, the &#x60;/item/public_token/create&#x60; endpoint is deprecated. Instead, use &#x60;/link/token/create&#x60; with an &#x60;access_token&#x60; to create a Link token for use with [update mode](https://plaid.com/docs/link/update-mode).  If you need your user to take action to restore or resolve an error associated with an Item, generate a public token with the &#x60;/item/public_token/create&#x60; endpoint and then initialize Link with that &#x60;public_token&#x60;.  A &#x60;public_token&#x60; is one-time use and expires after 30 minutes. You use a &#x60;public_token&#x60; to initialize Link in [update mode](https://plaid.com/docs/link/update-mode) for a particular Item. You can generate a &#x60;public_token&#x60; for an Item even if you did not use Link to create the Item originally.  The &#x60;/item/public_token/create&#x60; endpoint is **not** used to create your initial &#x60;public_token&#x60;. If you have not already received an &#x60;access_token&#x60; for a specific Item, use Link to obtain your &#x60;public_token&#x60; instead. See the [Quickstart](https://plaid.com/docs/quickstart) for more information.
    # @required @param item_public_token_create_request [Plaid::ItemPublicTokenCreateRequest?]
    # @return [Tuple(ItemPublicTokenCreateResponse, Integer, Hash)] ItemPublicTokenCreateResponse, response status code and response headers
    def item_create_public_token_with_http_info(
      *,
      item_public_token_create_request : Plaid::ItemPublicTokenCreateRequest? = nil
    ) : Tuple(ItemPublicTokenCreateResponse, Int32, Hash(String, Array(String) | String))
      request = build_api_request_for_item_create_public_token(item_public_token_create_request: item_public_token_create_request)

      body, status_code, headers = @api_client.execute_api_request(request)

      if debugging?
        Log.debug { "API called: PlaidApi#item_create_public_token\nBody: #{body.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}" }
      end

      Tuple.new(ItemPublicTokenCreateResponse.from_json(body), status_code, headers)
    end

    # Create public token
    # Note: As of July 2020, the &#x60;/item/public_token/create&#x60; endpoint is deprecated. Instead, use &#x60;/link/token/create&#x60; with an &#x60;access_token&#x60; to create a Link token for use with [update mode](https://plaid.com/docs/link/update-mode).  If you need your user to take action to restore or resolve an error associated with an Item, generate a public token with the &#x60;/item/public_token/create&#x60; endpoint and then initialize Link with that &#x60;public_token&#x60;.  A &#x60;public_token&#x60; is one-time use and expires after 30 minutes. You use a &#x60;public_token&#x60; to initialize Link in [update mode](https://plaid.com/docs/link/update-mode) for a particular Item. You can generate a &#x60;public_token&#x60; for an Item even if you did not use Link to create the Item originally.  The &#x60;/item/public_token/create&#x60; endpoint is **not** used to create your initial &#x60;public_token&#x60;. If you have not already received an &#x60;access_token&#x60; for a specific Item, use Link to obtain your &#x60;public_token&#x60; instead. See the [Quickstart](https://plaid.com/docs/quickstart) for more information.
    # @required @param item_public_token_create_request [Plaid::ItemPublicTokenCreateRequest?]
    # @return nil
    def item_create_public_token(
      *,
      item_public_token_create_request : Plaid::ItemPublicTokenCreateRequest? = nil,
      &block : Crest::Response ->
    ) : Nil
      build_api_request_for_item_create_public_token(item_public_token_create_request: item_public_token_create_request).execute(&block)
    end

    # @return Crest::Request
    def build_api_request_for_item_create_public_token(
      *,
      item_public_token_create_request : Plaid::ItemPublicTokenCreateRequest? = nil
    ) : Crest::Request
      if debugging?
        Log.debug { "Calling API: PlaidApi.item_create_public_token ..." }
      end

      if client_side_validation?
        raise ArgumentError.new("\"item_public_token_create_request\" is required and cannot be null") if item_public_token_create_request.nil?
        unless (_item_public_token_create_request = item_public_token_create_request).nil?
          _item_public_token_create_request.validate if _item_public_token_create_request.is_a?(OpenApi::Validatable)
        end
      end

      # resource path
      local_var_path = "/item/public_token/create"

      # header parameters
      header_params : Hash(String, String) = Hash(String, String).new
      # HTTP header "Accept" (if needed)
      header_params["Accept"] = @api_client.select_header_accept(["application/json"])
      # HTTP header "Content-Type"
      header_params["Content-Type"] = @api_client.select_header_content_type(["application/json"])

      # cookie parameters
      cookie_params : Hash(String, String) = Hash(String, String).new

      # query parameters
      query_params : Hash(String, (String | Array(String) | JSON::Any)) = Hash(String, (String | Array(String) | JSON::Any)).new

      # form parameters
      form_params : Array(Tuple(String, Crest::ParamsValue)) | Nil = nil

      # http body (model)
      post_body : IO | String | Nil = @api_client.encode(body: item_public_token_create_request, content_type: header_params["Content-Type"]?) if !item_public_token_create_request.nil?

      # auth_names
      auth_names = ["clientId", "plaidVersion", "secret"]

      @api_client.build_api_request(
        http_method: :"POST",
        path: local_var_path,
        operation: "PlaidApi.item_create_public_token",
        post_body: post_body,
        auth_names: auth_names,
        header_params: header_params,
        cookie_params: cookie_params,
        query_params: query_params,
        form_params: form_params
      )
    end

    # Retrieve an Item
    # Returns information about the status of an Item.
    # @required @param item_get_request [Plaid::ItemGetRequest?]
    # @return [ItemGetResponse]
    def item_get(
      *,
      item_get_request : Plaid::ItemGetRequest? = nil
    ) : ItemGetResponse
      data, _status_code, _headers = item_get_with_http_info(item_get_request: item_get_request)
      data
    end

    # Retrieve an Item
    # Returns information about the status of an Item.
    # @required @param item_get_request [Plaid::ItemGetRequest?]
    # @return [Tuple(ItemGetResponse, Integer, Hash)] ItemGetResponse, response status code and response headers
    def item_get_with_http_info(
      *,
      item_get_request : Plaid::ItemGetRequest? = nil
    ) : Tuple(ItemGetResponse, Int32, Hash(String, Array(String) | String))
      request = build_api_request_for_item_get(item_get_request: item_get_request)

      body, status_code, headers = @api_client.execute_api_request(request)

      if debugging?
        Log.debug { "API called: PlaidApi#item_get\nBody: #{body.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}" }
      end

      Tuple.new(ItemGetResponse.from_json(body), status_code, headers)
    end

    # Retrieve an Item
    # Returns information about the status of an Item.
    # @required @param item_get_request [Plaid::ItemGetRequest?]
    # @return nil
    def item_get(
      *,
      item_get_request : Plaid::ItemGetRequest? = nil,
      &block : Crest::Response ->
    ) : Nil
      build_api_request_for_item_get(item_get_request: item_get_request).execute(&block)
    end

    # @return Crest::Request
    def build_api_request_for_item_get(
      *,
      item_get_request : Plaid::ItemGetRequest? = nil
    ) : Crest::Request
      if debugging?
        Log.debug { "Calling API: PlaidApi.item_get ..." }
      end

      if client_side_validation?
        raise ArgumentError.new("\"item_get_request\" is required and cannot be null") if item_get_request.nil?
        unless (_item_get_request = item_get_request).nil?
          _item_get_request.validate if _item_get_request.is_a?(OpenApi::Validatable)
        end
      end

      # resource path
      local_var_path = "/item/get"

      # header parameters
      header_params : Hash(String, String) = Hash(String, String).new
      # HTTP header "Accept" (if needed)
      header_params["Accept"] = @api_client.select_header_accept(["application/json"])
      # HTTP header "Content-Type"
      header_params["Content-Type"] = @api_client.select_header_content_type(["application/json"])

      # cookie parameters
      cookie_params : Hash(String, String) = Hash(String, String).new

      # query parameters
      query_params : Hash(String, (String | Array(String) | JSON::Any)) = Hash(String, (String | Array(String) | JSON::Any)).new

      # form parameters
      form_params : Array(Tuple(String, Crest::ParamsValue)) | Nil = nil

      # http body (model)
      post_body : IO | String | Nil = @api_client.encode(body: item_get_request, content_type: header_params["Content-Type"]?) if !item_get_request.nil?

      # auth_names
      auth_names = ["clientId", "plaidVersion", "secret"]

      @api_client.build_api_request(
        http_method: :"POST",
        path: local_var_path,
        operation: "PlaidApi.item_get",
        post_body: post_body,
        auth_names: auth_names,
        header_params: header_params,
        cookie_params: cookie_params,
        query_params: query_params,
        form_params: form_params
      )
    end

    # Import Item
    # `/item/import` creates an Item via your Plaid Exchange Integration and returns an `access_token`. As part of an `/item/import` request, you will include a User ID (`user_auth.user_id`) and Authentication Token (`user_auth.auth_token`) that enable data aggregation through your Plaid Exchange API endpoints. These authentication principals are to be chosen by you.  Upon creating an Item via `/item/import`, Plaid will automatically begin an extraction of that Item through the Plaid Exchange infrastructure you have already integrated.
    # @required @param item_import_request [Plaid::ItemImportRequest?]
    # @return [ItemImportResponse]
    def item_import(
      *,
      item_import_request : Plaid::ItemImportRequest? = nil
    ) : ItemImportResponse
      data, _status_code, _headers = item_import_with_http_info(item_import_request: item_import_request)
      data
    end

    # Import Item
    # &#x60;/item/import&#x60; creates an Item via your Plaid Exchange Integration and returns an &#x60;access_token&#x60;. As part of an &#x60;/item/import&#x60; request, you will include a User ID (&#x60;user_auth.user_id&#x60;) and Authentication Token (&#x60;user_auth.auth_token&#x60;) that enable data aggregation through your Plaid Exchange API endpoints. These authentication principals are to be chosen by you.  Upon creating an Item via &#x60;/item/import&#x60;, Plaid will automatically begin an extraction of that Item through the Plaid Exchange infrastructure you have already integrated.
    # @required @param item_import_request [Plaid::ItemImportRequest?]
    # @return [Tuple(ItemImportResponse, Integer, Hash)] ItemImportResponse, response status code and response headers
    def item_import_with_http_info(
      *,
      item_import_request : Plaid::ItemImportRequest? = nil
    ) : Tuple(ItemImportResponse, Int32, Hash(String, Array(String) | String))
      request = build_api_request_for_item_import(item_import_request: item_import_request)

      body, status_code, headers = @api_client.execute_api_request(request)

      if debugging?
        Log.debug { "API called: PlaidApi#item_import\nBody: #{body.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}" }
      end

      Tuple.new(ItemImportResponse.from_json(body), status_code, headers)
    end

    # Import Item
    # &#x60;/item/import&#x60; creates an Item via your Plaid Exchange Integration and returns an &#x60;access_token&#x60;. As part of an &#x60;/item/import&#x60; request, you will include a User ID (&#x60;user_auth.user_id&#x60;) and Authentication Token (&#x60;user_auth.auth_token&#x60;) that enable data aggregation through your Plaid Exchange API endpoints. These authentication principals are to be chosen by you.  Upon creating an Item via &#x60;/item/import&#x60;, Plaid will automatically begin an extraction of that Item through the Plaid Exchange infrastructure you have already integrated.
    # @required @param item_import_request [Plaid::ItemImportRequest?]
    # @return nil
    def item_import(
      *,
      item_import_request : Plaid::ItemImportRequest? = nil,
      &block : Crest::Response ->
    ) : Nil
      build_api_request_for_item_import(item_import_request: item_import_request).execute(&block)
    end

    # @return Crest::Request
    def build_api_request_for_item_import(
      *,
      item_import_request : Plaid::ItemImportRequest? = nil
    ) : Crest::Request
      if debugging?
        Log.debug { "Calling API: PlaidApi.item_import ..." }
      end

      if client_side_validation?
        raise ArgumentError.new("\"item_import_request\" is required and cannot be null") if item_import_request.nil?
        unless (_item_import_request = item_import_request).nil?
          _item_import_request.validate if _item_import_request.is_a?(OpenApi::Validatable)
        end
      end

      # resource path
      local_var_path = "/item/import"

      # header parameters
      header_params : Hash(String, String) = Hash(String, String).new
      # HTTP header "Accept" (if needed)
      header_params["Accept"] = @api_client.select_header_accept(["application/json"])
      # HTTP header "Content-Type"
      header_params["Content-Type"] = @api_client.select_header_content_type(["application/json"])

      # cookie parameters
      cookie_params : Hash(String, String) = Hash(String, String).new

      # query parameters
      query_params : Hash(String, (String | Array(String) | JSON::Any)) = Hash(String, (String | Array(String) | JSON::Any)).new

      # form parameters
      form_params : Array(Tuple(String, Crest::ParamsValue)) | Nil = nil

      # http body (model)
      post_body : IO | String | Nil = @api_client.encode(body: item_import_request, content_type: header_params["Content-Type"]?) if !item_import_request.nil?

      # auth_names
      auth_names = ["clientId", "plaidVersion", "secret"]

      @api_client.build_api_request(
        http_method: :"POST",
        path: local_var_path,
        operation: "PlaidApi.item_import",
        post_body: post_body,
        auth_names: auth_names,
        header_params: header_params,
        cookie_params: cookie_params,
        query_params: query_params,
        form_params: form_params
      )
    end

    # Exchange public token for an access token
    # Exchange a Link `public_token` for an API `access_token`. Link hands off the `public_token` client-side via the `onSuccess` callback once a user has successfully created an Item. The `public_token` is ephemeral and expires after 30 minutes. An `access_token` does not expire, but can be revoked by calling `/item/remove`.  The response also includes an `item_id` that should be stored with the `access_token`. The `item_id` is used to identify an Item in a webhook. The `item_id` can also be retrieved by making an `/item/get` request.
    # @required @param item_public_token_exchange_request [Plaid::ItemPublicTokenExchangeRequest?]
    # @return [ItemPublicTokenExchangeResponse]
    def item_public_token_exchange(
      *,
      item_public_token_exchange_request : Plaid::ItemPublicTokenExchangeRequest? = nil
    ) : ItemPublicTokenExchangeResponse
      data, _status_code, _headers = item_public_token_exchange_with_http_info(item_public_token_exchange_request: item_public_token_exchange_request)
      data
    end

    # Exchange public token for an access token
    # Exchange a Link &#x60;public_token&#x60; for an API &#x60;access_token&#x60;. Link hands off the &#x60;public_token&#x60; client-side via the &#x60;onSuccess&#x60; callback once a user has successfully created an Item. The &#x60;public_token&#x60; is ephemeral and expires after 30 minutes. An &#x60;access_token&#x60; does not expire, but can be revoked by calling &#x60;/item/remove&#x60;.  The response also includes an &#x60;item_id&#x60; that should be stored with the &#x60;access_token&#x60;. The &#x60;item_id&#x60; is used to identify an Item in a webhook. The &#x60;item_id&#x60; can also be retrieved by making an &#x60;/item/get&#x60; request.
    # @required @param item_public_token_exchange_request [Plaid::ItemPublicTokenExchangeRequest?]
    # @return [Tuple(ItemPublicTokenExchangeResponse, Integer, Hash)] ItemPublicTokenExchangeResponse, response status code and response headers
    def item_public_token_exchange_with_http_info(
      *,
      item_public_token_exchange_request : Plaid::ItemPublicTokenExchangeRequest? = nil
    ) : Tuple(ItemPublicTokenExchangeResponse, Int32, Hash(String, Array(String) | String))
      request = build_api_request_for_item_public_token_exchange(item_public_token_exchange_request: item_public_token_exchange_request)

      body, status_code, headers = @api_client.execute_api_request(request)

      if debugging?
        Log.debug { "API called: PlaidApi#item_public_token_exchange\nBody: #{body.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}" }
      end

      Tuple.new(ItemPublicTokenExchangeResponse.from_json(body), status_code, headers)
    end

    # Exchange public token for an access token
    # Exchange a Link &#x60;public_token&#x60; for an API &#x60;access_token&#x60;. Link hands off the &#x60;public_token&#x60; client-side via the &#x60;onSuccess&#x60; callback once a user has successfully created an Item. The &#x60;public_token&#x60; is ephemeral and expires after 30 minutes. An &#x60;access_token&#x60; does not expire, but can be revoked by calling &#x60;/item/remove&#x60;.  The response also includes an &#x60;item_id&#x60; that should be stored with the &#x60;access_token&#x60;. The &#x60;item_id&#x60; is used to identify an Item in a webhook. The &#x60;item_id&#x60; can also be retrieved by making an &#x60;/item/get&#x60; request.
    # @required @param item_public_token_exchange_request [Plaid::ItemPublicTokenExchangeRequest?]
    # @return nil
    def item_public_token_exchange(
      *,
      item_public_token_exchange_request : Plaid::ItemPublicTokenExchangeRequest? = nil,
      &block : Crest::Response ->
    ) : Nil
      build_api_request_for_item_public_token_exchange(item_public_token_exchange_request: item_public_token_exchange_request).execute(&block)
    end

    # @return Crest::Request
    def build_api_request_for_item_public_token_exchange(
      *,
      item_public_token_exchange_request : Plaid::ItemPublicTokenExchangeRequest? = nil
    ) : Crest::Request
      if debugging?
        Log.debug { "Calling API: PlaidApi.item_public_token_exchange ..." }
      end

      if client_side_validation?
        raise ArgumentError.new("\"item_public_token_exchange_request\" is required and cannot be null") if item_public_token_exchange_request.nil?
        unless (_item_public_token_exchange_request = item_public_token_exchange_request).nil?
          _item_public_token_exchange_request.validate if _item_public_token_exchange_request.is_a?(OpenApi::Validatable)
        end
      end

      # resource path
      local_var_path = "/item/public_token/exchange"

      # header parameters
      header_params : Hash(String, String) = Hash(String, String).new
      # HTTP header "Accept" (if needed)
      header_params["Accept"] = @api_client.select_header_accept(["application/json"])
      # HTTP header "Content-Type"
      header_params["Content-Type"] = @api_client.select_header_content_type(["application/json"])

      # cookie parameters
      cookie_params : Hash(String, String) = Hash(String, String).new

      # query parameters
      query_params : Hash(String, (String | Array(String) | JSON::Any)) = Hash(String, (String | Array(String) | JSON::Any)).new

      # form parameters
      form_params : Array(Tuple(String, Crest::ParamsValue)) | Nil = nil

      # http body (model)
      post_body : IO | String | Nil = @api_client.encode(body: item_public_token_exchange_request, content_type: header_params["Content-Type"]?) if !item_public_token_exchange_request.nil?

      # auth_names
      auth_names = ["clientId", "plaidVersion", "secret"]

      @api_client.build_api_request(
        http_method: :"POST",
        path: local_var_path,
        operation: "PlaidApi.item_public_token_exchange",
        post_body: post_body,
        auth_names: auth_names,
        header_params: header_params,
        cookie_params: cookie_params,
        query_params: query_params,
        form_params: form_params
      )
    end

    # Remove an Item
    # The `/item/remove` endpoint allows you to remove an Item. Once removed, the `access_token`, as well as any processor tokens or bank account tokens associated with the Item, is no longer valid and cannot be used to access any data that was associated with the Item.  Note that in the Development environment, issuing an `/item/remove`  request will not decrement your live credential count. To increase your credential account in Development, contact Support.  Also note that for certain OAuth-based institutions, an Item removed via `/item/remove` may still show as an active connection in the institution's OAuth permission manager.  API versions 2019-05-29 and earlier return a `removed` boolean as part of the response.
    # @required @param item_remove_request [Plaid::ItemRemoveRequest?]
    # @return [ItemRemoveResponse]
    def item_remove(
      *,
      item_remove_request : Plaid::ItemRemoveRequest? = nil
    ) : ItemRemoveResponse
      data, _status_code, _headers = item_remove_with_http_info(item_remove_request: item_remove_request)
      data
    end

    # Remove an Item
    # The &#x60;/item/remove&#x60; endpoint allows you to remove an Item. Once removed, the &#x60;access_token&#x60;, as well as any processor tokens or bank account tokens associated with the Item, is no longer valid and cannot be used to access any data that was associated with the Item.  Note that in the Development environment, issuing an &#x60;/item/remove&#x60;  request will not decrement your live credential count. To increase your credential account in Development, contact Support.  Also note that for certain OAuth-based institutions, an Item removed via &#x60;/item/remove&#x60; may still show as an active connection in the institution&#39;s OAuth permission manager.  API versions 2019-05-29 and earlier return a &#x60;removed&#x60; boolean as part of the response.
    # @required @param item_remove_request [Plaid::ItemRemoveRequest?]
    # @return [Tuple(ItemRemoveResponse, Integer, Hash)] ItemRemoveResponse, response status code and response headers
    def item_remove_with_http_info(
      *,
      item_remove_request : Plaid::ItemRemoveRequest? = nil
    ) : Tuple(ItemRemoveResponse, Int32, Hash(String, Array(String) | String))
      request = build_api_request_for_item_remove(item_remove_request: item_remove_request)

      body, status_code, headers = @api_client.execute_api_request(request)

      if debugging?
        Log.debug { "API called: PlaidApi#item_remove\nBody: #{body.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}" }
      end

      Tuple.new(ItemRemoveResponse.from_json(body), status_code, headers)
    end

    # Remove an Item
    # The &#x60;/item/remove&#x60; endpoint allows you to remove an Item. Once removed, the &#x60;access_token&#x60;, as well as any processor tokens or bank account tokens associated with the Item, is no longer valid and cannot be used to access any data that was associated with the Item.  Note that in the Development environment, issuing an &#x60;/item/remove&#x60;  request will not decrement your live credential count. To increase your credential account in Development, contact Support.  Also note that for certain OAuth-based institutions, an Item removed via &#x60;/item/remove&#x60; may still show as an active connection in the institution&#39;s OAuth permission manager.  API versions 2019-05-29 and earlier return a &#x60;removed&#x60; boolean as part of the response.
    # @required @param item_remove_request [Plaid::ItemRemoveRequest?]
    # @return nil
    def item_remove(
      *,
      item_remove_request : Plaid::ItemRemoveRequest? = nil,
      &block : Crest::Response ->
    ) : Nil
      build_api_request_for_item_remove(item_remove_request: item_remove_request).execute(&block)
    end

    # @return Crest::Request
    def build_api_request_for_item_remove(
      *,
      item_remove_request : Plaid::ItemRemoveRequest? = nil
    ) : Crest::Request
      if debugging?
        Log.debug { "Calling API: PlaidApi.item_remove ..." }
      end

      if client_side_validation?
        raise ArgumentError.new("\"item_remove_request\" is required and cannot be null") if item_remove_request.nil?
        unless (_item_remove_request = item_remove_request).nil?
          _item_remove_request.validate if _item_remove_request.is_a?(OpenApi::Validatable)
        end
      end

      # resource path
      local_var_path = "/item/remove"

      # header parameters
      header_params : Hash(String, String) = Hash(String, String).new
      # HTTP header "Accept" (if needed)
      header_params["Accept"] = @api_client.select_header_accept(["application/json"])
      # HTTP header "Content-Type"
      header_params["Content-Type"] = @api_client.select_header_content_type(["application/json"])

      # cookie parameters
      cookie_params : Hash(String, String) = Hash(String, String).new

      # query parameters
      query_params : Hash(String, (String | Array(String) | JSON::Any)) = Hash(String, (String | Array(String) | JSON::Any)).new

      # form parameters
      form_params : Array(Tuple(String, Crest::ParamsValue)) | Nil = nil

      # http body (model)
      post_body : IO | String | Nil = @api_client.encode(body: item_remove_request, content_type: header_params["Content-Type"]?) if !item_remove_request.nil?

      # auth_names
      auth_names = ["clientId", "plaidVersion", "secret"]

      @api_client.build_api_request(
        http_method: :"POST",
        path: local_var_path,
        operation: "PlaidApi.item_remove",
        post_body: post_body,
        auth_names: auth_names,
        header_params: header_params,
        cookie_params: cookie_params,
        query_params: query_params,
        form_params: form_params
      )
    end

    # Update Webhook URL
    # The POST `/item/webhook/update` allows you to update the webhook URL associated with an Item. This request triggers a [`WEBHOOK_UPDATE_ACKNOWLEDGED`](https://plaid.com/docs/api/items/#webhook_update_acknowledged) webhook to the newly specified webhook URL.
    # @required @param item_webhook_update_request [Plaid::ItemWebhookUpdateRequest?]
    # @return [ItemWebhookUpdateResponse]
    def item_webhook_update(
      *,
      item_webhook_update_request : Plaid::ItemWebhookUpdateRequest? = nil
    ) : ItemWebhookUpdateResponse
      data, _status_code, _headers = item_webhook_update_with_http_info(item_webhook_update_request: item_webhook_update_request)
      data
    end

    # Update Webhook URL
    # The POST &#x60;/item/webhook/update&#x60; allows you to update the webhook URL associated with an Item. This request triggers a [&#x60;WEBHOOK_UPDATE_ACKNOWLEDGED&#x60;](https://plaid.com/docs/api/items/#webhook_update_acknowledged) webhook to the newly specified webhook URL.
    # @required @param item_webhook_update_request [Plaid::ItemWebhookUpdateRequest?]
    # @return [Tuple(ItemWebhookUpdateResponse, Integer, Hash)] ItemWebhookUpdateResponse, response status code and response headers
    def item_webhook_update_with_http_info(
      *,
      item_webhook_update_request : Plaid::ItemWebhookUpdateRequest? = nil
    ) : Tuple(ItemWebhookUpdateResponse, Int32, Hash(String, Array(String) | String))
      request = build_api_request_for_item_webhook_update(item_webhook_update_request: item_webhook_update_request)

      body, status_code, headers = @api_client.execute_api_request(request)

      if debugging?
        Log.debug { "API called: PlaidApi#item_webhook_update\nBody: #{body.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}" }
      end

      Tuple.new(ItemWebhookUpdateResponse.from_json(body), status_code, headers)
    end

    # Update Webhook URL
    # The POST &#x60;/item/webhook/update&#x60; allows you to update the webhook URL associated with an Item. This request triggers a [&#x60;WEBHOOK_UPDATE_ACKNOWLEDGED&#x60;](https://plaid.com/docs/api/items/#webhook_update_acknowledged) webhook to the newly specified webhook URL.
    # @required @param item_webhook_update_request [Plaid::ItemWebhookUpdateRequest?]
    # @return nil
    def item_webhook_update(
      *,
      item_webhook_update_request : Plaid::ItemWebhookUpdateRequest? = nil,
      &block : Crest::Response ->
    ) : Nil
      build_api_request_for_item_webhook_update(item_webhook_update_request: item_webhook_update_request).execute(&block)
    end

    # @return Crest::Request
    def build_api_request_for_item_webhook_update(
      *,
      item_webhook_update_request : Plaid::ItemWebhookUpdateRequest? = nil
    ) : Crest::Request
      if debugging?
        Log.debug { "Calling API: PlaidApi.item_webhook_update ..." }
      end

      if client_side_validation?
        raise ArgumentError.new("\"item_webhook_update_request\" is required and cannot be null") if item_webhook_update_request.nil?
        unless (_item_webhook_update_request = item_webhook_update_request).nil?
          _item_webhook_update_request.validate if _item_webhook_update_request.is_a?(OpenApi::Validatable)
        end
      end

      # resource path
      local_var_path = "/item/webhook/update"

      # header parameters
      header_params : Hash(String, String) = Hash(String, String).new
      # HTTP header "Accept" (if needed)
      header_params["Accept"] = @api_client.select_header_accept(["application/json"])
      # HTTP header "Content-Type"
      header_params["Content-Type"] = @api_client.select_header_content_type(["application/json"])

      # cookie parameters
      cookie_params : Hash(String, String) = Hash(String, String).new

      # query parameters
      query_params : Hash(String, (String | Array(String) | JSON::Any)) = Hash(String, (String | Array(String) | JSON::Any)).new

      # form parameters
      form_params : Array(Tuple(String, Crest::ParamsValue)) | Nil = nil

      # http body (model)
      post_body : IO | String | Nil = @api_client.encode(body: item_webhook_update_request, content_type: header_params["Content-Type"]?) if !item_webhook_update_request.nil?

      # auth_names
      auth_names = ["clientId", "plaidVersion", "secret"]

      @api_client.build_api_request(
        http_method: :"POST",
        path: local_var_path,
        operation: "PlaidApi.item_webhook_update",
        post_body: post_body,
        auth_names: auth_names,
        header_params: header_params,
        cookie_params: cookie_params,
        query_params: query_params,
        form_params: form_params
      )
    end

    # Retrieve Liabilities data
    # The `/liabilities/get` endpoint returns various details about an Item with loan or credit accounts. Liabilities data is available primarily for US financial institutions, with some limited coverage of Canadian institutions. Currently supported account types are account type `credit` with account subtype `credit card` or `paypal`, and account type `loan` with account subtype `student` or `mortgage`. To limit accounts listed in Link to types and subtypes supported by Liabilities, you can use the `account_filters` parameter when [creating a Link token](https://plaid.com/docs/api/tokens/#linktokencreate).  The types of information returned by Liabilities can include balances and due dates, loan terms, and account details such as original loan amount and guarantor. Data is refreshed approximately once per day; the latest data can be retrieved by calling `/liabilities/get`.  Note: This request may take some time to complete if `liabilities` was not specified as an initial product when creating the Item. This is because Plaid must communicate directly with the institution to retrieve the additional data.
    # @required @param liabilities_get_request [Plaid::LiabilitiesGetRequest?]
    # @return [LiabilitiesGetResponse]
    def liabilities_get(
      *,
      liabilities_get_request : Plaid::LiabilitiesGetRequest? = nil
    ) : LiabilitiesGetResponse
      data, _status_code, _headers = liabilities_get_with_http_info(liabilities_get_request: liabilities_get_request)
      data
    end

    # Retrieve Liabilities data
    # The &#x60;/liabilities/get&#x60; endpoint returns various details about an Item with loan or credit accounts. Liabilities data is available primarily for US financial institutions, with some limited coverage of Canadian institutions. Currently supported account types are account type &#x60;credit&#x60; with account subtype &#x60;credit card&#x60; or &#x60;paypal&#x60;, and account type &#x60;loan&#x60; with account subtype &#x60;student&#x60; or &#x60;mortgage&#x60;. To limit accounts listed in Link to types and subtypes supported by Liabilities, you can use the &#x60;account_filters&#x60; parameter when [creating a Link token](https://plaid.com/docs/api/tokens/#linktokencreate).  The types of information returned by Liabilities can include balances and due dates, loan terms, and account details such as original loan amount and guarantor. Data is refreshed approximately once per day; the latest data can be retrieved by calling &#x60;/liabilities/get&#x60;.  Note: This request may take some time to complete if &#x60;liabilities&#x60; was not specified as an initial product when creating the Item. This is because Plaid must communicate directly with the institution to retrieve the additional data.
    # @required @param liabilities_get_request [Plaid::LiabilitiesGetRequest?]
    # @return [Tuple(LiabilitiesGetResponse, Integer, Hash)] LiabilitiesGetResponse, response status code and response headers
    def liabilities_get_with_http_info(
      *,
      liabilities_get_request : Plaid::LiabilitiesGetRequest? = nil
    ) : Tuple(LiabilitiesGetResponse, Int32, Hash(String, Array(String) | String))
      request = build_api_request_for_liabilities_get(liabilities_get_request: liabilities_get_request)

      body, status_code, headers = @api_client.execute_api_request(request)

      if debugging?
        Log.debug { "API called: PlaidApi#liabilities_get\nBody: #{body.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}" }
      end

      Tuple.new(LiabilitiesGetResponse.from_json(body), status_code, headers)
    end

    # Retrieve Liabilities data
    # The &#x60;/liabilities/get&#x60; endpoint returns various details about an Item with loan or credit accounts. Liabilities data is available primarily for US financial institutions, with some limited coverage of Canadian institutions. Currently supported account types are account type &#x60;credit&#x60; with account subtype &#x60;credit card&#x60; or &#x60;paypal&#x60;, and account type &#x60;loan&#x60; with account subtype &#x60;student&#x60; or &#x60;mortgage&#x60;. To limit accounts listed in Link to types and subtypes supported by Liabilities, you can use the &#x60;account_filters&#x60; parameter when [creating a Link token](https://plaid.com/docs/api/tokens/#linktokencreate).  The types of information returned by Liabilities can include balances and due dates, loan terms, and account details such as original loan amount and guarantor. Data is refreshed approximately once per day; the latest data can be retrieved by calling &#x60;/liabilities/get&#x60;.  Note: This request may take some time to complete if &#x60;liabilities&#x60; was not specified as an initial product when creating the Item. This is because Plaid must communicate directly with the institution to retrieve the additional data.
    # @required @param liabilities_get_request [Plaid::LiabilitiesGetRequest?]
    # @return nil
    def liabilities_get(
      *,
      liabilities_get_request : Plaid::LiabilitiesGetRequest? = nil,
      &block : Crest::Response ->
    ) : Nil
      build_api_request_for_liabilities_get(liabilities_get_request: liabilities_get_request).execute(&block)
    end

    # @return Crest::Request
    def build_api_request_for_liabilities_get(
      *,
      liabilities_get_request : Plaid::LiabilitiesGetRequest? = nil
    ) : Crest::Request
      if debugging?
        Log.debug { "Calling API: PlaidApi.liabilities_get ..." }
      end

      if client_side_validation?
        raise ArgumentError.new("\"liabilities_get_request\" is required and cannot be null") if liabilities_get_request.nil?
        unless (_liabilities_get_request = liabilities_get_request).nil?
          _liabilities_get_request.validate if _liabilities_get_request.is_a?(OpenApi::Validatable)
        end
      end

      # resource path
      local_var_path = "/liabilities/get"

      # header parameters
      header_params : Hash(String, String) = Hash(String, String).new
      # HTTP header "Accept" (if needed)
      header_params["Accept"] = @api_client.select_header_accept(["application/json"])
      # HTTP header "Content-Type"
      header_params["Content-Type"] = @api_client.select_header_content_type(["application/json"])

      # cookie parameters
      cookie_params : Hash(String, String) = Hash(String, String).new

      # query parameters
      query_params : Hash(String, (String | Array(String) | JSON::Any)) = Hash(String, (String | Array(String) | JSON::Any)).new

      # form parameters
      form_params : Array(Tuple(String, Crest::ParamsValue)) | Nil = nil

      # http body (model)
      post_body : IO | String | Nil = @api_client.encode(body: liabilities_get_request, content_type: header_params["Content-Type"]?) if !liabilities_get_request.nil?

      # auth_names
      auth_names = ["clientId", "plaidVersion", "secret"]

      @api_client.build_api_request(
        http_method: :"POST",
        path: local_var_path,
        operation: "PlaidApi.liabilities_get",
        post_body: post_body,
        auth_names: auth_names,
        header_params: header_params,
        cookie_params: cookie_params,
        query_params: query_params,
        form_params: form_params
      )
    end

    # Create Hosted Link session
    # Use the `/link_delivery/create` endpoint to create a Hosted Link session.
    # @required @param link_delivery_create_request [Plaid::LinkDeliveryCreateRequest?]
    # @return [LinkDeliveryCreateResponse]
    def link_delivery_create(
      *,
      link_delivery_create_request : Plaid::LinkDeliveryCreateRequest? = nil
    ) : LinkDeliveryCreateResponse
      data, _status_code, _headers = link_delivery_create_with_http_info(link_delivery_create_request: link_delivery_create_request)
      data
    end

    # Create Hosted Link session
    # Use the &#x60;/link_delivery/create&#x60; endpoint to create a Hosted Link session.
    # @required @param link_delivery_create_request [Plaid::LinkDeliveryCreateRequest?]
    # @return [Tuple(LinkDeliveryCreateResponse, Integer, Hash)] LinkDeliveryCreateResponse, response status code and response headers
    def link_delivery_create_with_http_info(
      *,
      link_delivery_create_request : Plaid::LinkDeliveryCreateRequest? = nil
    ) : Tuple(LinkDeliveryCreateResponse, Int32, Hash(String, Array(String) | String))
      request = build_api_request_for_link_delivery_create(link_delivery_create_request: link_delivery_create_request)

      body, status_code, headers = @api_client.execute_api_request(request)

      if debugging?
        Log.debug { "API called: PlaidApi#link_delivery_create\nBody: #{body.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}" }
      end

      Tuple.new(LinkDeliveryCreateResponse.from_json(body), status_code, headers)
    end

    # Create Hosted Link session
    # Use the &#x60;/link_delivery/create&#x60; endpoint to create a Hosted Link session.
    # @required @param link_delivery_create_request [Plaid::LinkDeliveryCreateRequest?]
    # @return nil
    def link_delivery_create(
      *,
      link_delivery_create_request : Plaid::LinkDeliveryCreateRequest? = nil,
      &block : Crest::Response ->
    ) : Nil
      build_api_request_for_link_delivery_create(link_delivery_create_request: link_delivery_create_request).execute(&block)
    end

    # @return Crest::Request
    def build_api_request_for_link_delivery_create(
      *,
      link_delivery_create_request : Plaid::LinkDeliveryCreateRequest? = nil
    ) : Crest::Request
      if debugging?
        Log.debug { "Calling API: PlaidApi.link_delivery_create ..." }
      end

      if client_side_validation?
        raise ArgumentError.new("\"link_delivery_create_request\" is required and cannot be null") if link_delivery_create_request.nil?
        unless (_link_delivery_create_request = link_delivery_create_request).nil?
          _link_delivery_create_request.validate if _link_delivery_create_request.is_a?(OpenApi::Validatable)
        end
      end

      # resource path
      local_var_path = "/link_delivery/create"

      # header parameters
      header_params : Hash(String, String) = Hash(String, String).new
      # HTTP header "Accept" (if needed)
      header_params["Accept"] = @api_client.select_header_accept(["application/json"])
      # HTTP header "Content-Type"
      header_params["Content-Type"] = @api_client.select_header_content_type(["application/json"])

      # cookie parameters
      cookie_params : Hash(String, String) = Hash(String, String).new

      # query parameters
      query_params : Hash(String, (String | Array(String) | JSON::Any)) = Hash(String, (String | Array(String) | JSON::Any)).new

      # form parameters
      form_params : Array(Tuple(String, Crest::ParamsValue)) | Nil = nil

      # http body (model)
      post_body : IO | String | Nil = @api_client.encode(body: link_delivery_create_request, content_type: header_params["Content-Type"]?) if !link_delivery_create_request.nil?

      # auth_names
      auth_names = ["clientId", "plaidVersion", "secret"]

      @api_client.build_api_request(
        http_method: :"POST",
        path: local_var_path,
        operation: "PlaidApi.link_delivery_create",
        post_body: post_body,
        auth_names: auth_names,
        header_params: header_params,
        cookie_params: cookie_params,
        query_params: query_params,
        form_params: form_params
      )
    end

    # Get Hosted Link session
    # Use the `/link_delivery/get` endpoint to get the status of a Hosted Link session.
    # @required @param link_delivery_get_request [Plaid::LinkDeliveryGetRequest?]
    # @return [LinkDeliveryGetResponse]
    def link_delivery_get(
      *,
      link_delivery_get_request : Plaid::LinkDeliveryGetRequest? = nil
    ) : LinkDeliveryGetResponse
      data, _status_code, _headers = link_delivery_get_with_http_info(link_delivery_get_request: link_delivery_get_request)
      data
    end

    # Get Hosted Link session
    # Use the &#x60;/link_delivery/get&#x60; endpoint to get the status of a Hosted Link session.
    # @required @param link_delivery_get_request [Plaid::LinkDeliveryGetRequest?]
    # @return [Tuple(LinkDeliveryGetResponse, Integer, Hash)] LinkDeliveryGetResponse, response status code and response headers
    def link_delivery_get_with_http_info(
      *,
      link_delivery_get_request : Plaid::LinkDeliveryGetRequest? = nil
    ) : Tuple(LinkDeliveryGetResponse, Int32, Hash(String, Array(String) | String))
      request = build_api_request_for_link_delivery_get(link_delivery_get_request: link_delivery_get_request)

      body, status_code, headers = @api_client.execute_api_request(request)

      if debugging?
        Log.debug { "API called: PlaidApi#link_delivery_get\nBody: #{body.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}" }
      end

      Tuple.new(LinkDeliveryGetResponse.from_json(body), status_code, headers)
    end

    # Get Hosted Link session
    # Use the &#x60;/link_delivery/get&#x60; endpoint to get the status of a Hosted Link session.
    # @required @param link_delivery_get_request [Plaid::LinkDeliveryGetRequest?]
    # @return nil
    def link_delivery_get(
      *,
      link_delivery_get_request : Plaid::LinkDeliveryGetRequest? = nil,
      &block : Crest::Response ->
    ) : Nil
      build_api_request_for_link_delivery_get(link_delivery_get_request: link_delivery_get_request).execute(&block)
    end

    # @return Crest::Request
    def build_api_request_for_link_delivery_get(
      *,
      link_delivery_get_request : Plaid::LinkDeliveryGetRequest? = nil
    ) : Crest::Request
      if debugging?
        Log.debug { "Calling API: PlaidApi.link_delivery_get ..." }
      end

      if client_side_validation?
        raise ArgumentError.new("\"link_delivery_get_request\" is required and cannot be null") if link_delivery_get_request.nil?
        unless (_link_delivery_get_request = link_delivery_get_request).nil?
          _link_delivery_get_request.validate if _link_delivery_get_request.is_a?(OpenApi::Validatable)
        end
      end

      # resource path
      local_var_path = "/link_delivery/get"

      # header parameters
      header_params : Hash(String, String) = Hash(String, String).new
      # HTTP header "Accept" (if needed)
      header_params["Accept"] = @api_client.select_header_accept(["application/json"])
      # HTTP header "Content-Type"
      header_params["Content-Type"] = @api_client.select_header_content_type(["application/json"])

      # cookie parameters
      cookie_params : Hash(String, String) = Hash(String, String).new

      # query parameters
      query_params : Hash(String, (String | Array(String) | JSON::Any)) = Hash(String, (String | Array(String) | JSON::Any)).new

      # form parameters
      form_params : Array(Tuple(String, Crest::ParamsValue)) | Nil = nil

      # http body (model)
      post_body : IO | String | Nil = @api_client.encode(body: link_delivery_get_request, content_type: header_params["Content-Type"]?) if !link_delivery_get_request.nil?

      # auth_names
      auth_names = ["clientId", "plaidVersion", "secret"]

      @api_client.build_api_request(
        http_method: :"POST",
        path: local_var_path,
        operation: "PlaidApi.link_delivery_get",
        post_body: post_body,
        auth_names: auth_names,
        header_params: header_params,
        cookie_params: cookie_params,
        query_params: query_params,
        form_params: form_params
      )
    end

    # Exchange the Link Correlation Id for a Link Token
    # Exchange an OAuth `link_correlation_id` for the corresponding `link_token`. The `link_correlation_id` is only available for 'payment_initiation' products and is provided to the client via the OAuth `redirect_uri` as a query parameter. The `link_correlation_id` is ephemeral and expires in a brief period, after which it can no longer be exchanged for the 'link_token'.
    # @required @param link_o_auth_correlation_id_exchange_request [Plaid::LinkOAuthCorrelationIdExchangeRequest?]
    # @return [LinkOAuthCorrelationIdExchangeResponse]
    def link_oauth_correlation_id_exchange(
      *,
      link_o_auth_correlation_id_exchange_request : Plaid::LinkOAuthCorrelationIdExchangeRequest? = nil
    ) : LinkOAuthCorrelationIdExchangeResponse
      data, _status_code, _headers = link_oauth_correlation_id_exchange_with_http_info(link_o_auth_correlation_id_exchange_request: link_o_auth_correlation_id_exchange_request)
      data
    end

    # Exchange the Link Correlation Id for a Link Token
    # Exchange an OAuth &#x60;link_correlation_id&#x60; for the corresponding &#x60;link_token&#x60;. The &#x60;link_correlation_id&#x60; is only available for &#39;payment_initiation&#39; products and is provided to the client via the OAuth &#x60;redirect_uri&#x60; as a query parameter. The &#x60;link_correlation_id&#x60; is ephemeral and expires in a brief period, after which it can no longer be exchanged for the &#39;link_token&#39;.
    # @required @param link_o_auth_correlation_id_exchange_request [Plaid::LinkOAuthCorrelationIdExchangeRequest?]
    # @return [Tuple(LinkOAuthCorrelationIdExchangeResponse, Integer, Hash)] LinkOAuthCorrelationIdExchangeResponse, response status code and response headers
    def link_oauth_correlation_id_exchange_with_http_info(
      *,
      link_o_auth_correlation_id_exchange_request : Plaid::LinkOAuthCorrelationIdExchangeRequest? = nil
    ) : Tuple(LinkOAuthCorrelationIdExchangeResponse, Int32, Hash(String, Array(String) | String))
      request = build_api_request_for_link_oauth_correlation_id_exchange(link_o_auth_correlation_id_exchange_request: link_o_auth_correlation_id_exchange_request)

      body, status_code, headers = @api_client.execute_api_request(request)

      if debugging?
        Log.debug { "API called: PlaidApi#link_oauth_correlation_id_exchange\nBody: #{body.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}" }
      end

      Tuple.new(LinkOAuthCorrelationIdExchangeResponse.from_json(body), status_code, headers)
    end

    # Exchange the Link Correlation Id for a Link Token
    # Exchange an OAuth &#x60;link_correlation_id&#x60; for the corresponding &#x60;link_token&#x60;. The &#x60;link_correlation_id&#x60; is only available for &#39;payment_initiation&#39; products and is provided to the client via the OAuth &#x60;redirect_uri&#x60; as a query parameter. The &#x60;link_correlation_id&#x60; is ephemeral and expires in a brief period, after which it can no longer be exchanged for the &#39;link_token&#39;.
    # @required @param link_o_auth_correlation_id_exchange_request [Plaid::LinkOAuthCorrelationIdExchangeRequest?]
    # @return nil
    def link_oauth_correlation_id_exchange(
      *,
      link_o_auth_correlation_id_exchange_request : Plaid::LinkOAuthCorrelationIdExchangeRequest? = nil,
      &block : Crest::Response ->
    ) : Nil
      build_api_request_for_link_oauth_correlation_id_exchange(link_o_auth_correlation_id_exchange_request: link_o_auth_correlation_id_exchange_request).execute(&block)
    end

    # @return Crest::Request
    def build_api_request_for_link_oauth_correlation_id_exchange(
      *,
      link_o_auth_correlation_id_exchange_request : Plaid::LinkOAuthCorrelationIdExchangeRequest? = nil
    ) : Crest::Request
      if debugging?
        Log.debug { "Calling API: PlaidApi.link_oauth_correlation_id_exchange ..." }
      end

      if client_side_validation?
        raise ArgumentError.new("\"link_o_auth_correlation_id_exchange_request\" is required and cannot be null") if link_o_auth_correlation_id_exchange_request.nil?
        unless (_link_o_auth_correlation_id_exchange_request = link_o_auth_correlation_id_exchange_request).nil?
          _link_o_auth_correlation_id_exchange_request.validate if _link_o_auth_correlation_id_exchange_request.is_a?(OpenApi::Validatable)
        end
      end

      # resource path
      local_var_path = "/link/oauth/correlation_id/exchange"

      # header parameters
      header_params : Hash(String, String) = Hash(String, String).new
      # HTTP header "Accept" (if needed)
      header_params["Accept"] = @api_client.select_header_accept(["application/json"])
      # HTTP header "Content-Type"
      header_params["Content-Type"] = @api_client.select_header_content_type(["application/json"])

      # cookie parameters
      cookie_params : Hash(String, String) = Hash(String, String).new

      # query parameters
      query_params : Hash(String, (String | Array(String) | JSON::Any)) = Hash(String, (String | Array(String) | JSON::Any)).new

      # form parameters
      form_params : Array(Tuple(String, Crest::ParamsValue)) | Nil = nil

      # http body (model)
      post_body : IO | String | Nil = @api_client.encode(body: link_o_auth_correlation_id_exchange_request, content_type: header_params["Content-Type"]?) if !link_o_auth_correlation_id_exchange_request.nil?

      # auth_names
      auth_names = ["clientId", "plaidVersion", "secret"]

      @api_client.build_api_request(
        http_method: :"POST",
        path: local_var_path,
        operation: "PlaidApi.link_oauth_correlation_id_exchange",
        post_body: post_body,
        auth_names: auth_names,
        header_params: header_params,
        cookie_params: cookie_params,
        query_params: query_params,
        form_params: form_params
      )
    end

    # Create Link Token
    # The `/link/token/create` endpoint creates a `link_token`, which is required as a parameter when initializing Link. Once Link has been initialized, it returns a `public_token`, which can then be exchanged for an `access_token` via `/item/public_token/exchange` as part of the main Link flow.  A `link_token` generated by `/link/token/create` is also used to initialize other Link flows, such as the update mode flow for tokens with expired credentials, or the Payment Initiation (Europe) flow.
    # @required @param link_token_create_request [Plaid::LinkTokenCreateRequest?]
    # @return [LinkTokenCreateResponse]
    def link_token_create(
      *,
      link_token_create_request : Plaid::LinkTokenCreateRequest? = nil
    ) : LinkTokenCreateResponse
      data, _status_code, _headers = link_token_create_with_http_info(link_token_create_request: link_token_create_request)
      data
    end

    # Create Link Token
    # The &#x60;/link/token/create&#x60; endpoint creates a &#x60;link_token&#x60;, which is required as a parameter when initializing Link. Once Link has been initialized, it returns a &#x60;public_token&#x60;, which can then be exchanged for an &#x60;access_token&#x60; via &#x60;/item/public_token/exchange&#x60; as part of the main Link flow.  A &#x60;link_token&#x60; generated by &#x60;/link/token/create&#x60; is also used to initialize other Link flows, such as the update mode flow for tokens with expired credentials, or the Payment Initiation (Europe) flow.
    # @required @param link_token_create_request [Plaid::LinkTokenCreateRequest?]
    # @return [Tuple(LinkTokenCreateResponse, Integer, Hash)] LinkTokenCreateResponse, response status code and response headers
    def link_token_create_with_http_info(
      *,
      link_token_create_request : Plaid::LinkTokenCreateRequest? = nil
    ) : Tuple(LinkTokenCreateResponse, Int32, Hash(String, Array(String) | String))
      request = build_api_request_for_link_token_create(link_token_create_request: link_token_create_request)

      body, status_code, headers = @api_client.execute_api_request(request)

      if debugging?
        Log.debug { "API called: PlaidApi#link_token_create\nBody: #{body.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}" }
      end

      Tuple.new(LinkTokenCreateResponse.from_json(body), status_code, headers)
    end

    # Create Link Token
    # The &#x60;/link/token/create&#x60; endpoint creates a &#x60;link_token&#x60;, which is required as a parameter when initializing Link. Once Link has been initialized, it returns a &#x60;public_token&#x60;, which can then be exchanged for an &#x60;access_token&#x60; via &#x60;/item/public_token/exchange&#x60; as part of the main Link flow.  A &#x60;link_token&#x60; generated by &#x60;/link/token/create&#x60; is also used to initialize other Link flows, such as the update mode flow for tokens with expired credentials, or the Payment Initiation (Europe) flow.
    # @required @param link_token_create_request [Plaid::LinkTokenCreateRequest?]
    # @return nil
    def link_token_create(
      *,
      link_token_create_request : Plaid::LinkTokenCreateRequest? = nil,
      &block : Crest::Response ->
    ) : Nil
      build_api_request_for_link_token_create(link_token_create_request: link_token_create_request).execute(&block)
    end

    # @return Crest::Request
    def build_api_request_for_link_token_create(
      *,
      link_token_create_request : Plaid::LinkTokenCreateRequest? = nil
    ) : Crest::Request
      if debugging?
        Log.debug { "Calling API: PlaidApi.link_token_create ..." }
      end

      if client_side_validation?
        raise ArgumentError.new("\"link_token_create_request\" is required and cannot be null") if link_token_create_request.nil?
        unless (_link_token_create_request = link_token_create_request).nil?
          _link_token_create_request.validate if _link_token_create_request.is_a?(OpenApi::Validatable)
        end
      end

      # resource path
      local_var_path = "/link/token/create"

      # header parameters
      header_params : Hash(String, String) = Hash(String, String).new
      # HTTP header "Accept" (if needed)
      header_params["Accept"] = @api_client.select_header_accept(["application/json"])
      # HTTP header "Content-Type"
      header_params["Content-Type"] = @api_client.select_header_content_type(["application/json"])

      # cookie parameters
      cookie_params : Hash(String, String) = Hash(String, String).new

      # query parameters
      query_params : Hash(String, (String | Array(String) | JSON::Any)) = Hash(String, (String | Array(String) | JSON::Any)).new

      # form parameters
      form_params : Array(Tuple(String, Crest::ParamsValue)) | Nil = nil

      # http body (model)
      post_body : IO | String | Nil = @api_client.encode(body: link_token_create_request, content_type: header_params["Content-Type"]?) if !link_token_create_request.nil?

      # auth_names
      auth_names = ["clientId", "plaidVersion", "secret"]

      @api_client.build_api_request(
        http_method: :"POST",
        path: local_var_path,
        operation: "PlaidApi.link_token_create",
        post_body: post_body,
        auth_names: auth_names,
        header_params: header_params,
        cookie_params: cookie_params,
        query_params: query_params,
        form_params: form_params
      )
    end

    # Get Link Token
    # The `/link/token/get` endpoint gets information about a previously-created `link_token` using the `/link/token/create` endpoint. It can be useful for debugging purposes.
    # @required @param link_token_get_request [Plaid::LinkTokenGetRequest?]
    # @return [LinkTokenGetResponse]
    def link_token_get(
      *,
      link_token_get_request : Plaid::LinkTokenGetRequest? = nil
    ) : LinkTokenGetResponse
      data, _status_code, _headers = link_token_get_with_http_info(link_token_get_request: link_token_get_request)
      data
    end

    # Get Link Token
    # The &#x60;/link/token/get&#x60; endpoint gets information about a previously-created &#x60;link_token&#x60; using the &#x60;/link/token/create&#x60; endpoint. It can be useful for debugging purposes.
    # @required @param link_token_get_request [Plaid::LinkTokenGetRequest?]
    # @return [Tuple(LinkTokenGetResponse, Integer, Hash)] LinkTokenGetResponse, response status code and response headers
    def link_token_get_with_http_info(
      *,
      link_token_get_request : Plaid::LinkTokenGetRequest? = nil
    ) : Tuple(LinkTokenGetResponse, Int32, Hash(String, Array(String) | String))
      request = build_api_request_for_link_token_get(link_token_get_request: link_token_get_request)

      body, status_code, headers = @api_client.execute_api_request(request)

      if debugging?
        Log.debug { "API called: PlaidApi#link_token_get\nBody: #{body.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}" }
      end

      Tuple.new(LinkTokenGetResponse.from_json(body), status_code, headers)
    end

    # Get Link Token
    # The &#x60;/link/token/get&#x60; endpoint gets information about a previously-created &#x60;link_token&#x60; using the &#x60;/link/token/create&#x60; endpoint. It can be useful for debugging purposes.
    # @required @param link_token_get_request [Plaid::LinkTokenGetRequest?]
    # @return nil
    def link_token_get(
      *,
      link_token_get_request : Plaid::LinkTokenGetRequest? = nil,
      &block : Crest::Response ->
    ) : Nil
      build_api_request_for_link_token_get(link_token_get_request: link_token_get_request).execute(&block)
    end

    # @return Crest::Request
    def build_api_request_for_link_token_get(
      *,
      link_token_get_request : Plaid::LinkTokenGetRequest? = nil
    ) : Crest::Request
      if debugging?
        Log.debug { "Calling API: PlaidApi.link_token_get ..." }
      end

      if client_side_validation?
        raise ArgumentError.new("\"link_token_get_request\" is required and cannot be null") if link_token_get_request.nil?
        unless (_link_token_get_request = link_token_get_request).nil?
          _link_token_get_request.validate if _link_token_get_request.is_a?(OpenApi::Validatable)
        end
      end

      # resource path
      local_var_path = "/link/token/get"

      # header parameters
      header_params : Hash(String, String) = Hash(String, String).new
      # HTTP header "Accept" (if needed)
      header_params["Accept"] = @api_client.select_header_accept(["application/json"])
      # HTTP header "Content-Type"
      header_params["Content-Type"] = @api_client.select_header_content_type(["application/json"])

      # cookie parameters
      cookie_params : Hash(String, String) = Hash(String, String).new

      # query parameters
      query_params : Hash(String, (String | Array(String) | JSON::Any)) = Hash(String, (String | Array(String) | JSON::Any)).new

      # form parameters
      form_params : Array(Tuple(String, Crest::ParamsValue)) | Nil = nil

      # http body (model)
      post_body : IO | String | Nil = @api_client.encode(body: link_token_get_request, content_type: header_params["Content-Type"]?) if !link_token_get_request.nil?

      # auth_names
      auth_names = ["clientId", "plaidVersion", "secret"]

      @api_client.build_api_request(
        http_method: :"POST",
        path: local_var_path,
        operation: "PlaidApi.link_token_get",
        post_body: post_body,
        auth_names: auth_names,
        header_params: header_params,
        cookie_params: cookie_params,
        query_params: query_params,
        form_params: form_params
      )
    end

    # Creates a new end customer for a Plaid reseller.
    # The `/partner/customer/create` endpoint is used by reseller partners to create end customers.
    # @required @param partner_customer_create_request [Plaid::PartnerCustomerCreateRequest?]
    # @return [PartnerCustomerCreateResponse]
    def partner_customer_create(
      *,
      partner_customer_create_request : Plaid::PartnerCustomerCreateRequest? = nil
    ) : PartnerCustomerCreateResponse
      data, _status_code, _headers = partner_customer_create_with_http_info(partner_customer_create_request: partner_customer_create_request)
      data
    end

    # Creates a new end customer for a Plaid reseller.
    # The &#x60;/partner/customer/create&#x60; endpoint is used by reseller partners to create end customers.
    # @required @param partner_customer_create_request [Plaid::PartnerCustomerCreateRequest?]
    # @return [Tuple(PartnerCustomerCreateResponse, Integer, Hash)] PartnerCustomerCreateResponse, response status code and response headers
    def partner_customer_create_with_http_info(
      *,
      partner_customer_create_request : Plaid::PartnerCustomerCreateRequest? = nil
    ) : Tuple(PartnerCustomerCreateResponse, Int32, Hash(String, Array(String) | String))
      request = build_api_request_for_partner_customer_create(partner_customer_create_request: partner_customer_create_request)

      body, status_code, headers = @api_client.execute_api_request(request)

      if debugging?
        Log.debug { "API called: PlaidApi#partner_customer_create\nBody: #{body.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}" }
      end

      Tuple.new(PartnerCustomerCreateResponse.from_json(body), status_code, headers)
    end

    # Creates a new end customer for a Plaid reseller.
    # The &#x60;/partner/customer/create&#x60; endpoint is used by reseller partners to create end customers.
    # @required @param partner_customer_create_request [Plaid::PartnerCustomerCreateRequest?]
    # @return nil
    def partner_customer_create(
      *,
      partner_customer_create_request : Plaid::PartnerCustomerCreateRequest? = nil,
      &block : Crest::Response ->
    ) : Nil
      build_api_request_for_partner_customer_create(partner_customer_create_request: partner_customer_create_request).execute(&block)
    end

    # @return Crest::Request
    def build_api_request_for_partner_customer_create(
      *,
      partner_customer_create_request : Plaid::PartnerCustomerCreateRequest? = nil
    ) : Crest::Request
      if debugging?
        Log.debug { "Calling API: PlaidApi.partner_customer_create ..." }
      end

      if client_side_validation?
        raise ArgumentError.new("\"partner_customer_create_request\" is required and cannot be null") if partner_customer_create_request.nil?
        unless (_partner_customer_create_request = partner_customer_create_request).nil?
          _partner_customer_create_request.validate if _partner_customer_create_request.is_a?(OpenApi::Validatable)
        end
      end

      # resource path
      local_var_path = "/partner/customer/create"

      # header parameters
      header_params : Hash(String, String) = Hash(String, String).new
      # HTTP header "Accept" (if needed)
      header_params["Accept"] = @api_client.select_header_accept(["application/json"])
      # HTTP header "Content-Type"
      header_params["Content-Type"] = @api_client.select_header_content_type(["application/json"])

      # cookie parameters
      cookie_params : Hash(String, String) = Hash(String, String).new

      # query parameters
      query_params : Hash(String, (String | Array(String) | JSON::Any)) = Hash(String, (String | Array(String) | JSON::Any)).new

      # form parameters
      form_params : Array(Tuple(String, Crest::ParamsValue)) | Nil = nil

      # http body (model)
      post_body : IO | String | Nil = @api_client.encode(body: partner_customer_create_request, content_type: header_params["Content-Type"]?) if !partner_customer_create_request.nil?

      # auth_names
      auth_names = ["clientId", "plaidVersion", "secret"]

      @api_client.build_api_request(
        http_method: :"POST",
        path: local_var_path,
        operation: "PlaidApi.partner_customer_create",
        post_body: post_body,
        auth_names: auth_names,
        header_params: header_params,
        cookie_params: cookie_params,
        query_params: query_params,
        form_params: form_params
      )
    end

    # Enables a Plaid reseller's end customer in the Production environment.
    # The `/partner/customer/enable` endpoint is used by reseller partners to enable an end customer in the Production environment.
    # @required @param partner_customer_enable_request [Plaid::PartnerCustomerEnableRequest?]
    # @return [PartnerCustomerEnableResponse]
    def partner_customer_enable(
      *,
      partner_customer_enable_request : Plaid::PartnerCustomerEnableRequest? = nil
    ) : PartnerCustomerEnableResponse
      data, _status_code, _headers = partner_customer_enable_with_http_info(partner_customer_enable_request: partner_customer_enable_request)
      data
    end

    # Enables a Plaid reseller&#39;s end customer in the Production environment.
    # The &#x60;/partner/customer/enable&#x60; endpoint is used by reseller partners to enable an end customer in the Production environment.
    # @required @param partner_customer_enable_request [Plaid::PartnerCustomerEnableRequest?]
    # @return [Tuple(PartnerCustomerEnableResponse, Integer, Hash)] PartnerCustomerEnableResponse, response status code and response headers
    def partner_customer_enable_with_http_info(
      *,
      partner_customer_enable_request : Plaid::PartnerCustomerEnableRequest? = nil
    ) : Tuple(PartnerCustomerEnableResponse, Int32, Hash(String, Array(String) | String))
      request = build_api_request_for_partner_customer_enable(partner_customer_enable_request: partner_customer_enable_request)

      body, status_code, headers = @api_client.execute_api_request(request)

      if debugging?
        Log.debug { "API called: PlaidApi#partner_customer_enable\nBody: #{body.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}" }
      end

      Tuple.new(PartnerCustomerEnableResponse.from_json(body), status_code, headers)
    end

    # Enables a Plaid reseller&#39;s end customer in the Production environment.
    # The &#x60;/partner/customer/enable&#x60; endpoint is used by reseller partners to enable an end customer in the Production environment.
    # @required @param partner_customer_enable_request [Plaid::PartnerCustomerEnableRequest?]
    # @return nil
    def partner_customer_enable(
      *,
      partner_customer_enable_request : Plaid::PartnerCustomerEnableRequest? = nil,
      &block : Crest::Response ->
    ) : Nil
      build_api_request_for_partner_customer_enable(partner_customer_enable_request: partner_customer_enable_request).execute(&block)
    end

    # @return Crest::Request
    def build_api_request_for_partner_customer_enable(
      *,
      partner_customer_enable_request : Plaid::PartnerCustomerEnableRequest? = nil
    ) : Crest::Request
      if debugging?
        Log.debug { "Calling API: PlaidApi.partner_customer_enable ..." }
      end

      if client_side_validation?
        raise ArgumentError.new("\"partner_customer_enable_request\" is required and cannot be null") if partner_customer_enable_request.nil?
        unless (_partner_customer_enable_request = partner_customer_enable_request).nil?
          _partner_customer_enable_request.validate if _partner_customer_enable_request.is_a?(OpenApi::Validatable)
        end
      end

      # resource path
      local_var_path = "/partner/customer/enable"

      # header parameters
      header_params : Hash(String, String) = Hash(String, String).new
      # HTTP header "Accept" (if needed)
      header_params["Accept"] = @api_client.select_header_accept(["application/json"])
      # HTTP header "Content-Type"
      header_params["Content-Type"] = @api_client.select_header_content_type(["application/json"])

      # cookie parameters
      cookie_params : Hash(String, String) = Hash(String, String).new

      # query parameters
      query_params : Hash(String, (String | Array(String) | JSON::Any)) = Hash(String, (String | Array(String) | JSON::Any)).new

      # form parameters
      form_params : Array(Tuple(String, Crest::ParamsValue)) | Nil = nil

      # http body (model)
      post_body : IO | String | Nil = @api_client.encode(body: partner_customer_enable_request, content_type: header_params["Content-Type"]?) if !partner_customer_enable_request.nil?

      # auth_names
      auth_names = ["clientId", "plaidVersion", "secret"]

      @api_client.build_api_request(
        http_method: :"POST",
        path: local_var_path,
        operation: "PlaidApi.partner_customer_enable",
        post_body: post_body,
        auth_names: auth_names,
        header_params: header_params,
        cookie_params: cookie_params,
        query_params: query_params,
        form_params: form_params
      )
    end

    # Returns a Plaid reseller's end customer.
    # The `/partner/customer/get` endpoint is used by reseller partners to retrieve data about a single end customer.
    # @required @param partner_customer_get_request [Plaid::PartnerCustomerGetRequest?]
    # @return [PartnerCustomerGetResponse]
    def partner_customer_get(
      *,
      partner_customer_get_request : Plaid::PartnerCustomerGetRequest? = nil
    ) : PartnerCustomerGetResponse
      data, _status_code, _headers = partner_customer_get_with_http_info(partner_customer_get_request: partner_customer_get_request)
      data
    end

    # Returns a Plaid reseller&#39;s end customer.
    # The &#x60;/partner/customer/get&#x60; endpoint is used by reseller partners to retrieve data about a single end customer.
    # @required @param partner_customer_get_request [Plaid::PartnerCustomerGetRequest?]
    # @return [Tuple(PartnerCustomerGetResponse, Integer, Hash)] PartnerCustomerGetResponse, response status code and response headers
    def partner_customer_get_with_http_info(
      *,
      partner_customer_get_request : Plaid::PartnerCustomerGetRequest? = nil
    ) : Tuple(PartnerCustomerGetResponse, Int32, Hash(String, Array(String) | String))
      request = build_api_request_for_partner_customer_get(partner_customer_get_request: partner_customer_get_request)

      body, status_code, headers = @api_client.execute_api_request(request)

      if debugging?
        Log.debug { "API called: PlaidApi#partner_customer_get\nBody: #{body.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}" }
      end

      Tuple.new(PartnerCustomerGetResponse.from_json(body), status_code, headers)
    end

    # Returns a Plaid reseller&#39;s end customer.
    # The &#x60;/partner/customer/get&#x60; endpoint is used by reseller partners to retrieve data about a single end customer.
    # @required @param partner_customer_get_request [Plaid::PartnerCustomerGetRequest?]
    # @return nil
    def partner_customer_get(
      *,
      partner_customer_get_request : Plaid::PartnerCustomerGetRequest? = nil,
      &block : Crest::Response ->
    ) : Nil
      build_api_request_for_partner_customer_get(partner_customer_get_request: partner_customer_get_request).execute(&block)
    end

    # @return Crest::Request
    def build_api_request_for_partner_customer_get(
      *,
      partner_customer_get_request : Plaid::PartnerCustomerGetRequest? = nil
    ) : Crest::Request
      if debugging?
        Log.debug { "Calling API: PlaidApi.partner_customer_get ..." }
      end

      if client_side_validation?
        raise ArgumentError.new("\"partner_customer_get_request\" is required and cannot be null") if partner_customer_get_request.nil?
        unless (_partner_customer_get_request = partner_customer_get_request).nil?
          _partner_customer_get_request.validate if _partner_customer_get_request.is_a?(OpenApi::Validatable)
        end
      end

      # resource path
      local_var_path = "/partner/customer/get"

      # header parameters
      header_params : Hash(String, String) = Hash(String, String).new
      # HTTP header "Accept" (if needed)
      header_params["Accept"] = @api_client.select_header_accept(["application/json"])
      # HTTP header "Content-Type"
      header_params["Content-Type"] = @api_client.select_header_content_type(["application/json"])

      # cookie parameters
      cookie_params : Hash(String, String) = Hash(String, String).new

      # query parameters
      query_params : Hash(String, (String | Array(String) | JSON::Any)) = Hash(String, (String | Array(String) | JSON::Any)).new

      # form parameters
      form_params : Array(Tuple(String, Crest::ParamsValue)) | Nil = nil

      # http body (model)
      post_body : IO | String | Nil = @api_client.encode(body: partner_customer_get_request, content_type: header_params["Content-Type"]?) if !partner_customer_get_request.nil?

      # auth_names
      auth_names = ["clientId", "plaidVersion", "secret"]

      @api_client.build_api_request(
        http_method: :"POST",
        path: local_var_path,
        operation: "PlaidApi.partner_customer_get",
        post_body: post_body,
        auth_names: auth_names,
        header_params: header_params,
        cookie_params: cookie_params,
        query_params: query_params,
        form_params: form_params
      )
    end

    # Returns OAuth-institution registration information for a given end customer.
    # The `/partner/customer/oauth_institutions/get` endpoint is used by reseller partners to retrieve OAuth-institution registration information about a single end customer. To learn how to set up a webhook to listen to status update events, visit the [reseller documentation](https://plaid.com/docs/account/resellers/#enabling-end-customers).
    # @required @param partner_customer_o_auth_institutions_get_request [Plaid::PartnerCustomerOAuthInstitutionsGetRequest?]
    # @return [PartnerCustomerOAuthInstitutionsGetResponse]
    def partner_customer_oauth_institutions_get(
      *,
      partner_customer_o_auth_institutions_get_request : Plaid::PartnerCustomerOAuthInstitutionsGetRequest? = nil
    ) : PartnerCustomerOAuthInstitutionsGetResponse
      data, _status_code, _headers = partner_customer_oauth_institutions_get_with_http_info(partner_customer_o_auth_institutions_get_request: partner_customer_o_auth_institutions_get_request)
      data
    end

    # Returns OAuth-institution registration information for a given end customer.
    # The &#x60;/partner/customer/oauth_institutions/get&#x60; endpoint is used by reseller partners to retrieve OAuth-institution registration information about a single end customer. To learn how to set up a webhook to listen to status update events, visit the [reseller documentation](https://plaid.com/docs/account/resellers/#enabling-end-customers).
    # @required @param partner_customer_o_auth_institutions_get_request [Plaid::PartnerCustomerOAuthInstitutionsGetRequest?]
    # @return [Tuple(PartnerCustomerOAuthInstitutionsGetResponse, Integer, Hash)] PartnerCustomerOAuthInstitutionsGetResponse, response status code and response headers
    def partner_customer_oauth_institutions_get_with_http_info(
      *,
      partner_customer_o_auth_institutions_get_request : Plaid::PartnerCustomerOAuthInstitutionsGetRequest? = nil
    ) : Tuple(PartnerCustomerOAuthInstitutionsGetResponse, Int32, Hash(String, Array(String) | String))
      request = build_api_request_for_partner_customer_oauth_institutions_get(partner_customer_o_auth_institutions_get_request: partner_customer_o_auth_institutions_get_request)

      body, status_code, headers = @api_client.execute_api_request(request)

      if debugging?
        Log.debug { "API called: PlaidApi#partner_customer_oauth_institutions_get\nBody: #{body.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}" }
      end

      Tuple.new(PartnerCustomerOAuthInstitutionsGetResponse.from_json(body), status_code, headers)
    end

    # Returns OAuth-institution registration information for a given end customer.
    # The &#x60;/partner/customer/oauth_institutions/get&#x60; endpoint is used by reseller partners to retrieve OAuth-institution registration information about a single end customer. To learn how to set up a webhook to listen to status update events, visit the [reseller documentation](https://plaid.com/docs/account/resellers/#enabling-end-customers).
    # @required @param partner_customer_o_auth_institutions_get_request [Plaid::PartnerCustomerOAuthInstitutionsGetRequest?]
    # @return nil
    def partner_customer_oauth_institutions_get(
      *,
      partner_customer_o_auth_institutions_get_request : Plaid::PartnerCustomerOAuthInstitutionsGetRequest? = nil,
      &block : Crest::Response ->
    ) : Nil
      build_api_request_for_partner_customer_oauth_institutions_get(partner_customer_o_auth_institutions_get_request: partner_customer_o_auth_institutions_get_request).execute(&block)
    end

    # @return Crest::Request
    def build_api_request_for_partner_customer_oauth_institutions_get(
      *,
      partner_customer_o_auth_institutions_get_request : Plaid::PartnerCustomerOAuthInstitutionsGetRequest? = nil
    ) : Crest::Request
      if debugging?
        Log.debug { "Calling API: PlaidApi.partner_customer_oauth_institutions_get ..." }
      end

      if client_side_validation?
        raise ArgumentError.new("\"partner_customer_o_auth_institutions_get_request\" is required and cannot be null") if partner_customer_o_auth_institutions_get_request.nil?
        unless (_partner_customer_o_auth_institutions_get_request = partner_customer_o_auth_institutions_get_request).nil?
          _partner_customer_o_auth_institutions_get_request.validate if _partner_customer_o_auth_institutions_get_request.is_a?(OpenApi::Validatable)
        end
      end

      # resource path
      local_var_path = "/partner/customer/oauth_institutions/get"

      # header parameters
      header_params : Hash(String, String) = Hash(String, String).new
      # HTTP header "Accept" (if needed)
      header_params["Accept"] = @api_client.select_header_accept(["application/json"])
      # HTTP header "Content-Type"
      header_params["Content-Type"] = @api_client.select_header_content_type(["application/json"])

      # cookie parameters
      cookie_params : Hash(String, String) = Hash(String, String).new

      # query parameters
      query_params : Hash(String, (String | Array(String) | JSON::Any)) = Hash(String, (String | Array(String) | JSON::Any)).new

      # form parameters
      form_params : Array(Tuple(String, Crest::ParamsValue)) | Nil = nil

      # http body (model)
      post_body : IO | String | Nil = @api_client.encode(body: partner_customer_o_auth_institutions_get_request, content_type: header_params["Content-Type"]?) if !partner_customer_o_auth_institutions_get_request.nil?

      # auth_names
      auth_names = ["clientId", "plaidVersion", "secret"]

      @api_client.build_api_request(
        http_method: :"POST",
        path: local_var_path,
        operation: "PlaidApi.partner_customer_oauth_institutions_get",
        post_body: post_body,
        auth_names: auth_names,
        header_params: header_params,
        cookie_params: cookie_params,
        query_params: query_params,
        form_params: form_params
      )
    end

    # Removes a Plaid reseller's end customer.
    # The `/partner/customer/remove` endpoint is used by reseller partners to remove an end customer. Removing an end customer will remove it from view in the Plaid Dashboard and deactivate its API keys. This endpoint can only be used to remove an end customer that has not yet been enabled in Production.
    # @required @param partner_customer_remove_request [Plaid::PartnerCustomerRemoveRequest?]
    # @return [PartnerCustomerRemoveResponse]
    def partner_customer_remove(
      *,
      partner_customer_remove_request : Plaid::PartnerCustomerRemoveRequest? = nil
    ) : PartnerCustomerRemoveResponse
      data, _status_code, _headers = partner_customer_remove_with_http_info(partner_customer_remove_request: partner_customer_remove_request)
      data
    end

    # Removes a Plaid reseller&#39;s end customer.
    # The &#x60;/partner/customer/remove&#x60; endpoint is used by reseller partners to remove an end customer. Removing an end customer will remove it from view in the Plaid Dashboard and deactivate its API keys. This endpoint can only be used to remove an end customer that has not yet been enabled in Production.
    # @required @param partner_customer_remove_request [Plaid::PartnerCustomerRemoveRequest?]
    # @return [Tuple(PartnerCustomerRemoveResponse, Integer, Hash)] PartnerCustomerRemoveResponse, response status code and response headers
    def partner_customer_remove_with_http_info(
      *,
      partner_customer_remove_request : Plaid::PartnerCustomerRemoveRequest? = nil
    ) : Tuple(PartnerCustomerRemoveResponse, Int32, Hash(String, Array(String) | String))
      request = build_api_request_for_partner_customer_remove(partner_customer_remove_request: partner_customer_remove_request)

      body, status_code, headers = @api_client.execute_api_request(request)

      if debugging?
        Log.debug { "API called: PlaidApi#partner_customer_remove\nBody: #{body.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}" }
      end

      Tuple.new(PartnerCustomerRemoveResponse.from_json(body), status_code, headers)
    end

    # Removes a Plaid reseller&#39;s end customer.
    # The &#x60;/partner/customer/remove&#x60; endpoint is used by reseller partners to remove an end customer. Removing an end customer will remove it from view in the Plaid Dashboard and deactivate its API keys. This endpoint can only be used to remove an end customer that has not yet been enabled in Production.
    # @required @param partner_customer_remove_request [Plaid::PartnerCustomerRemoveRequest?]
    # @return nil
    def partner_customer_remove(
      *,
      partner_customer_remove_request : Plaid::PartnerCustomerRemoveRequest? = nil,
      &block : Crest::Response ->
    ) : Nil
      build_api_request_for_partner_customer_remove(partner_customer_remove_request: partner_customer_remove_request).execute(&block)
    end

    # @return Crest::Request
    def build_api_request_for_partner_customer_remove(
      *,
      partner_customer_remove_request : Plaid::PartnerCustomerRemoveRequest? = nil
    ) : Crest::Request
      if debugging?
        Log.debug { "Calling API: PlaidApi.partner_customer_remove ..." }
      end

      if client_side_validation?
        raise ArgumentError.new("\"partner_customer_remove_request\" is required and cannot be null") if partner_customer_remove_request.nil?
        unless (_partner_customer_remove_request = partner_customer_remove_request).nil?
          _partner_customer_remove_request.validate if _partner_customer_remove_request.is_a?(OpenApi::Validatable)
        end
      end

      # resource path
      local_var_path = "/partner/customer/remove"

      # header parameters
      header_params : Hash(String, String) = Hash(String, String).new
      # HTTP header "Accept" (if needed)
      header_params["Accept"] = @api_client.select_header_accept(["application/json"])
      # HTTP header "Content-Type"
      header_params["Content-Type"] = @api_client.select_header_content_type(["application/json"])

      # cookie parameters
      cookie_params : Hash(String, String) = Hash(String, String).new

      # query parameters
      query_params : Hash(String, (String | Array(String) | JSON::Any)) = Hash(String, (String | Array(String) | JSON::Any)).new

      # form parameters
      form_params : Array(Tuple(String, Crest::ParamsValue)) | Nil = nil

      # http body (model)
      post_body : IO | String | Nil = @api_client.encode(body: partner_customer_remove_request, content_type: header_params["Content-Type"]?) if !partner_customer_remove_request.nil?

      # auth_names
      auth_names = ["clientId", "plaidVersion", "secret"]

      @api_client.build_api_request(
        http_method: :"POST",
        path: local_var_path,
        operation: "PlaidApi.partner_customer_remove",
        post_body: post_body,
        auth_names: auth_names,
        header_params: header_params,
        cookie_params: cookie_params,
        query_params: query_params,
        form_params: form_params
      )
    end

    # Create payment consent
    # The `/payment_initiation/consent/create` endpoint is used to create a payment consent, which can be used to initiate payments on behalf of the user. Payment consents are created with `UNAUTHORISED` status by default and must be authorised by the user before payments can be initiated.  Consents can be limited in time and scope, and have constraints that describe limitations for payments.
    # @required @param payment_initiation_consent_create_request [Plaid::PaymentInitiationConsentCreateRequest?]
    # @return [PaymentInitiationConsentCreateResponse]
    def payment_initiation_consent_create(
      *,
      payment_initiation_consent_create_request : Plaid::PaymentInitiationConsentCreateRequest? = nil
    ) : PaymentInitiationConsentCreateResponse
      data, _status_code, _headers = payment_initiation_consent_create_with_http_info(payment_initiation_consent_create_request: payment_initiation_consent_create_request)
      data
    end

    # Create payment consent
    # The &#x60;/payment_initiation/consent/create&#x60; endpoint is used to create a payment consent, which can be used to initiate payments on behalf of the user. Payment consents are created with &#x60;UNAUTHORISED&#x60; status by default and must be authorised by the user before payments can be initiated.  Consents can be limited in time and scope, and have constraints that describe limitations for payments.
    # @required @param payment_initiation_consent_create_request [Plaid::PaymentInitiationConsentCreateRequest?]
    # @return [Tuple(PaymentInitiationConsentCreateResponse, Integer, Hash)] PaymentInitiationConsentCreateResponse, response status code and response headers
    def payment_initiation_consent_create_with_http_info(
      *,
      payment_initiation_consent_create_request : Plaid::PaymentInitiationConsentCreateRequest? = nil
    ) : Tuple(PaymentInitiationConsentCreateResponse, Int32, Hash(String, Array(String) | String))
      request = build_api_request_for_payment_initiation_consent_create(payment_initiation_consent_create_request: payment_initiation_consent_create_request)

      body, status_code, headers = @api_client.execute_api_request(request)

      if debugging?
        Log.debug { "API called: PlaidApi#payment_initiation_consent_create\nBody: #{body.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}" }
      end

      Tuple.new(PaymentInitiationConsentCreateResponse.from_json(body), status_code, headers)
    end

    # Create payment consent
    # The &#x60;/payment_initiation/consent/create&#x60; endpoint is used to create a payment consent, which can be used to initiate payments on behalf of the user. Payment consents are created with &#x60;UNAUTHORISED&#x60; status by default and must be authorised by the user before payments can be initiated.  Consents can be limited in time and scope, and have constraints that describe limitations for payments.
    # @required @param payment_initiation_consent_create_request [Plaid::PaymentInitiationConsentCreateRequest?]
    # @return nil
    def payment_initiation_consent_create(
      *,
      payment_initiation_consent_create_request : Plaid::PaymentInitiationConsentCreateRequest? = nil,
      &block : Crest::Response ->
    ) : Nil
      build_api_request_for_payment_initiation_consent_create(payment_initiation_consent_create_request: payment_initiation_consent_create_request).execute(&block)
    end

    # @return Crest::Request
    def build_api_request_for_payment_initiation_consent_create(
      *,
      payment_initiation_consent_create_request : Plaid::PaymentInitiationConsentCreateRequest? = nil
    ) : Crest::Request
      if debugging?
        Log.debug { "Calling API: PlaidApi.payment_initiation_consent_create ..." }
      end

      if client_side_validation?
        raise ArgumentError.new("\"payment_initiation_consent_create_request\" is required and cannot be null") if payment_initiation_consent_create_request.nil?
        unless (_payment_initiation_consent_create_request = payment_initiation_consent_create_request).nil?
          _payment_initiation_consent_create_request.validate if _payment_initiation_consent_create_request.is_a?(OpenApi::Validatable)
        end
      end

      # resource path
      local_var_path = "/payment_initiation/consent/create"

      # header parameters
      header_params : Hash(String, String) = Hash(String, String).new
      # HTTP header "Accept" (if needed)
      header_params["Accept"] = @api_client.select_header_accept(["application/json"])
      # HTTP header "Content-Type"
      header_params["Content-Type"] = @api_client.select_header_content_type(["application/json"])

      # cookie parameters
      cookie_params : Hash(String, String) = Hash(String, String).new

      # query parameters
      query_params : Hash(String, (String | Array(String) | JSON::Any)) = Hash(String, (String | Array(String) | JSON::Any)).new

      # form parameters
      form_params : Array(Tuple(String, Crest::ParamsValue)) | Nil = nil

      # http body (model)
      post_body : IO | String | Nil = @api_client.encode(body: payment_initiation_consent_create_request, content_type: header_params["Content-Type"]?) if !payment_initiation_consent_create_request.nil?

      # auth_names
      auth_names = ["clientId", "plaidVersion", "secret"]

      @api_client.build_api_request(
        http_method: :"POST",
        path: local_var_path,
        operation: "PlaidApi.payment_initiation_consent_create",
        post_body: post_body,
        auth_names: auth_names,
        header_params: header_params,
        cookie_params: cookie_params,
        query_params: query_params,
        form_params: form_params
      )
    end

    # Get payment consent
    # The `/payment_initiation/consent/get` endpoint can be used to check the status of a payment consent, as well as to receive basic information such as recipient and constraints.
    # @required @param payment_initiation_consent_get_request [Plaid::PaymentInitiationConsentGetRequest?]
    # @return [Plaid::PaymentInitiationConsentGetResponse]
    def payment_initiation_consent_get(
      *,
      payment_initiation_consent_get_request : Plaid::PaymentInitiationConsentGetRequest? = nil
    ) : Plaid::PaymentInitiationConsentGetResponse
      data, _status_code, _headers = payment_initiation_consent_get_with_http_info(payment_initiation_consent_get_request: payment_initiation_consent_get_request)
      data
    end

    # Get payment consent
    # The &#x60;/payment_initiation/consent/get&#x60; endpoint can be used to check the status of a payment consent, as well as to receive basic information such as recipient and constraints.
    # @required @param payment_initiation_consent_get_request [Plaid::PaymentInitiationConsentGetRequest?]
    # @return [Tuple(Plaid::PaymentInitiationConsentGetResponse, Integer, Hash)] Plaid::PaymentInitiationConsentGetResponse, response status code and response headers
    def payment_initiation_consent_get_with_http_info(
      *,
      payment_initiation_consent_get_request : Plaid::PaymentInitiationConsentGetRequest? = nil
    ) : Tuple(Plaid::PaymentInitiationConsentGetResponse, Int32, Hash(String, Array(String) | String))
      request = build_api_request_for_payment_initiation_consent_get(payment_initiation_consent_get_request: payment_initiation_consent_get_request)

      body, status_code, headers = @api_client.execute_api_request(request)

      if debugging?
        Log.debug { "API called: PlaidApi#payment_initiation_consent_get\nBody: #{body.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}" }
      end

      Tuple.new(Plaid::PaymentInitiationConsentGetResponse.from_json(body), status_code, headers)
    end

    # Get payment consent
    # The &#x60;/payment_initiation/consent/get&#x60; endpoint can be used to check the status of a payment consent, as well as to receive basic information such as recipient and constraints.
    # @required @param payment_initiation_consent_get_request [Plaid::PaymentInitiationConsentGetRequest?]
    # @return nil
    def payment_initiation_consent_get(
      *,
      payment_initiation_consent_get_request : Plaid::PaymentInitiationConsentGetRequest? = nil,
      &block : Crest::Response ->
    ) : Nil
      build_api_request_for_payment_initiation_consent_get(payment_initiation_consent_get_request: payment_initiation_consent_get_request).execute(&block)
    end

    # @return Crest::Request
    def build_api_request_for_payment_initiation_consent_get(
      *,
      payment_initiation_consent_get_request : Plaid::PaymentInitiationConsentGetRequest? = nil
    ) : Crest::Request
      if debugging?
        Log.debug { "Calling API: PlaidApi.payment_initiation_consent_get ..." }
      end

      if client_side_validation?
        raise ArgumentError.new("\"payment_initiation_consent_get_request\" is required and cannot be null") if payment_initiation_consent_get_request.nil?
        unless (_payment_initiation_consent_get_request = payment_initiation_consent_get_request).nil?
          _payment_initiation_consent_get_request.validate if _payment_initiation_consent_get_request.is_a?(OpenApi::Validatable)
        end
      end

      # resource path
      local_var_path = "/payment_initiation/consent/get"

      # header parameters
      header_params : Hash(String, String) = Hash(String, String).new
      # HTTP header "Accept" (if needed)
      header_params["Accept"] = @api_client.select_header_accept(["application/json"])
      # HTTP header "Content-Type"
      header_params["Content-Type"] = @api_client.select_header_content_type(["application/json"])

      # cookie parameters
      cookie_params : Hash(String, String) = Hash(String, String).new

      # query parameters
      query_params : Hash(String, (String | Array(String) | JSON::Any)) = Hash(String, (String | Array(String) | JSON::Any)).new

      # form parameters
      form_params : Array(Tuple(String, Crest::ParamsValue)) | Nil = nil

      # http body (model)
      post_body : IO | String | Nil = @api_client.encode(body: payment_initiation_consent_get_request, content_type: header_params["Content-Type"]?) if !payment_initiation_consent_get_request.nil?

      # auth_names
      auth_names = ["clientId", "plaidVersion", "secret"]

      @api_client.build_api_request(
        http_method: :"POST",
        path: local_var_path,
        operation: "PlaidApi.payment_initiation_consent_get",
        post_body: post_body,
        auth_names: auth_names,
        header_params: header_params,
        cookie_params: cookie_params,
        query_params: query_params,
        form_params: form_params
      )
    end

    # Execute a single payment using consent
    # The `/payment_initiation/consent/payment/execute` endpoint can be used to execute payments using payment consent.
    # @required @param payment_initiation_consent_payment_execute_request [Plaid::PaymentInitiationConsentPaymentExecuteRequest?]
    # @return [PaymentInitiationConsentPaymentExecuteResponse]
    def payment_initiation_consent_payment_execute(
      *,
      payment_initiation_consent_payment_execute_request : Plaid::PaymentInitiationConsentPaymentExecuteRequest? = nil
    ) : PaymentInitiationConsentPaymentExecuteResponse
      data, _status_code, _headers = payment_initiation_consent_payment_execute_with_http_info(payment_initiation_consent_payment_execute_request: payment_initiation_consent_payment_execute_request)
      data
    end

    # Execute a single payment using consent
    # The &#x60;/payment_initiation/consent/payment/execute&#x60; endpoint can be used to execute payments using payment consent.
    # @required @param payment_initiation_consent_payment_execute_request [Plaid::PaymentInitiationConsentPaymentExecuteRequest?]
    # @return [Tuple(PaymentInitiationConsentPaymentExecuteResponse, Integer, Hash)] PaymentInitiationConsentPaymentExecuteResponse, response status code and response headers
    def payment_initiation_consent_payment_execute_with_http_info(
      *,
      payment_initiation_consent_payment_execute_request : Plaid::PaymentInitiationConsentPaymentExecuteRequest? = nil
    ) : Tuple(PaymentInitiationConsentPaymentExecuteResponse, Int32, Hash(String, Array(String) | String))
      request = build_api_request_for_payment_initiation_consent_payment_execute(payment_initiation_consent_payment_execute_request: payment_initiation_consent_payment_execute_request)

      body, status_code, headers = @api_client.execute_api_request(request)

      if debugging?
        Log.debug { "API called: PlaidApi#payment_initiation_consent_payment_execute\nBody: #{body.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}" }
      end

      Tuple.new(PaymentInitiationConsentPaymentExecuteResponse.from_json(body), status_code, headers)
    end

    # Execute a single payment using consent
    # The &#x60;/payment_initiation/consent/payment/execute&#x60; endpoint can be used to execute payments using payment consent.
    # @required @param payment_initiation_consent_payment_execute_request [Plaid::PaymentInitiationConsentPaymentExecuteRequest?]
    # @return nil
    def payment_initiation_consent_payment_execute(
      *,
      payment_initiation_consent_payment_execute_request : Plaid::PaymentInitiationConsentPaymentExecuteRequest? = nil,
      &block : Crest::Response ->
    ) : Nil
      build_api_request_for_payment_initiation_consent_payment_execute(payment_initiation_consent_payment_execute_request: payment_initiation_consent_payment_execute_request).execute(&block)
    end

    # @return Crest::Request
    def build_api_request_for_payment_initiation_consent_payment_execute(
      *,
      payment_initiation_consent_payment_execute_request : Plaid::PaymentInitiationConsentPaymentExecuteRequest? = nil
    ) : Crest::Request
      if debugging?
        Log.debug { "Calling API: PlaidApi.payment_initiation_consent_payment_execute ..." }
      end

      if client_side_validation?
        raise ArgumentError.new("\"payment_initiation_consent_payment_execute_request\" is required and cannot be null") if payment_initiation_consent_payment_execute_request.nil?
        unless (_payment_initiation_consent_payment_execute_request = payment_initiation_consent_payment_execute_request).nil?
          _payment_initiation_consent_payment_execute_request.validate if _payment_initiation_consent_payment_execute_request.is_a?(OpenApi::Validatable)
        end
      end

      # resource path
      local_var_path = "/payment_initiation/consent/payment/execute"

      # header parameters
      header_params : Hash(String, String) = Hash(String, String).new
      # HTTP header "Accept" (if needed)
      header_params["Accept"] = @api_client.select_header_accept(["application/json"])
      # HTTP header "Content-Type"
      header_params["Content-Type"] = @api_client.select_header_content_type(["application/json"])

      # cookie parameters
      cookie_params : Hash(String, String) = Hash(String, String).new

      # query parameters
      query_params : Hash(String, (String | Array(String) | JSON::Any)) = Hash(String, (String | Array(String) | JSON::Any)).new

      # form parameters
      form_params : Array(Tuple(String, Crest::ParamsValue)) | Nil = nil

      # http body (model)
      post_body : IO | String | Nil = @api_client.encode(body: payment_initiation_consent_payment_execute_request, content_type: header_params["Content-Type"]?) if !payment_initiation_consent_payment_execute_request.nil?

      # auth_names
      auth_names = ["clientId", "plaidVersion", "secret"]

      @api_client.build_api_request(
        http_method: :"POST",
        path: local_var_path,
        operation: "PlaidApi.payment_initiation_consent_payment_execute",
        post_body: post_body,
        auth_names: auth_names,
        header_params: header_params,
        cookie_params: cookie_params,
        query_params: query_params,
        form_params: form_params
      )
    end

    # Revoke payment consent
    # The `/payment_initiation/consent/revoke` endpoint can be used to revoke the payment consent. Once the consent is revoked, it is not possible to initiate payments using it.
    # @required @param payment_initiation_consent_revoke_request [Plaid::PaymentInitiationConsentRevokeRequest?]
    # @return [PaymentInitiationConsentRevokeResponse]
    def payment_initiation_consent_revoke(
      *,
      payment_initiation_consent_revoke_request : Plaid::PaymentInitiationConsentRevokeRequest? = nil
    ) : PaymentInitiationConsentRevokeResponse
      data, _status_code, _headers = payment_initiation_consent_revoke_with_http_info(payment_initiation_consent_revoke_request: payment_initiation_consent_revoke_request)
      data
    end

    # Revoke payment consent
    # The &#x60;/payment_initiation/consent/revoke&#x60; endpoint can be used to revoke the payment consent. Once the consent is revoked, it is not possible to initiate payments using it.
    # @required @param payment_initiation_consent_revoke_request [Plaid::PaymentInitiationConsentRevokeRequest?]
    # @return [Tuple(PaymentInitiationConsentRevokeResponse, Integer, Hash)] PaymentInitiationConsentRevokeResponse, response status code and response headers
    def payment_initiation_consent_revoke_with_http_info(
      *,
      payment_initiation_consent_revoke_request : Plaid::PaymentInitiationConsentRevokeRequest? = nil
    ) : Tuple(PaymentInitiationConsentRevokeResponse, Int32, Hash(String, Array(String) | String))
      request = build_api_request_for_payment_initiation_consent_revoke(payment_initiation_consent_revoke_request: payment_initiation_consent_revoke_request)

      body, status_code, headers = @api_client.execute_api_request(request)

      if debugging?
        Log.debug { "API called: PlaidApi#payment_initiation_consent_revoke\nBody: #{body.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}" }
      end

      Tuple.new(PaymentInitiationConsentRevokeResponse.from_json(body), status_code, headers)
    end

    # Revoke payment consent
    # The &#x60;/payment_initiation/consent/revoke&#x60; endpoint can be used to revoke the payment consent. Once the consent is revoked, it is not possible to initiate payments using it.
    # @required @param payment_initiation_consent_revoke_request [Plaid::PaymentInitiationConsentRevokeRequest?]
    # @return nil
    def payment_initiation_consent_revoke(
      *,
      payment_initiation_consent_revoke_request : Plaid::PaymentInitiationConsentRevokeRequest? = nil,
      &block : Crest::Response ->
    ) : Nil
      build_api_request_for_payment_initiation_consent_revoke(payment_initiation_consent_revoke_request: payment_initiation_consent_revoke_request).execute(&block)
    end

    # @return Crest::Request
    def build_api_request_for_payment_initiation_consent_revoke(
      *,
      payment_initiation_consent_revoke_request : Plaid::PaymentInitiationConsentRevokeRequest? = nil
    ) : Crest::Request
      if debugging?
        Log.debug { "Calling API: PlaidApi.payment_initiation_consent_revoke ..." }
      end

      if client_side_validation?
        raise ArgumentError.new("\"payment_initiation_consent_revoke_request\" is required and cannot be null") if payment_initiation_consent_revoke_request.nil?
        unless (_payment_initiation_consent_revoke_request = payment_initiation_consent_revoke_request).nil?
          _payment_initiation_consent_revoke_request.validate if _payment_initiation_consent_revoke_request.is_a?(OpenApi::Validatable)
        end
      end

      # resource path
      local_var_path = "/payment_initiation/consent/revoke"

      # header parameters
      header_params : Hash(String, String) = Hash(String, String).new
      # HTTP header "Accept" (if needed)
      header_params["Accept"] = @api_client.select_header_accept(["application/json"])
      # HTTP header "Content-Type"
      header_params["Content-Type"] = @api_client.select_header_content_type(["application/json"])

      # cookie parameters
      cookie_params : Hash(String, String) = Hash(String, String).new

      # query parameters
      query_params : Hash(String, (String | Array(String) | JSON::Any)) = Hash(String, (String | Array(String) | JSON::Any)).new

      # form parameters
      form_params : Array(Tuple(String, Crest::ParamsValue)) | Nil = nil

      # http body (model)
      post_body : IO | String | Nil = @api_client.encode(body: payment_initiation_consent_revoke_request, content_type: header_params["Content-Type"]?) if !payment_initiation_consent_revoke_request.nil?

      # auth_names
      auth_names = ["clientId", "plaidVersion", "secret"]

      @api_client.build_api_request(
        http_method: :"POST",
        path: local_var_path,
        operation: "PlaidApi.payment_initiation_consent_revoke",
        post_body: post_body,
        auth_names: auth_names,
        header_params: header_params,
        cookie_params: cookie_params,
        query_params: query_params,
        form_params: form_params
      )
    end

    # Create a payment
    # After creating a payment recipient, you can use the `/payment_initiation/payment/create` endpoint to create a payment to that recipient.  Payments can be one-time or standing order (recurring) and can be denominated in either EUR, GBP or other chosen [currency](https://plaid.com/docs/api/products/payment-initiation/#payment_initiation-payment-create-request-amount-currency).  If making domestic GBP-denominated payments, your recipient must have been created with BACS numbers. In general, EUR-denominated payments will be sent via SEPA Credit Transfer, GBP-denominated payments will be sent via the Faster Payments network and for non-Eurozone markets typically via the local payment scheme, but the payment network used will be determined by the institution. Payments sent via Faster Payments will typically arrive immediately, while payments sent via SEPA Credit Transfer or other local payment schemes will typically arrive in one business day.  Standing orders (recurring payments) must be denominated in GBP and can only be sent to recipients in the UK. Once created, standing order payments cannot be modified or canceled via the API. An end user can cancel or modify a standing order directly on their banking application or website, or by contacting the bank. Standing orders will follow the payment rules of the underlying rails (Faster Payments in UK). Payments can be sent Monday to Friday, excluding bank holidays. If the pre-arranged date falls on a weekend or bank holiday, the payment is made on the next working day. It is not possible to guarantee the exact time the payment will reach the recipient’s account, although at least 90% of standing order payments are sent by 6am.  In the Development environment, payments must be below 5 GBP or other chosen [currency](https://plaid.com/docs/api/products/payment-initiation/#payment_initiation-payment-create-request-amount-currency). For details on any payment limits in Production, contact your Plaid Account Manager.
    # @required @param payment_initiation_payment_create_request [Plaid::PaymentInitiationPaymentCreateRequest?]
    # @return [PaymentInitiationPaymentCreateResponse]
    def payment_initiation_payment_create(
      *,
      payment_initiation_payment_create_request : Plaid::PaymentInitiationPaymentCreateRequest? = nil
    ) : PaymentInitiationPaymentCreateResponse
      data, _status_code, _headers = payment_initiation_payment_create_with_http_info(payment_initiation_payment_create_request: payment_initiation_payment_create_request)
      data
    end

    # Create a payment
    # After creating a payment recipient, you can use the &#x60;/payment_initiation/payment/create&#x60; endpoint to create a payment to that recipient.  Payments can be one-time or standing order (recurring) and can be denominated in either EUR, GBP or other chosen [currency](https://plaid.com/docs/api/products/payment-initiation/#payment_initiation-payment-create-request-amount-currency).  If making domestic GBP-denominated payments, your recipient must have been created with BACS numbers. In general, EUR-denominated payments will be sent via SEPA Credit Transfer, GBP-denominated payments will be sent via the Faster Payments network and for non-Eurozone markets typically via the local payment scheme, but the payment network used will be determined by the institution. Payments sent via Faster Payments will typically arrive immediately, while payments sent via SEPA Credit Transfer or other local payment schemes will typically arrive in one business day.  Standing orders (recurring payments) must be denominated in GBP and can only be sent to recipients in the UK. Once created, standing order payments cannot be modified or canceled via the API. An end user can cancel or modify a standing order directly on their banking application or website, or by contacting the bank. Standing orders will follow the payment rules of the underlying rails (Faster Payments in UK). Payments can be sent Monday to Friday, excluding bank holidays. If the pre-arranged date falls on a weekend or bank holiday, the payment is made on the next working day. It is not possible to guarantee the exact time the payment will reach the recipient’s account, although at least 90% of standing order payments are sent by 6am.  In the Development environment, payments must be below 5 GBP or other chosen [currency](https://plaid.com/docs/api/products/payment-initiation/#payment_initiation-payment-create-request-amount-currency). For details on any payment limits in Production, contact your Plaid Account Manager.
    # @required @param payment_initiation_payment_create_request [Plaid::PaymentInitiationPaymentCreateRequest?]
    # @return [Tuple(PaymentInitiationPaymentCreateResponse, Integer, Hash)] PaymentInitiationPaymentCreateResponse, response status code and response headers
    def payment_initiation_payment_create_with_http_info(
      *,
      payment_initiation_payment_create_request : Plaid::PaymentInitiationPaymentCreateRequest? = nil
    ) : Tuple(PaymentInitiationPaymentCreateResponse, Int32, Hash(String, Array(String) | String))
      request = build_api_request_for_payment_initiation_payment_create(payment_initiation_payment_create_request: payment_initiation_payment_create_request)

      body, status_code, headers = @api_client.execute_api_request(request)

      if debugging?
        Log.debug { "API called: PlaidApi#payment_initiation_payment_create\nBody: #{body.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}" }
      end

      Tuple.new(PaymentInitiationPaymentCreateResponse.from_json(body), status_code, headers)
    end

    # Create a payment
    # After creating a payment recipient, you can use the &#x60;/payment_initiation/payment/create&#x60; endpoint to create a payment to that recipient.  Payments can be one-time or standing order (recurring) and can be denominated in either EUR, GBP or other chosen [currency](https://plaid.com/docs/api/products/payment-initiation/#payment_initiation-payment-create-request-amount-currency).  If making domestic GBP-denominated payments, your recipient must have been created with BACS numbers. In general, EUR-denominated payments will be sent via SEPA Credit Transfer, GBP-denominated payments will be sent via the Faster Payments network and for non-Eurozone markets typically via the local payment scheme, but the payment network used will be determined by the institution. Payments sent via Faster Payments will typically arrive immediately, while payments sent via SEPA Credit Transfer or other local payment schemes will typically arrive in one business day.  Standing orders (recurring payments) must be denominated in GBP and can only be sent to recipients in the UK. Once created, standing order payments cannot be modified or canceled via the API. An end user can cancel or modify a standing order directly on their banking application or website, or by contacting the bank. Standing orders will follow the payment rules of the underlying rails (Faster Payments in UK). Payments can be sent Monday to Friday, excluding bank holidays. If the pre-arranged date falls on a weekend or bank holiday, the payment is made on the next working day. It is not possible to guarantee the exact time the payment will reach the recipient’s account, although at least 90% of standing order payments are sent by 6am.  In the Development environment, payments must be below 5 GBP or other chosen [currency](https://plaid.com/docs/api/products/payment-initiation/#payment_initiation-payment-create-request-amount-currency). For details on any payment limits in Production, contact your Plaid Account Manager.
    # @required @param payment_initiation_payment_create_request [Plaid::PaymentInitiationPaymentCreateRequest?]
    # @return nil
    def payment_initiation_payment_create(
      *,
      payment_initiation_payment_create_request : Plaid::PaymentInitiationPaymentCreateRequest? = nil,
      &block : Crest::Response ->
    ) : Nil
      build_api_request_for_payment_initiation_payment_create(payment_initiation_payment_create_request: payment_initiation_payment_create_request).execute(&block)
    end

    # @return Crest::Request
    def build_api_request_for_payment_initiation_payment_create(
      *,
      payment_initiation_payment_create_request : Plaid::PaymentInitiationPaymentCreateRequest? = nil
    ) : Crest::Request
      if debugging?
        Log.debug { "Calling API: PlaidApi.payment_initiation_payment_create ..." }
      end

      if client_side_validation?
        raise ArgumentError.new("\"payment_initiation_payment_create_request\" is required and cannot be null") if payment_initiation_payment_create_request.nil?
        unless (_payment_initiation_payment_create_request = payment_initiation_payment_create_request).nil?
          _payment_initiation_payment_create_request.validate if _payment_initiation_payment_create_request.is_a?(OpenApi::Validatable)
        end
      end

      # resource path
      local_var_path = "/payment_initiation/payment/create"

      # header parameters
      header_params : Hash(String, String) = Hash(String, String).new
      # HTTP header "Accept" (if needed)
      header_params["Accept"] = @api_client.select_header_accept(["application/json"])
      # HTTP header "Content-Type"
      header_params["Content-Type"] = @api_client.select_header_content_type(["application/json"])

      # cookie parameters
      cookie_params : Hash(String, String) = Hash(String, String).new

      # query parameters
      query_params : Hash(String, (String | Array(String) | JSON::Any)) = Hash(String, (String | Array(String) | JSON::Any)).new

      # form parameters
      form_params : Array(Tuple(String, Crest::ParamsValue)) | Nil = nil

      # http body (model)
      post_body : IO | String | Nil = @api_client.encode(body: payment_initiation_payment_create_request, content_type: header_params["Content-Type"]?) if !payment_initiation_payment_create_request.nil?

      # auth_names
      auth_names = ["clientId", "plaidVersion", "secret"]

      @api_client.build_api_request(
        http_method: :"POST",
        path: local_var_path,
        operation: "PlaidApi.payment_initiation_payment_create",
        post_body: post_body,
        auth_names: auth_names,
        header_params: header_params,
        cookie_params: cookie_params,
        query_params: query_params,
        form_params: form_params
      )
    end

    # Get payment details
    # The `/payment_initiation/payment/get` endpoint can be used to check the status of a payment, as well as to receive basic information such as recipient and payment amount. In the case of standing orders, the `/payment_initiation/payment/get` endpoint will provide information about the status of the overall standing order itself; the API cannot be used to retrieve payment status for individual payments within a standing order.
    # @required @param payment_initiation_payment_get_request [Plaid::PaymentInitiationPaymentGetRequest?]
    # @return [Plaid::PaymentInitiationPaymentGetResponse]
    def payment_initiation_payment_get(
      *,
      payment_initiation_payment_get_request : Plaid::PaymentInitiationPaymentGetRequest? = nil
    ) : Plaid::PaymentInitiationPaymentGetResponse
      data, _status_code, _headers = payment_initiation_payment_get_with_http_info(payment_initiation_payment_get_request: payment_initiation_payment_get_request)
      data
    end

    # Get payment details
    # The &#x60;/payment_initiation/payment/get&#x60; endpoint can be used to check the status of a payment, as well as to receive basic information such as recipient and payment amount. In the case of standing orders, the &#x60;/payment_initiation/payment/get&#x60; endpoint will provide information about the status of the overall standing order itself; the API cannot be used to retrieve payment status for individual payments within a standing order.
    # @required @param payment_initiation_payment_get_request [Plaid::PaymentInitiationPaymentGetRequest?]
    # @return [Tuple(Plaid::PaymentInitiationPaymentGetResponse, Integer, Hash)] Plaid::PaymentInitiationPaymentGetResponse, response status code and response headers
    def payment_initiation_payment_get_with_http_info(
      *,
      payment_initiation_payment_get_request : Plaid::PaymentInitiationPaymentGetRequest? = nil
    ) : Tuple(Plaid::PaymentInitiationPaymentGetResponse, Int32, Hash(String, Array(String) | String))
      request = build_api_request_for_payment_initiation_payment_get(payment_initiation_payment_get_request: payment_initiation_payment_get_request)

      body, status_code, headers = @api_client.execute_api_request(request)

      if debugging?
        Log.debug { "API called: PlaidApi#payment_initiation_payment_get\nBody: #{body.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}" }
      end

      Tuple.new(Plaid::PaymentInitiationPaymentGetResponse.from_json(body), status_code, headers)
    end

    # Get payment details
    # The &#x60;/payment_initiation/payment/get&#x60; endpoint can be used to check the status of a payment, as well as to receive basic information such as recipient and payment amount. In the case of standing orders, the &#x60;/payment_initiation/payment/get&#x60; endpoint will provide information about the status of the overall standing order itself; the API cannot be used to retrieve payment status for individual payments within a standing order.
    # @required @param payment_initiation_payment_get_request [Plaid::PaymentInitiationPaymentGetRequest?]
    # @return nil
    def payment_initiation_payment_get(
      *,
      payment_initiation_payment_get_request : Plaid::PaymentInitiationPaymentGetRequest? = nil,
      &block : Crest::Response ->
    ) : Nil
      build_api_request_for_payment_initiation_payment_get(payment_initiation_payment_get_request: payment_initiation_payment_get_request).execute(&block)
    end

    # @return Crest::Request
    def build_api_request_for_payment_initiation_payment_get(
      *,
      payment_initiation_payment_get_request : Plaid::PaymentInitiationPaymentGetRequest? = nil
    ) : Crest::Request
      if debugging?
        Log.debug { "Calling API: PlaidApi.payment_initiation_payment_get ..." }
      end

      if client_side_validation?
        raise ArgumentError.new("\"payment_initiation_payment_get_request\" is required and cannot be null") if payment_initiation_payment_get_request.nil?
        unless (_payment_initiation_payment_get_request = payment_initiation_payment_get_request).nil?
          _payment_initiation_payment_get_request.validate if _payment_initiation_payment_get_request.is_a?(OpenApi::Validatable)
        end
      end

      # resource path
      local_var_path = "/payment_initiation/payment/get"

      # header parameters
      header_params : Hash(String, String) = Hash(String, String).new
      # HTTP header "Accept" (if needed)
      header_params["Accept"] = @api_client.select_header_accept(["application/json"])
      # HTTP header "Content-Type"
      header_params["Content-Type"] = @api_client.select_header_content_type(["application/json"])

      # cookie parameters
      cookie_params : Hash(String, String) = Hash(String, String).new

      # query parameters
      query_params : Hash(String, (String | Array(String) | JSON::Any)) = Hash(String, (String | Array(String) | JSON::Any)).new

      # form parameters
      form_params : Array(Tuple(String, Crest::ParamsValue)) | Nil = nil

      # http body (model)
      post_body : IO | String | Nil = @api_client.encode(body: payment_initiation_payment_get_request, content_type: header_params["Content-Type"]?) if !payment_initiation_payment_get_request.nil?

      # auth_names
      auth_names = ["clientId", "plaidVersion", "secret"]

      @api_client.build_api_request(
        http_method: :"POST",
        path: local_var_path,
        operation: "PlaidApi.payment_initiation_payment_get",
        post_body: post_body,
        auth_names: auth_names,
        header_params: header_params,
        cookie_params: cookie_params,
        query_params: query_params,
        form_params: form_params
      )
    end

    # List payments
    # The `/payment_initiation/payment/list` endpoint can be used to retrieve all created payments. By default, the 10 most recent payments are returned. You can request more payments and paginate through the results using the optional `count` and `cursor` parameters.
    # @required @param payment_initiation_payment_list_request [Plaid::PaymentInitiationPaymentListRequest?]
    # @return [PaymentInitiationPaymentListResponse]
    def payment_initiation_payment_list(
      *,
      payment_initiation_payment_list_request : Plaid::PaymentInitiationPaymentListRequest? = nil
    ) : PaymentInitiationPaymentListResponse
      data, _status_code, _headers = payment_initiation_payment_list_with_http_info(payment_initiation_payment_list_request: payment_initiation_payment_list_request)
      data
    end

    # List payments
    # The &#x60;/payment_initiation/payment/list&#x60; endpoint can be used to retrieve all created payments. By default, the 10 most recent payments are returned. You can request more payments and paginate through the results using the optional &#x60;count&#x60; and &#x60;cursor&#x60; parameters.
    # @required @param payment_initiation_payment_list_request [Plaid::PaymentInitiationPaymentListRequest?]
    # @return [Tuple(PaymentInitiationPaymentListResponse, Integer, Hash)] PaymentInitiationPaymentListResponse, response status code and response headers
    def payment_initiation_payment_list_with_http_info(
      *,
      payment_initiation_payment_list_request : Plaid::PaymentInitiationPaymentListRequest? = nil
    ) : Tuple(PaymentInitiationPaymentListResponse, Int32, Hash(String, Array(String) | String))
      request = build_api_request_for_payment_initiation_payment_list(payment_initiation_payment_list_request: payment_initiation_payment_list_request)

      body, status_code, headers = @api_client.execute_api_request(request)

      if debugging?
        Log.debug { "API called: PlaidApi#payment_initiation_payment_list\nBody: #{body.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}" }
      end

      Tuple.new(PaymentInitiationPaymentListResponse.from_json(body), status_code, headers)
    end

    # List payments
    # The &#x60;/payment_initiation/payment/list&#x60; endpoint can be used to retrieve all created payments. By default, the 10 most recent payments are returned. You can request more payments and paginate through the results using the optional &#x60;count&#x60; and &#x60;cursor&#x60; parameters.
    # @required @param payment_initiation_payment_list_request [Plaid::PaymentInitiationPaymentListRequest?]
    # @return nil
    def payment_initiation_payment_list(
      *,
      payment_initiation_payment_list_request : Plaid::PaymentInitiationPaymentListRequest? = nil,
      &block : Crest::Response ->
    ) : Nil
      build_api_request_for_payment_initiation_payment_list(payment_initiation_payment_list_request: payment_initiation_payment_list_request).execute(&block)
    end

    # @return Crest::Request
    def build_api_request_for_payment_initiation_payment_list(
      *,
      payment_initiation_payment_list_request : Plaid::PaymentInitiationPaymentListRequest? = nil
    ) : Crest::Request
      if debugging?
        Log.debug { "Calling API: PlaidApi.payment_initiation_payment_list ..." }
      end

      if client_side_validation?
        raise ArgumentError.new("\"payment_initiation_payment_list_request\" is required and cannot be null") if payment_initiation_payment_list_request.nil?
        unless (_payment_initiation_payment_list_request = payment_initiation_payment_list_request).nil?
          _payment_initiation_payment_list_request.validate if _payment_initiation_payment_list_request.is_a?(OpenApi::Validatable)
        end
      end

      # resource path
      local_var_path = "/payment_initiation/payment/list"

      # header parameters
      header_params : Hash(String, String) = Hash(String, String).new
      # HTTP header "Accept" (if needed)
      header_params["Accept"] = @api_client.select_header_accept(["application/json"])
      # HTTP header "Content-Type"
      header_params["Content-Type"] = @api_client.select_header_content_type(["application/json"])

      # cookie parameters
      cookie_params : Hash(String, String) = Hash(String, String).new

      # query parameters
      query_params : Hash(String, (String | Array(String) | JSON::Any)) = Hash(String, (String | Array(String) | JSON::Any)).new

      # form parameters
      form_params : Array(Tuple(String, Crest::ParamsValue)) | Nil = nil

      # http body (model)
      post_body : IO | String | Nil = @api_client.encode(body: payment_initiation_payment_list_request, content_type: header_params["Content-Type"]?) if !payment_initiation_payment_list_request.nil?

      # auth_names
      auth_names = ["clientId", "plaidVersion", "secret"]

      @api_client.build_api_request(
        http_method: :"POST",
        path: local_var_path,
        operation: "PlaidApi.payment_initiation_payment_list",
        post_body: post_body,
        auth_names: auth_names,
        header_params: header_params,
        cookie_params: cookie_params,
        query_params: query_params,
        form_params: form_params
      )
    end

    # Reverse an existing payment
    # Reverse a settled payment from a Plaid virtual account.  The original payment must be in a settled state to be refunded. To refund partially, specify the amount as part of the request. If the amount is not specified, the refund amount will be equal to all of the remaining payment amount that has not been refunded yet.  The refund will go back to the source account that initiated the payment. The original payment must have been initiated to a Plaid virtual account so that this account can be used to initiate the refund.
    # @required @param payment_initiation_payment_reverse_request [Plaid::PaymentInitiationPaymentReverseRequest?]
    # @return [PaymentInitiationPaymentReverseResponse]
    def payment_initiation_payment_reverse(
      *,
      payment_initiation_payment_reverse_request : Plaid::PaymentInitiationPaymentReverseRequest? = nil
    ) : PaymentInitiationPaymentReverseResponse
      data, _status_code, _headers = payment_initiation_payment_reverse_with_http_info(payment_initiation_payment_reverse_request: payment_initiation_payment_reverse_request)
      data
    end

    # Reverse an existing payment
    # Reverse a settled payment from a Plaid virtual account.  The original payment must be in a settled state to be refunded. To refund partially, specify the amount as part of the request. If the amount is not specified, the refund amount will be equal to all of the remaining payment amount that has not been refunded yet.  The refund will go back to the source account that initiated the payment. The original payment must have been initiated to a Plaid virtual account so that this account can be used to initiate the refund.
    # @required @param payment_initiation_payment_reverse_request [Plaid::PaymentInitiationPaymentReverseRequest?]
    # @return [Tuple(PaymentInitiationPaymentReverseResponse, Integer, Hash)] PaymentInitiationPaymentReverseResponse, response status code and response headers
    def payment_initiation_payment_reverse_with_http_info(
      *,
      payment_initiation_payment_reverse_request : Plaid::PaymentInitiationPaymentReverseRequest? = nil
    ) : Tuple(PaymentInitiationPaymentReverseResponse, Int32, Hash(String, Array(String) | String))
      request = build_api_request_for_payment_initiation_payment_reverse(payment_initiation_payment_reverse_request: payment_initiation_payment_reverse_request)

      body, status_code, headers = @api_client.execute_api_request(request)

      if debugging?
        Log.debug { "API called: PlaidApi#payment_initiation_payment_reverse\nBody: #{body.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}" }
      end

      Tuple.new(PaymentInitiationPaymentReverseResponse.from_json(body), status_code, headers)
    end

    # Reverse an existing payment
    # Reverse a settled payment from a Plaid virtual account.  The original payment must be in a settled state to be refunded. To refund partially, specify the amount as part of the request. If the amount is not specified, the refund amount will be equal to all of the remaining payment amount that has not been refunded yet.  The refund will go back to the source account that initiated the payment. The original payment must have been initiated to a Plaid virtual account so that this account can be used to initiate the refund.
    # @required @param payment_initiation_payment_reverse_request [Plaid::PaymentInitiationPaymentReverseRequest?]
    # @return nil
    def payment_initiation_payment_reverse(
      *,
      payment_initiation_payment_reverse_request : Plaid::PaymentInitiationPaymentReverseRequest? = nil,
      &block : Crest::Response ->
    ) : Nil
      build_api_request_for_payment_initiation_payment_reverse(payment_initiation_payment_reverse_request: payment_initiation_payment_reverse_request).execute(&block)
    end

    # @return Crest::Request
    def build_api_request_for_payment_initiation_payment_reverse(
      *,
      payment_initiation_payment_reverse_request : Plaid::PaymentInitiationPaymentReverseRequest? = nil
    ) : Crest::Request
      if debugging?
        Log.debug { "Calling API: PlaidApi.payment_initiation_payment_reverse ..." }
      end

      if client_side_validation?
        raise ArgumentError.new("\"payment_initiation_payment_reverse_request\" is required and cannot be null") if payment_initiation_payment_reverse_request.nil?
        unless (_payment_initiation_payment_reverse_request = payment_initiation_payment_reverse_request).nil?
          _payment_initiation_payment_reverse_request.validate if _payment_initiation_payment_reverse_request.is_a?(OpenApi::Validatable)
        end
      end

      # resource path
      local_var_path = "/payment_initiation/payment/reverse"

      # header parameters
      header_params : Hash(String, String) = Hash(String, String).new
      # HTTP header "Accept" (if needed)
      header_params["Accept"] = @api_client.select_header_accept(["application/json"])
      # HTTP header "Content-Type"
      header_params["Content-Type"] = @api_client.select_header_content_type(["application/json"])

      # cookie parameters
      cookie_params : Hash(String, String) = Hash(String, String).new

      # query parameters
      query_params : Hash(String, (String | Array(String) | JSON::Any)) = Hash(String, (String | Array(String) | JSON::Any)).new

      # form parameters
      form_params : Array(Tuple(String, Crest::ParamsValue)) | Nil = nil

      # http body (model)
      post_body : IO | String | Nil = @api_client.encode(body: payment_initiation_payment_reverse_request, content_type: header_params["Content-Type"]?) if !payment_initiation_payment_reverse_request.nil?

      # auth_names
      auth_names = ["clientId", "plaidVersion", "secret"]

      @api_client.build_api_request(
        http_method: :"POST",
        path: local_var_path,
        operation: "PlaidApi.payment_initiation_payment_reverse",
        post_body: post_body,
        auth_names: auth_names,
        header_params: header_params,
        cookie_params: cookie_params,
        query_params: query_params,
        form_params: form_params
      )
    end

    # Create payment recipient
    # Create a payment recipient for payment initiation.  The recipient must be in Europe, within a country that is a member of the Single Euro Payment Area (SEPA) or a non-Eurozone country [supported](https://plaid.com/global) by Plaid. For a standing order (recurring) payment, the recipient must be in the UK.  It is recommended to use `bacs` in the UK and `iban` in EU.  The endpoint is idempotent: if a developer has already made a request with the same payment details, Plaid will return the same `recipient_id`.
    # @required @param payment_initiation_recipient_create_request [Plaid::PaymentInitiationRecipientCreateRequest?]
    # @return [PaymentInitiationRecipientCreateResponse]
    def payment_initiation_recipient_create(
      *,
      payment_initiation_recipient_create_request : Plaid::PaymentInitiationRecipientCreateRequest? = nil
    ) : PaymentInitiationRecipientCreateResponse
      data, _status_code, _headers = payment_initiation_recipient_create_with_http_info(payment_initiation_recipient_create_request: payment_initiation_recipient_create_request)
      data
    end

    # Create payment recipient
    # Create a payment recipient for payment initiation.  The recipient must be in Europe, within a country that is a member of the Single Euro Payment Area (SEPA) or a non-Eurozone country [supported](https://plaid.com/global) by Plaid. For a standing order (recurring) payment, the recipient must be in the UK.  It is recommended to use &#x60;bacs&#x60; in the UK and &#x60;iban&#x60; in EU.  The endpoint is idempotent: if a developer has already made a request with the same payment details, Plaid will return the same &#x60;recipient_id&#x60;.
    # @required @param payment_initiation_recipient_create_request [Plaid::PaymentInitiationRecipientCreateRequest?]
    # @return [Tuple(PaymentInitiationRecipientCreateResponse, Integer, Hash)] PaymentInitiationRecipientCreateResponse, response status code and response headers
    def payment_initiation_recipient_create_with_http_info(
      *,
      payment_initiation_recipient_create_request : Plaid::PaymentInitiationRecipientCreateRequest? = nil
    ) : Tuple(PaymentInitiationRecipientCreateResponse, Int32, Hash(String, Array(String) | String))
      request = build_api_request_for_payment_initiation_recipient_create(payment_initiation_recipient_create_request: payment_initiation_recipient_create_request)

      body, status_code, headers = @api_client.execute_api_request(request)

      if debugging?
        Log.debug { "API called: PlaidApi#payment_initiation_recipient_create\nBody: #{body.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}" }
      end

      Tuple.new(PaymentInitiationRecipientCreateResponse.from_json(body), status_code, headers)
    end

    # Create payment recipient
    # Create a payment recipient for payment initiation.  The recipient must be in Europe, within a country that is a member of the Single Euro Payment Area (SEPA) or a non-Eurozone country [supported](https://plaid.com/global) by Plaid. For a standing order (recurring) payment, the recipient must be in the UK.  It is recommended to use &#x60;bacs&#x60; in the UK and &#x60;iban&#x60; in EU.  The endpoint is idempotent: if a developer has already made a request with the same payment details, Plaid will return the same &#x60;recipient_id&#x60;.
    # @required @param payment_initiation_recipient_create_request [Plaid::PaymentInitiationRecipientCreateRequest?]
    # @return nil
    def payment_initiation_recipient_create(
      *,
      payment_initiation_recipient_create_request : Plaid::PaymentInitiationRecipientCreateRequest? = nil,
      &block : Crest::Response ->
    ) : Nil
      build_api_request_for_payment_initiation_recipient_create(payment_initiation_recipient_create_request: payment_initiation_recipient_create_request).execute(&block)
    end

    # @return Crest::Request
    def build_api_request_for_payment_initiation_recipient_create(
      *,
      payment_initiation_recipient_create_request : Plaid::PaymentInitiationRecipientCreateRequest? = nil
    ) : Crest::Request
      if debugging?
        Log.debug { "Calling API: PlaidApi.payment_initiation_recipient_create ..." }
      end

      if client_side_validation?
        raise ArgumentError.new("\"payment_initiation_recipient_create_request\" is required and cannot be null") if payment_initiation_recipient_create_request.nil?
        unless (_payment_initiation_recipient_create_request = payment_initiation_recipient_create_request).nil?
          _payment_initiation_recipient_create_request.validate if _payment_initiation_recipient_create_request.is_a?(OpenApi::Validatable)
        end
      end

      # resource path
      local_var_path = "/payment_initiation/recipient/create"

      # header parameters
      header_params : Hash(String, String) = Hash(String, String).new
      # HTTP header "Accept" (if needed)
      header_params["Accept"] = @api_client.select_header_accept(["application/json"])
      # HTTP header "Content-Type"
      header_params["Content-Type"] = @api_client.select_header_content_type(["application/json"])

      # cookie parameters
      cookie_params : Hash(String, String) = Hash(String, String).new

      # query parameters
      query_params : Hash(String, (String | Array(String) | JSON::Any)) = Hash(String, (String | Array(String) | JSON::Any)).new

      # form parameters
      form_params : Array(Tuple(String, Crest::ParamsValue)) | Nil = nil

      # http body (model)
      post_body : IO | String | Nil = @api_client.encode(body: payment_initiation_recipient_create_request, content_type: header_params["Content-Type"]?) if !payment_initiation_recipient_create_request.nil?

      # auth_names
      auth_names = ["clientId", "plaidVersion", "secret"]

      @api_client.build_api_request(
        http_method: :"POST",
        path: local_var_path,
        operation: "PlaidApi.payment_initiation_recipient_create",
        post_body: post_body,
        auth_names: auth_names,
        header_params: header_params,
        cookie_params: cookie_params,
        query_params: query_params,
        form_params: form_params
      )
    end

    # Get payment recipient
    # Get details about a payment recipient you have previously created.
    # @required @param payment_initiation_recipient_get_request [Plaid::PaymentInitiationRecipientGetRequest?]
    # @return [Plaid::PaymentInitiationRecipientGetResponse]
    def payment_initiation_recipient_get(
      *,
      payment_initiation_recipient_get_request : Plaid::PaymentInitiationRecipientGetRequest? = nil
    ) : Plaid::PaymentInitiationRecipientGetResponse
      data, _status_code, _headers = payment_initiation_recipient_get_with_http_info(payment_initiation_recipient_get_request: payment_initiation_recipient_get_request)
      data
    end

    # Get payment recipient
    # Get details about a payment recipient you have previously created.
    # @required @param payment_initiation_recipient_get_request [Plaid::PaymentInitiationRecipientGetRequest?]
    # @return [Tuple(Plaid::PaymentInitiationRecipientGetResponse, Integer, Hash)] Plaid::PaymentInitiationRecipientGetResponse, response status code and response headers
    def payment_initiation_recipient_get_with_http_info(
      *,
      payment_initiation_recipient_get_request : Plaid::PaymentInitiationRecipientGetRequest? = nil
    ) : Tuple(Plaid::PaymentInitiationRecipientGetResponse, Int32, Hash(String, Array(String) | String))
      request = build_api_request_for_payment_initiation_recipient_get(payment_initiation_recipient_get_request: payment_initiation_recipient_get_request)

      body, status_code, headers = @api_client.execute_api_request(request)

      if debugging?
        Log.debug { "API called: PlaidApi#payment_initiation_recipient_get\nBody: #{body.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}" }
      end

      Tuple.new(Plaid::PaymentInitiationRecipientGetResponse.from_json(body), status_code, headers)
    end

    # Get payment recipient
    # Get details about a payment recipient you have previously created.
    # @required @param payment_initiation_recipient_get_request [Plaid::PaymentInitiationRecipientGetRequest?]
    # @return nil
    def payment_initiation_recipient_get(
      *,
      payment_initiation_recipient_get_request : Plaid::PaymentInitiationRecipientGetRequest? = nil,
      &block : Crest::Response ->
    ) : Nil
      build_api_request_for_payment_initiation_recipient_get(payment_initiation_recipient_get_request: payment_initiation_recipient_get_request).execute(&block)
    end

    # @return Crest::Request
    def build_api_request_for_payment_initiation_recipient_get(
      *,
      payment_initiation_recipient_get_request : Plaid::PaymentInitiationRecipientGetRequest? = nil
    ) : Crest::Request
      if debugging?
        Log.debug { "Calling API: PlaidApi.payment_initiation_recipient_get ..." }
      end

      if client_side_validation?
        raise ArgumentError.new("\"payment_initiation_recipient_get_request\" is required and cannot be null") if payment_initiation_recipient_get_request.nil?
        unless (_payment_initiation_recipient_get_request = payment_initiation_recipient_get_request).nil?
          _payment_initiation_recipient_get_request.validate if _payment_initiation_recipient_get_request.is_a?(OpenApi::Validatable)
        end
      end

      # resource path
      local_var_path = "/payment_initiation/recipient/get"

      # header parameters
      header_params : Hash(String, String) = Hash(String, String).new
      # HTTP header "Accept" (if needed)
      header_params["Accept"] = @api_client.select_header_accept(["application/json"])
      # HTTP header "Content-Type"
      header_params["Content-Type"] = @api_client.select_header_content_type(["application/json"])

      # cookie parameters
      cookie_params : Hash(String, String) = Hash(String, String).new

      # query parameters
      query_params : Hash(String, (String | Array(String) | JSON::Any)) = Hash(String, (String | Array(String) | JSON::Any)).new

      # form parameters
      form_params : Array(Tuple(String, Crest::ParamsValue)) | Nil = nil

      # http body (model)
      post_body : IO | String | Nil = @api_client.encode(body: payment_initiation_recipient_get_request, content_type: header_params["Content-Type"]?) if !payment_initiation_recipient_get_request.nil?

      # auth_names
      auth_names = ["clientId", "plaidVersion", "secret"]

      @api_client.build_api_request(
        http_method: :"POST",
        path: local_var_path,
        operation: "PlaidApi.payment_initiation_recipient_get",
        post_body: post_body,
        auth_names: auth_names,
        header_params: header_params,
        cookie_params: cookie_params,
        query_params: query_params,
        form_params: form_params
      )
    end

    # List payment recipients
    # The `/payment_initiation/recipient/list` endpoint list the payment recipients that you have previously created.
    # @required @param payment_initiation_recipient_list_request [Plaid::PaymentInitiationRecipientListRequest?]
    # @return [PaymentInitiationRecipientListResponse]
    def payment_initiation_recipient_list(
      *,
      payment_initiation_recipient_list_request : Plaid::PaymentInitiationRecipientListRequest? = nil
    ) : PaymentInitiationRecipientListResponse
      data, _status_code, _headers = payment_initiation_recipient_list_with_http_info(payment_initiation_recipient_list_request: payment_initiation_recipient_list_request)
      data
    end

    # List payment recipients
    # The &#x60;/payment_initiation/recipient/list&#x60; endpoint list the payment recipients that you have previously created.
    # @required @param payment_initiation_recipient_list_request [Plaid::PaymentInitiationRecipientListRequest?]
    # @return [Tuple(PaymentInitiationRecipientListResponse, Integer, Hash)] PaymentInitiationRecipientListResponse, response status code and response headers
    def payment_initiation_recipient_list_with_http_info(
      *,
      payment_initiation_recipient_list_request : Plaid::PaymentInitiationRecipientListRequest? = nil
    ) : Tuple(PaymentInitiationRecipientListResponse, Int32, Hash(String, Array(String) | String))
      request = build_api_request_for_payment_initiation_recipient_list(payment_initiation_recipient_list_request: payment_initiation_recipient_list_request)

      body, status_code, headers = @api_client.execute_api_request(request)

      if debugging?
        Log.debug { "API called: PlaidApi#payment_initiation_recipient_list\nBody: #{body.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}" }
      end

      Tuple.new(PaymentInitiationRecipientListResponse.from_json(body), status_code, headers)
    end

    # List payment recipients
    # The &#x60;/payment_initiation/recipient/list&#x60; endpoint list the payment recipients that you have previously created.
    # @required @param payment_initiation_recipient_list_request [Plaid::PaymentInitiationRecipientListRequest?]
    # @return nil
    def payment_initiation_recipient_list(
      *,
      payment_initiation_recipient_list_request : Plaid::PaymentInitiationRecipientListRequest? = nil,
      &block : Crest::Response ->
    ) : Nil
      build_api_request_for_payment_initiation_recipient_list(payment_initiation_recipient_list_request: payment_initiation_recipient_list_request).execute(&block)
    end

    # @return Crest::Request
    def build_api_request_for_payment_initiation_recipient_list(
      *,
      payment_initiation_recipient_list_request : Plaid::PaymentInitiationRecipientListRequest? = nil
    ) : Crest::Request
      if debugging?
        Log.debug { "Calling API: PlaidApi.payment_initiation_recipient_list ..." }
      end

      if client_side_validation?
        raise ArgumentError.new("\"payment_initiation_recipient_list_request\" is required and cannot be null") if payment_initiation_recipient_list_request.nil?
        unless (_payment_initiation_recipient_list_request = payment_initiation_recipient_list_request).nil?
          _payment_initiation_recipient_list_request.validate if _payment_initiation_recipient_list_request.is_a?(OpenApi::Validatable)
        end
      end

      # resource path
      local_var_path = "/payment_initiation/recipient/list"

      # header parameters
      header_params : Hash(String, String) = Hash(String, String).new
      # HTTP header "Accept" (if needed)
      header_params["Accept"] = @api_client.select_header_accept(["application/json"])
      # HTTP header "Content-Type"
      header_params["Content-Type"] = @api_client.select_header_content_type(["application/json"])

      # cookie parameters
      cookie_params : Hash(String, String) = Hash(String, String).new

      # query parameters
      query_params : Hash(String, (String | Array(String) | JSON::Any)) = Hash(String, (String | Array(String) | JSON::Any)).new

      # form parameters
      form_params : Array(Tuple(String, Crest::ParamsValue)) | Nil = nil

      # http body (model)
      post_body : IO | String | Nil = @api_client.encode(body: payment_initiation_recipient_list_request, content_type: header_params["Content-Type"]?) if !payment_initiation_recipient_list_request.nil?

      # auth_names
      auth_names = ["clientId", "plaidVersion", "secret"]

      @api_client.build_api_request(
        http_method: :"POST",
        path: local_var_path,
        operation: "PlaidApi.payment_initiation_recipient_list",
        post_body: post_body,
        auth_names: auth_names,
        header_params: header_params,
        cookie_params: cookie_params,
        query_params: query_params,
        form_params: form_params
      )
    end

    # Create payment profile
    # Use `/payment_profile/create` endpoint to create a new payment profile. To initiate the account linking experience, call `/link/token/create` and provide the `payment_profile_token` in the `transfer.payment_profile_token` field. You can then use the `payment_profile_token` when creating transfers using `/transfer/authorization/create` and `/transfer/create`.
    # @required @param payment_profile_create_request [Plaid::PaymentProfileCreateRequest?]
    # @return [PaymentProfileCreateResponse]
    def payment_profile_create(
      *,
      payment_profile_create_request : Plaid::PaymentProfileCreateRequest? = nil
    ) : PaymentProfileCreateResponse
      data, _status_code, _headers = payment_profile_create_with_http_info(payment_profile_create_request: payment_profile_create_request)
      data
    end

    # Create payment profile
    # Use &#x60;/payment_profile/create&#x60; endpoint to create a new payment profile. To initiate the account linking experience, call &#x60;/link/token/create&#x60; and provide the &#x60;payment_profile_token&#x60; in the &#x60;transfer.payment_profile_token&#x60; field. You can then use the &#x60;payment_profile_token&#x60; when creating transfers using &#x60;/transfer/authorization/create&#x60; and &#x60;/transfer/create&#x60;.
    # @required @param payment_profile_create_request [Plaid::PaymentProfileCreateRequest?]
    # @return [Tuple(PaymentProfileCreateResponse, Integer, Hash)] PaymentProfileCreateResponse, response status code and response headers
    def payment_profile_create_with_http_info(
      *,
      payment_profile_create_request : Plaid::PaymentProfileCreateRequest? = nil
    ) : Tuple(PaymentProfileCreateResponse, Int32, Hash(String, Array(String) | String))
      request = build_api_request_for_payment_profile_create(payment_profile_create_request: payment_profile_create_request)

      body, status_code, headers = @api_client.execute_api_request(request)

      if debugging?
        Log.debug { "API called: PlaidApi#payment_profile_create\nBody: #{body.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}" }
      end

      Tuple.new(PaymentProfileCreateResponse.from_json(body), status_code, headers)
    end

    # Create payment profile
    # Use &#x60;/payment_profile/create&#x60; endpoint to create a new payment profile. To initiate the account linking experience, call &#x60;/link/token/create&#x60; and provide the &#x60;payment_profile_token&#x60; in the &#x60;transfer.payment_profile_token&#x60; field. You can then use the &#x60;payment_profile_token&#x60; when creating transfers using &#x60;/transfer/authorization/create&#x60; and &#x60;/transfer/create&#x60;.
    # @required @param payment_profile_create_request [Plaid::PaymentProfileCreateRequest?]
    # @return nil
    def payment_profile_create(
      *,
      payment_profile_create_request : Plaid::PaymentProfileCreateRequest? = nil,
      &block : Crest::Response ->
    ) : Nil
      build_api_request_for_payment_profile_create(payment_profile_create_request: payment_profile_create_request).execute(&block)
    end

    # @return Crest::Request
    def build_api_request_for_payment_profile_create(
      *,
      payment_profile_create_request : Plaid::PaymentProfileCreateRequest? = nil
    ) : Crest::Request
      if debugging?
        Log.debug { "Calling API: PlaidApi.payment_profile_create ..." }
      end

      if client_side_validation?
        raise ArgumentError.new("\"payment_profile_create_request\" is required and cannot be null") if payment_profile_create_request.nil?
        unless (_payment_profile_create_request = payment_profile_create_request).nil?
          _payment_profile_create_request.validate if _payment_profile_create_request.is_a?(OpenApi::Validatable)
        end
      end

      # resource path
      local_var_path = "/payment_profile/create"

      # header parameters
      header_params : Hash(String, String) = Hash(String, String).new
      # HTTP header "Accept" (if needed)
      header_params["Accept"] = @api_client.select_header_accept(["application/json"])
      # HTTP header "Content-Type"
      header_params["Content-Type"] = @api_client.select_header_content_type(["application/json"])

      # cookie parameters
      cookie_params : Hash(String, String) = Hash(String, String).new

      # query parameters
      query_params : Hash(String, (String | Array(String) | JSON::Any)) = Hash(String, (String | Array(String) | JSON::Any)).new

      # form parameters
      form_params : Array(Tuple(String, Crest::ParamsValue)) | Nil = nil

      # http body (model)
      post_body : IO | String | Nil = @api_client.encode(body: payment_profile_create_request, content_type: header_params["Content-Type"]?) if !payment_profile_create_request.nil?

      # auth_names
      auth_names = ["clientId", "plaidVersion", "secret"]

      @api_client.build_api_request(
        http_method: :"POST",
        path: local_var_path,
        operation: "PlaidApi.payment_profile_create",
        post_body: post_body,
        auth_names: auth_names,
        header_params: header_params,
        cookie_params: cookie_params,
        query_params: query_params,
        form_params: form_params
      )
    end

    # Get payment profile
    # Use `/payment_profile/get` endpoint to get the status of a given Payment Profile.
    # @required @param payment_profile_get_request [Plaid::PaymentProfileGetRequest?]
    # @return [PaymentProfileGetResponse]
    def payment_profile_get(
      *,
      payment_profile_get_request : Plaid::PaymentProfileGetRequest? = nil
    ) : PaymentProfileGetResponse
      data, _status_code, _headers = payment_profile_get_with_http_info(payment_profile_get_request: payment_profile_get_request)
      data
    end

    # Get payment profile
    # Use &#x60;/payment_profile/get&#x60; endpoint to get the status of a given Payment Profile.
    # @required @param payment_profile_get_request [Plaid::PaymentProfileGetRequest?]
    # @return [Tuple(PaymentProfileGetResponse, Integer, Hash)] PaymentProfileGetResponse, response status code and response headers
    def payment_profile_get_with_http_info(
      *,
      payment_profile_get_request : Plaid::PaymentProfileGetRequest? = nil
    ) : Tuple(PaymentProfileGetResponse, Int32, Hash(String, Array(String) | String))
      request = build_api_request_for_payment_profile_get(payment_profile_get_request: payment_profile_get_request)

      body, status_code, headers = @api_client.execute_api_request(request)

      if debugging?
        Log.debug { "API called: PlaidApi#payment_profile_get\nBody: #{body.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}" }
      end

      Tuple.new(PaymentProfileGetResponse.from_json(body), status_code, headers)
    end

    # Get payment profile
    # Use &#x60;/payment_profile/get&#x60; endpoint to get the status of a given Payment Profile.
    # @required @param payment_profile_get_request [Plaid::PaymentProfileGetRequest?]
    # @return nil
    def payment_profile_get(
      *,
      payment_profile_get_request : Plaid::PaymentProfileGetRequest? = nil,
      &block : Crest::Response ->
    ) : Nil
      build_api_request_for_payment_profile_get(payment_profile_get_request: payment_profile_get_request).execute(&block)
    end

    # @return Crest::Request
    def build_api_request_for_payment_profile_get(
      *,
      payment_profile_get_request : Plaid::PaymentProfileGetRequest? = nil
    ) : Crest::Request
      if debugging?
        Log.debug { "Calling API: PlaidApi.payment_profile_get ..." }
      end

      if client_side_validation?
        raise ArgumentError.new("\"payment_profile_get_request\" is required and cannot be null") if payment_profile_get_request.nil?
        unless (_payment_profile_get_request = payment_profile_get_request).nil?
          _payment_profile_get_request.validate if _payment_profile_get_request.is_a?(OpenApi::Validatable)
        end
      end

      # resource path
      local_var_path = "/payment_profile/get"

      # header parameters
      header_params : Hash(String, String) = Hash(String, String).new
      # HTTP header "Accept" (if needed)
      header_params["Accept"] = @api_client.select_header_accept(["application/json"])
      # HTTP header "Content-Type"
      header_params["Content-Type"] = @api_client.select_header_content_type(["application/json"])

      # cookie parameters
      cookie_params : Hash(String, String) = Hash(String, String).new

      # query parameters
      query_params : Hash(String, (String | Array(String) | JSON::Any)) = Hash(String, (String | Array(String) | JSON::Any)).new

      # form parameters
      form_params : Array(Tuple(String, Crest::ParamsValue)) | Nil = nil

      # http body (model)
      post_body : IO | String | Nil = @api_client.encode(body: payment_profile_get_request, content_type: header_params["Content-Type"]?) if !payment_profile_get_request.nil?

      # auth_names
      auth_names = ["clientId", "plaidVersion", "secret"]

      @api_client.build_api_request(
        http_method: :"POST",
        path: local_var_path,
        operation: "PlaidApi.payment_profile_get",
        post_body: post_body,
        auth_names: auth_names,
        header_params: header_params,
        cookie_params: cookie_params,
        query_params: query_params,
        form_params: form_params
      )
    end

    # Remove payment profile
    # Use the `/payment_profile/remove` endpoint to remove a given Payment Profile. Once it’s removed, it can no longer be used to create transfers.
    # @required @param payment_profile_remove_request [Plaid::PaymentProfileRemoveRequest?]
    # @return [PaymentProfileRemoveResponse]
    def payment_profile_remove(
      *,
      payment_profile_remove_request : Plaid::PaymentProfileRemoveRequest? = nil
    ) : PaymentProfileRemoveResponse
      data, _status_code, _headers = payment_profile_remove_with_http_info(payment_profile_remove_request: payment_profile_remove_request)
      data
    end

    # Remove payment profile
    # Use the &#x60;/payment_profile/remove&#x60; endpoint to remove a given Payment Profile. Once it’s removed, it can no longer be used to create transfers.
    # @required @param payment_profile_remove_request [Plaid::PaymentProfileRemoveRequest?]
    # @return [Tuple(PaymentProfileRemoveResponse, Integer, Hash)] PaymentProfileRemoveResponse, response status code and response headers
    def payment_profile_remove_with_http_info(
      *,
      payment_profile_remove_request : Plaid::PaymentProfileRemoveRequest? = nil
    ) : Tuple(PaymentProfileRemoveResponse, Int32, Hash(String, Array(String) | String))
      request = build_api_request_for_payment_profile_remove(payment_profile_remove_request: payment_profile_remove_request)

      body, status_code, headers = @api_client.execute_api_request(request)

      if debugging?
        Log.debug { "API called: PlaidApi#payment_profile_remove\nBody: #{body.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}" }
      end

      Tuple.new(PaymentProfileRemoveResponse.from_json(body), status_code, headers)
    end

    # Remove payment profile
    # Use the &#x60;/payment_profile/remove&#x60; endpoint to remove a given Payment Profile. Once it’s removed, it can no longer be used to create transfers.
    # @required @param payment_profile_remove_request [Plaid::PaymentProfileRemoveRequest?]
    # @return nil
    def payment_profile_remove(
      *,
      payment_profile_remove_request : Plaid::PaymentProfileRemoveRequest? = nil,
      &block : Crest::Response ->
    ) : Nil
      build_api_request_for_payment_profile_remove(payment_profile_remove_request: payment_profile_remove_request).execute(&block)
    end

    # @return Crest::Request
    def build_api_request_for_payment_profile_remove(
      *,
      payment_profile_remove_request : Plaid::PaymentProfileRemoveRequest? = nil
    ) : Crest::Request
      if debugging?
        Log.debug { "Calling API: PlaidApi.payment_profile_remove ..." }
      end

      if client_side_validation?
        raise ArgumentError.new("\"payment_profile_remove_request\" is required and cannot be null") if payment_profile_remove_request.nil?
        unless (_payment_profile_remove_request = payment_profile_remove_request).nil?
          _payment_profile_remove_request.validate if _payment_profile_remove_request.is_a?(OpenApi::Validatable)
        end
      end

      # resource path
      local_var_path = "/payment_profile/remove"

      # header parameters
      header_params : Hash(String, String) = Hash(String, String).new
      # HTTP header "Accept" (if needed)
      header_params["Accept"] = @api_client.select_header_accept(["application/json"])
      # HTTP header "Content-Type"
      header_params["Content-Type"] = @api_client.select_header_content_type(["application/json"])

      # cookie parameters
      cookie_params : Hash(String, String) = Hash(String, String).new

      # query parameters
      query_params : Hash(String, (String | Array(String) | JSON::Any)) = Hash(String, (String | Array(String) | JSON::Any)).new

      # form parameters
      form_params : Array(Tuple(String, Crest::ParamsValue)) | Nil = nil

      # http body (model)
      post_body : IO | String | Nil = @api_client.encode(body: payment_profile_remove_request, content_type: header_params["Content-Type"]?) if !payment_profile_remove_request.nil?

      # auth_names
      auth_names = ["clientId", "plaidVersion", "secret"]

      @api_client.build_api_request(
        http_method: :"POST",
        path: local_var_path,
        operation: "PlaidApi.payment_profile_remove",
        post_body: post_body,
        auth_names: auth_names,
        header_params: header_params,
        cookie_params: cookie_params,
        query_params: query_params,
        form_params: form_params
      )
    end

    # Retrieve the account associated with a processor token
    # This endpoint returns the account associated with a given processor token.  This endpoint retrieves cached information, rather than extracting fresh information from the institution. As a result, the account balance returned may not be up-to-date; for realtime balance information, use `/processor/balance/get` instead. Note that some information is nullable.
    # @required @param processor_account_get_request [Plaid::ProcessorAccountGetRequest?]
    # @return [ProcessorAccountGetResponse]
    def processor_account_get(
      *,
      processor_account_get_request : Plaid::ProcessorAccountGetRequest? = nil
    ) : ProcessorAccountGetResponse
      data, _status_code, _headers = processor_account_get_with_http_info(processor_account_get_request: processor_account_get_request)
      data
    end

    # Retrieve the account associated with a processor token
    # This endpoint returns the account associated with a given processor token.  This endpoint retrieves cached information, rather than extracting fresh information from the institution. As a result, the account balance returned may not be up-to-date; for realtime balance information, use &#x60;/processor/balance/get&#x60; instead. Note that some information is nullable.
    # @required @param processor_account_get_request [Plaid::ProcessorAccountGetRequest?]
    # @return [Tuple(ProcessorAccountGetResponse, Integer, Hash)] ProcessorAccountGetResponse, response status code and response headers
    def processor_account_get_with_http_info(
      *,
      processor_account_get_request : Plaid::ProcessorAccountGetRequest? = nil
    ) : Tuple(ProcessorAccountGetResponse, Int32, Hash(String, Array(String) | String))
      request = build_api_request_for_processor_account_get(processor_account_get_request: processor_account_get_request)

      body, status_code, headers = @api_client.execute_api_request(request)

      if debugging?
        Log.debug { "API called: PlaidApi#processor_account_get\nBody: #{body.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}" }
      end

      Tuple.new(ProcessorAccountGetResponse.from_json(body), status_code, headers)
    end

    # Retrieve the account associated with a processor token
    # This endpoint returns the account associated with a given processor token.  This endpoint retrieves cached information, rather than extracting fresh information from the institution. As a result, the account balance returned may not be up-to-date; for realtime balance information, use &#x60;/processor/balance/get&#x60; instead. Note that some information is nullable.
    # @required @param processor_account_get_request [Plaid::ProcessorAccountGetRequest?]
    # @return nil
    def processor_account_get(
      *,
      processor_account_get_request : Plaid::ProcessorAccountGetRequest? = nil,
      &block : Crest::Response ->
    ) : Nil
      build_api_request_for_processor_account_get(processor_account_get_request: processor_account_get_request).execute(&block)
    end

    # @return Crest::Request
    def build_api_request_for_processor_account_get(
      *,
      processor_account_get_request : Plaid::ProcessorAccountGetRequest? = nil
    ) : Crest::Request
      if debugging?
        Log.debug { "Calling API: PlaidApi.processor_account_get ..." }
      end

      if client_side_validation?
        raise ArgumentError.new("\"processor_account_get_request\" is required and cannot be null") if processor_account_get_request.nil?
        unless (_processor_account_get_request = processor_account_get_request).nil?
          _processor_account_get_request.validate if _processor_account_get_request.is_a?(OpenApi::Validatable)
        end
      end

      # resource path
      local_var_path = "/processor/account/get"

      # header parameters
      header_params : Hash(String, String) = Hash(String, String).new
      # HTTP header "Accept" (if needed)
      header_params["Accept"] = @api_client.select_header_accept(["application/json"])
      # HTTP header "Content-Type"
      header_params["Content-Type"] = @api_client.select_header_content_type(["application/json"])

      # cookie parameters
      cookie_params : Hash(String, String) = Hash(String, String).new

      # query parameters
      query_params : Hash(String, (String | Array(String) | JSON::Any)) = Hash(String, (String | Array(String) | JSON::Any)).new

      # form parameters
      form_params : Array(Tuple(String, Crest::ParamsValue)) | Nil = nil

      # http body (model)
      post_body : IO | String | Nil = @api_client.encode(body: processor_account_get_request, content_type: header_params["Content-Type"]?) if !processor_account_get_request.nil?

      # auth_names
      auth_names = ["clientId", "plaidVersion", "secret"]

      @api_client.build_api_request(
        http_method: :"POST",
        path: local_var_path,
        operation: "PlaidApi.processor_account_get",
        post_body: post_body,
        auth_names: auth_names,
        header_params: header_params,
        cookie_params: cookie_params,
        query_params: query_params,
        form_params: form_params
      )
    end

    # Create Apex bank account token
    # Used to create a token suitable for sending to Apex to enable Plaid-Apex integrations.
    # @required @param processor_apex_processor_token_create_request [Plaid::ProcessorApexProcessorTokenCreateRequest?]
    # @return [ProcessorTokenCreateResponse]
    def processor_apex_processor_token_create(
      *,
      processor_apex_processor_token_create_request : Plaid::ProcessorApexProcessorTokenCreateRequest? = nil
    ) : ProcessorTokenCreateResponse
      data, _status_code, _headers = processor_apex_processor_token_create_with_http_info(processor_apex_processor_token_create_request: processor_apex_processor_token_create_request)
      data
    end

    # Create Apex bank account token
    # Used to create a token suitable for sending to Apex to enable Plaid-Apex integrations.
    # @required @param processor_apex_processor_token_create_request [Plaid::ProcessorApexProcessorTokenCreateRequest?]
    # @return [Tuple(ProcessorTokenCreateResponse, Integer, Hash)] ProcessorTokenCreateResponse, response status code and response headers
    def processor_apex_processor_token_create_with_http_info(
      *,
      processor_apex_processor_token_create_request : Plaid::ProcessorApexProcessorTokenCreateRequest? = nil
    ) : Tuple(ProcessorTokenCreateResponse, Int32, Hash(String, Array(String) | String))
      request = build_api_request_for_processor_apex_processor_token_create(processor_apex_processor_token_create_request: processor_apex_processor_token_create_request)

      body, status_code, headers = @api_client.execute_api_request(request)

      if debugging?
        Log.debug { "API called: PlaidApi#processor_apex_processor_token_create\nBody: #{body.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}" }
      end

      Tuple.new(ProcessorTokenCreateResponse.from_json(body), status_code, headers)
    end

    # Create Apex bank account token
    # Used to create a token suitable for sending to Apex to enable Plaid-Apex integrations.
    # @required @param processor_apex_processor_token_create_request [Plaid::ProcessorApexProcessorTokenCreateRequest?]
    # @return nil
    def processor_apex_processor_token_create(
      *,
      processor_apex_processor_token_create_request : Plaid::ProcessorApexProcessorTokenCreateRequest? = nil,
      &block : Crest::Response ->
    ) : Nil
      build_api_request_for_processor_apex_processor_token_create(processor_apex_processor_token_create_request: processor_apex_processor_token_create_request).execute(&block)
    end

    # @return Crest::Request
    def build_api_request_for_processor_apex_processor_token_create(
      *,
      processor_apex_processor_token_create_request : Plaid::ProcessorApexProcessorTokenCreateRequest? = nil
    ) : Crest::Request
      if debugging?
        Log.debug { "Calling API: PlaidApi.processor_apex_processor_token_create ..." }
      end

      if client_side_validation?
        raise ArgumentError.new("\"processor_apex_processor_token_create_request\" is required and cannot be null") if processor_apex_processor_token_create_request.nil?
        unless (_processor_apex_processor_token_create_request = processor_apex_processor_token_create_request).nil?
          _processor_apex_processor_token_create_request.validate if _processor_apex_processor_token_create_request.is_a?(OpenApi::Validatable)
        end
      end

      # resource path
      local_var_path = "/processor/apex/processor_token/create"

      # header parameters
      header_params : Hash(String, String) = Hash(String, String).new
      # HTTP header "Accept" (if needed)
      header_params["Accept"] = @api_client.select_header_accept(["application/json"])
      # HTTP header "Content-Type"
      header_params["Content-Type"] = @api_client.select_header_content_type(["application/json"])

      # cookie parameters
      cookie_params : Hash(String, String) = Hash(String, String).new

      # query parameters
      query_params : Hash(String, (String | Array(String) | JSON::Any)) = Hash(String, (String | Array(String) | JSON::Any)).new

      # form parameters
      form_params : Array(Tuple(String, Crest::ParamsValue)) | Nil = nil

      # http body (model)
      post_body : IO | String | Nil = @api_client.encode(body: processor_apex_processor_token_create_request, content_type: header_params["Content-Type"]?) if !processor_apex_processor_token_create_request.nil?

      # auth_names
      auth_names = ["clientId", "plaidVersion", "secret"]

      @api_client.build_api_request(
        http_method: :"POST",
        path: local_var_path,
        operation: "PlaidApi.processor_apex_processor_token_create",
        post_body: post_body,
        auth_names: auth_names,
        header_params: header_params,
        cookie_params: cookie_params,
        query_params: query_params,
        form_params: form_params
      )
    end

    # Retrieve Auth data
    # The `/processor/auth/get` endpoint returns the bank account and bank identification number (such as the routing number, for US accounts), for a checking or savings account that''s associated with a given `processor_token`. The endpoint also returns high-level account data and balances when available.  Versioning note: API versions 2019-05-29 and earlier use a different schema for the `numbers` object returned by this endpoint. For details, see [Plaid API versioning](https://plaid.com/docs/api/versioning/#version-2020-09-14).
    # @required @param processor_auth_get_request [Plaid::ProcessorAuthGetRequest?]
    # @return [ProcessorAuthGetResponse]
    def processor_auth_get(
      *,
      processor_auth_get_request : Plaid::ProcessorAuthGetRequest? = nil
    ) : ProcessorAuthGetResponse
      data, _status_code, _headers = processor_auth_get_with_http_info(processor_auth_get_request: processor_auth_get_request)
      data
    end

    # Retrieve Auth data
    # The &#x60;/processor/auth/get&#x60; endpoint returns the bank account and bank identification number (such as the routing number, for US accounts), for a checking or savings account that&#39;&#39;s associated with a given &#x60;processor_token&#x60;. The endpoint also returns high-level account data and balances when available.  Versioning note: API versions 2019-05-29 and earlier use a different schema for the &#x60;numbers&#x60; object returned by this endpoint. For details, see [Plaid API versioning](https://plaid.com/docs/api/versioning/#version-2020-09-14).
    # @required @param processor_auth_get_request [Plaid::ProcessorAuthGetRequest?]
    # @return [Tuple(ProcessorAuthGetResponse, Integer, Hash)] ProcessorAuthGetResponse, response status code and response headers
    def processor_auth_get_with_http_info(
      *,
      processor_auth_get_request : Plaid::ProcessorAuthGetRequest? = nil
    ) : Tuple(ProcessorAuthGetResponse, Int32, Hash(String, Array(String) | String))
      request = build_api_request_for_processor_auth_get(processor_auth_get_request: processor_auth_get_request)

      body, status_code, headers = @api_client.execute_api_request(request)

      if debugging?
        Log.debug { "API called: PlaidApi#processor_auth_get\nBody: #{body.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}" }
      end

      Tuple.new(ProcessorAuthGetResponse.from_json(body), status_code, headers)
    end

    # Retrieve Auth data
    # The &#x60;/processor/auth/get&#x60; endpoint returns the bank account and bank identification number (such as the routing number, for US accounts), for a checking or savings account that&#39;&#39;s associated with a given &#x60;processor_token&#x60;. The endpoint also returns high-level account data and balances when available.  Versioning note: API versions 2019-05-29 and earlier use a different schema for the &#x60;numbers&#x60; object returned by this endpoint. For details, see [Plaid API versioning](https://plaid.com/docs/api/versioning/#version-2020-09-14).
    # @required @param processor_auth_get_request [Plaid::ProcessorAuthGetRequest?]
    # @return nil
    def processor_auth_get(
      *,
      processor_auth_get_request : Plaid::ProcessorAuthGetRequest? = nil,
      &block : Crest::Response ->
    ) : Nil
      build_api_request_for_processor_auth_get(processor_auth_get_request: processor_auth_get_request).execute(&block)
    end

    # @return Crest::Request
    def build_api_request_for_processor_auth_get(
      *,
      processor_auth_get_request : Plaid::ProcessorAuthGetRequest? = nil
    ) : Crest::Request
      if debugging?
        Log.debug { "Calling API: PlaidApi.processor_auth_get ..." }
      end

      if client_side_validation?
        raise ArgumentError.new("\"processor_auth_get_request\" is required and cannot be null") if processor_auth_get_request.nil?
        unless (_processor_auth_get_request = processor_auth_get_request).nil?
          _processor_auth_get_request.validate if _processor_auth_get_request.is_a?(OpenApi::Validatable)
        end
      end

      # resource path
      local_var_path = "/processor/auth/get"

      # header parameters
      header_params : Hash(String, String) = Hash(String, String).new
      # HTTP header "Accept" (if needed)
      header_params["Accept"] = @api_client.select_header_accept(["application/json"])
      # HTTP header "Content-Type"
      header_params["Content-Type"] = @api_client.select_header_content_type(["application/json"])

      # cookie parameters
      cookie_params : Hash(String, String) = Hash(String, String).new

      # query parameters
      query_params : Hash(String, (String | Array(String) | JSON::Any)) = Hash(String, (String | Array(String) | JSON::Any)).new

      # form parameters
      form_params : Array(Tuple(String, Crest::ParamsValue)) | Nil = nil

      # http body (model)
      post_body : IO | String | Nil = @api_client.encode(body: processor_auth_get_request, content_type: header_params["Content-Type"]?) if !processor_auth_get_request.nil?

      # auth_names
      auth_names = ["clientId", "plaidVersion", "secret"]

      @api_client.build_api_request(
        http_method: :"POST",
        path: local_var_path,
        operation: "PlaidApi.processor_auth_get",
        post_body: post_body,
        auth_names: auth_names,
        header_params: header_params,
        cookie_params: cookie_params,
        query_params: query_params,
        form_params: form_params
      )
    end

    # Retrieve Balance data
    # The `/processor/balance/get` endpoint returns the real-time balance for each of an Item's accounts. While other endpoints may return a balance object, only `/processor/balance/get` forces the available and current balance fields to be refreshed rather than cached.
    # @required @param processor_balance_get_request [Plaid::ProcessorBalanceGetRequest?] The `/processor/balance/get` endpoint returns the real-time balance for the account associated with a given `processor_token`.  The current balance is the total amount of funds in the account. The available balance is the current balance less any outstanding holds or debits that have not yet posted to the account.  Note that not all institutions calculate the available balance. In the event that available balance is unavailable from the institution, Plaid will return an available balance value of `null`.
    # @return [ProcessorBalanceGetResponse]
    def processor_balance_get(
      *,
      processor_balance_get_request : Plaid::ProcessorBalanceGetRequest? = nil
    ) : ProcessorBalanceGetResponse
      data, _status_code, _headers = processor_balance_get_with_http_info(processor_balance_get_request: processor_balance_get_request)
      data
    end

    # Retrieve Balance data
    # The &#x60;/processor/balance/get&#x60; endpoint returns the real-time balance for each of an Item&#39;s accounts. While other endpoints may return a balance object, only &#x60;/processor/balance/get&#x60; forces the available and current balance fields to be refreshed rather than cached.
    # @required @param processor_balance_get_request [Plaid::ProcessorBalanceGetRequest?] The `/processor/balance/get` endpoint returns the real-time balance for the account associated with a given `processor_token`.  The current balance is the total amount of funds in the account. The available balance is the current balance less any outstanding holds or debits that have not yet posted to the account.  Note that not all institutions calculate the available balance. In the event that available balance is unavailable from the institution, Plaid will return an available balance value of `null`.
    # @return [Tuple(ProcessorBalanceGetResponse, Integer, Hash)] ProcessorBalanceGetResponse, response status code and response headers
    def processor_balance_get_with_http_info(
      *,
      processor_balance_get_request : Plaid::ProcessorBalanceGetRequest? = nil
    ) : Tuple(ProcessorBalanceGetResponse, Int32, Hash(String, Array(String) | String))
      request = build_api_request_for_processor_balance_get(processor_balance_get_request: processor_balance_get_request)

      body, status_code, headers = @api_client.execute_api_request(request)

      if debugging?
        Log.debug { "API called: PlaidApi#processor_balance_get\nBody: #{body.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}" }
      end

      Tuple.new(ProcessorBalanceGetResponse.from_json(body), status_code, headers)
    end

    # Retrieve Balance data
    # The &#x60;/processor/balance/get&#x60; endpoint returns the real-time balance for each of an Item&#39;s accounts. While other endpoints may return a balance object, only &#x60;/processor/balance/get&#x60; forces the available and current balance fields to be refreshed rather than cached.
    # @required @param processor_balance_get_request [Plaid::ProcessorBalanceGetRequest?] The `/processor/balance/get` endpoint returns the real-time balance for the account associated with a given `processor_token`.  The current balance is the total amount of funds in the account. The available balance is the current balance less any outstanding holds or debits that have not yet posted to the account.  Note that not all institutions calculate the available balance. In the event that available balance is unavailable from the institution, Plaid will return an available balance value of `null`.
    # @return nil
    def processor_balance_get(
      *,
      processor_balance_get_request : Plaid::ProcessorBalanceGetRequest? = nil,
      &block : Crest::Response ->
    ) : Nil
      build_api_request_for_processor_balance_get(processor_balance_get_request: processor_balance_get_request).execute(&block)
    end

    # @return Crest::Request
    def build_api_request_for_processor_balance_get(
      *,
      processor_balance_get_request : Plaid::ProcessorBalanceGetRequest? = nil
    ) : Crest::Request
      if debugging?
        Log.debug { "Calling API: PlaidApi.processor_balance_get ..." }
      end

      if client_side_validation?
        raise ArgumentError.new("\"processor_balance_get_request\" is required and cannot be null") if processor_balance_get_request.nil?
        unless (_processor_balance_get_request = processor_balance_get_request).nil?
          _processor_balance_get_request.validate if _processor_balance_get_request.is_a?(OpenApi::Validatable)
        end
      end

      # resource path
      local_var_path = "/processor/balance/get"

      # header parameters
      header_params : Hash(String, String) = Hash(String, String).new
      # HTTP header "Accept" (if needed)
      header_params["Accept"] = @api_client.select_header_accept(["application/json"])
      # HTTP header "Content-Type"
      header_params["Content-Type"] = @api_client.select_header_content_type(["application/json"])

      # cookie parameters
      cookie_params : Hash(String, String) = Hash(String, String).new

      # query parameters
      query_params : Hash(String, (String | Array(String) | JSON::Any)) = Hash(String, (String | Array(String) | JSON::Any)).new

      # form parameters
      form_params : Array(Tuple(String, Crest::ParamsValue)) | Nil = nil

      # http body (model)
      post_body : IO | String | Nil = @api_client.encode(body: processor_balance_get_request, content_type: header_params["Content-Type"]?) if !processor_balance_get_request.nil?

      # auth_names
      auth_names = ["clientId", "plaidVersion", "secret"]

      @api_client.build_api_request(
        http_method: :"POST",
        path: local_var_path,
        operation: "PlaidApi.processor_balance_get",
        post_body: post_body,
        auth_names: auth_names,
        header_params: header_params,
        cookie_params: cookie_params,
        query_params: query_params,
        form_params: form_params
      )
    end

    # Create a bank transfer as a processor
    # Use the `/processor/bank_transfer/create` endpoint to initiate a new bank transfer as a processor
    # @required @param processor_bank_transfer_create_request [Plaid::ProcessorBankTransferCreateRequest?]
    # @return [ProcessorBankTransferCreateResponse]
    def processor_bank_transfer_create(
      *,
      processor_bank_transfer_create_request : Plaid::ProcessorBankTransferCreateRequest? = nil
    ) : ProcessorBankTransferCreateResponse
      data, _status_code, _headers = processor_bank_transfer_create_with_http_info(processor_bank_transfer_create_request: processor_bank_transfer_create_request)
      data
    end

    # Create a bank transfer as a processor
    # Use the &#x60;/processor/bank_transfer/create&#x60; endpoint to initiate a new bank transfer as a processor
    # @required @param processor_bank_transfer_create_request [Plaid::ProcessorBankTransferCreateRequest?]
    # @return [Tuple(ProcessorBankTransferCreateResponse, Integer, Hash)] ProcessorBankTransferCreateResponse, response status code and response headers
    def processor_bank_transfer_create_with_http_info(
      *,
      processor_bank_transfer_create_request : Plaid::ProcessorBankTransferCreateRequest? = nil
    ) : Tuple(ProcessorBankTransferCreateResponse, Int32, Hash(String, Array(String) | String))
      request = build_api_request_for_processor_bank_transfer_create(processor_bank_transfer_create_request: processor_bank_transfer_create_request)

      body, status_code, headers = @api_client.execute_api_request(request)

      if debugging?
        Log.debug { "API called: PlaidApi#processor_bank_transfer_create\nBody: #{body.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}" }
      end

      Tuple.new(ProcessorBankTransferCreateResponse.from_json(body), status_code, headers)
    end

    # Create a bank transfer as a processor
    # Use the &#x60;/processor/bank_transfer/create&#x60; endpoint to initiate a new bank transfer as a processor
    # @required @param processor_bank_transfer_create_request [Plaid::ProcessorBankTransferCreateRequest?]
    # @return nil
    def processor_bank_transfer_create(
      *,
      processor_bank_transfer_create_request : Plaid::ProcessorBankTransferCreateRequest? = nil,
      &block : Crest::Response ->
    ) : Nil
      build_api_request_for_processor_bank_transfer_create(processor_bank_transfer_create_request: processor_bank_transfer_create_request).execute(&block)
    end

    # @return Crest::Request
    def build_api_request_for_processor_bank_transfer_create(
      *,
      processor_bank_transfer_create_request : Plaid::ProcessorBankTransferCreateRequest? = nil
    ) : Crest::Request
      if debugging?
        Log.debug { "Calling API: PlaidApi.processor_bank_transfer_create ..." }
      end

      if client_side_validation?
        raise ArgumentError.new("\"processor_bank_transfer_create_request\" is required and cannot be null") if processor_bank_transfer_create_request.nil?
        unless (_processor_bank_transfer_create_request = processor_bank_transfer_create_request).nil?
          _processor_bank_transfer_create_request.validate if _processor_bank_transfer_create_request.is_a?(OpenApi::Validatable)
        end
      end

      # resource path
      local_var_path = "/processor/bank_transfer/create"

      # header parameters
      header_params : Hash(String, String) = Hash(String, String).new
      # HTTP header "Accept" (if needed)
      header_params["Accept"] = @api_client.select_header_accept(["application/json"])
      # HTTP header "Content-Type"
      header_params["Content-Type"] = @api_client.select_header_content_type(["application/json"])

      # cookie parameters
      cookie_params : Hash(String, String) = Hash(String, String).new

      # query parameters
      query_params : Hash(String, (String | Array(String) | JSON::Any)) = Hash(String, (String | Array(String) | JSON::Any)).new

      # form parameters
      form_params : Array(Tuple(String, Crest::ParamsValue)) | Nil = nil

      # http body (model)
      post_body : IO | String | Nil = @api_client.encode(body: processor_bank_transfer_create_request, content_type: header_params["Content-Type"]?) if !processor_bank_transfer_create_request.nil?

      # auth_names
      auth_names = ["clientId", "plaidVersion", "secret"]

      @api_client.build_api_request(
        http_method: :"POST",
        path: local_var_path,
        operation: "PlaidApi.processor_bank_transfer_create",
        post_body: post_body,
        auth_names: auth_names,
        header_params: header_params,
        cookie_params: cookie_params,
        query_params: query_params,
        form_params: form_params
      )
    end

    # Retrieve Identity data
    # The `/processor/identity/get` endpoint allows you to retrieve various account holder information on file with the financial institution, including names, emails, phone numbers, and addresses.
    # @required @param processor_identity_get_request [Plaid::ProcessorIdentityGetRequest?]
    # @return [ProcessorIdentityGetResponse]
    def processor_identity_get(
      *,
      processor_identity_get_request : Plaid::ProcessorIdentityGetRequest? = nil
    ) : ProcessorIdentityGetResponse
      data, _status_code, _headers = processor_identity_get_with_http_info(processor_identity_get_request: processor_identity_get_request)
      data
    end

    # Retrieve Identity data
    # The &#x60;/processor/identity/get&#x60; endpoint allows you to retrieve various account holder information on file with the financial institution, including names, emails, phone numbers, and addresses.
    # @required @param processor_identity_get_request [Plaid::ProcessorIdentityGetRequest?]
    # @return [Tuple(ProcessorIdentityGetResponse, Integer, Hash)] ProcessorIdentityGetResponse, response status code and response headers
    def processor_identity_get_with_http_info(
      *,
      processor_identity_get_request : Plaid::ProcessorIdentityGetRequest? = nil
    ) : Tuple(ProcessorIdentityGetResponse, Int32, Hash(String, Array(String) | String))
      request = build_api_request_for_processor_identity_get(processor_identity_get_request: processor_identity_get_request)

      body, status_code, headers = @api_client.execute_api_request(request)

      if debugging?
        Log.debug { "API called: PlaidApi#processor_identity_get\nBody: #{body.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}" }
      end

      Tuple.new(ProcessorIdentityGetResponse.from_json(body), status_code, headers)
    end

    # Retrieve Identity data
    # The &#x60;/processor/identity/get&#x60; endpoint allows you to retrieve various account holder information on file with the financial institution, including names, emails, phone numbers, and addresses.
    # @required @param processor_identity_get_request [Plaid::ProcessorIdentityGetRequest?]
    # @return nil
    def processor_identity_get(
      *,
      processor_identity_get_request : Plaid::ProcessorIdentityGetRequest? = nil,
      &block : Crest::Response ->
    ) : Nil
      build_api_request_for_processor_identity_get(processor_identity_get_request: processor_identity_get_request).execute(&block)
    end

    # @return Crest::Request
    def build_api_request_for_processor_identity_get(
      *,
      processor_identity_get_request : Plaid::ProcessorIdentityGetRequest? = nil
    ) : Crest::Request
      if debugging?
        Log.debug { "Calling API: PlaidApi.processor_identity_get ..." }
      end

      if client_side_validation?
        raise ArgumentError.new("\"processor_identity_get_request\" is required and cannot be null") if processor_identity_get_request.nil?
        unless (_processor_identity_get_request = processor_identity_get_request).nil?
          _processor_identity_get_request.validate if _processor_identity_get_request.is_a?(OpenApi::Validatable)
        end
      end

      # resource path
      local_var_path = "/processor/identity/get"

      # header parameters
      header_params : Hash(String, String) = Hash(String, String).new
      # HTTP header "Accept" (if needed)
      header_params["Accept"] = @api_client.select_header_accept(["application/json"])
      # HTTP header "Content-Type"
      header_params["Content-Type"] = @api_client.select_header_content_type(["application/json"])

      # cookie parameters
      cookie_params : Hash(String, String) = Hash(String, String).new

      # query parameters
      query_params : Hash(String, (String | Array(String) | JSON::Any)) = Hash(String, (String | Array(String) | JSON::Any)).new

      # form parameters
      form_params : Array(Tuple(String, Crest::ParamsValue)) | Nil = nil

      # http body (model)
      post_body : IO | String | Nil = @api_client.encode(body: processor_identity_get_request, content_type: header_params["Content-Type"]?) if !processor_identity_get_request.nil?

      # auth_names
      auth_names = ["clientId", "plaidVersion", "secret"]

      @api_client.build_api_request(
        http_method: :"POST",
        path: local_var_path,
        operation: "PlaidApi.processor_identity_get",
        post_body: post_body,
        auth_names: auth_names,
        header_params: header_params,
        cookie_params: cookie_params,
        query_params: query_params,
        form_params: form_params
      )
    end

    # Retrieve identity match score
    # The `/processor/identity/match` endpoint generates a match score, which indicates how well the provided identity data matches the identity information on file with the account holder's financial institution.  Fields within the `balances` object will always be null when retrieved by `/identity/match`. Instead, use the free `/accounts/get` endpoint to request balance cached data, or `/accounts/balance/get` for real-time data.  This request may take some time to complete if Identity was not specified as an initial product when creating the Item. This is because Plaid must communicate directly with the institution to retrieve the data.
    # @required @param processor_identity_match_request [Plaid::ProcessorIdentityMatchRequest?]
    # @return [ProcessorIdentityMatchResponse]
    def processor_identity_match(
      *,
      processor_identity_match_request : Plaid::ProcessorIdentityMatchRequest? = nil
    ) : ProcessorIdentityMatchResponse
      data, _status_code, _headers = processor_identity_match_with_http_info(processor_identity_match_request: processor_identity_match_request)
      data
    end

    # Retrieve identity match score
    # The &#x60;/processor/identity/match&#x60; endpoint generates a match score, which indicates how well the provided identity data matches the identity information on file with the account holder&#39;s financial institution.  Fields within the &#x60;balances&#x60; object will always be null when retrieved by &#x60;/identity/match&#x60;. Instead, use the free &#x60;/accounts/get&#x60; endpoint to request balance cached data, or &#x60;/accounts/balance/get&#x60; for real-time data.  This request may take some time to complete if Identity was not specified as an initial product when creating the Item. This is because Plaid must communicate directly with the institution to retrieve the data.
    # @required @param processor_identity_match_request [Plaid::ProcessorIdentityMatchRequest?]
    # @return [Tuple(ProcessorIdentityMatchResponse, Integer, Hash)] ProcessorIdentityMatchResponse, response status code and response headers
    def processor_identity_match_with_http_info(
      *,
      processor_identity_match_request : Plaid::ProcessorIdentityMatchRequest? = nil
    ) : Tuple(ProcessorIdentityMatchResponse, Int32, Hash(String, Array(String) | String))
      request = build_api_request_for_processor_identity_match(processor_identity_match_request: processor_identity_match_request)

      body, status_code, headers = @api_client.execute_api_request(request)

      if debugging?
        Log.debug { "API called: PlaidApi#processor_identity_match\nBody: #{body.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}" }
      end

      Tuple.new(ProcessorIdentityMatchResponse.from_json(body), status_code, headers)
    end

    # Retrieve identity match score
    # The &#x60;/processor/identity/match&#x60; endpoint generates a match score, which indicates how well the provided identity data matches the identity information on file with the account holder&#39;s financial institution.  Fields within the &#x60;balances&#x60; object will always be null when retrieved by &#x60;/identity/match&#x60;. Instead, use the free &#x60;/accounts/get&#x60; endpoint to request balance cached data, or &#x60;/accounts/balance/get&#x60; for real-time data.  This request may take some time to complete if Identity was not specified as an initial product when creating the Item. This is because Plaid must communicate directly with the institution to retrieve the data.
    # @required @param processor_identity_match_request [Plaid::ProcessorIdentityMatchRequest?]
    # @return nil
    def processor_identity_match(
      *,
      processor_identity_match_request : Plaid::ProcessorIdentityMatchRequest? = nil,
      &block : Crest::Response ->
    ) : Nil
      build_api_request_for_processor_identity_match(processor_identity_match_request: processor_identity_match_request).execute(&block)
    end

    # @return Crest::Request
    def build_api_request_for_processor_identity_match(
      *,
      processor_identity_match_request : Plaid::ProcessorIdentityMatchRequest? = nil
    ) : Crest::Request
      if debugging?
        Log.debug { "Calling API: PlaidApi.processor_identity_match ..." }
      end

      if client_side_validation?
        raise ArgumentError.new("\"processor_identity_match_request\" is required and cannot be null") if processor_identity_match_request.nil?
        unless (_processor_identity_match_request = processor_identity_match_request).nil?
          _processor_identity_match_request.validate if _processor_identity_match_request.is_a?(OpenApi::Validatable)
        end
      end

      # resource path
      local_var_path = "/processor/identity/match"

      # header parameters
      header_params : Hash(String, String) = Hash(String, String).new
      # HTTP header "Accept" (if needed)
      header_params["Accept"] = @api_client.select_header_accept(["application/json"])
      # HTTP header "Content-Type"
      header_params["Content-Type"] = @api_client.select_header_content_type(["application/json"])

      # cookie parameters
      cookie_params : Hash(String, String) = Hash(String, String).new

      # query parameters
      query_params : Hash(String, (String | Array(String) | JSON::Any)) = Hash(String, (String | Array(String) | JSON::Any)).new

      # form parameters
      form_params : Array(Tuple(String, Crest::ParamsValue)) | Nil = nil

      # http body (model)
      post_body : IO | String | Nil = @api_client.encode(body: processor_identity_match_request, content_type: header_params["Content-Type"]?) if !processor_identity_match_request.nil?

      # auth_names
      auth_names = ["clientId", "plaidVersion", "secret"]

      @api_client.build_api_request(
        http_method: :"POST",
        path: local_var_path,
        operation: "PlaidApi.processor_identity_match",
        post_body: post_body,
        auth_names: auth_names,
        header_params: header_params,
        cookie_params: cookie_params,
        query_params: query_params,
        form_params: form_params
      )
    end

    # Report whether you initiated an ACH transaction
    # After calling `/processor/signal/evaluate`, call `/processor/signal/decision/report` to report whether the transaction was initiated.
    # @required @param processor_signal_decision_report_request [Plaid::ProcessorSignalDecisionReportRequest?]
    # @return [ProcessorSignalDecisionReportResponse]
    def processor_signal_decision_report(
      *,
      processor_signal_decision_report_request : Plaid::ProcessorSignalDecisionReportRequest? = nil
    ) : ProcessorSignalDecisionReportResponse
      data, _status_code, _headers = processor_signal_decision_report_with_http_info(processor_signal_decision_report_request: processor_signal_decision_report_request)
      data
    end

    # Report whether you initiated an ACH transaction
    # After calling &#x60;/processor/signal/evaluate&#x60;, call &#x60;/processor/signal/decision/report&#x60; to report whether the transaction was initiated.
    # @required @param processor_signal_decision_report_request [Plaid::ProcessorSignalDecisionReportRequest?]
    # @return [Tuple(ProcessorSignalDecisionReportResponse, Integer, Hash)] ProcessorSignalDecisionReportResponse, response status code and response headers
    def processor_signal_decision_report_with_http_info(
      *,
      processor_signal_decision_report_request : Plaid::ProcessorSignalDecisionReportRequest? = nil
    ) : Tuple(ProcessorSignalDecisionReportResponse, Int32, Hash(String, Array(String) | String))
      request = build_api_request_for_processor_signal_decision_report(processor_signal_decision_report_request: processor_signal_decision_report_request)

      body, status_code, headers = @api_client.execute_api_request(request)

      if debugging?
        Log.debug { "API called: PlaidApi#processor_signal_decision_report\nBody: #{body.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}" }
      end

      Tuple.new(ProcessorSignalDecisionReportResponse.from_json(body), status_code, headers)
    end

    # Report whether you initiated an ACH transaction
    # After calling &#x60;/processor/signal/evaluate&#x60;, call &#x60;/processor/signal/decision/report&#x60; to report whether the transaction was initiated.
    # @required @param processor_signal_decision_report_request [Plaid::ProcessorSignalDecisionReportRequest?]
    # @return nil
    def processor_signal_decision_report(
      *,
      processor_signal_decision_report_request : Plaid::ProcessorSignalDecisionReportRequest? = nil,
      &block : Crest::Response ->
    ) : Nil
      build_api_request_for_processor_signal_decision_report(processor_signal_decision_report_request: processor_signal_decision_report_request).execute(&block)
    end

    # @return Crest::Request
    def build_api_request_for_processor_signal_decision_report(
      *,
      processor_signal_decision_report_request : Plaid::ProcessorSignalDecisionReportRequest? = nil
    ) : Crest::Request
      if debugging?
        Log.debug { "Calling API: PlaidApi.processor_signal_decision_report ..." }
      end

      if client_side_validation?
        raise ArgumentError.new("\"processor_signal_decision_report_request\" is required and cannot be null") if processor_signal_decision_report_request.nil?
        unless (_processor_signal_decision_report_request = processor_signal_decision_report_request).nil?
          _processor_signal_decision_report_request.validate if _processor_signal_decision_report_request.is_a?(OpenApi::Validatable)
        end
      end

      # resource path
      local_var_path = "/processor/signal/decision/report"

      # header parameters
      header_params : Hash(String, String) = Hash(String, String).new
      # HTTP header "Accept" (if needed)
      header_params["Accept"] = @api_client.select_header_accept(["application/json"])
      # HTTP header "Content-Type"
      header_params["Content-Type"] = @api_client.select_header_content_type(["application/json"])

      # cookie parameters
      cookie_params : Hash(String, String) = Hash(String, String).new

      # query parameters
      query_params : Hash(String, (String | Array(String) | JSON::Any)) = Hash(String, (String | Array(String) | JSON::Any)).new

      # form parameters
      form_params : Array(Tuple(String, Crest::ParamsValue)) | Nil = nil

      # http body (model)
      post_body : IO | String | Nil = @api_client.encode(body: processor_signal_decision_report_request, content_type: header_params["Content-Type"]?) if !processor_signal_decision_report_request.nil?

      # auth_names
      auth_names = ["clientId", "plaidVersion", "secret"]

      @api_client.build_api_request(
        http_method: :"POST",
        path: local_var_path,
        operation: "PlaidApi.processor_signal_decision_report",
        post_body: post_body,
        auth_names: auth_names,
        header_params: header_params,
        cookie_params: cookie_params,
        query_params: query_params,
        form_params: form_params
      )
    end

    # Evaluate a planned ACH transaction
    # Use `/processor/signal/evaluate` to evaluate a planned ACH transaction as a processor to get a return risk assessment (such as a risk score and risk tier) and additional risk signals.  In order to obtain a valid score for an ACH transaction, Plaid must have an access token for the account, and the Item must be healthy (receiving product updates) or have recently been in a healthy state. If the transaction does not meet eligibility requirements, an error will be returned corresponding to the underlying cause. If `/processor/signal/evaluate` is called on the same transaction multiple times within a 24-hour period, cached results may be returned. For more information please refer to our error documentation on [item errors](/docs/errors/item/) and [Link in Update Mode](/docs/link/update-mode/).  Note: This request may take some time to complete if Signal is being added to an existing Item. This is because Plaid must communicate directly with the institution when retrieving the data for the first time. To reduce this latency, you can call `/signal/prepare` on the Item before you need to request Signal data.
    # @required @param processor_signal_evaluate_request [Plaid::ProcessorSignalEvaluateRequest?]
    # @return [ProcessorSignalEvaluateResponse]
    def processor_signal_evaluate(
      *,
      processor_signal_evaluate_request : Plaid::ProcessorSignalEvaluateRequest? = nil
    ) : ProcessorSignalEvaluateResponse
      data, _status_code, _headers = processor_signal_evaluate_with_http_info(processor_signal_evaluate_request: processor_signal_evaluate_request)
      data
    end

    # Evaluate a planned ACH transaction
    # Use &#x60;/processor/signal/evaluate&#x60; to evaluate a planned ACH transaction as a processor to get a return risk assessment (such as a risk score and risk tier) and additional risk signals.  In order to obtain a valid score for an ACH transaction, Plaid must have an access token for the account, and the Item must be healthy (receiving product updates) or have recently been in a healthy state. If the transaction does not meet eligibility requirements, an error will be returned corresponding to the underlying cause. If &#x60;/processor/signal/evaluate&#x60; is called on the same transaction multiple times within a 24-hour period, cached results may be returned. For more information please refer to our error documentation on [item errors](/docs/errors/item/) and [Link in Update Mode](/docs/link/update-mode/).  Note: This request may take some time to complete if Signal is being added to an existing Item. This is because Plaid must communicate directly with the institution when retrieving the data for the first time. To reduce this latency, you can call &#x60;/signal/prepare&#x60; on the Item before you need to request Signal data.
    # @required @param processor_signal_evaluate_request [Plaid::ProcessorSignalEvaluateRequest?]
    # @return [Tuple(ProcessorSignalEvaluateResponse, Integer, Hash)] ProcessorSignalEvaluateResponse, response status code and response headers
    def processor_signal_evaluate_with_http_info(
      *,
      processor_signal_evaluate_request : Plaid::ProcessorSignalEvaluateRequest? = nil
    ) : Tuple(ProcessorSignalEvaluateResponse, Int32, Hash(String, Array(String) | String))
      request = build_api_request_for_processor_signal_evaluate(processor_signal_evaluate_request: processor_signal_evaluate_request)

      body, status_code, headers = @api_client.execute_api_request(request)

      if debugging?
        Log.debug { "API called: PlaidApi#processor_signal_evaluate\nBody: #{body.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}" }
      end

      Tuple.new(ProcessorSignalEvaluateResponse.from_json(body), status_code, headers)
    end

    # Evaluate a planned ACH transaction
    # Use &#x60;/processor/signal/evaluate&#x60; to evaluate a planned ACH transaction as a processor to get a return risk assessment (such as a risk score and risk tier) and additional risk signals.  In order to obtain a valid score for an ACH transaction, Plaid must have an access token for the account, and the Item must be healthy (receiving product updates) or have recently been in a healthy state. If the transaction does not meet eligibility requirements, an error will be returned corresponding to the underlying cause. If &#x60;/processor/signal/evaluate&#x60; is called on the same transaction multiple times within a 24-hour period, cached results may be returned. For more information please refer to our error documentation on [item errors](/docs/errors/item/) and [Link in Update Mode](/docs/link/update-mode/).  Note: This request may take some time to complete if Signal is being added to an existing Item. This is because Plaid must communicate directly with the institution when retrieving the data for the first time. To reduce this latency, you can call &#x60;/signal/prepare&#x60; on the Item before you need to request Signal data.
    # @required @param processor_signal_evaluate_request [Plaid::ProcessorSignalEvaluateRequest?]
    # @return nil
    def processor_signal_evaluate(
      *,
      processor_signal_evaluate_request : Plaid::ProcessorSignalEvaluateRequest? = nil,
      &block : Crest::Response ->
    ) : Nil
      build_api_request_for_processor_signal_evaluate(processor_signal_evaluate_request: processor_signal_evaluate_request).execute(&block)
    end

    # @return Crest::Request
    def build_api_request_for_processor_signal_evaluate(
      *,
      processor_signal_evaluate_request : Plaid::ProcessorSignalEvaluateRequest? = nil
    ) : Crest::Request
      if debugging?
        Log.debug { "Calling API: PlaidApi.processor_signal_evaluate ..." }
      end

      if client_side_validation?
        raise ArgumentError.new("\"processor_signal_evaluate_request\" is required and cannot be null") if processor_signal_evaluate_request.nil?
        unless (_processor_signal_evaluate_request = processor_signal_evaluate_request).nil?
          _processor_signal_evaluate_request.validate if _processor_signal_evaluate_request.is_a?(OpenApi::Validatable)
        end
      end

      # resource path
      local_var_path = "/processor/signal/evaluate"

      # header parameters
      header_params : Hash(String, String) = Hash(String, String).new
      # HTTP header "Accept" (if needed)
      header_params["Accept"] = @api_client.select_header_accept(["application/json"])
      # HTTP header "Content-Type"
      header_params["Content-Type"] = @api_client.select_header_content_type(["application/json"])

      # cookie parameters
      cookie_params : Hash(String, String) = Hash(String, String).new

      # query parameters
      query_params : Hash(String, (String | Array(String) | JSON::Any)) = Hash(String, (String | Array(String) | JSON::Any)).new

      # form parameters
      form_params : Array(Tuple(String, Crest::ParamsValue)) | Nil = nil

      # http body (model)
      post_body : IO | String | Nil = @api_client.encode(body: processor_signal_evaluate_request, content_type: header_params["Content-Type"]?) if !processor_signal_evaluate_request.nil?

      # auth_names
      auth_names = ["clientId", "plaidVersion", "secret"]

      @api_client.build_api_request(
        http_method: :"POST",
        path: local_var_path,
        operation: "PlaidApi.processor_signal_evaluate",
        post_body: post_body,
        auth_names: auth_names,
        header_params: header_params,
        cookie_params: cookie_params,
        query_params: query_params,
        form_params: form_params
      )
    end

    # Opt-in a processor token to Signal
    # When a processor token is not initialized with Signal, call `/processor/signal/prepare` to opt-in that processor token to the Signal data collection process, which will improve the accuracy of the Signal score.  If this endpoint is called with a processor token that is already initialized with Signal, it will return a 200 response and will not modify the processor token.
    # @required @param processor_signal_prepare_request [Plaid::ProcessorSignalPrepareRequest?]
    # @return [ProcessorSignalPrepareResponse]
    def processor_signal_prepare(
      *,
      processor_signal_prepare_request : Plaid::ProcessorSignalPrepareRequest? = nil
    ) : ProcessorSignalPrepareResponse
      data, _status_code, _headers = processor_signal_prepare_with_http_info(processor_signal_prepare_request: processor_signal_prepare_request)
      data
    end

    # Opt-in a processor token to Signal
    # When a processor token is not initialized with Signal, call &#x60;/processor/signal/prepare&#x60; to opt-in that processor token to the Signal data collection process, which will improve the accuracy of the Signal score.  If this endpoint is called with a processor token that is already initialized with Signal, it will return a 200 response and will not modify the processor token.
    # @required @param processor_signal_prepare_request [Plaid::ProcessorSignalPrepareRequest?]
    # @return [Tuple(ProcessorSignalPrepareResponse, Integer, Hash)] ProcessorSignalPrepareResponse, response status code and response headers
    def processor_signal_prepare_with_http_info(
      *,
      processor_signal_prepare_request : Plaid::ProcessorSignalPrepareRequest? = nil
    ) : Tuple(ProcessorSignalPrepareResponse, Int32, Hash(String, Array(String) | String))
      request = build_api_request_for_processor_signal_prepare(processor_signal_prepare_request: processor_signal_prepare_request)

      body, status_code, headers = @api_client.execute_api_request(request)

      if debugging?
        Log.debug { "API called: PlaidApi#processor_signal_prepare\nBody: #{body.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}" }
      end

      Tuple.new(ProcessorSignalPrepareResponse.from_json(body), status_code, headers)
    end

    # Opt-in a processor token to Signal
    # When a processor token is not initialized with Signal, call &#x60;/processor/signal/prepare&#x60; to opt-in that processor token to the Signal data collection process, which will improve the accuracy of the Signal score.  If this endpoint is called with a processor token that is already initialized with Signal, it will return a 200 response and will not modify the processor token.
    # @required @param processor_signal_prepare_request [Plaid::ProcessorSignalPrepareRequest?]
    # @return nil
    def processor_signal_prepare(
      *,
      processor_signal_prepare_request : Plaid::ProcessorSignalPrepareRequest? = nil,
      &block : Crest::Response ->
    ) : Nil
      build_api_request_for_processor_signal_prepare(processor_signal_prepare_request: processor_signal_prepare_request).execute(&block)
    end

    # @return Crest::Request
    def build_api_request_for_processor_signal_prepare(
      *,
      processor_signal_prepare_request : Plaid::ProcessorSignalPrepareRequest? = nil
    ) : Crest::Request
      if debugging?
        Log.debug { "Calling API: PlaidApi.processor_signal_prepare ..." }
      end

      if client_side_validation?
        raise ArgumentError.new("\"processor_signal_prepare_request\" is required and cannot be null") if processor_signal_prepare_request.nil?
        unless (_processor_signal_prepare_request = processor_signal_prepare_request).nil?
          _processor_signal_prepare_request.validate if _processor_signal_prepare_request.is_a?(OpenApi::Validatable)
        end
      end

      # resource path
      local_var_path = "/processor/signal/prepare"

      # header parameters
      header_params : Hash(String, String) = Hash(String, String).new
      # HTTP header "Accept" (if needed)
      header_params["Accept"] = @api_client.select_header_accept(["application/json"])
      # HTTP header "Content-Type"
      header_params["Content-Type"] = @api_client.select_header_content_type(["application/json"])

      # cookie parameters
      cookie_params : Hash(String, String) = Hash(String, String).new

      # query parameters
      query_params : Hash(String, (String | Array(String) | JSON::Any)) = Hash(String, (String | Array(String) | JSON::Any)).new

      # form parameters
      form_params : Array(Tuple(String, Crest::ParamsValue)) | Nil = nil

      # http body (model)
      post_body : IO | String | Nil = @api_client.encode(body: processor_signal_prepare_request, content_type: header_params["Content-Type"]?) if !processor_signal_prepare_request.nil?

      # auth_names
      auth_names = ["clientId", "plaidVersion", "secret"]

      @api_client.build_api_request(
        http_method: :"POST",
        path: local_var_path,
        operation: "PlaidApi.processor_signal_prepare",
        post_body: post_body,
        auth_names: auth_names,
        header_params: header_params,
        cookie_params: cookie_params,
        query_params: query_params,
        form_params: form_params
      )
    end

    # Report a return for an ACH transaction
    # Call the `/processor/signal/return/report` endpoint to report a returned transaction that was previously sent to the `/processor/signal/evaluate` endpoint. Your feedback will be used by the model to incorporate the latest risk trend in your portfolio.
    # @required @param processor_signal_return_report_request [Plaid::ProcessorSignalReturnReportRequest?]
    # @return [ProcessorSignalReturnReportResponse]
    def processor_signal_return_report(
      *,
      processor_signal_return_report_request : Plaid::ProcessorSignalReturnReportRequest? = nil
    ) : ProcessorSignalReturnReportResponse
      data, _status_code, _headers = processor_signal_return_report_with_http_info(processor_signal_return_report_request: processor_signal_return_report_request)
      data
    end

    # Report a return for an ACH transaction
    # Call the &#x60;/processor/signal/return/report&#x60; endpoint to report a returned transaction that was previously sent to the &#x60;/processor/signal/evaluate&#x60; endpoint. Your feedback will be used by the model to incorporate the latest risk trend in your portfolio.
    # @required @param processor_signal_return_report_request [Plaid::ProcessorSignalReturnReportRequest?]
    # @return [Tuple(ProcessorSignalReturnReportResponse, Integer, Hash)] ProcessorSignalReturnReportResponse, response status code and response headers
    def processor_signal_return_report_with_http_info(
      *,
      processor_signal_return_report_request : Plaid::ProcessorSignalReturnReportRequest? = nil
    ) : Tuple(ProcessorSignalReturnReportResponse, Int32, Hash(String, Array(String) | String))
      request = build_api_request_for_processor_signal_return_report(processor_signal_return_report_request: processor_signal_return_report_request)

      body, status_code, headers = @api_client.execute_api_request(request)

      if debugging?
        Log.debug { "API called: PlaidApi#processor_signal_return_report\nBody: #{body.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}" }
      end

      Tuple.new(ProcessorSignalReturnReportResponse.from_json(body), status_code, headers)
    end

    # Report a return for an ACH transaction
    # Call the &#x60;/processor/signal/return/report&#x60; endpoint to report a returned transaction that was previously sent to the &#x60;/processor/signal/evaluate&#x60; endpoint. Your feedback will be used by the model to incorporate the latest risk trend in your portfolio.
    # @required @param processor_signal_return_report_request [Plaid::ProcessorSignalReturnReportRequest?]
    # @return nil
    def processor_signal_return_report(
      *,
      processor_signal_return_report_request : Plaid::ProcessorSignalReturnReportRequest? = nil,
      &block : Crest::Response ->
    ) : Nil
      build_api_request_for_processor_signal_return_report(processor_signal_return_report_request: processor_signal_return_report_request).execute(&block)
    end

    # @return Crest::Request
    def build_api_request_for_processor_signal_return_report(
      *,
      processor_signal_return_report_request : Plaid::ProcessorSignalReturnReportRequest? = nil
    ) : Crest::Request
      if debugging?
        Log.debug { "Calling API: PlaidApi.processor_signal_return_report ..." }
      end

      if client_side_validation?
        raise ArgumentError.new("\"processor_signal_return_report_request\" is required and cannot be null") if processor_signal_return_report_request.nil?
        unless (_processor_signal_return_report_request = processor_signal_return_report_request).nil?
          _processor_signal_return_report_request.validate if _processor_signal_return_report_request.is_a?(OpenApi::Validatable)
        end
      end

      # resource path
      local_var_path = "/processor/signal/return/report"

      # header parameters
      header_params : Hash(String, String) = Hash(String, String).new
      # HTTP header "Accept" (if needed)
      header_params["Accept"] = @api_client.select_header_accept(["application/json"])
      # HTTP header "Content-Type"
      header_params["Content-Type"] = @api_client.select_header_content_type(["application/json"])

      # cookie parameters
      cookie_params : Hash(String, String) = Hash(String, String).new

      # query parameters
      query_params : Hash(String, (String | Array(String) | JSON::Any)) = Hash(String, (String | Array(String) | JSON::Any)).new

      # form parameters
      form_params : Array(Tuple(String, Crest::ParamsValue)) | Nil = nil

      # http body (model)
      post_body : IO | String | Nil = @api_client.encode(body: processor_signal_return_report_request, content_type: header_params["Content-Type"]?) if !processor_signal_return_report_request.nil?

      # auth_names
      auth_names = ["clientId", "plaidVersion", "secret"]

      @api_client.build_api_request(
        http_method: :"POST",
        path: local_var_path,
        operation: "PlaidApi.processor_signal_return_report",
        post_body: post_body,
        auth_names: auth_names,
        header_params: header_params,
        cookie_params: cookie_params,
        query_params: query_params,
        form_params: form_params
      )
    end

    # Create Stripe bank account token
    #  Used to create a token suitable for sending to Stripe to enable Plaid-Stripe integrations. For a detailed guide on integrating Stripe, see [Add Stripe to your app](https://plaid.com/docs/auth/partnerships/stripe/).  Note that the Stripe bank account token is a one-time use token. To store bank account information for later use, you can use a Stripe customer object and create an associated bank account from the token, or you can use a Stripe Custom account and create an associated external bank account from the token. This bank account information should work indefinitely, unless the user's bank account information changes or they revoke Plaid's permissions to access their account. Stripe bank account information cannot be modified once the bank account token has been created. If you ever need to change the bank account details used by Stripe for a specific customer, have the user go through Link again and create a new bank account token from the new `access_token`.  Bank account tokens can also be revoked, using `/item/remove`.
    # @required @param processor_stripe_bank_account_token_create_request [Plaid::ProcessorStripeBankAccountTokenCreateRequest?]
    # @return [ProcessorStripeBankAccountTokenCreateResponse]
    def processor_stripe_bank_account_token_create(
      *,
      processor_stripe_bank_account_token_create_request : Plaid::ProcessorStripeBankAccountTokenCreateRequest? = nil
    ) : ProcessorStripeBankAccountTokenCreateResponse
      data, _status_code, _headers = processor_stripe_bank_account_token_create_with_http_info(processor_stripe_bank_account_token_create_request: processor_stripe_bank_account_token_create_request)
      data
    end

    # Create Stripe bank account token
    #  Used to create a token suitable for sending to Stripe to enable Plaid-Stripe integrations. For a detailed guide on integrating Stripe, see [Add Stripe to your app](https://plaid.com/docs/auth/partnerships/stripe/).  Note that the Stripe bank account token is a one-time use token. To store bank account information for later use, you can use a Stripe customer object and create an associated bank account from the token, or you can use a Stripe Custom account and create an associated external bank account from the token. This bank account information should work indefinitely, unless the user&#39;s bank account information changes or they revoke Plaid&#39;s permissions to access their account. Stripe bank account information cannot be modified once the bank account token has been created. If you ever need to change the bank account details used by Stripe for a specific customer, have the user go through Link again and create a new bank account token from the new &#x60;access_token&#x60;.  Bank account tokens can also be revoked, using &#x60;/item/remove&#x60;.
    # @required @param processor_stripe_bank_account_token_create_request [Plaid::ProcessorStripeBankAccountTokenCreateRequest?]
    # @return [Tuple(ProcessorStripeBankAccountTokenCreateResponse, Integer, Hash)] ProcessorStripeBankAccountTokenCreateResponse, response status code and response headers
    def processor_stripe_bank_account_token_create_with_http_info(
      *,
      processor_stripe_bank_account_token_create_request : Plaid::ProcessorStripeBankAccountTokenCreateRequest? = nil
    ) : Tuple(ProcessorStripeBankAccountTokenCreateResponse, Int32, Hash(String, Array(String) | String))
      request = build_api_request_for_processor_stripe_bank_account_token_create(processor_stripe_bank_account_token_create_request: processor_stripe_bank_account_token_create_request)

      body, status_code, headers = @api_client.execute_api_request(request)

      if debugging?
        Log.debug { "API called: PlaidApi#processor_stripe_bank_account_token_create\nBody: #{body.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}" }
      end

      Tuple.new(ProcessorStripeBankAccountTokenCreateResponse.from_json(body), status_code, headers)
    end

    # Create Stripe bank account token
    #  Used to create a token suitable for sending to Stripe to enable Plaid-Stripe integrations. For a detailed guide on integrating Stripe, see [Add Stripe to your app](https://plaid.com/docs/auth/partnerships/stripe/).  Note that the Stripe bank account token is a one-time use token. To store bank account information for later use, you can use a Stripe customer object and create an associated bank account from the token, or you can use a Stripe Custom account and create an associated external bank account from the token. This bank account information should work indefinitely, unless the user&#39;s bank account information changes or they revoke Plaid&#39;s permissions to access their account. Stripe bank account information cannot be modified once the bank account token has been created. If you ever need to change the bank account details used by Stripe for a specific customer, have the user go through Link again and create a new bank account token from the new &#x60;access_token&#x60;.  Bank account tokens can also be revoked, using &#x60;/item/remove&#x60;.
    # @required @param processor_stripe_bank_account_token_create_request [Plaid::ProcessorStripeBankAccountTokenCreateRequest?]
    # @return nil
    def processor_stripe_bank_account_token_create(
      *,
      processor_stripe_bank_account_token_create_request : Plaid::ProcessorStripeBankAccountTokenCreateRequest? = nil,
      &block : Crest::Response ->
    ) : Nil
      build_api_request_for_processor_stripe_bank_account_token_create(processor_stripe_bank_account_token_create_request: processor_stripe_bank_account_token_create_request).execute(&block)
    end

    # @return Crest::Request
    def build_api_request_for_processor_stripe_bank_account_token_create(
      *,
      processor_stripe_bank_account_token_create_request : Plaid::ProcessorStripeBankAccountTokenCreateRequest? = nil
    ) : Crest::Request
      if debugging?
        Log.debug { "Calling API: PlaidApi.processor_stripe_bank_account_token_create ..." }
      end

      if client_side_validation?
        raise ArgumentError.new("\"processor_stripe_bank_account_token_create_request\" is required and cannot be null") if processor_stripe_bank_account_token_create_request.nil?
        unless (_processor_stripe_bank_account_token_create_request = processor_stripe_bank_account_token_create_request).nil?
          _processor_stripe_bank_account_token_create_request.validate if _processor_stripe_bank_account_token_create_request.is_a?(OpenApi::Validatable)
        end
      end

      # resource path
      local_var_path = "/processor/stripe/bank_account_token/create"

      # header parameters
      header_params : Hash(String, String) = Hash(String, String).new
      # HTTP header "Accept" (if needed)
      header_params["Accept"] = @api_client.select_header_accept(["application/json"])
      # HTTP header "Content-Type"
      header_params["Content-Type"] = @api_client.select_header_content_type(["application/json"])

      # cookie parameters
      cookie_params : Hash(String, String) = Hash(String, String).new

      # query parameters
      query_params : Hash(String, (String | Array(String) | JSON::Any)) = Hash(String, (String | Array(String) | JSON::Any)).new

      # form parameters
      form_params : Array(Tuple(String, Crest::ParamsValue)) | Nil = nil

      # http body (model)
      post_body : IO | String | Nil = @api_client.encode(body: processor_stripe_bank_account_token_create_request, content_type: header_params["Content-Type"]?) if !processor_stripe_bank_account_token_create_request.nil?

      # auth_names
      auth_names = ["clientId", "plaidVersion", "secret"]

      @api_client.build_api_request(
        http_method: :"POST",
        path: local_var_path,
        operation: "PlaidApi.processor_stripe_bank_account_token_create",
        post_body: post_body,
        auth_names: auth_names,
        header_params: header_params,
        cookie_params: cookie_params,
        query_params: query_params,
        form_params: form_params
      )
    end

    # Create processor token
    # Used to create a token suitable for sending to one of Plaid's partners to enable integrations. Note that Stripe partnerships use bank account tokens instead; see `/processor/stripe/bank_account_token/create` for creating tokens for use with Stripe integrations. Once created, a processor token for a given Item cannot be modified or updated. If the account must be linked to a new or different partner resource, create a new Item by having the user go through the Link flow again; a new processor token can then be created from the new `access_token`. Processor tokens can also be revoked, using `/item/remove`.
    # @required @param processor_token_create_request [Plaid::ProcessorTokenCreateRequest?]
    # @return [ProcessorTokenCreateResponse]
    def processor_token_create(
      *,
      processor_token_create_request : Plaid::ProcessorTokenCreateRequest? = nil
    ) : ProcessorTokenCreateResponse
      data, _status_code, _headers = processor_token_create_with_http_info(processor_token_create_request: processor_token_create_request)
      data
    end

    # Create processor token
    # Used to create a token suitable for sending to one of Plaid&#39;s partners to enable integrations. Note that Stripe partnerships use bank account tokens instead; see &#x60;/processor/stripe/bank_account_token/create&#x60; for creating tokens for use with Stripe integrations. Once created, a processor token for a given Item cannot be modified or updated. If the account must be linked to a new or different partner resource, create a new Item by having the user go through the Link flow again; a new processor token can then be created from the new &#x60;access_token&#x60;. Processor tokens can also be revoked, using &#x60;/item/remove&#x60;.
    # @required @param processor_token_create_request [Plaid::ProcessorTokenCreateRequest?]
    # @return [Tuple(ProcessorTokenCreateResponse, Integer, Hash)] ProcessorTokenCreateResponse, response status code and response headers
    def processor_token_create_with_http_info(
      *,
      processor_token_create_request : Plaid::ProcessorTokenCreateRequest? = nil
    ) : Tuple(ProcessorTokenCreateResponse, Int32, Hash(String, Array(String) | String))
      request = build_api_request_for_processor_token_create(processor_token_create_request: processor_token_create_request)

      body, status_code, headers = @api_client.execute_api_request(request)

      if debugging?
        Log.debug { "API called: PlaidApi#processor_token_create\nBody: #{body.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}" }
      end

      Tuple.new(ProcessorTokenCreateResponse.from_json(body), status_code, headers)
    end

    # Create processor token
    # Used to create a token suitable for sending to one of Plaid&#39;s partners to enable integrations. Note that Stripe partnerships use bank account tokens instead; see &#x60;/processor/stripe/bank_account_token/create&#x60; for creating tokens for use with Stripe integrations. Once created, a processor token for a given Item cannot be modified or updated. If the account must be linked to a new or different partner resource, create a new Item by having the user go through the Link flow again; a new processor token can then be created from the new &#x60;access_token&#x60;. Processor tokens can also be revoked, using &#x60;/item/remove&#x60;.
    # @required @param processor_token_create_request [Plaid::ProcessorTokenCreateRequest?]
    # @return nil
    def processor_token_create(
      *,
      processor_token_create_request : Plaid::ProcessorTokenCreateRequest? = nil,
      &block : Crest::Response ->
    ) : Nil
      build_api_request_for_processor_token_create(processor_token_create_request: processor_token_create_request).execute(&block)
    end

    # @return Crest::Request
    def build_api_request_for_processor_token_create(
      *,
      processor_token_create_request : Plaid::ProcessorTokenCreateRequest? = nil
    ) : Crest::Request
      if debugging?
        Log.debug { "Calling API: PlaidApi.processor_token_create ..." }
      end

      if client_side_validation?
        raise ArgumentError.new("\"processor_token_create_request\" is required and cannot be null") if processor_token_create_request.nil?
        unless (_processor_token_create_request = processor_token_create_request).nil?
          _processor_token_create_request.validate if _processor_token_create_request.is_a?(OpenApi::Validatable)
        end
      end

      # resource path
      local_var_path = "/processor/token/create"

      # header parameters
      header_params : Hash(String, String) = Hash(String, String).new
      # HTTP header "Accept" (if needed)
      header_params["Accept"] = @api_client.select_header_accept(["application/json"])
      # HTTP header "Content-Type"
      header_params["Content-Type"] = @api_client.select_header_content_type(["application/json"])

      # cookie parameters
      cookie_params : Hash(String, String) = Hash(String, String).new

      # query parameters
      query_params : Hash(String, (String | Array(String) | JSON::Any)) = Hash(String, (String | Array(String) | JSON::Any)).new

      # form parameters
      form_params : Array(Tuple(String, Crest::ParamsValue)) | Nil = nil

      # http body (model)
      post_body : IO | String | Nil = @api_client.encode(body: processor_token_create_request, content_type: header_params["Content-Type"]?) if !processor_token_create_request.nil?

      # auth_names
      auth_names = ["clientId", "plaidVersion", "secret"]

      @api_client.build_api_request(
        http_method: :"POST",
        path: local_var_path,
        operation: "PlaidApi.processor_token_create",
        post_body: post_body,
        auth_names: auth_names,
        header_params: header_params,
        cookie_params: cookie_params,
        query_params: query_params,
        form_params: form_params
      )
    end

    # Get a processor token's product permissions
    # Used to get a processor token's product permissions. The `products` field will be an empty list if the processor can access all available products.
    # @required @param processor_token_permissions_get_request [Plaid::ProcessorTokenPermissionsGetRequest?]
    # @return [ProcessorTokenPermissionsGetResponse]
    def processor_token_permissions_get(
      *,
      processor_token_permissions_get_request : Plaid::ProcessorTokenPermissionsGetRequest? = nil
    ) : ProcessorTokenPermissionsGetResponse
      data, _status_code, _headers = processor_token_permissions_get_with_http_info(processor_token_permissions_get_request: processor_token_permissions_get_request)
      data
    end

    # Get a processor token&#39;s product permissions
    # Used to get a processor token&#39;s product permissions. The &#x60;products&#x60; field will be an empty list if the processor can access all available products.
    # @required @param processor_token_permissions_get_request [Plaid::ProcessorTokenPermissionsGetRequest?]
    # @return [Tuple(ProcessorTokenPermissionsGetResponse, Integer, Hash)] ProcessorTokenPermissionsGetResponse, response status code and response headers
    def processor_token_permissions_get_with_http_info(
      *,
      processor_token_permissions_get_request : Plaid::ProcessorTokenPermissionsGetRequest? = nil
    ) : Tuple(ProcessorTokenPermissionsGetResponse, Int32, Hash(String, Array(String) | String))
      request = build_api_request_for_processor_token_permissions_get(processor_token_permissions_get_request: processor_token_permissions_get_request)

      body, status_code, headers = @api_client.execute_api_request(request)

      if debugging?
        Log.debug { "API called: PlaidApi#processor_token_permissions_get\nBody: #{body.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}" }
      end

      Tuple.new(ProcessorTokenPermissionsGetResponse.from_json(body), status_code, headers)
    end

    # Get a processor token&#39;s product permissions
    # Used to get a processor token&#39;s product permissions. The &#x60;products&#x60; field will be an empty list if the processor can access all available products.
    # @required @param processor_token_permissions_get_request [Plaid::ProcessorTokenPermissionsGetRequest?]
    # @return nil
    def processor_token_permissions_get(
      *,
      processor_token_permissions_get_request : Plaid::ProcessorTokenPermissionsGetRequest? = nil,
      &block : Crest::Response ->
    ) : Nil
      build_api_request_for_processor_token_permissions_get(processor_token_permissions_get_request: processor_token_permissions_get_request).execute(&block)
    end

    # @return Crest::Request
    def build_api_request_for_processor_token_permissions_get(
      *,
      processor_token_permissions_get_request : Plaid::ProcessorTokenPermissionsGetRequest? = nil
    ) : Crest::Request
      if debugging?
        Log.debug { "Calling API: PlaidApi.processor_token_permissions_get ..." }
      end

      if client_side_validation?
        raise ArgumentError.new("\"processor_token_permissions_get_request\" is required and cannot be null") if processor_token_permissions_get_request.nil?
        unless (_processor_token_permissions_get_request = processor_token_permissions_get_request).nil?
          _processor_token_permissions_get_request.validate if _processor_token_permissions_get_request.is_a?(OpenApi::Validatable)
        end
      end

      # resource path
      local_var_path = "/processor/token/permissions/get"

      # header parameters
      header_params : Hash(String, String) = Hash(String, String).new
      # HTTP header "Accept" (if needed)
      header_params["Accept"] = @api_client.select_header_accept(["application/json"])
      # HTTP header "Content-Type"
      header_params["Content-Type"] = @api_client.select_header_content_type(["application/json"])

      # cookie parameters
      cookie_params : Hash(String, String) = Hash(String, String).new

      # query parameters
      query_params : Hash(String, (String | Array(String) | JSON::Any)) = Hash(String, (String | Array(String) | JSON::Any)).new

      # form parameters
      form_params : Array(Tuple(String, Crest::ParamsValue)) | Nil = nil

      # http body (model)
      post_body : IO | String | Nil = @api_client.encode(body: processor_token_permissions_get_request, content_type: header_params["Content-Type"]?) if !processor_token_permissions_get_request.nil?

      # auth_names
      auth_names = ["clientId", "plaidVersion", "secret"]

      @api_client.build_api_request(
        http_method: :"POST",
        path: local_var_path,
        operation: "PlaidApi.processor_token_permissions_get",
        post_body: post_body,
        auth_names: auth_names,
        header_params: header_params,
        cookie_params: cookie_params,
        query_params: query_params,
        form_params: form_params
      )
    end

    # Control a processor's access to products
    # Used to control a processor's access to products on the given processor token. By default, a processor will have access to all available products on the corresponding item. To restrict access to a particular set of products, call this endpoint with the desired products. To restore access to all available products, call this endpoint with an empty list. This endpoint can be called multiple times as your needs and your processor's needs change.
    # @required @param processor_token_permissions_set_request [Plaid::ProcessorTokenPermissionsSetRequest?]
    # @return [ProcessorTokenPermissionsSetResponse]
    def processor_token_permissions_set(
      *,
      processor_token_permissions_set_request : Plaid::ProcessorTokenPermissionsSetRequest? = nil
    ) : ProcessorTokenPermissionsSetResponse
      data, _status_code, _headers = processor_token_permissions_set_with_http_info(processor_token_permissions_set_request: processor_token_permissions_set_request)
      data
    end

    # Control a processor&#39;s access to products
    # Used to control a processor&#39;s access to products on the given processor token. By default, a processor will have access to all available products on the corresponding item. To restrict access to a particular set of products, call this endpoint with the desired products. To restore access to all available products, call this endpoint with an empty list. This endpoint can be called multiple times as your needs and your processor&#39;s needs change.
    # @required @param processor_token_permissions_set_request [Plaid::ProcessorTokenPermissionsSetRequest?]
    # @return [Tuple(ProcessorTokenPermissionsSetResponse, Integer, Hash)] ProcessorTokenPermissionsSetResponse, response status code and response headers
    def processor_token_permissions_set_with_http_info(
      *,
      processor_token_permissions_set_request : Plaid::ProcessorTokenPermissionsSetRequest? = nil
    ) : Tuple(ProcessorTokenPermissionsSetResponse, Int32, Hash(String, Array(String) | String))
      request = build_api_request_for_processor_token_permissions_set(processor_token_permissions_set_request: processor_token_permissions_set_request)

      body, status_code, headers = @api_client.execute_api_request(request)

      if debugging?
        Log.debug { "API called: PlaidApi#processor_token_permissions_set\nBody: #{body.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}" }
      end

      Tuple.new(ProcessorTokenPermissionsSetResponse.from_json(body), status_code, headers)
    end

    # Control a processor&#39;s access to products
    # Used to control a processor&#39;s access to products on the given processor token. By default, a processor will have access to all available products on the corresponding item. To restrict access to a particular set of products, call this endpoint with the desired products. To restore access to all available products, call this endpoint with an empty list. This endpoint can be called multiple times as your needs and your processor&#39;s needs change.
    # @required @param processor_token_permissions_set_request [Plaid::ProcessorTokenPermissionsSetRequest?]
    # @return nil
    def processor_token_permissions_set(
      *,
      processor_token_permissions_set_request : Plaid::ProcessorTokenPermissionsSetRequest? = nil,
      &block : Crest::Response ->
    ) : Nil
      build_api_request_for_processor_token_permissions_set(processor_token_permissions_set_request: processor_token_permissions_set_request).execute(&block)
    end

    # @return Crest::Request
    def build_api_request_for_processor_token_permissions_set(
      *,
      processor_token_permissions_set_request : Plaid::ProcessorTokenPermissionsSetRequest? = nil
    ) : Crest::Request
      if debugging?
        Log.debug { "Calling API: PlaidApi.processor_token_permissions_set ..." }
      end

      if client_side_validation?
        raise ArgumentError.new("\"processor_token_permissions_set_request\" is required and cannot be null") if processor_token_permissions_set_request.nil?
        unless (_processor_token_permissions_set_request = processor_token_permissions_set_request).nil?
          _processor_token_permissions_set_request.validate if _processor_token_permissions_set_request.is_a?(OpenApi::Validatable)
        end
      end

      # resource path
      local_var_path = "/processor/token/permissions/set"

      # header parameters
      header_params : Hash(String, String) = Hash(String, String).new
      # HTTP header "Accept" (if needed)
      header_params["Accept"] = @api_client.select_header_accept(["application/json"])
      # HTTP header "Content-Type"
      header_params["Content-Type"] = @api_client.select_header_content_type(["application/json"])

      # cookie parameters
      cookie_params : Hash(String, String) = Hash(String, String).new

      # query parameters
      query_params : Hash(String, (String | Array(String) | JSON::Any)) = Hash(String, (String | Array(String) | JSON::Any)).new

      # form parameters
      form_params : Array(Tuple(String, Crest::ParamsValue)) | Nil = nil

      # http body (model)
      post_body : IO | String | Nil = @api_client.encode(body: processor_token_permissions_set_request, content_type: header_params["Content-Type"]?) if !processor_token_permissions_set_request.nil?

      # auth_names
      auth_names = ["clientId", "plaidVersion", "secret"]

      @api_client.build_api_request(
        http_method: :"POST",
        path: local_var_path,
        operation: "PlaidApi.processor_token_permissions_set",
        post_body: post_body,
        auth_names: auth_names,
        header_params: header_params,
        cookie_params: cookie_params,
        query_params: query_params,
        form_params: form_params
      )
    end

    # Update a processor token's webhook URL
    # This endpoint allows you, the processor, to update the webhook URL associated with a processor token. This request triggers a `WEBHOOK_UPDATE_ACKNOWLEDGED` webhook to the newly specified webhook URL.
    # @required @param processor_token_webhook_update_request [Plaid::ProcessorTokenWebhookUpdateRequest?]
    # @return [ProcessorTokenWebhookUpdateResponse]
    def processor_token_webhook_update(
      *,
      processor_token_webhook_update_request : Plaid::ProcessorTokenWebhookUpdateRequest? = nil
    ) : ProcessorTokenWebhookUpdateResponse
      data, _status_code, _headers = processor_token_webhook_update_with_http_info(processor_token_webhook_update_request: processor_token_webhook_update_request)
      data
    end

    # Update a processor token&#39;s webhook URL
    # This endpoint allows you, the processor, to update the webhook URL associated with a processor token. This request triggers a &#x60;WEBHOOK_UPDATE_ACKNOWLEDGED&#x60; webhook to the newly specified webhook URL.
    # @required @param processor_token_webhook_update_request [Plaid::ProcessorTokenWebhookUpdateRequest?]
    # @return [Tuple(ProcessorTokenWebhookUpdateResponse, Integer, Hash)] ProcessorTokenWebhookUpdateResponse, response status code and response headers
    def processor_token_webhook_update_with_http_info(
      *,
      processor_token_webhook_update_request : Plaid::ProcessorTokenWebhookUpdateRequest? = nil
    ) : Tuple(ProcessorTokenWebhookUpdateResponse, Int32, Hash(String, Array(String) | String))
      request = build_api_request_for_processor_token_webhook_update(processor_token_webhook_update_request: processor_token_webhook_update_request)

      body, status_code, headers = @api_client.execute_api_request(request)

      if debugging?
        Log.debug { "API called: PlaidApi#processor_token_webhook_update\nBody: #{body.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}" }
      end

      Tuple.new(ProcessorTokenWebhookUpdateResponse.from_json(body), status_code, headers)
    end

    # Update a processor token&#39;s webhook URL
    # This endpoint allows you, the processor, to update the webhook URL associated with a processor token. This request triggers a &#x60;WEBHOOK_UPDATE_ACKNOWLEDGED&#x60; webhook to the newly specified webhook URL.
    # @required @param processor_token_webhook_update_request [Plaid::ProcessorTokenWebhookUpdateRequest?]
    # @return nil
    def processor_token_webhook_update(
      *,
      processor_token_webhook_update_request : Plaid::ProcessorTokenWebhookUpdateRequest? = nil,
      &block : Crest::Response ->
    ) : Nil
      build_api_request_for_processor_token_webhook_update(processor_token_webhook_update_request: processor_token_webhook_update_request).execute(&block)
    end

    # @return Crest::Request
    def build_api_request_for_processor_token_webhook_update(
      *,
      processor_token_webhook_update_request : Plaid::ProcessorTokenWebhookUpdateRequest? = nil
    ) : Crest::Request
      if debugging?
        Log.debug { "Calling API: PlaidApi.processor_token_webhook_update ..." }
      end

      if client_side_validation?
        raise ArgumentError.new("\"processor_token_webhook_update_request\" is required and cannot be null") if processor_token_webhook_update_request.nil?
        unless (_processor_token_webhook_update_request = processor_token_webhook_update_request).nil?
          _processor_token_webhook_update_request.validate if _processor_token_webhook_update_request.is_a?(OpenApi::Validatable)
        end
      end

      # resource path
      local_var_path = "/processor/token/webhook/update"

      # header parameters
      header_params : Hash(String, String) = Hash(String, String).new
      # HTTP header "Accept" (if needed)
      header_params["Accept"] = @api_client.select_header_accept(["application/json"])
      # HTTP header "Content-Type"
      header_params["Content-Type"] = @api_client.select_header_content_type(["application/json"])

      # cookie parameters
      cookie_params : Hash(String, String) = Hash(String, String).new

      # query parameters
      query_params : Hash(String, (String | Array(String) | JSON::Any)) = Hash(String, (String | Array(String) | JSON::Any)).new

      # form parameters
      form_params : Array(Tuple(String, Crest::ParamsValue)) | Nil = nil

      # http body (model)
      post_body : IO | String | Nil = @api_client.encode(body: processor_token_webhook_update_request, content_type: header_params["Content-Type"]?) if !processor_token_webhook_update_request.nil?

      # auth_names
      auth_names = ["clientId", "plaidVersion", "secret"]

      @api_client.build_api_request(
        http_method: :"POST",
        path: local_var_path,
        operation: "PlaidApi.processor_token_webhook_update",
        post_body: post_body,
        auth_names: auth_names,
        header_params: header_params,
        cookie_params: cookie_params,
        query_params: query_params,
        form_params: form_params
      )
    end

    # Get transaction data
    # The `/processor/transactions/get` endpoint allows developers to receive user-authorized transaction data for credit, depository, and some loan-type accounts (only those with account subtype `student`; coverage may be limited). Transaction data is standardized across financial institutions, and in many cases transactions are linked to a clean name, entity type, location, and category. Similarly, account data is standardized and returned with a clean name, number, balance, and other meta information where available.  Transactions are returned in reverse-chronological order, and the sequence of transaction ordering is stable and will not shift.  Transactions are not immutable and can also be removed altogether by the institution; a removed transaction will no longer appear in `/processor/transactions/get`.  For more details, see [Pending and posted transactions](https://plaid.com/docs/transactions/transactions-data/#pending-and-posted-transactions).  Due to the potentially large number of transactions associated with a processor token, results are paginated. Manipulate the `count` and `offset` parameters in conjunction with the `total_transactions` response body field to fetch all available transactions.  Data returned by `/processor/transactions/get` will be the data available for the processor token as of the most recent successful check for new transactions. Plaid typically checks for new data multiple times a day, but these checks may occur less frequently, such as once a day, depending on the institution. To force Plaid to check for new transactions, you can use the `/processor/transactions/refresh` endpoint.  Note that data may not be immediately available to `/processor/transactions/get`. Plaid will begin to prepare transactions data upon Item link, if Link was initialized with `transactions`, or upon the first call to `/processor/transactions/get`, if it wasn't. If no transaction history is ready when `/processor/transactions/get` is called, it will return a `PRODUCT_NOT_READY` error.  To receive Transactions webhooks for a processor token, set its webhook URL via the [`/processor/token/webhook/update`](https://plaid.com/docs/api/processors/#processortokenwebhookupdate) endpoint.
    # @required @param processor_transactions_get_request [Plaid::ProcessorTransactionsGetRequest?]
    # @return [ProcessorTransactionsGetResponse]
    def processor_transactions_get(
      *,
      processor_transactions_get_request : Plaid::ProcessorTransactionsGetRequest? = nil
    ) : ProcessorTransactionsGetResponse
      data, _status_code, _headers = processor_transactions_get_with_http_info(processor_transactions_get_request: processor_transactions_get_request)
      data
    end

    # Get transaction data
    # The &#x60;/processor/transactions/get&#x60; endpoint allows developers to receive user-authorized transaction data for credit, depository, and some loan-type accounts (only those with account subtype &#x60;student&#x60;; coverage may be limited). Transaction data is standardized across financial institutions, and in many cases transactions are linked to a clean name, entity type, location, and category. Similarly, account data is standardized and returned with a clean name, number, balance, and other meta information where available.  Transactions are returned in reverse-chronological order, and the sequence of transaction ordering is stable and will not shift.  Transactions are not immutable and can also be removed altogether by the institution; a removed transaction will no longer appear in &#x60;/processor/transactions/get&#x60;.  For more details, see [Pending and posted transactions](https://plaid.com/docs/transactions/transactions-data/#pending-and-posted-transactions).  Due to the potentially large number of transactions associated with a processor token, results are paginated. Manipulate the &#x60;count&#x60; and &#x60;offset&#x60; parameters in conjunction with the &#x60;total_transactions&#x60; response body field to fetch all available transactions.  Data returned by &#x60;/processor/transactions/get&#x60; will be the data available for the processor token as of the most recent successful check for new transactions. Plaid typically checks for new data multiple times a day, but these checks may occur less frequently, such as once a day, depending on the institution. To force Plaid to check for new transactions, you can use the &#x60;/processor/transactions/refresh&#x60; endpoint.  Note that data may not be immediately available to &#x60;/processor/transactions/get&#x60;. Plaid will begin to prepare transactions data upon Item link, if Link was initialized with &#x60;transactions&#x60;, or upon the first call to &#x60;/processor/transactions/get&#x60;, if it wasn&#39;t. If no transaction history is ready when &#x60;/processor/transactions/get&#x60; is called, it will return a &#x60;PRODUCT_NOT_READY&#x60; error.  To receive Transactions webhooks for a processor token, set its webhook URL via the [&#x60;/processor/token/webhook/update&#x60;](https://plaid.com/docs/api/processors/#processortokenwebhookupdate) endpoint.
    # @required @param processor_transactions_get_request [Plaid::ProcessorTransactionsGetRequest?]
    # @return [Tuple(ProcessorTransactionsGetResponse, Integer, Hash)] ProcessorTransactionsGetResponse, response status code and response headers
    def processor_transactions_get_with_http_info(
      *,
      processor_transactions_get_request : Plaid::ProcessorTransactionsGetRequest? = nil
    ) : Tuple(ProcessorTransactionsGetResponse, Int32, Hash(String, Array(String) | String))
      request = build_api_request_for_processor_transactions_get(processor_transactions_get_request: processor_transactions_get_request)

      body, status_code, headers = @api_client.execute_api_request(request)

      if debugging?
        Log.debug { "API called: PlaidApi#processor_transactions_get\nBody: #{body.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}" }
      end

      Tuple.new(ProcessorTransactionsGetResponse.from_json(body), status_code, headers)
    end

    # Get transaction data
    # The &#x60;/processor/transactions/get&#x60; endpoint allows developers to receive user-authorized transaction data for credit, depository, and some loan-type accounts (only those with account subtype &#x60;student&#x60;; coverage may be limited). Transaction data is standardized across financial institutions, and in many cases transactions are linked to a clean name, entity type, location, and category. Similarly, account data is standardized and returned with a clean name, number, balance, and other meta information where available.  Transactions are returned in reverse-chronological order, and the sequence of transaction ordering is stable and will not shift.  Transactions are not immutable and can also be removed altogether by the institution; a removed transaction will no longer appear in &#x60;/processor/transactions/get&#x60;.  For more details, see [Pending and posted transactions](https://plaid.com/docs/transactions/transactions-data/#pending-and-posted-transactions).  Due to the potentially large number of transactions associated with a processor token, results are paginated. Manipulate the &#x60;count&#x60; and &#x60;offset&#x60; parameters in conjunction with the &#x60;total_transactions&#x60; response body field to fetch all available transactions.  Data returned by &#x60;/processor/transactions/get&#x60; will be the data available for the processor token as of the most recent successful check for new transactions. Plaid typically checks for new data multiple times a day, but these checks may occur less frequently, such as once a day, depending on the institution. To force Plaid to check for new transactions, you can use the &#x60;/processor/transactions/refresh&#x60; endpoint.  Note that data may not be immediately available to &#x60;/processor/transactions/get&#x60;. Plaid will begin to prepare transactions data upon Item link, if Link was initialized with &#x60;transactions&#x60;, or upon the first call to &#x60;/processor/transactions/get&#x60;, if it wasn&#39;t. If no transaction history is ready when &#x60;/processor/transactions/get&#x60; is called, it will return a &#x60;PRODUCT_NOT_READY&#x60; error.  To receive Transactions webhooks for a processor token, set its webhook URL via the [&#x60;/processor/token/webhook/update&#x60;](https://plaid.com/docs/api/processors/#processortokenwebhookupdate) endpoint.
    # @required @param processor_transactions_get_request [Plaid::ProcessorTransactionsGetRequest?]
    # @return nil
    def processor_transactions_get(
      *,
      processor_transactions_get_request : Plaid::ProcessorTransactionsGetRequest? = nil,
      &block : Crest::Response ->
    ) : Nil
      build_api_request_for_processor_transactions_get(processor_transactions_get_request: processor_transactions_get_request).execute(&block)
    end

    # @return Crest::Request
    def build_api_request_for_processor_transactions_get(
      *,
      processor_transactions_get_request : Plaid::ProcessorTransactionsGetRequest? = nil
    ) : Crest::Request
      if debugging?
        Log.debug { "Calling API: PlaidApi.processor_transactions_get ..." }
      end

      if client_side_validation?
        raise ArgumentError.new("\"processor_transactions_get_request\" is required and cannot be null") if processor_transactions_get_request.nil?
        unless (_processor_transactions_get_request = processor_transactions_get_request).nil?
          _processor_transactions_get_request.validate if _processor_transactions_get_request.is_a?(OpenApi::Validatable)
        end
      end

      # resource path
      local_var_path = "/processor/transactions/get"

      # header parameters
      header_params : Hash(String, String) = Hash(String, String).new
      # HTTP header "Accept" (if needed)
      header_params["Accept"] = @api_client.select_header_accept(["application/json"])
      # HTTP header "Content-Type"
      header_params["Content-Type"] = @api_client.select_header_content_type(["application/json"])

      # cookie parameters
      cookie_params : Hash(String, String) = Hash(String, String).new

      # query parameters
      query_params : Hash(String, (String | Array(String) | JSON::Any)) = Hash(String, (String | Array(String) | JSON::Any)).new

      # form parameters
      form_params : Array(Tuple(String, Crest::ParamsValue)) | Nil = nil

      # http body (model)
      post_body : IO | String | Nil = @api_client.encode(body: processor_transactions_get_request, content_type: header_params["Content-Type"]?) if !processor_transactions_get_request.nil?

      # auth_names
      auth_names = ["clientId", "plaidVersion", "secret"]

      @api_client.build_api_request(
        http_method: :"POST",
        path: local_var_path,
        operation: "PlaidApi.processor_transactions_get",
        post_body: post_body,
        auth_names: auth_names,
        header_params: header_params,
        cookie_params: cookie_params,
        query_params: query_params,
        form_params: form_params
      )
    end

    # Fetch recurring transaction streams
    # The `/processor/transactions/recurring/get` endpoint allows developers to receive a summary of the recurring outflow and inflow streams (expenses and deposits) from a user’s checking, savings or credit card accounts. Additionally, Plaid provides key insights about each recurring stream including the category, merchant, last amount, and more. Developers can use these insights to build tools and experiences that help their users better manage cash flow, monitor subscriptions, reduce spend, and stay on track with bill payments.  This endpoint is offered as an add-on to Transactions. To request access to this endpoint, submit a [product access request](https://dashboard.plaid.com/team/products) or contact your Plaid account manager.  This endpoint can only be called on a processor token that has already been initialized with Transactions (either during Link, by specifying it in `/link/token/create`; or after Link, by calling `/processor/transactions/get` or `/processor/transactions/sync`). Once all historical transactions have been fetched, call `/processor/transactions/recurring/get` to receive the Recurring Transactions streams and subscribe to the [`RECURRING_TRANSACTIONS_UPDATE`](https://plaid.com/docs/api/products/transactions/#recurring_transactions_update) webhook. To know when historical transactions have been fetched, if you are using `/processor/transactions/sync` listen for the [`SYNC_UPDATES_AVAILABLE`](https://plaid.com/docs/api/products/transactions/#SyncUpdatesAvailableWebhook-historical-update-complete) webhook and check that the `historical_update_complete` field in the payload is `true`. If using `/processor/transactions/get`, listen for the [`HISTORICAL_UPDATE`](https://plaid.com/docs/api/products/transactions/#historical_update) webhook.  After the initial call, you can call `/processor/transactions/recurring/get` endpoint at any point in the future to retrieve the latest summary of recurring streams. Listen to the [`RECURRING_TRANSACTIONS_UPDATE`](https://plaid.com/docs/api/products/transactions/#recurring_transactions_update) webhook to be notified when new updates are available.  To receive Transactions webhooks for a processor token, set its webhook URL via the [`/processor/token/webhook/update`](https://plaid.com/docs/api/processors/#processortokenwebhookupdate) endpoint.
    # @required @param processor_transactions_recurring_get_request [Plaid::ProcessorTransactionsRecurringGetRequest?]
    # @return [ProcessorTransactionsRecurringGetResponse]
    def processor_transactions_recurring_get(
      *,
      processor_transactions_recurring_get_request : Plaid::ProcessorTransactionsRecurringGetRequest? = nil
    ) : ProcessorTransactionsRecurringGetResponse
      data, _status_code, _headers = processor_transactions_recurring_get_with_http_info(processor_transactions_recurring_get_request: processor_transactions_recurring_get_request)
      data
    end

    # Fetch recurring transaction streams
    # The &#x60;/processor/transactions/recurring/get&#x60; endpoint allows developers to receive a summary of the recurring outflow and inflow streams (expenses and deposits) from a user’s checking, savings or credit card accounts. Additionally, Plaid provides key insights about each recurring stream including the category, merchant, last amount, and more. Developers can use these insights to build tools and experiences that help their users better manage cash flow, monitor subscriptions, reduce spend, and stay on track with bill payments.  This endpoint is offered as an add-on to Transactions. To request access to this endpoint, submit a [product access request](https://dashboard.plaid.com/team/products) or contact your Plaid account manager.  This endpoint can only be called on a processor token that has already been initialized with Transactions (either during Link, by specifying it in &#x60;/link/token/create&#x60;; or after Link, by calling &#x60;/processor/transactions/get&#x60; or &#x60;/processor/transactions/sync&#x60;). Once all historical transactions have been fetched, call &#x60;/processor/transactions/recurring/get&#x60; to receive the Recurring Transactions streams and subscribe to the [&#x60;RECURRING_TRANSACTIONS_UPDATE&#x60;](https://plaid.com/docs/api/products/transactions/#recurring_transactions_update) webhook. To know when historical transactions have been fetched, if you are using &#x60;/processor/transactions/sync&#x60; listen for the [&#x60;SYNC_UPDATES_AVAILABLE&#x60;](https://plaid.com/docs/api/products/transactions/#SyncUpdatesAvailableWebhook-historical-update-complete) webhook and check that the &#x60;historical_update_complete&#x60; field in the payload is &#x60;true&#x60;. If using &#x60;/processor/transactions/get&#x60;, listen for the [&#x60;HISTORICAL_UPDATE&#x60;](https://plaid.com/docs/api/products/transactions/#historical_update) webhook.  After the initial call, you can call &#x60;/processor/transactions/recurring/get&#x60; endpoint at any point in the future to retrieve the latest summary of recurring streams. Listen to the [&#x60;RECURRING_TRANSACTIONS_UPDATE&#x60;](https://plaid.com/docs/api/products/transactions/#recurring_transactions_update) webhook to be notified when new updates are available.  To receive Transactions webhooks for a processor token, set its webhook URL via the [&#x60;/processor/token/webhook/update&#x60;](https://plaid.com/docs/api/processors/#processortokenwebhookupdate) endpoint.
    # @required @param processor_transactions_recurring_get_request [Plaid::ProcessorTransactionsRecurringGetRequest?]
    # @return [Tuple(ProcessorTransactionsRecurringGetResponse, Integer, Hash)] ProcessorTransactionsRecurringGetResponse, response status code and response headers
    def processor_transactions_recurring_get_with_http_info(
      *,
      processor_transactions_recurring_get_request : Plaid::ProcessorTransactionsRecurringGetRequest? = nil
    ) : Tuple(ProcessorTransactionsRecurringGetResponse, Int32, Hash(String, Array(String) | String))
      request = build_api_request_for_processor_transactions_recurring_get(processor_transactions_recurring_get_request: processor_transactions_recurring_get_request)

      body, status_code, headers = @api_client.execute_api_request(request)

      if debugging?
        Log.debug { "API called: PlaidApi#processor_transactions_recurring_get\nBody: #{body.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}" }
      end

      Tuple.new(ProcessorTransactionsRecurringGetResponse.from_json(body), status_code, headers)
    end

    # Fetch recurring transaction streams
    # The &#x60;/processor/transactions/recurring/get&#x60; endpoint allows developers to receive a summary of the recurring outflow and inflow streams (expenses and deposits) from a user’s checking, savings or credit card accounts. Additionally, Plaid provides key insights about each recurring stream including the category, merchant, last amount, and more. Developers can use these insights to build tools and experiences that help their users better manage cash flow, monitor subscriptions, reduce spend, and stay on track with bill payments.  This endpoint is offered as an add-on to Transactions. To request access to this endpoint, submit a [product access request](https://dashboard.plaid.com/team/products) or contact your Plaid account manager.  This endpoint can only be called on a processor token that has already been initialized with Transactions (either during Link, by specifying it in &#x60;/link/token/create&#x60;; or after Link, by calling &#x60;/processor/transactions/get&#x60; or &#x60;/processor/transactions/sync&#x60;). Once all historical transactions have been fetched, call &#x60;/processor/transactions/recurring/get&#x60; to receive the Recurring Transactions streams and subscribe to the [&#x60;RECURRING_TRANSACTIONS_UPDATE&#x60;](https://plaid.com/docs/api/products/transactions/#recurring_transactions_update) webhook. To know when historical transactions have been fetched, if you are using &#x60;/processor/transactions/sync&#x60; listen for the [&#x60;SYNC_UPDATES_AVAILABLE&#x60;](https://plaid.com/docs/api/products/transactions/#SyncUpdatesAvailableWebhook-historical-update-complete) webhook and check that the &#x60;historical_update_complete&#x60; field in the payload is &#x60;true&#x60;. If using &#x60;/processor/transactions/get&#x60;, listen for the [&#x60;HISTORICAL_UPDATE&#x60;](https://plaid.com/docs/api/products/transactions/#historical_update) webhook.  After the initial call, you can call &#x60;/processor/transactions/recurring/get&#x60; endpoint at any point in the future to retrieve the latest summary of recurring streams. Listen to the [&#x60;RECURRING_TRANSACTIONS_UPDATE&#x60;](https://plaid.com/docs/api/products/transactions/#recurring_transactions_update) webhook to be notified when new updates are available.  To receive Transactions webhooks for a processor token, set its webhook URL via the [&#x60;/processor/token/webhook/update&#x60;](https://plaid.com/docs/api/processors/#processortokenwebhookupdate) endpoint.
    # @required @param processor_transactions_recurring_get_request [Plaid::ProcessorTransactionsRecurringGetRequest?]
    # @return nil
    def processor_transactions_recurring_get(
      *,
      processor_transactions_recurring_get_request : Plaid::ProcessorTransactionsRecurringGetRequest? = nil,
      &block : Crest::Response ->
    ) : Nil
      build_api_request_for_processor_transactions_recurring_get(processor_transactions_recurring_get_request: processor_transactions_recurring_get_request).execute(&block)
    end

    # @return Crest::Request
    def build_api_request_for_processor_transactions_recurring_get(
      *,
      processor_transactions_recurring_get_request : Plaid::ProcessorTransactionsRecurringGetRequest? = nil
    ) : Crest::Request
      if debugging?
        Log.debug { "Calling API: PlaidApi.processor_transactions_recurring_get ..." }
      end

      if client_side_validation?
        raise ArgumentError.new("\"processor_transactions_recurring_get_request\" is required and cannot be null") if processor_transactions_recurring_get_request.nil?
        unless (_processor_transactions_recurring_get_request = processor_transactions_recurring_get_request).nil?
          _processor_transactions_recurring_get_request.validate if _processor_transactions_recurring_get_request.is_a?(OpenApi::Validatable)
        end
      end

      # resource path
      local_var_path = "/processor/transactions/recurring/get"

      # header parameters
      header_params : Hash(String, String) = Hash(String, String).new
      # HTTP header "Accept" (if needed)
      header_params["Accept"] = @api_client.select_header_accept(["application/json"])
      # HTTP header "Content-Type"
      header_params["Content-Type"] = @api_client.select_header_content_type(["application/json"])

      # cookie parameters
      cookie_params : Hash(String, String) = Hash(String, String).new

      # query parameters
      query_params : Hash(String, (String | Array(String) | JSON::Any)) = Hash(String, (String | Array(String) | JSON::Any)).new

      # form parameters
      form_params : Array(Tuple(String, Crest::ParamsValue)) | Nil = nil

      # http body (model)
      post_body : IO | String | Nil = @api_client.encode(body: processor_transactions_recurring_get_request, content_type: header_params["Content-Type"]?) if !processor_transactions_recurring_get_request.nil?

      # auth_names
      auth_names = ["clientId", "plaidVersion", "secret"]

      @api_client.build_api_request(
        http_method: :"POST",
        path: local_var_path,
        operation: "PlaidApi.processor_transactions_recurring_get",
        post_body: post_body,
        auth_names: auth_names,
        header_params: header_params,
        cookie_params: cookie_params,
        query_params: query_params,
        form_params: form_params
      )
    end

    # Refresh transaction data
    # `/processor/transactions/refresh` is an optional endpoint for users of the Transactions product. It initiates an on-demand extraction to fetch the newest transactions for a processor token. This on-demand extraction takes place in addition to the periodic extractions that automatically occur multiple times a day for any Transactions-enabled processor token. If changes to transactions are discovered after calling `/processor/transactions/refresh`, Plaid will fire a webhook: for `/transactions/sync` users, [`SYNC_UPDATES_AVAILABLE`](https://plaid.com/docs/api/products/transactions/#sync_updates_available) will be fired if there are any transactions updated, added, or removed. For users of both `/processor/transactions/sync` and `/processor/transactions/get`, [`TRANSACTIONS_REMOVED`](https://plaid.com/docs/api/products/transactions/#transactions_removed) will be fired if any removed transactions are detected, and [`DEFAULT_UPDATE`](https://plaid.com/docs/api/products/transactions/#default_update) will be fired if any new transactions are detected. New transactions can be fetched by calling `/processor/transactions/get` or `/processor/transactions/sync`. Note that the `/processor/transactions/refresh` endpoint is not supported for Capital One (`ins_128026`) and will result in a `PRODUCT_NOT_SUPPORTED` error if called on a processor token from that institution.  `/processor/transactions/refresh` is offered as an add-on to Transactions and has a separate [fee model](/docs/account/billing/#per-request-flat-fee). To request access to this endpoint, submit a [product access request](https://dashboard.plaid.com/team/products) or contact your Plaid account manager.
    # @required @param processor_transactions_refresh_request [Plaid::ProcessorTransactionsRefreshRequest?]
    # @return [ProcessorTransactionsRefreshResponse]
    def processor_transactions_refresh(
      *,
      processor_transactions_refresh_request : Plaid::ProcessorTransactionsRefreshRequest? = nil
    ) : ProcessorTransactionsRefreshResponse
      data, _status_code, _headers = processor_transactions_refresh_with_http_info(processor_transactions_refresh_request: processor_transactions_refresh_request)
      data
    end

    # Refresh transaction data
    # &#x60;/processor/transactions/refresh&#x60; is an optional endpoint for users of the Transactions product. It initiates an on-demand extraction to fetch the newest transactions for a processor token. This on-demand extraction takes place in addition to the periodic extractions that automatically occur multiple times a day for any Transactions-enabled processor token. If changes to transactions are discovered after calling &#x60;/processor/transactions/refresh&#x60;, Plaid will fire a webhook: for &#x60;/transactions/sync&#x60; users, [&#x60;SYNC_UPDATES_AVAILABLE&#x60;](https://plaid.com/docs/api/products/transactions/#sync_updates_available) will be fired if there are any transactions updated, added, or removed. For users of both &#x60;/processor/transactions/sync&#x60; and &#x60;/processor/transactions/get&#x60;, [&#x60;TRANSACTIONS_REMOVED&#x60;](https://plaid.com/docs/api/products/transactions/#transactions_removed) will be fired if any removed transactions are detected, and [&#x60;DEFAULT_UPDATE&#x60;](https://plaid.com/docs/api/products/transactions/#default_update) will be fired if any new transactions are detected. New transactions can be fetched by calling &#x60;/processor/transactions/get&#x60; or &#x60;/processor/transactions/sync&#x60;. Note that the &#x60;/processor/transactions/refresh&#x60; endpoint is not supported for Capital One (&#x60;ins_128026&#x60;) and will result in a &#x60;PRODUCT_NOT_SUPPORTED&#x60; error if called on a processor token from that institution.  &#x60;/processor/transactions/refresh&#x60; is offered as an add-on to Transactions and has a separate [fee model](/docs/account/billing/#per-request-flat-fee). To request access to this endpoint, submit a [product access request](https://dashboard.plaid.com/team/products) or contact your Plaid account manager.
    # @required @param processor_transactions_refresh_request [Plaid::ProcessorTransactionsRefreshRequest?]
    # @return [Tuple(ProcessorTransactionsRefreshResponse, Integer, Hash)] ProcessorTransactionsRefreshResponse, response status code and response headers
    def processor_transactions_refresh_with_http_info(
      *,
      processor_transactions_refresh_request : Plaid::ProcessorTransactionsRefreshRequest? = nil
    ) : Tuple(ProcessorTransactionsRefreshResponse, Int32, Hash(String, Array(String) | String))
      request = build_api_request_for_processor_transactions_refresh(processor_transactions_refresh_request: processor_transactions_refresh_request)

      body, status_code, headers = @api_client.execute_api_request(request)

      if debugging?
        Log.debug { "API called: PlaidApi#processor_transactions_refresh\nBody: #{body.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}" }
      end

      Tuple.new(ProcessorTransactionsRefreshResponse.from_json(body), status_code, headers)
    end

    # Refresh transaction data
    # &#x60;/processor/transactions/refresh&#x60; is an optional endpoint for users of the Transactions product. It initiates an on-demand extraction to fetch the newest transactions for a processor token. This on-demand extraction takes place in addition to the periodic extractions that automatically occur multiple times a day for any Transactions-enabled processor token. If changes to transactions are discovered after calling &#x60;/processor/transactions/refresh&#x60;, Plaid will fire a webhook: for &#x60;/transactions/sync&#x60; users, [&#x60;SYNC_UPDATES_AVAILABLE&#x60;](https://plaid.com/docs/api/products/transactions/#sync_updates_available) will be fired if there are any transactions updated, added, or removed. For users of both &#x60;/processor/transactions/sync&#x60; and &#x60;/processor/transactions/get&#x60;, [&#x60;TRANSACTIONS_REMOVED&#x60;](https://plaid.com/docs/api/products/transactions/#transactions_removed) will be fired if any removed transactions are detected, and [&#x60;DEFAULT_UPDATE&#x60;](https://plaid.com/docs/api/products/transactions/#default_update) will be fired if any new transactions are detected. New transactions can be fetched by calling &#x60;/processor/transactions/get&#x60; or &#x60;/processor/transactions/sync&#x60;. Note that the &#x60;/processor/transactions/refresh&#x60; endpoint is not supported for Capital One (&#x60;ins_128026&#x60;) and will result in a &#x60;PRODUCT_NOT_SUPPORTED&#x60; error if called on a processor token from that institution.  &#x60;/processor/transactions/refresh&#x60; is offered as an add-on to Transactions and has a separate [fee model](/docs/account/billing/#per-request-flat-fee). To request access to this endpoint, submit a [product access request](https://dashboard.plaid.com/team/products) or contact your Plaid account manager.
    # @required @param processor_transactions_refresh_request [Plaid::ProcessorTransactionsRefreshRequest?]
    # @return nil
    def processor_transactions_refresh(
      *,
      processor_transactions_refresh_request : Plaid::ProcessorTransactionsRefreshRequest? = nil,
      &block : Crest::Response ->
    ) : Nil
      build_api_request_for_processor_transactions_refresh(processor_transactions_refresh_request: processor_transactions_refresh_request).execute(&block)
    end

    # @return Crest::Request
    def build_api_request_for_processor_transactions_refresh(
      *,
      processor_transactions_refresh_request : Plaid::ProcessorTransactionsRefreshRequest? = nil
    ) : Crest::Request
      if debugging?
        Log.debug { "Calling API: PlaidApi.processor_transactions_refresh ..." }
      end

      if client_side_validation?
        raise ArgumentError.new("\"processor_transactions_refresh_request\" is required and cannot be null") if processor_transactions_refresh_request.nil?
        unless (_processor_transactions_refresh_request = processor_transactions_refresh_request).nil?
          _processor_transactions_refresh_request.validate if _processor_transactions_refresh_request.is_a?(OpenApi::Validatable)
        end
      end

      # resource path
      local_var_path = "/processor/transactions/refresh"

      # header parameters
      header_params : Hash(String, String) = Hash(String, String).new
      # HTTP header "Accept" (if needed)
      header_params["Accept"] = @api_client.select_header_accept(["application/json"])
      # HTTP header "Content-Type"
      header_params["Content-Type"] = @api_client.select_header_content_type(["application/json"])

      # cookie parameters
      cookie_params : Hash(String, String) = Hash(String, String).new

      # query parameters
      query_params : Hash(String, (String | Array(String) | JSON::Any)) = Hash(String, (String | Array(String) | JSON::Any)).new

      # form parameters
      form_params : Array(Tuple(String, Crest::ParamsValue)) | Nil = nil

      # http body (model)
      post_body : IO | String | Nil = @api_client.encode(body: processor_transactions_refresh_request, content_type: header_params["Content-Type"]?) if !processor_transactions_refresh_request.nil?

      # auth_names
      auth_names = ["clientId", "plaidVersion", "secret"]

      @api_client.build_api_request(
        http_method: :"POST",
        path: local_var_path,
        operation: "PlaidApi.processor_transactions_refresh",
        post_body: post_body,
        auth_names: auth_names,
        header_params: header_params,
        cookie_params: cookie_params,
        query_params: query_params,
        form_params: form_params
      )
    end

    # Get incremental transaction updates on a processor token
    # This endpoint replaces `/processor/transactions/get` and its associated webhooks for most common use-cases.  The `/processor/transactions/sync` endpoint allows developers to subscribe to all transactions associated with a processor token and get updates synchronously in a stream-like manner, using a cursor to track which updates have already been seen. `/processor/transactions/sync` provides the same functionality as `/processor/transactions/get` and can be used instead of `/processor/transactions/get` to simplify the process of tracking transactions updates.  This endpoint provides user-authorized transaction data for `credit`, `depository`, and some loan-type accounts (only those with account subtype `student`; coverage may be limited). For transaction history from `investments` accounts, use `/investments/transactions/get` instead.  Returned transactions data is grouped into three types of update, indicating whether the transaction was added, removed, or modified since the last call to the API.  In the first call to `/processor/transactions/sync` for a processor token, the endpoint will return all historical transactions data associated with that processor token up until the time of the API call (as \"adds\"), which then generates a `next_cursor` for that processor token. In subsequent calls, send the `next_cursor` to receive only the changes that have occurred since the previous call.  Due to the potentially large number of transactions associated with a processor token, results are paginated. The `has_more` field specifies if additional calls are necessary to fetch all available transaction updates. Call `/processor/transactions/sync` with the new cursor, pulling all updates, until `has_more` is `false`.  When retrieving paginated updates, track both the `next_cursor` from the latest response and the original cursor from the first call in which `has_more` was `true`; if a call to `/processor/transactions/sync` fails when retrieving a paginated update, which can occur as a result of the [`TRANSACTIONS_SYNC_MUTATION_DURING_PAGINATION`](https://plaid.com/docs/errors/transactions/#transactions_sync_mutation_during_pagination) error, the entire pagination request loop must be restarted beginning with the cursor for the first page of the update, rather than retrying only the single request that failed.  Whenever new or updated transaction data becomes available, `/processor/transactions/sync` will provide these updates. Plaid typically checks for new data multiple times a day, but these checks may occur less frequently, such as once a day, depending on the institution. To force Plaid to check for new transactions, use the `/processor/transactions/refresh` endpoint.  Note that for newly created processor tokens, data may not be immediately available to `/processor/transactions/sync`. Plaid begins preparing transactions data when the corresponding Item is created, but the process can take anywhere from a few seconds to several minutes to complete, depending on the number of transactions available.  To receive Transactions webhooks for a processor token, set its webhook URL via the [`/processor/token/webhook/update`](https://plaid.com/docs/api/processors/#processortokenwebhookupdate) endpoint.
    # @required @param processor_transactions_sync_request [Plaid::ProcessorTransactionsSyncRequest?]
    # @return [ProcessorTransactionsSyncResponse]
    def processor_transactions_sync(
      *,
      processor_transactions_sync_request : Plaid::ProcessorTransactionsSyncRequest? = nil
    ) : ProcessorTransactionsSyncResponse
      data, _status_code, _headers = processor_transactions_sync_with_http_info(processor_transactions_sync_request: processor_transactions_sync_request)
      data
    end

    # Get incremental transaction updates on a processor token
    # This endpoint replaces &#x60;/processor/transactions/get&#x60; and its associated webhooks for most common use-cases.  The &#x60;/processor/transactions/sync&#x60; endpoint allows developers to subscribe to all transactions associated with a processor token and get updates synchronously in a stream-like manner, using a cursor to track which updates have already been seen. &#x60;/processor/transactions/sync&#x60; provides the same functionality as &#x60;/processor/transactions/get&#x60; and can be used instead of &#x60;/processor/transactions/get&#x60; to simplify the process of tracking transactions updates.  This endpoint provides user-authorized transaction data for &#x60;credit&#x60;, &#x60;depository&#x60;, and some loan-type accounts (only those with account subtype &#x60;student&#x60;; coverage may be limited). For transaction history from &#x60;investments&#x60; accounts, use &#x60;/investments/transactions/get&#x60; instead.  Returned transactions data is grouped into three types of update, indicating whether the transaction was added, removed, or modified since the last call to the API.  In the first call to &#x60;/processor/transactions/sync&#x60; for a processor token, the endpoint will return all historical transactions data associated with that processor token up until the time of the API call (as \&quot;adds\&quot;), which then generates a &#x60;next_cursor&#x60; for that processor token. In subsequent calls, send the &#x60;next_cursor&#x60; to receive only the changes that have occurred since the previous call.  Due to the potentially large number of transactions associated with a processor token, results are paginated. The &#x60;has_more&#x60; field specifies if additional calls are necessary to fetch all available transaction updates. Call &#x60;/processor/transactions/sync&#x60; with the new cursor, pulling all updates, until &#x60;has_more&#x60; is &#x60;false&#x60;.  When retrieving paginated updates, track both the &#x60;next_cursor&#x60; from the latest response and the original cursor from the first call in which &#x60;has_more&#x60; was &#x60;true&#x60;; if a call to &#x60;/processor/transactions/sync&#x60; fails when retrieving a paginated update, which can occur as a result of the [&#x60;TRANSACTIONS_SYNC_MUTATION_DURING_PAGINATION&#x60;](https://plaid.com/docs/errors/transactions/#transactions_sync_mutation_during_pagination) error, the entire pagination request loop must be restarted beginning with the cursor for the first page of the update, rather than retrying only the single request that failed.  Whenever new or updated transaction data becomes available, &#x60;/processor/transactions/sync&#x60; will provide these updates. Plaid typically checks for new data multiple times a day, but these checks may occur less frequently, such as once a day, depending on the institution. To force Plaid to check for new transactions, use the &#x60;/processor/transactions/refresh&#x60; endpoint.  Note that for newly created processor tokens, data may not be immediately available to &#x60;/processor/transactions/sync&#x60;. Plaid begins preparing transactions data when the corresponding Item is created, but the process can take anywhere from a few seconds to several minutes to complete, depending on the number of transactions available.  To receive Transactions webhooks for a processor token, set its webhook URL via the [&#x60;/processor/token/webhook/update&#x60;](https://plaid.com/docs/api/processors/#processortokenwebhookupdate) endpoint.
    # @required @param processor_transactions_sync_request [Plaid::ProcessorTransactionsSyncRequest?]
    # @return [Tuple(ProcessorTransactionsSyncResponse, Integer, Hash)] ProcessorTransactionsSyncResponse, response status code and response headers
    def processor_transactions_sync_with_http_info(
      *,
      processor_transactions_sync_request : Plaid::ProcessorTransactionsSyncRequest? = nil
    ) : Tuple(ProcessorTransactionsSyncResponse, Int32, Hash(String, Array(String) | String))
      request = build_api_request_for_processor_transactions_sync(processor_transactions_sync_request: processor_transactions_sync_request)

      body, status_code, headers = @api_client.execute_api_request(request)

      if debugging?
        Log.debug { "API called: PlaidApi#processor_transactions_sync\nBody: #{body.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}" }
      end

      Tuple.new(ProcessorTransactionsSyncResponse.from_json(body), status_code, headers)
    end

    # Get incremental transaction updates on a processor token
    # This endpoint replaces &#x60;/processor/transactions/get&#x60; and its associated webhooks for most common use-cases.  The &#x60;/processor/transactions/sync&#x60; endpoint allows developers to subscribe to all transactions associated with a processor token and get updates synchronously in a stream-like manner, using a cursor to track which updates have already been seen. &#x60;/processor/transactions/sync&#x60; provides the same functionality as &#x60;/processor/transactions/get&#x60; and can be used instead of &#x60;/processor/transactions/get&#x60; to simplify the process of tracking transactions updates.  This endpoint provides user-authorized transaction data for &#x60;credit&#x60;, &#x60;depository&#x60;, and some loan-type accounts (only those with account subtype &#x60;student&#x60;; coverage may be limited). For transaction history from &#x60;investments&#x60; accounts, use &#x60;/investments/transactions/get&#x60; instead.  Returned transactions data is grouped into three types of update, indicating whether the transaction was added, removed, or modified since the last call to the API.  In the first call to &#x60;/processor/transactions/sync&#x60; for a processor token, the endpoint will return all historical transactions data associated with that processor token up until the time of the API call (as \&quot;adds\&quot;), which then generates a &#x60;next_cursor&#x60; for that processor token. In subsequent calls, send the &#x60;next_cursor&#x60; to receive only the changes that have occurred since the previous call.  Due to the potentially large number of transactions associated with a processor token, results are paginated. The &#x60;has_more&#x60; field specifies if additional calls are necessary to fetch all available transaction updates. Call &#x60;/processor/transactions/sync&#x60; with the new cursor, pulling all updates, until &#x60;has_more&#x60; is &#x60;false&#x60;.  When retrieving paginated updates, track both the &#x60;next_cursor&#x60; from the latest response and the original cursor from the first call in which &#x60;has_more&#x60; was &#x60;true&#x60;; if a call to &#x60;/processor/transactions/sync&#x60; fails when retrieving a paginated update, which can occur as a result of the [&#x60;TRANSACTIONS_SYNC_MUTATION_DURING_PAGINATION&#x60;](https://plaid.com/docs/errors/transactions/#transactions_sync_mutation_during_pagination) error, the entire pagination request loop must be restarted beginning with the cursor for the first page of the update, rather than retrying only the single request that failed.  Whenever new or updated transaction data becomes available, &#x60;/processor/transactions/sync&#x60; will provide these updates. Plaid typically checks for new data multiple times a day, but these checks may occur less frequently, such as once a day, depending on the institution. To force Plaid to check for new transactions, use the &#x60;/processor/transactions/refresh&#x60; endpoint.  Note that for newly created processor tokens, data may not be immediately available to &#x60;/processor/transactions/sync&#x60;. Plaid begins preparing transactions data when the corresponding Item is created, but the process can take anywhere from a few seconds to several minutes to complete, depending on the number of transactions available.  To receive Transactions webhooks for a processor token, set its webhook URL via the [&#x60;/processor/token/webhook/update&#x60;](https://plaid.com/docs/api/processors/#processortokenwebhookupdate) endpoint.
    # @required @param processor_transactions_sync_request [Plaid::ProcessorTransactionsSyncRequest?]
    # @return nil
    def processor_transactions_sync(
      *,
      processor_transactions_sync_request : Plaid::ProcessorTransactionsSyncRequest? = nil,
      &block : Crest::Response ->
    ) : Nil
      build_api_request_for_processor_transactions_sync(processor_transactions_sync_request: processor_transactions_sync_request).execute(&block)
    end

    # @return Crest::Request
    def build_api_request_for_processor_transactions_sync(
      *,
      processor_transactions_sync_request : Plaid::ProcessorTransactionsSyncRequest? = nil
    ) : Crest::Request
      if debugging?
        Log.debug { "Calling API: PlaidApi.processor_transactions_sync ..." }
      end

      if client_side_validation?
        raise ArgumentError.new("\"processor_transactions_sync_request\" is required and cannot be null") if processor_transactions_sync_request.nil?
        unless (_processor_transactions_sync_request = processor_transactions_sync_request).nil?
          _processor_transactions_sync_request.validate if _processor_transactions_sync_request.is_a?(OpenApi::Validatable)
        end
      end

      # resource path
      local_var_path = "/processor/transactions/sync"

      # header parameters
      header_params : Hash(String, String) = Hash(String, String).new
      # HTTP header "Accept" (if needed)
      header_params["Accept"] = @api_client.select_header_accept(["application/json"])
      # HTTP header "Content-Type"
      header_params["Content-Type"] = @api_client.select_header_content_type(["application/json"])

      # cookie parameters
      cookie_params : Hash(String, String) = Hash(String, String).new

      # query parameters
      query_params : Hash(String, (String | Array(String) | JSON::Any)) = Hash(String, (String | Array(String) | JSON::Any)).new

      # form parameters
      form_params : Array(Tuple(String, Crest::ParamsValue)) | Nil = nil

      # http body (model)
      post_body : IO | String | Nil = @api_client.encode(body: processor_transactions_sync_request, content_type: header_params["Content-Type"]?) if !processor_transactions_sync_request.nil?

      # auth_names
      auth_names = ["clientId", "plaidVersion", "secret"]

      @api_client.build_api_request(
        http_method: :"POST",
        path: local_var_path,
        operation: "PlaidApi.processor_transactions_sync",
        post_body: post_body,
        auth_names: auth_names,
        header_params: header_params,
        cookie_params: cookie_params,
        query_params: query_params,
        form_params: form_params
      )
    end

    # Manually fire a bank income webhook in sandbox
    # Use the `/sandbox/bank_income/fire_webhook` endpoint to manually trigger a Bank Income webhook in the Sandbox environment.
    # @required @param sandbox_bank_income_fire_webhook_request [Plaid::SandboxBankIncomeFireWebhookRequest?]
    # @return [SandboxBankIncomeFireWebhookResponse]
    def sandbox_bank_income_fire_webhook(
      *,
      sandbox_bank_income_fire_webhook_request : Plaid::SandboxBankIncomeFireWebhookRequest? = nil
    ) : SandboxBankIncomeFireWebhookResponse
      data, _status_code, _headers = sandbox_bank_income_fire_webhook_with_http_info(sandbox_bank_income_fire_webhook_request: sandbox_bank_income_fire_webhook_request)
      data
    end

    # Manually fire a bank income webhook in sandbox
    # Use the &#x60;/sandbox/bank_income/fire_webhook&#x60; endpoint to manually trigger a Bank Income webhook in the Sandbox environment.
    # @required @param sandbox_bank_income_fire_webhook_request [Plaid::SandboxBankIncomeFireWebhookRequest?]
    # @return [Tuple(SandboxBankIncomeFireWebhookResponse, Integer, Hash)] SandboxBankIncomeFireWebhookResponse, response status code and response headers
    def sandbox_bank_income_fire_webhook_with_http_info(
      *,
      sandbox_bank_income_fire_webhook_request : Plaid::SandboxBankIncomeFireWebhookRequest? = nil
    ) : Tuple(SandboxBankIncomeFireWebhookResponse, Int32, Hash(String, Array(String) | String))
      request = build_api_request_for_sandbox_bank_income_fire_webhook(sandbox_bank_income_fire_webhook_request: sandbox_bank_income_fire_webhook_request)

      body, status_code, headers = @api_client.execute_api_request(request)

      if debugging?
        Log.debug { "API called: PlaidApi#sandbox_bank_income_fire_webhook\nBody: #{body.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}" }
      end

      Tuple.new(SandboxBankIncomeFireWebhookResponse.from_json(body), status_code, headers)
    end

    # Manually fire a bank income webhook in sandbox
    # Use the &#x60;/sandbox/bank_income/fire_webhook&#x60; endpoint to manually trigger a Bank Income webhook in the Sandbox environment.
    # @required @param sandbox_bank_income_fire_webhook_request [Plaid::SandboxBankIncomeFireWebhookRequest?]
    # @return nil
    def sandbox_bank_income_fire_webhook(
      *,
      sandbox_bank_income_fire_webhook_request : Plaid::SandboxBankIncomeFireWebhookRequest? = nil,
      &block : Crest::Response ->
    ) : Nil
      build_api_request_for_sandbox_bank_income_fire_webhook(sandbox_bank_income_fire_webhook_request: sandbox_bank_income_fire_webhook_request).execute(&block)
    end

    # @return Crest::Request
    def build_api_request_for_sandbox_bank_income_fire_webhook(
      *,
      sandbox_bank_income_fire_webhook_request : Plaid::SandboxBankIncomeFireWebhookRequest? = nil
    ) : Crest::Request
      if debugging?
        Log.debug { "Calling API: PlaidApi.sandbox_bank_income_fire_webhook ..." }
      end

      if client_side_validation?
        raise ArgumentError.new("\"sandbox_bank_income_fire_webhook_request\" is required and cannot be null") if sandbox_bank_income_fire_webhook_request.nil?
        unless (_sandbox_bank_income_fire_webhook_request = sandbox_bank_income_fire_webhook_request).nil?
          _sandbox_bank_income_fire_webhook_request.validate if _sandbox_bank_income_fire_webhook_request.is_a?(OpenApi::Validatable)
        end
      end

      # resource path
      local_var_path = "/sandbox/bank_income/fire_webhook"

      # header parameters
      header_params : Hash(String, String) = Hash(String, String).new
      # HTTP header "Accept" (if needed)
      header_params["Accept"] = @api_client.select_header_accept(["application/json"])
      # HTTP header "Content-Type"
      header_params["Content-Type"] = @api_client.select_header_content_type(["application/json"])

      # cookie parameters
      cookie_params : Hash(String, String) = Hash(String, String).new

      # query parameters
      query_params : Hash(String, (String | Array(String) | JSON::Any)) = Hash(String, (String | Array(String) | JSON::Any)).new

      # form parameters
      form_params : Array(Tuple(String, Crest::ParamsValue)) | Nil = nil

      # http body (model)
      post_body : IO | String | Nil = @api_client.encode(body: sandbox_bank_income_fire_webhook_request, content_type: header_params["Content-Type"]?) if !sandbox_bank_income_fire_webhook_request.nil?

      # auth_names
      auth_names = ["clientId", "plaidVersion", "secret"]

      @api_client.build_api_request(
        http_method: :"POST",
        path: local_var_path,
        operation: "PlaidApi.sandbox_bank_income_fire_webhook",
        post_body: post_body,
        auth_names: auth_names,
        header_params: header_params,
        cookie_params: cookie_params,
        query_params: query_params,
        form_params: form_params
      )
    end

    # Manually fire a Bank Transfer webhook
    # Use the `/sandbox/bank_transfer/fire_webhook` endpoint to manually trigger a Bank Transfers webhook in the Sandbox environment.
    # @required @param sandbox_bank_transfer_fire_webhook_request [Plaid::SandboxBankTransferFireWebhookRequest?]
    # @return [SandboxBankTransferFireWebhookResponse]
    def sandbox_bank_transfer_fire_webhook(
      *,
      sandbox_bank_transfer_fire_webhook_request : Plaid::SandboxBankTransferFireWebhookRequest? = nil
    ) : SandboxBankTransferFireWebhookResponse
      data, _status_code, _headers = sandbox_bank_transfer_fire_webhook_with_http_info(sandbox_bank_transfer_fire_webhook_request: sandbox_bank_transfer_fire_webhook_request)
      data
    end

    # Manually fire a Bank Transfer webhook
    # Use the &#x60;/sandbox/bank_transfer/fire_webhook&#x60; endpoint to manually trigger a Bank Transfers webhook in the Sandbox environment.
    # @required @param sandbox_bank_transfer_fire_webhook_request [Plaid::SandboxBankTransferFireWebhookRequest?]
    # @return [Tuple(SandboxBankTransferFireWebhookResponse, Integer, Hash)] SandboxBankTransferFireWebhookResponse, response status code and response headers
    def sandbox_bank_transfer_fire_webhook_with_http_info(
      *,
      sandbox_bank_transfer_fire_webhook_request : Plaid::SandboxBankTransferFireWebhookRequest? = nil
    ) : Tuple(SandboxBankTransferFireWebhookResponse, Int32, Hash(String, Array(String) | String))
      request = build_api_request_for_sandbox_bank_transfer_fire_webhook(sandbox_bank_transfer_fire_webhook_request: sandbox_bank_transfer_fire_webhook_request)

      body, status_code, headers = @api_client.execute_api_request(request)

      if debugging?
        Log.debug { "API called: PlaidApi#sandbox_bank_transfer_fire_webhook\nBody: #{body.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}" }
      end

      Tuple.new(SandboxBankTransferFireWebhookResponse.from_json(body), status_code, headers)
    end

    # Manually fire a Bank Transfer webhook
    # Use the &#x60;/sandbox/bank_transfer/fire_webhook&#x60; endpoint to manually trigger a Bank Transfers webhook in the Sandbox environment.
    # @required @param sandbox_bank_transfer_fire_webhook_request [Plaid::SandboxBankTransferFireWebhookRequest?]
    # @return nil
    def sandbox_bank_transfer_fire_webhook(
      *,
      sandbox_bank_transfer_fire_webhook_request : Plaid::SandboxBankTransferFireWebhookRequest? = nil,
      &block : Crest::Response ->
    ) : Nil
      build_api_request_for_sandbox_bank_transfer_fire_webhook(sandbox_bank_transfer_fire_webhook_request: sandbox_bank_transfer_fire_webhook_request).execute(&block)
    end

    # @return Crest::Request
    def build_api_request_for_sandbox_bank_transfer_fire_webhook(
      *,
      sandbox_bank_transfer_fire_webhook_request : Plaid::SandboxBankTransferFireWebhookRequest? = nil
    ) : Crest::Request
      if debugging?
        Log.debug { "Calling API: PlaidApi.sandbox_bank_transfer_fire_webhook ..." }
      end

      if client_side_validation?
        raise ArgumentError.new("\"sandbox_bank_transfer_fire_webhook_request\" is required and cannot be null") if sandbox_bank_transfer_fire_webhook_request.nil?
        unless (_sandbox_bank_transfer_fire_webhook_request = sandbox_bank_transfer_fire_webhook_request).nil?
          _sandbox_bank_transfer_fire_webhook_request.validate if _sandbox_bank_transfer_fire_webhook_request.is_a?(OpenApi::Validatable)
        end
      end

      # resource path
      local_var_path = "/sandbox/bank_transfer/fire_webhook"

      # header parameters
      header_params : Hash(String, String) = Hash(String, String).new
      # HTTP header "Accept" (if needed)
      header_params["Accept"] = @api_client.select_header_accept(["application/json"])
      # HTTP header "Content-Type"
      header_params["Content-Type"] = @api_client.select_header_content_type(["application/json"])

      # cookie parameters
      cookie_params : Hash(String, String) = Hash(String, String).new

      # query parameters
      query_params : Hash(String, (String | Array(String) | JSON::Any)) = Hash(String, (String | Array(String) | JSON::Any)).new

      # form parameters
      form_params : Array(Tuple(String, Crest::ParamsValue)) | Nil = nil

      # http body (model)
      post_body : IO | String | Nil = @api_client.encode(body: sandbox_bank_transfer_fire_webhook_request, content_type: header_params["Content-Type"]?) if !sandbox_bank_transfer_fire_webhook_request.nil?

      # auth_names
      auth_names = ["clientId", "plaidVersion", "secret"]

      @api_client.build_api_request(
        http_method: :"POST",
        path: local_var_path,
        operation: "PlaidApi.sandbox_bank_transfer_fire_webhook",
        post_body: post_body,
        auth_names: auth_names,
        header_params: header_params,
        cookie_params: cookie_params,
        query_params: query_params,
        form_params: form_params
      )
    end

    # Simulate a bank transfer event in Sandbox
    # Use the `/sandbox/bank_transfer/simulate` endpoint to simulate a bank transfer event in the Sandbox environment.  Note that while an event will be simulated and will appear when using endpoints such as `/bank_transfer/event/sync` or `/bank_transfer/event/list`, no transactions will actually take place and funds will not move between accounts, even within the Sandbox.
    # @required @param sandbox_bank_transfer_simulate_request [Plaid::SandboxBankTransferSimulateRequest?]
    # @return [SandboxBankTransferSimulateResponse]
    def sandbox_bank_transfer_simulate(
      *,
      sandbox_bank_transfer_simulate_request : Plaid::SandboxBankTransferSimulateRequest? = nil
    ) : SandboxBankTransferSimulateResponse
      data, _status_code, _headers = sandbox_bank_transfer_simulate_with_http_info(sandbox_bank_transfer_simulate_request: sandbox_bank_transfer_simulate_request)
      data
    end

    # Simulate a bank transfer event in Sandbox
    # Use the &#x60;/sandbox/bank_transfer/simulate&#x60; endpoint to simulate a bank transfer event in the Sandbox environment.  Note that while an event will be simulated and will appear when using endpoints such as &#x60;/bank_transfer/event/sync&#x60; or &#x60;/bank_transfer/event/list&#x60;, no transactions will actually take place and funds will not move between accounts, even within the Sandbox.
    # @required @param sandbox_bank_transfer_simulate_request [Plaid::SandboxBankTransferSimulateRequest?]
    # @return [Tuple(SandboxBankTransferSimulateResponse, Integer, Hash)] SandboxBankTransferSimulateResponse, response status code and response headers
    def sandbox_bank_transfer_simulate_with_http_info(
      *,
      sandbox_bank_transfer_simulate_request : Plaid::SandboxBankTransferSimulateRequest? = nil
    ) : Tuple(SandboxBankTransferSimulateResponse, Int32, Hash(String, Array(String) | String))
      request = build_api_request_for_sandbox_bank_transfer_simulate(sandbox_bank_transfer_simulate_request: sandbox_bank_transfer_simulate_request)

      body, status_code, headers = @api_client.execute_api_request(request)

      if debugging?
        Log.debug { "API called: PlaidApi#sandbox_bank_transfer_simulate\nBody: #{body.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}" }
      end

      Tuple.new(SandboxBankTransferSimulateResponse.from_json(body), status_code, headers)
    end

    # Simulate a bank transfer event in Sandbox
    # Use the &#x60;/sandbox/bank_transfer/simulate&#x60; endpoint to simulate a bank transfer event in the Sandbox environment.  Note that while an event will be simulated and will appear when using endpoints such as &#x60;/bank_transfer/event/sync&#x60; or &#x60;/bank_transfer/event/list&#x60;, no transactions will actually take place and funds will not move between accounts, even within the Sandbox.
    # @required @param sandbox_bank_transfer_simulate_request [Plaid::SandboxBankTransferSimulateRequest?]
    # @return nil
    def sandbox_bank_transfer_simulate(
      *,
      sandbox_bank_transfer_simulate_request : Plaid::SandboxBankTransferSimulateRequest? = nil,
      &block : Crest::Response ->
    ) : Nil
      build_api_request_for_sandbox_bank_transfer_simulate(sandbox_bank_transfer_simulate_request: sandbox_bank_transfer_simulate_request).execute(&block)
    end

    # @return Crest::Request
    def build_api_request_for_sandbox_bank_transfer_simulate(
      *,
      sandbox_bank_transfer_simulate_request : Plaid::SandboxBankTransferSimulateRequest? = nil
    ) : Crest::Request
      if debugging?
        Log.debug { "Calling API: PlaidApi.sandbox_bank_transfer_simulate ..." }
      end

      if client_side_validation?
        raise ArgumentError.new("\"sandbox_bank_transfer_simulate_request\" is required and cannot be null") if sandbox_bank_transfer_simulate_request.nil?
        unless (_sandbox_bank_transfer_simulate_request = sandbox_bank_transfer_simulate_request).nil?
          _sandbox_bank_transfer_simulate_request.validate if _sandbox_bank_transfer_simulate_request.is_a?(OpenApi::Validatable)
        end
      end

      # resource path
      local_var_path = "/sandbox/bank_transfer/simulate"

      # header parameters
      header_params : Hash(String, String) = Hash(String, String).new
      # HTTP header "Accept" (if needed)
      header_params["Accept"] = @api_client.select_header_accept(["application/json"])
      # HTTP header "Content-Type"
      header_params["Content-Type"] = @api_client.select_header_content_type(["application/json"])

      # cookie parameters
      cookie_params : Hash(String, String) = Hash(String, String).new

      # query parameters
      query_params : Hash(String, (String | Array(String) | JSON::Any)) = Hash(String, (String | Array(String) | JSON::Any)).new

      # form parameters
      form_params : Array(Tuple(String, Crest::ParamsValue)) | Nil = nil

      # http body (model)
      post_body : IO | String | Nil = @api_client.encode(body: sandbox_bank_transfer_simulate_request, content_type: header_params["Content-Type"]?) if !sandbox_bank_transfer_simulate_request.nil?

      # auth_names
      auth_names = ["clientId", "plaidVersion", "secret"]

      @api_client.build_api_request(
        http_method: :"POST",
        path: local_var_path,
        operation: "PlaidApi.sandbox_bank_transfer_simulate",
        post_body: post_body,
        auth_names: auth_names,
        header_params: header_params,
        cookie_params: cookie_params,
        query_params: query_params,
        form_params: form_params
      )
    end

    # Manually fire an Income webhook
    # Use the `/sandbox/income/fire_webhook` endpoint to manually trigger a Payroll or Document Income webhook in the Sandbox environment.
    # @required @param sandbox_income_fire_webhook_request [Plaid::SandboxIncomeFireWebhookRequest?]
    # @return [SandboxIncomeFireWebhookResponse]
    def sandbox_income_fire_webhook(
      *,
      sandbox_income_fire_webhook_request : Plaid::SandboxIncomeFireWebhookRequest? = nil
    ) : SandboxIncomeFireWebhookResponse
      data, _status_code, _headers = sandbox_income_fire_webhook_with_http_info(sandbox_income_fire_webhook_request: sandbox_income_fire_webhook_request)
      data
    end

    # Manually fire an Income webhook
    # Use the &#x60;/sandbox/income/fire_webhook&#x60; endpoint to manually trigger a Payroll or Document Income webhook in the Sandbox environment.
    # @required @param sandbox_income_fire_webhook_request [Plaid::SandboxIncomeFireWebhookRequest?]
    # @return [Tuple(SandboxIncomeFireWebhookResponse, Integer, Hash)] SandboxIncomeFireWebhookResponse, response status code and response headers
    def sandbox_income_fire_webhook_with_http_info(
      *,
      sandbox_income_fire_webhook_request : Plaid::SandboxIncomeFireWebhookRequest? = nil
    ) : Tuple(SandboxIncomeFireWebhookResponse, Int32, Hash(String, Array(String) | String))
      request = build_api_request_for_sandbox_income_fire_webhook(sandbox_income_fire_webhook_request: sandbox_income_fire_webhook_request)

      body, status_code, headers = @api_client.execute_api_request(request)

      if debugging?
        Log.debug { "API called: PlaidApi#sandbox_income_fire_webhook\nBody: #{body.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}" }
      end

      Tuple.new(SandboxIncomeFireWebhookResponse.from_json(body), status_code, headers)
    end

    # Manually fire an Income webhook
    # Use the &#x60;/sandbox/income/fire_webhook&#x60; endpoint to manually trigger a Payroll or Document Income webhook in the Sandbox environment.
    # @required @param sandbox_income_fire_webhook_request [Plaid::SandboxIncomeFireWebhookRequest?]
    # @return nil
    def sandbox_income_fire_webhook(
      *,
      sandbox_income_fire_webhook_request : Plaid::SandboxIncomeFireWebhookRequest? = nil,
      &block : Crest::Response ->
    ) : Nil
      build_api_request_for_sandbox_income_fire_webhook(sandbox_income_fire_webhook_request: sandbox_income_fire_webhook_request).execute(&block)
    end

    # @return Crest::Request
    def build_api_request_for_sandbox_income_fire_webhook(
      *,
      sandbox_income_fire_webhook_request : Plaid::SandboxIncomeFireWebhookRequest? = nil
    ) : Crest::Request
      if debugging?
        Log.debug { "Calling API: PlaidApi.sandbox_income_fire_webhook ..." }
      end

      if client_side_validation?
        raise ArgumentError.new("\"sandbox_income_fire_webhook_request\" is required and cannot be null") if sandbox_income_fire_webhook_request.nil?
        unless (_sandbox_income_fire_webhook_request = sandbox_income_fire_webhook_request).nil?
          _sandbox_income_fire_webhook_request.validate if _sandbox_income_fire_webhook_request.is_a?(OpenApi::Validatable)
        end
      end

      # resource path
      local_var_path = "/sandbox/income/fire_webhook"

      # header parameters
      header_params : Hash(String, String) = Hash(String, String).new
      # HTTP header "Accept" (if needed)
      header_params["Accept"] = @api_client.select_header_accept(["application/json"])
      # HTTP header "Content-Type"
      header_params["Content-Type"] = @api_client.select_header_content_type(["application/json"])

      # cookie parameters
      cookie_params : Hash(String, String) = Hash(String, String).new

      # query parameters
      query_params : Hash(String, (String | Array(String) | JSON::Any)) = Hash(String, (String | Array(String) | JSON::Any)).new

      # form parameters
      form_params : Array(Tuple(String, Crest::ParamsValue)) | Nil = nil

      # http body (model)
      post_body : IO | String | Nil = @api_client.encode(body: sandbox_income_fire_webhook_request, content_type: header_params["Content-Type"]?) if !sandbox_income_fire_webhook_request.nil?

      # auth_names
      auth_names = ["clientId", "plaidVersion", "secret"]

      @api_client.build_api_request(
        http_method: :"POST",
        path: local_var_path,
        operation: "PlaidApi.sandbox_income_fire_webhook",
        post_body: post_body,
        auth_names: auth_names,
        header_params: header_params,
        cookie_params: cookie_params,
        query_params: query_params,
        form_params: form_params
      )
    end

    # Fire a test webhook
    # The `/sandbox/item/fire_webhook` endpoint is used to test that code correctly handles webhooks. This endpoint can trigger the following webhooks:  `DEFAULT_UPDATE`: Transactions update webhook to be fired for a given Sandbox Item. If the Item does not support Transactions, a `SANDBOX_PRODUCT_NOT_ENABLED` error will result.  `NEW_ACCOUNTS_AVAILABLE`: Webhook to be fired for a given Sandbox Item created with Account Select v2.  `AUTH_DATA_UPDATE`: Webhook to be fired for a given Sandbox Item created with Auth as an enabled product.  `LOGIN_REPAIRED`: Fired when an Item recovers from the `ITEM_LOGIN_REQUIRED` without the user going through update mode in your app.  `RECURRING_TRANSACTIONS_UPDATE`: Recurring Transactions webhook to be fired for a given Sandbox Item. If the Item does not support Recurring Transactions, a `SANDBOX_PRODUCT_NOT_ENABLED` error will result.  `SYNC_UPDATES_AVAILABLE`: Transactions webhook to be fired for a given Sandbox Item.  If the Item does not support Transactions, a `SANDBOX_PRODUCT_NOT_ENABLED` error will result.  `PRODUCT_READY`: Assets webhook to be fired when a given asset report has been successfully generated. If the Item does not support Assets, a `SANDBOX_PRODUCT_NOT_ENABLED` error will result.  `ERROR`: Assets webhook to be fired when asset report generation has failed. If the Item does not support Assets, a `SANDBOX_PRODUCT_NOT_ENABLED` error will result.  Note that this endpoint is provided for developer ease-of-use and is not required for testing webhooks; webhooks will also fire in Sandbox under the same conditions that they would in Production or Development (except for webhooks of type `TRANSFER`).
    # @required @param sandbox_item_fire_webhook_request [Plaid::SandboxItemFireWebhookRequest?]
    # @return [SandboxItemFireWebhookResponse]
    def sandbox_item_fire_webhook(
      *,
      sandbox_item_fire_webhook_request : Plaid::SandboxItemFireWebhookRequest? = nil
    ) : SandboxItemFireWebhookResponse
      data, _status_code, _headers = sandbox_item_fire_webhook_with_http_info(sandbox_item_fire_webhook_request: sandbox_item_fire_webhook_request)
      data
    end

    # Fire a test webhook
    # The &#x60;/sandbox/item/fire_webhook&#x60; endpoint is used to test that code correctly handles webhooks. This endpoint can trigger the following webhooks:  &#x60;DEFAULT_UPDATE&#x60;: Transactions update webhook to be fired for a given Sandbox Item. If the Item does not support Transactions, a &#x60;SANDBOX_PRODUCT_NOT_ENABLED&#x60; error will result.  &#x60;NEW_ACCOUNTS_AVAILABLE&#x60;: Webhook to be fired for a given Sandbox Item created with Account Select v2.  &#x60;AUTH_DATA_UPDATE&#x60;: Webhook to be fired for a given Sandbox Item created with Auth as an enabled product.  &#x60;LOGIN_REPAIRED&#x60;: Fired when an Item recovers from the &#x60;ITEM_LOGIN_REQUIRED&#x60; without the user going through update mode in your app.  &#x60;RECURRING_TRANSACTIONS_UPDATE&#x60;: Recurring Transactions webhook to be fired for a given Sandbox Item. If the Item does not support Recurring Transactions, a &#x60;SANDBOX_PRODUCT_NOT_ENABLED&#x60; error will result.  &#x60;SYNC_UPDATES_AVAILABLE&#x60;: Transactions webhook to be fired for a given Sandbox Item.  If the Item does not support Transactions, a &#x60;SANDBOX_PRODUCT_NOT_ENABLED&#x60; error will result.  &#x60;PRODUCT_READY&#x60;: Assets webhook to be fired when a given asset report has been successfully generated. If the Item does not support Assets, a &#x60;SANDBOX_PRODUCT_NOT_ENABLED&#x60; error will result.  &#x60;ERROR&#x60;: Assets webhook to be fired when asset report generation has failed. If the Item does not support Assets, a &#x60;SANDBOX_PRODUCT_NOT_ENABLED&#x60; error will result.  Note that this endpoint is provided for developer ease-of-use and is not required for testing webhooks; webhooks will also fire in Sandbox under the same conditions that they would in Production or Development (except for webhooks of type &#x60;TRANSFER&#x60;).
    # @required @param sandbox_item_fire_webhook_request [Plaid::SandboxItemFireWebhookRequest?]
    # @return [Tuple(SandboxItemFireWebhookResponse, Integer, Hash)] SandboxItemFireWebhookResponse, response status code and response headers
    def sandbox_item_fire_webhook_with_http_info(
      *,
      sandbox_item_fire_webhook_request : Plaid::SandboxItemFireWebhookRequest? = nil
    ) : Tuple(SandboxItemFireWebhookResponse, Int32, Hash(String, Array(String) | String))
      request = build_api_request_for_sandbox_item_fire_webhook(sandbox_item_fire_webhook_request: sandbox_item_fire_webhook_request)

      body, status_code, headers = @api_client.execute_api_request(request)

      if debugging?
        Log.debug { "API called: PlaidApi#sandbox_item_fire_webhook\nBody: #{body.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}" }
      end

      Tuple.new(SandboxItemFireWebhookResponse.from_json(body), status_code, headers)
    end

    # Fire a test webhook
    # The &#x60;/sandbox/item/fire_webhook&#x60; endpoint is used to test that code correctly handles webhooks. This endpoint can trigger the following webhooks:  &#x60;DEFAULT_UPDATE&#x60;: Transactions update webhook to be fired for a given Sandbox Item. If the Item does not support Transactions, a &#x60;SANDBOX_PRODUCT_NOT_ENABLED&#x60; error will result.  &#x60;NEW_ACCOUNTS_AVAILABLE&#x60;: Webhook to be fired for a given Sandbox Item created with Account Select v2.  &#x60;AUTH_DATA_UPDATE&#x60;: Webhook to be fired for a given Sandbox Item created with Auth as an enabled product.  &#x60;LOGIN_REPAIRED&#x60;: Fired when an Item recovers from the &#x60;ITEM_LOGIN_REQUIRED&#x60; without the user going through update mode in your app.  &#x60;RECURRING_TRANSACTIONS_UPDATE&#x60;: Recurring Transactions webhook to be fired for a given Sandbox Item. If the Item does not support Recurring Transactions, a &#x60;SANDBOX_PRODUCT_NOT_ENABLED&#x60; error will result.  &#x60;SYNC_UPDATES_AVAILABLE&#x60;: Transactions webhook to be fired for a given Sandbox Item.  If the Item does not support Transactions, a &#x60;SANDBOX_PRODUCT_NOT_ENABLED&#x60; error will result.  &#x60;PRODUCT_READY&#x60;: Assets webhook to be fired when a given asset report has been successfully generated. If the Item does not support Assets, a &#x60;SANDBOX_PRODUCT_NOT_ENABLED&#x60; error will result.  &#x60;ERROR&#x60;: Assets webhook to be fired when asset report generation has failed. If the Item does not support Assets, a &#x60;SANDBOX_PRODUCT_NOT_ENABLED&#x60; error will result.  Note that this endpoint is provided for developer ease-of-use and is not required for testing webhooks; webhooks will also fire in Sandbox under the same conditions that they would in Production or Development (except for webhooks of type &#x60;TRANSFER&#x60;).
    # @required @param sandbox_item_fire_webhook_request [Plaid::SandboxItemFireWebhookRequest?]
    # @return nil
    def sandbox_item_fire_webhook(
      *,
      sandbox_item_fire_webhook_request : Plaid::SandboxItemFireWebhookRequest? = nil,
      &block : Crest::Response ->
    ) : Nil
      build_api_request_for_sandbox_item_fire_webhook(sandbox_item_fire_webhook_request: sandbox_item_fire_webhook_request).execute(&block)
    end

    # @return Crest::Request
    def build_api_request_for_sandbox_item_fire_webhook(
      *,
      sandbox_item_fire_webhook_request : Plaid::SandboxItemFireWebhookRequest? = nil
    ) : Crest::Request
      if debugging?
        Log.debug { "Calling API: PlaidApi.sandbox_item_fire_webhook ..." }
      end

      if client_side_validation?
        raise ArgumentError.new("\"sandbox_item_fire_webhook_request\" is required and cannot be null") if sandbox_item_fire_webhook_request.nil?
        unless (_sandbox_item_fire_webhook_request = sandbox_item_fire_webhook_request).nil?
          _sandbox_item_fire_webhook_request.validate if _sandbox_item_fire_webhook_request.is_a?(OpenApi::Validatable)
        end
      end

      # resource path
      local_var_path = "/sandbox/item/fire_webhook"

      # header parameters
      header_params : Hash(String, String) = Hash(String, String).new
      # HTTP header "Accept" (if needed)
      header_params["Accept"] = @api_client.select_header_accept(["application/json"])
      # HTTP header "Content-Type"
      header_params["Content-Type"] = @api_client.select_header_content_type(["application/json"])

      # cookie parameters
      cookie_params : Hash(String, String) = Hash(String, String).new

      # query parameters
      query_params : Hash(String, (String | Array(String) | JSON::Any)) = Hash(String, (String | Array(String) | JSON::Any)).new

      # form parameters
      form_params : Array(Tuple(String, Crest::ParamsValue)) | Nil = nil

      # http body (model)
      post_body : IO | String | Nil = @api_client.encode(body: sandbox_item_fire_webhook_request, content_type: header_params["Content-Type"]?) if !sandbox_item_fire_webhook_request.nil?

      # auth_names
      auth_names = ["clientId", "plaidVersion", "secret"]

      @api_client.build_api_request(
        http_method: :"POST",
        path: local_var_path,
        operation: "PlaidApi.sandbox_item_fire_webhook",
        post_body: post_body,
        auth_names: auth_names,
        header_params: header_params,
        cookie_params: cookie_params,
        query_params: query_params,
        form_params: form_params
      )
    end

    # Force a Sandbox Item into an error state
    # `/sandbox/item/reset_login/` forces an Item into an `ITEM_LOGIN_REQUIRED` state in order to simulate an Item whose login is no longer valid. This makes it easy to test Link's [update mode](https://plaid.com/docs/link/update-mode) flow in the Sandbox environment.  After calling `/sandbox/item/reset_login`, You can then use Plaid Link update mode to restore the Item to a good state. An `ITEM_LOGIN_REQUIRED` webhook will also be fired after a call to this endpoint, if one is associated with the Item.   In the Sandbox, Items will transition to an `ITEM_LOGIN_REQUIRED` error state automatically after 30 days, even if this endpoint is not called.
    # @required @param sandbox_item_reset_login_request [Plaid::SandboxItemResetLoginRequest?]
    # @return [SandboxItemResetLoginResponse]
    def sandbox_item_reset_login(
      *,
      sandbox_item_reset_login_request : Plaid::SandboxItemResetLoginRequest? = nil
    ) : SandboxItemResetLoginResponse
      data, _status_code, _headers = sandbox_item_reset_login_with_http_info(sandbox_item_reset_login_request: sandbox_item_reset_login_request)
      data
    end

    # Force a Sandbox Item into an error state
    # &#x60;/sandbox/item/reset_login/&#x60; forces an Item into an &#x60;ITEM_LOGIN_REQUIRED&#x60; state in order to simulate an Item whose login is no longer valid. This makes it easy to test Link&#39;s [update mode](https://plaid.com/docs/link/update-mode) flow in the Sandbox environment.  After calling &#x60;/sandbox/item/reset_login&#x60;, You can then use Plaid Link update mode to restore the Item to a good state. An &#x60;ITEM_LOGIN_REQUIRED&#x60; webhook will also be fired after a call to this endpoint, if one is associated with the Item.   In the Sandbox, Items will transition to an &#x60;ITEM_LOGIN_REQUIRED&#x60; error state automatically after 30 days, even if this endpoint is not called.
    # @required @param sandbox_item_reset_login_request [Plaid::SandboxItemResetLoginRequest?]
    # @return [Tuple(SandboxItemResetLoginResponse, Integer, Hash)] SandboxItemResetLoginResponse, response status code and response headers
    def sandbox_item_reset_login_with_http_info(
      *,
      sandbox_item_reset_login_request : Plaid::SandboxItemResetLoginRequest? = nil
    ) : Tuple(SandboxItemResetLoginResponse, Int32, Hash(String, Array(String) | String))
      request = build_api_request_for_sandbox_item_reset_login(sandbox_item_reset_login_request: sandbox_item_reset_login_request)

      body, status_code, headers = @api_client.execute_api_request(request)

      if debugging?
        Log.debug { "API called: PlaidApi#sandbox_item_reset_login\nBody: #{body.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}" }
      end

      Tuple.new(SandboxItemResetLoginResponse.from_json(body), status_code, headers)
    end

    # Force a Sandbox Item into an error state
    # &#x60;/sandbox/item/reset_login/&#x60; forces an Item into an &#x60;ITEM_LOGIN_REQUIRED&#x60; state in order to simulate an Item whose login is no longer valid. This makes it easy to test Link&#39;s [update mode](https://plaid.com/docs/link/update-mode) flow in the Sandbox environment.  After calling &#x60;/sandbox/item/reset_login&#x60;, You can then use Plaid Link update mode to restore the Item to a good state. An &#x60;ITEM_LOGIN_REQUIRED&#x60; webhook will also be fired after a call to this endpoint, if one is associated with the Item.   In the Sandbox, Items will transition to an &#x60;ITEM_LOGIN_REQUIRED&#x60; error state automatically after 30 days, even if this endpoint is not called.
    # @required @param sandbox_item_reset_login_request [Plaid::SandboxItemResetLoginRequest?]
    # @return nil
    def sandbox_item_reset_login(
      *,
      sandbox_item_reset_login_request : Plaid::SandboxItemResetLoginRequest? = nil,
      &block : Crest::Response ->
    ) : Nil
      build_api_request_for_sandbox_item_reset_login(sandbox_item_reset_login_request: sandbox_item_reset_login_request).execute(&block)
    end

    # @return Crest::Request
    def build_api_request_for_sandbox_item_reset_login(
      *,
      sandbox_item_reset_login_request : Plaid::SandboxItemResetLoginRequest? = nil
    ) : Crest::Request
      if debugging?
        Log.debug { "Calling API: PlaidApi.sandbox_item_reset_login ..." }
      end

      if client_side_validation?
        raise ArgumentError.new("\"sandbox_item_reset_login_request\" is required and cannot be null") if sandbox_item_reset_login_request.nil?
        unless (_sandbox_item_reset_login_request = sandbox_item_reset_login_request).nil?
          _sandbox_item_reset_login_request.validate if _sandbox_item_reset_login_request.is_a?(OpenApi::Validatable)
        end
      end

      # resource path
      local_var_path = "/sandbox/item/reset_login"

      # header parameters
      header_params : Hash(String, String) = Hash(String, String).new
      # HTTP header "Accept" (if needed)
      header_params["Accept"] = @api_client.select_header_accept(["application/json"])
      # HTTP header "Content-Type"
      header_params["Content-Type"] = @api_client.select_header_content_type(["application/json"])

      # cookie parameters
      cookie_params : Hash(String, String) = Hash(String, String).new

      # query parameters
      query_params : Hash(String, (String | Array(String) | JSON::Any)) = Hash(String, (String | Array(String) | JSON::Any)).new

      # form parameters
      form_params : Array(Tuple(String, Crest::ParamsValue)) | Nil = nil

      # http body (model)
      post_body : IO | String | Nil = @api_client.encode(body: sandbox_item_reset_login_request, content_type: header_params["Content-Type"]?) if !sandbox_item_reset_login_request.nil?

      # auth_names
      auth_names = ["clientId", "plaidVersion", "secret"]

      @api_client.build_api_request(
        http_method: :"POST",
        path: local_var_path,
        operation: "PlaidApi.sandbox_item_reset_login",
        post_body: post_body,
        auth_names: auth_names,
        header_params: header_params,
        cookie_params: cookie_params,
        query_params: query_params,
        form_params: form_params
      )
    end

    # Set verification status for Sandbox account
    # The `/sandbox/item/set_verification_status` endpoint can be used to change the verification status of an Item in in the Sandbox in order to simulate the Automated Micro-deposit flow.  Note that not all Plaid developer accounts are enabled for micro-deposit based verification by default. Your account must be enabled for this feature in order to test it in Sandbox. To enable this features or check your status, contact your account manager or [submit a product access Support ticket](https://dashboard.plaid.com/support/new/product-and-development/product-troubleshooting/request-product-access).  For more information on testing Automated Micro-deposits in Sandbox, see [Auth full coverage testing](https://plaid.com/docs/auth/coverage/testing#).
    # @required @param sandbox_item_set_verification_status_request [Plaid::SandboxItemSetVerificationStatusRequest?]
    # @return [SandboxItemSetVerificationStatusResponse]
    def sandbox_item_set_verification_status(
      *,
      sandbox_item_set_verification_status_request : Plaid::SandboxItemSetVerificationStatusRequest? = nil
    ) : SandboxItemSetVerificationStatusResponse
      data, _status_code, _headers = sandbox_item_set_verification_status_with_http_info(sandbox_item_set_verification_status_request: sandbox_item_set_verification_status_request)
      data
    end

    # Set verification status for Sandbox account
    # The &#x60;/sandbox/item/set_verification_status&#x60; endpoint can be used to change the verification status of an Item in in the Sandbox in order to simulate the Automated Micro-deposit flow.  Note that not all Plaid developer accounts are enabled for micro-deposit based verification by default. Your account must be enabled for this feature in order to test it in Sandbox. To enable this features or check your status, contact your account manager or [submit a product access Support ticket](https://dashboard.plaid.com/support/new/product-and-development/product-troubleshooting/request-product-access).  For more information on testing Automated Micro-deposits in Sandbox, see [Auth full coverage testing](https://plaid.com/docs/auth/coverage/testing#).
    # @required @param sandbox_item_set_verification_status_request [Plaid::SandboxItemSetVerificationStatusRequest?]
    # @return [Tuple(SandboxItemSetVerificationStatusResponse, Integer, Hash)] SandboxItemSetVerificationStatusResponse, response status code and response headers
    def sandbox_item_set_verification_status_with_http_info(
      *,
      sandbox_item_set_verification_status_request : Plaid::SandboxItemSetVerificationStatusRequest? = nil
    ) : Tuple(SandboxItemSetVerificationStatusResponse, Int32, Hash(String, Array(String) | String))
      request = build_api_request_for_sandbox_item_set_verification_status(sandbox_item_set_verification_status_request: sandbox_item_set_verification_status_request)

      body, status_code, headers = @api_client.execute_api_request(request)

      if debugging?
        Log.debug { "API called: PlaidApi#sandbox_item_set_verification_status\nBody: #{body.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}" }
      end

      Tuple.new(SandboxItemSetVerificationStatusResponse.from_json(body), status_code, headers)
    end

    # Set verification status for Sandbox account
    # The &#x60;/sandbox/item/set_verification_status&#x60; endpoint can be used to change the verification status of an Item in in the Sandbox in order to simulate the Automated Micro-deposit flow.  Note that not all Plaid developer accounts are enabled for micro-deposit based verification by default. Your account must be enabled for this feature in order to test it in Sandbox. To enable this features or check your status, contact your account manager or [submit a product access Support ticket](https://dashboard.plaid.com/support/new/product-and-development/product-troubleshooting/request-product-access).  For more information on testing Automated Micro-deposits in Sandbox, see [Auth full coverage testing](https://plaid.com/docs/auth/coverage/testing#).
    # @required @param sandbox_item_set_verification_status_request [Plaid::SandboxItemSetVerificationStatusRequest?]
    # @return nil
    def sandbox_item_set_verification_status(
      *,
      sandbox_item_set_verification_status_request : Plaid::SandboxItemSetVerificationStatusRequest? = nil,
      &block : Crest::Response ->
    ) : Nil
      build_api_request_for_sandbox_item_set_verification_status(sandbox_item_set_verification_status_request: sandbox_item_set_verification_status_request).execute(&block)
    end

    # @return Crest::Request
    def build_api_request_for_sandbox_item_set_verification_status(
      *,
      sandbox_item_set_verification_status_request : Plaid::SandboxItemSetVerificationStatusRequest? = nil
    ) : Crest::Request
      if debugging?
        Log.debug { "Calling API: PlaidApi.sandbox_item_set_verification_status ..." }
      end

      if client_side_validation?
        raise ArgumentError.new("\"sandbox_item_set_verification_status_request\" is required and cannot be null") if sandbox_item_set_verification_status_request.nil?
        unless (_sandbox_item_set_verification_status_request = sandbox_item_set_verification_status_request).nil?
          _sandbox_item_set_verification_status_request.validate if _sandbox_item_set_verification_status_request.is_a?(OpenApi::Validatable)
        end
      end

      # resource path
      local_var_path = "/sandbox/item/set_verification_status"

      # header parameters
      header_params : Hash(String, String) = Hash(String, String).new
      # HTTP header "Accept" (if needed)
      header_params["Accept"] = @api_client.select_header_accept(["application/json"])
      # HTTP header "Content-Type"
      header_params["Content-Type"] = @api_client.select_header_content_type(["application/json"])

      # cookie parameters
      cookie_params : Hash(String, String) = Hash(String, String).new

      # query parameters
      query_params : Hash(String, (String | Array(String) | JSON::Any)) = Hash(String, (String | Array(String) | JSON::Any)).new

      # form parameters
      form_params : Array(Tuple(String, Crest::ParamsValue)) | Nil = nil

      # http body (model)
      post_body : IO | String | Nil = @api_client.encode(body: sandbox_item_set_verification_status_request, content_type: header_params["Content-Type"]?) if !sandbox_item_set_verification_status_request.nil?

      # auth_names
      auth_names = ["clientId", "plaidVersion", "secret"]

      @api_client.build_api_request(
        http_method: :"POST",
        path: local_var_path,
        operation: "PlaidApi.sandbox_item_set_verification_status",
        post_body: post_body,
        auth_names: auth_names,
        header_params: header_params,
        cookie_params: cookie_params,
        query_params: query_params,
        form_params: form_params
      )
    end

    # Save the selected accounts when connecting to the Platypus Oauth institution
    # Save the selected accounts when connecting to the Platypus Oauth institution
    # @required @param sandbox_oauth_select_accounts_request [Plaid::SandboxOauthSelectAccountsRequest?]
    # @return [Hash(String, Object)]
    def sandbox_oauth_select_accounts(
      *,
      sandbox_oauth_select_accounts_request : Plaid::SandboxOauthSelectAccountsRequest? = nil
    ) : Hash(String, Object)
      data, _status_code, _headers = sandbox_oauth_select_accounts_with_http_info(sandbox_oauth_select_accounts_request: sandbox_oauth_select_accounts_request)
      data
    end

    # Save the selected accounts when connecting to the Platypus Oauth institution
    # Save the selected accounts when connecting to the Platypus Oauth institution
    # @required @param sandbox_oauth_select_accounts_request [Plaid::SandboxOauthSelectAccountsRequest?]
    # @return [Tuple(Hash(String, Object), Integer, Hash)] Hash(String, Object), response status code and response headers
    def sandbox_oauth_select_accounts_with_http_info(
      *,
      sandbox_oauth_select_accounts_request : Plaid::SandboxOauthSelectAccountsRequest? = nil
    ) : Tuple(Hash(String, Object), Int32, Hash(String, Array(String) | String))
      request = build_api_request_for_sandbox_oauth_select_accounts(sandbox_oauth_select_accounts_request: sandbox_oauth_select_accounts_request)

      body, status_code, headers = @api_client.execute_api_request(request)

      if debugging?
        Log.debug { "API called: PlaidApi#sandbox_oauth_select_accounts\nBody: #{body.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}" }
      end

      Tuple.new(Hash(String, Object).from_json(body), status_code, headers)
    end

    # Save the selected accounts when connecting to the Platypus Oauth institution
    # Save the selected accounts when connecting to the Platypus Oauth institution
    # @required @param sandbox_oauth_select_accounts_request [Plaid::SandboxOauthSelectAccountsRequest?]
    # @return nil
    def sandbox_oauth_select_accounts(
      *,
      sandbox_oauth_select_accounts_request : Plaid::SandboxOauthSelectAccountsRequest? = nil,
      &block : Crest::Response ->
    ) : Nil
      build_api_request_for_sandbox_oauth_select_accounts(sandbox_oauth_select_accounts_request: sandbox_oauth_select_accounts_request).execute(&block)
    end

    # @return Crest::Request
    def build_api_request_for_sandbox_oauth_select_accounts(
      *,
      sandbox_oauth_select_accounts_request : Plaid::SandboxOauthSelectAccountsRequest? = nil
    ) : Crest::Request
      if debugging?
        Log.debug { "Calling API: PlaidApi.sandbox_oauth_select_accounts ..." }
      end

      if client_side_validation?
        raise ArgumentError.new("\"sandbox_oauth_select_accounts_request\" is required and cannot be null") if sandbox_oauth_select_accounts_request.nil?
        unless (_sandbox_oauth_select_accounts_request = sandbox_oauth_select_accounts_request).nil?
          _sandbox_oauth_select_accounts_request.validate if _sandbox_oauth_select_accounts_request.is_a?(OpenApi::Validatable)
        end
      end

      # resource path
      local_var_path = "/sandbox/oauth/select_accounts"

      # header parameters
      header_params : Hash(String, String) = Hash(String, String).new
      # HTTP header "Accept" (if needed)
      header_params["Accept"] = @api_client.select_header_accept(["application/json"])
      # HTTP header "Content-Type"
      header_params["Content-Type"] = @api_client.select_header_content_type(["application/json"])

      # cookie parameters
      cookie_params : Hash(String, String) = Hash(String, String).new

      # query parameters
      query_params : Hash(String, (String | Array(String) | JSON::Any)) = Hash(String, (String | Array(String) | JSON::Any)).new

      # form parameters
      form_params : Array(Tuple(String, Crest::ParamsValue)) | Nil = nil

      # http body (model)
      post_body : IO | String | Nil = @api_client.encode(body: sandbox_oauth_select_accounts_request, content_type: header_params["Content-Type"]?) if !sandbox_oauth_select_accounts_request.nil?

      # auth_names
      auth_names = ["clientId", "plaidVersion", "secret"]

      @api_client.build_api_request(
        http_method: :"POST",
        path: local_var_path,
        operation: "PlaidApi.sandbox_oauth_select_accounts",
        post_body: post_body,
        auth_names: auth_names,
        header_params: header_params,
        cookie_params: cookie_params,
        query_params: query_params,
        form_params: form_params
      )
    end

    # Reset the login of a Payment Profile
    # `/sandbox/payment_profile/reset_login/` forces a Payment Profile into a state where the login is no longer valid. This makes it easy to test update mode for Payment Profile in the Sandbox environment.   After calling `/sandbox/payment_profile/reset_login`, calls to the `/transfer/authorization/create` with the Payment Profile will result in a `decision_rationale` `PAYMENT_PROFILE_LOGIN_REQUIRED`. You can then use update mode for Payment Profile to restore it into a good state.   In order to invoke this endpoint, you must first [create a Payment Profile](https://plaid.com/docs/transfer/add-to-app/#create-a-payment-profile-optional) and [go through the Link flow](https://plaid.com/docs/transfer/add-to-app/#create-a-link-token).
    # @required @param sandbox_payment_profile_reset_login_request [Plaid::SandboxPaymentProfileResetLoginRequest?]
    # @return [SandboxPaymentProfileResetLoginResponse]
    def sandbox_payment_profile_reset_login(
      *,
      sandbox_payment_profile_reset_login_request : Plaid::SandboxPaymentProfileResetLoginRequest? = nil
    ) : SandboxPaymentProfileResetLoginResponse
      data, _status_code, _headers = sandbox_payment_profile_reset_login_with_http_info(sandbox_payment_profile_reset_login_request: sandbox_payment_profile_reset_login_request)
      data
    end

    # Reset the login of a Payment Profile
    # &#x60;/sandbox/payment_profile/reset_login/&#x60; forces a Payment Profile into a state where the login is no longer valid. This makes it easy to test update mode for Payment Profile in the Sandbox environment.   After calling &#x60;/sandbox/payment_profile/reset_login&#x60;, calls to the &#x60;/transfer/authorization/create&#x60; with the Payment Profile will result in a &#x60;decision_rationale&#x60; &#x60;PAYMENT_PROFILE_LOGIN_REQUIRED&#x60;. You can then use update mode for Payment Profile to restore it into a good state.   In order to invoke this endpoint, you must first [create a Payment Profile](https://plaid.com/docs/transfer/add-to-app/#create-a-payment-profile-optional) and [go through the Link flow](https://plaid.com/docs/transfer/add-to-app/#create-a-link-token).
    # @required @param sandbox_payment_profile_reset_login_request [Plaid::SandboxPaymentProfileResetLoginRequest?]
    # @return [Tuple(SandboxPaymentProfileResetLoginResponse, Integer, Hash)] SandboxPaymentProfileResetLoginResponse, response status code and response headers
    def sandbox_payment_profile_reset_login_with_http_info(
      *,
      sandbox_payment_profile_reset_login_request : Plaid::SandboxPaymentProfileResetLoginRequest? = nil
    ) : Tuple(SandboxPaymentProfileResetLoginResponse, Int32, Hash(String, Array(String) | String))
      request = build_api_request_for_sandbox_payment_profile_reset_login(sandbox_payment_profile_reset_login_request: sandbox_payment_profile_reset_login_request)

      body, status_code, headers = @api_client.execute_api_request(request)

      if debugging?
        Log.debug { "API called: PlaidApi#sandbox_payment_profile_reset_login\nBody: #{body.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}" }
      end

      Tuple.new(SandboxPaymentProfileResetLoginResponse.from_json(body), status_code, headers)
    end

    # Reset the login of a Payment Profile
    # &#x60;/sandbox/payment_profile/reset_login/&#x60; forces a Payment Profile into a state where the login is no longer valid. This makes it easy to test update mode for Payment Profile in the Sandbox environment.   After calling &#x60;/sandbox/payment_profile/reset_login&#x60;, calls to the &#x60;/transfer/authorization/create&#x60; with the Payment Profile will result in a &#x60;decision_rationale&#x60; &#x60;PAYMENT_PROFILE_LOGIN_REQUIRED&#x60;. You can then use update mode for Payment Profile to restore it into a good state.   In order to invoke this endpoint, you must first [create a Payment Profile](https://plaid.com/docs/transfer/add-to-app/#create-a-payment-profile-optional) and [go through the Link flow](https://plaid.com/docs/transfer/add-to-app/#create-a-link-token).
    # @required @param sandbox_payment_profile_reset_login_request [Plaid::SandboxPaymentProfileResetLoginRequest?]
    # @return nil
    def sandbox_payment_profile_reset_login(
      *,
      sandbox_payment_profile_reset_login_request : Plaid::SandboxPaymentProfileResetLoginRequest? = nil,
      &block : Crest::Response ->
    ) : Nil
      build_api_request_for_sandbox_payment_profile_reset_login(sandbox_payment_profile_reset_login_request: sandbox_payment_profile_reset_login_request).execute(&block)
    end

    # @return Crest::Request
    def build_api_request_for_sandbox_payment_profile_reset_login(
      *,
      sandbox_payment_profile_reset_login_request : Plaid::SandboxPaymentProfileResetLoginRequest? = nil
    ) : Crest::Request
      if debugging?
        Log.debug { "Calling API: PlaidApi.sandbox_payment_profile_reset_login ..." }
      end

      if client_side_validation?
        raise ArgumentError.new("\"sandbox_payment_profile_reset_login_request\" is required and cannot be null") if sandbox_payment_profile_reset_login_request.nil?
        unless (_sandbox_payment_profile_reset_login_request = sandbox_payment_profile_reset_login_request).nil?
          _sandbox_payment_profile_reset_login_request.validate if _sandbox_payment_profile_reset_login_request.is_a?(OpenApi::Validatable)
        end
      end

      # resource path
      local_var_path = "/sandbox/payment_profile/reset_login"

      # header parameters
      header_params : Hash(String, String) = Hash(String, String).new
      # HTTP header "Accept" (if needed)
      header_params["Accept"] = @api_client.select_header_accept(["application/json"])
      # HTTP header "Content-Type"
      header_params["Content-Type"] = @api_client.select_header_content_type(["application/json"])

      # cookie parameters
      cookie_params : Hash(String, String) = Hash(String, String).new

      # query parameters
      query_params : Hash(String, (String | Array(String) | JSON::Any)) = Hash(String, (String | Array(String) | JSON::Any)).new

      # form parameters
      form_params : Array(Tuple(String, Crest::ParamsValue)) | Nil = nil

      # http body (model)
      post_body : IO | String | Nil = @api_client.encode(body: sandbox_payment_profile_reset_login_request, content_type: header_params["Content-Type"]?) if !sandbox_payment_profile_reset_login_request.nil?

      # auth_names
      auth_names = ["clientId", "plaidVersion", "secret"]

      @api_client.build_api_request(
        http_method: :"POST",
        path: local_var_path,
        operation: "PlaidApi.sandbox_payment_profile_reset_login",
        post_body: post_body,
        auth_names: auth_names,
        header_params: header_params,
        cookie_params: cookie_params,
        query_params: query_params,
        form_params: form_params
      )
    end

    # Create a test Item and processor token
    # Use the `/sandbox/processor_token/create` endpoint to create a valid `processor_token` for an arbitrary institution ID and test credentials. The created `processor_token` corresponds to a new Sandbox Item. You can then use this `processor_token` with the `/processor/` API endpoints in Sandbox. You can also use `/sandbox/processor_token/create` with the [`user_custom` test username](https://plaid.com/docs/sandbox/user-custom) to generate a test account with custom data.
    # @required @param sandbox_processor_token_create_request [Plaid::SandboxProcessorTokenCreateRequest?]
    # @return [SandboxProcessorTokenCreateResponse]
    def sandbox_processor_token_create(
      *,
      sandbox_processor_token_create_request : Plaid::SandboxProcessorTokenCreateRequest? = nil
    ) : SandboxProcessorTokenCreateResponse
      data, _status_code, _headers = sandbox_processor_token_create_with_http_info(sandbox_processor_token_create_request: sandbox_processor_token_create_request)
      data
    end

    # Create a test Item and processor token
    # Use the &#x60;/sandbox/processor_token/create&#x60; endpoint to create a valid &#x60;processor_token&#x60; for an arbitrary institution ID and test credentials. The created &#x60;processor_token&#x60; corresponds to a new Sandbox Item. You can then use this &#x60;processor_token&#x60; with the &#x60;/processor/&#x60; API endpoints in Sandbox. You can also use &#x60;/sandbox/processor_token/create&#x60; with the [&#x60;user_custom&#x60; test username](https://plaid.com/docs/sandbox/user-custom) to generate a test account with custom data.
    # @required @param sandbox_processor_token_create_request [Plaid::SandboxProcessorTokenCreateRequest?]
    # @return [Tuple(SandboxProcessorTokenCreateResponse, Integer, Hash)] SandboxProcessorTokenCreateResponse, response status code and response headers
    def sandbox_processor_token_create_with_http_info(
      *,
      sandbox_processor_token_create_request : Plaid::SandboxProcessorTokenCreateRequest? = nil
    ) : Tuple(SandboxProcessorTokenCreateResponse, Int32, Hash(String, Array(String) | String))
      request = build_api_request_for_sandbox_processor_token_create(sandbox_processor_token_create_request: sandbox_processor_token_create_request)

      body, status_code, headers = @api_client.execute_api_request(request)

      if debugging?
        Log.debug { "API called: PlaidApi#sandbox_processor_token_create\nBody: #{body.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}" }
      end

      Tuple.new(SandboxProcessorTokenCreateResponse.from_json(body), status_code, headers)
    end

    # Create a test Item and processor token
    # Use the &#x60;/sandbox/processor_token/create&#x60; endpoint to create a valid &#x60;processor_token&#x60; for an arbitrary institution ID and test credentials. The created &#x60;processor_token&#x60; corresponds to a new Sandbox Item. You can then use this &#x60;processor_token&#x60; with the &#x60;/processor/&#x60; API endpoints in Sandbox. You can also use &#x60;/sandbox/processor_token/create&#x60; with the [&#x60;user_custom&#x60; test username](https://plaid.com/docs/sandbox/user-custom) to generate a test account with custom data.
    # @required @param sandbox_processor_token_create_request [Plaid::SandboxProcessorTokenCreateRequest?]
    # @return nil
    def sandbox_processor_token_create(
      *,
      sandbox_processor_token_create_request : Plaid::SandboxProcessorTokenCreateRequest? = nil,
      &block : Crest::Response ->
    ) : Nil
      build_api_request_for_sandbox_processor_token_create(sandbox_processor_token_create_request: sandbox_processor_token_create_request).execute(&block)
    end

    # @return Crest::Request
    def build_api_request_for_sandbox_processor_token_create(
      *,
      sandbox_processor_token_create_request : Plaid::SandboxProcessorTokenCreateRequest? = nil
    ) : Crest::Request
      if debugging?
        Log.debug { "Calling API: PlaidApi.sandbox_processor_token_create ..." }
      end

      if client_side_validation?
        raise ArgumentError.new("\"sandbox_processor_token_create_request\" is required and cannot be null") if sandbox_processor_token_create_request.nil?
        unless (_sandbox_processor_token_create_request = sandbox_processor_token_create_request).nil?
          _sandbox_processor_token_create_request.validate if _sandbox_processor_token_create_request.is_a?(OpenApi::Validatable)
        end
      end

      # resource path
      local_var_path = "/sandbox/processor_token/create"

      # header parameters
      header_params : Hash(String, String) = Hash(String, String).new
      # HTTP header "Accept" (if needed)
      header_params["Accept"] = @api_client.select_header_accept(["application/json"])
      # HTTP header "Content-Type"
      header_params["Content-Type"] = @api_client.select_header_content_type(["application/json"])

      # cookie parameters
      cookie_params : Hash(String, String) = Hash(String, String).new

      # query parameters
      query_params : Hash(String, (String | Array(String) | JSON::Any)) = Hash(String, (String | Array(String) | JSON::Any)).new

      # form parameters
      form_params : Array(Tuple(String, Crest::ParamsValue)) | Nil = nil

      # http body (model)
      post_body : IO | String | Nil = @api_client.encode(body: sandbox_processor_token_create_request, content_type: header_params["Content-Type"]?) if !sandbox_processor_token_create_request.nil?

      # auth_names
      auth_names = ["clientId", "plaidVersion", "secret"]

      @api_client.build_api_request(
        http_method: :"POST",
        path: local_var_path,
        operation: "PlaidApi.sandbox_processor_token_create",
        post_body: post_body,
        auth_names: auth_names,
        header_params: header_params,
        cookie_params: cookie_params,
        query_params: query_params,
        form_params: form_params
      )
    end

    # Create a test Item
    # Use the `/sandbox/public_token/create` endpoint to create a valid `public_token`  for an arbitrary institution ID, initial products, and test credentials. The created `public_token` maps to a new Sandbox Item. You can then call `/item/public_token/exchange` to exchange the `public_token` for an `access_token` and perform all API actions. `/sandbox/public_token/create` can also be used with the [`user_custom` test username](https://plaid.com/docs/sandbox/user-custom) to generate a test account with custom data. `/sandbox/public_token/create` cannot be used with OAuth institutions.
    # @required @param sandbox_public_token_create_request [Plaid::SandboxPublicTokenCreateRequest?]
    # @return [SandboxPublicTokenCreateResponse]
    def sandbox_public_token_create(
      *,
      sandbox_public_token_create_request : Plaid::SandboxPublicTokenCreateRequest? = nil
    ) : SandboxPublicTokenCreateResponse
      data, _status_code, _headers = sandbox_public_token_create_with_http_info(sandbox_public_token_create_request: sandbox_public_token_create_request)
      data
    end

    # Create a test Item
    # Use the &#x60;/sandbox/public_token/create&#x60; endpoint to create a valid &#x60;public_token&#x60;  for an arbitrary institution ID, initial products, and test credentials. The created &#x60;public_token&#x60; maps to a new Sandbox Item. You can then call &#x60;/item/public_token/exchange&#x60; to exchange the &#x60;public_token&#x60; for an &#x60;access_token&#x60; and perform all API actions. &#x60;/sandbox/public_token/create&#x60; can also be used with the [&#x60;user_custom&#x60; test username](https://plaid.com/docs/sandbox/user-custom) to generate a test account with custom data. &#x60;/sandbox/public_token/create&#x60; cannot be used with OAuth institutions.
    # @required @param sandbox_public_token_create_request [Plaid::SandboxPublicTokenCreateRequest?]
    # @return [Tuple(SandboxPublicTokenCreateResponse, Integer, Hash)] SandboxPublicTokenCreateResponse, response status code and response headers
    def sandbox_public_token_create_with_http_info(
      *,
      sandbox_public_token_create_request : Plaid::SandboxPublicTokenCreateRequest? = nil
    ) : Tuple(SandboxPublicTokenCreateResponse, Int32, Hash(String, Array(String) | String))
      request = build_api_request_for_sandbox_public_token_create(sandbox_public_token_create_request: sandbox_public_token_create_request)

      body, status_code, headers = @api_client.execute_api_request(request)

      if debugging?
        Log.debug { "API called: PlaidApi#sandbox_public_token_create\nBody: #{body.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}" }
      end

      Tuple.new(SandboxPublicTokenCreateResponse.from_json(body), status_code, headers)
    end

    # Create a test Item
    # Use the &#x60;/sandbox/public_token/create&#x60; endpoint to create a valid &#x60;public_token&#x60;  for an arbitrary institution ID, initial products, and test credentials. The created &#x60;public_token&#x60; maps to a new Sandbox Item. You can then call &#x60;/item/public_token/exchange&#x60; to exchange the &#x60;public_token&#x60; for an &#x60;access_token&#x60; and perform all API actions. &#x60;/sandbox/public_token/create&#x60; can also be used with the [&#x60;user_custom&#x60; test username](https://plaid.com/docs/sandbox/user-custom) to generate a test account with custom data. &#x60;/sandbox/public_token/create&#x60; cannot be used with OAuth institutions.
    # @required @param sandbox_public_token_create_request [Plaid::SandboxPublicTokenCreateRequest?]
    # @return nil
    def sandbox_public_token_create(
      *,
      sandbox_public_token_create_request : Plaid::SandboxPublicTokenCreateRequest? = nil,
      &block : Crest::Response ->
    ) : Nil
      build_api_request_for_sandbox_public_token_create(sandbox_public_token_create_request: sandbox_public_token_create_request).execute(&block)
    end

    # @return Crest::Request
    def build_api_request_for_sandbox_public_token_create(
      *,
      sandbox_public_token_create_request : Plaid::SandboxPublicTokenCreateRequest? = nil
    ) : Crest::Request
      if debugging?
        Log.debug { "Calling API: PlaidApi.sandbox_public_token_create ..." }
      end

      if client_side_validation?
        raise ArgumentError.new("\"sandbox_public_token_create_request\" is required and cannot be null") if sandbox_public_token_create_request.nil?
        unless (_sandbox_public_token_create_request = sandbox_public_token_create_request).nil?
          _sandbox_public_token_create_request.validate if _sandbox_public_token_create_request.is_a?(OpenApi::Validatable)
        end
      end

      # resource path
      local_var_path = "/sandbox/public_token/create"

      # header parameters
      header_params : Hash(String, String) = Hash(String, String).new
      # HTTP header "Accept" (if needed)
      header_params["Accept"] = @api_client.select_header_accept(["application/json"])
      # HTTP header "Content-Type"
      header_params["Content-Type"] = @api_client.select_header_content_type(["application/json"])

      # cookie parameters
      cookie_params : Hash(String, String) = Hash(String, String).new

      # query parameters
      query_params : Hash(String, (String | Array(String) | JSON::Any)) = Hash(String, (String | Array(String) | JSON::Any)).new

      # form parameters
      form_params : Array(Tuple(String, Crest::ParamsValue)) | Nil = nil

      # http body (model)
      post_body : IO | String | Nil = @api_client.encode(body: sandbox_public_token_create_request, content_type: header_params["Content-Type"]?) if !sandbox_public_token_create_request.nil?

      # auth_names
      auth_names = ["clientId", "plaidVersion", "secret"]

      @api_client.build_api_request(
        http_method: :"POST",
        path: local_var_path,
        operation: "PlaidApi.sandbox_public_token_create",
        post_body: post_body,
        auth_names: auth_names,
        header_params: header_params,
        cookie_params: cookie_params,
        query_params: query_params,
        form_params: form_params
      )
    end

    # Manually fire a Transfer webhook
    # Use the `/sandbox/transfer/fire_webhook` endpoint to manually trigger a `TRANSFER_EVENTS_UPDATE` webhook in the Sandbox environment.
    # @required @param sandbox_transfer_fire_webhook_request [Plaid::SandboxTransferFireWebhookRequest?]
    # @return [SandboxTransferFireWebhookResponse]
    def sandbox_transfer_fire_webhook(
      *,
      sandbox_transfer_fire_webhook_request : Plaid::SandboxTransferFireWebhookRequest? = nil
    ) : SandboxTransferFireWebhookResponse
      data, _status_code, _headers = sandbox_transfer_fire_webhook_with_http_info(sandbox_transfer_fire_webhook_request: sandbox_transfer_fire_webhook_request)
      data
    end

    # Manually fire a Transfer webhook
    # Use the &#x60;/sandbox/transfer/fire_webhook&#x60; endpoint to manually trigger a &#x60;TRANSFER_EVENTS_UPDATE&#x60; webhook in the Sandbox environment.
    # @required @param sandbox_transfer_fire_webhook_request [Plaid::SandboxTransferFireWebhookRequest?]
    # @return [Tuple(SandboxTransferFireWebhookResponse, Integer, Hash)] SandboxTransferFireWebhookResponse, response status code and response headers
    def sandbox_transfer_fire_webhook_with_http_info(
      *,
      sandbox_transfer_fire_webhook_request : Plaid::SandboxTransferFireWebhookRequest? = nil
    ) : Tuple(SandboxTransferFireWebhookResponse, Int32, Hash(String, Array(String) | String))
      request = build_api_request_for_sandbox_transfer_fire_webhook(sandbox_transfer_fire_webhook_request: sandbox_transfer_fire_webhook_request)

      body, status_code, headers = @api_client.execute_api_request(request)

      if debugging?
        Log.debug { "API called: PlaidApi#sandbox_transfer_fire_webhook\nBody: #{body.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}" }
      end

      Tuple.new(SandboxTransferFireWebhookResponse.from_json(body), status_code, headers)
    end

    # Manually fire a Transfer webhook
    # Use the &#x60;/sandbox/transfer/fire_webhook&#x60; endpoint to manually trigger a &#x60;TRANSFER_EVENTS_UPDATE&#x60; webhook in the Sandbox environment.
    # @required @param sandbox_transfer_fire_webhook_request [Plaid::SandboxTransferFireWebhookRequest?]
    # @return nil
    def sandbox_transfer_fire_webhook(
      *,
      sandbox_transfer_fire_webhook_request : Plaid::SandboxTransferFireWebhookRequest? = nil,
      &block : Crest::Response ->
    ) : Nil
      build_api_request_for_sandbox_transfer_fire_webhook(sandbox_transfer_fire_webhook_request: sandbox_transfer_fire_webhook_request).execute(&block)
    end

    # @return Crest::Request
    def build_api_request_for_sandbox_transfer_fire_webhook(
      *,
      sandbox_transfer_fire_webhook_request : Plaid::SandboxTransferFireWebhookRequest? = nil
    ) : Crest::Request
      if debugging?
        Log.debug { "Calling API: PlaidApi.sandbox_transfer_fire_webhook ..." }
      end

      if client_side_validation?
        raise ArgumentError.new("\"sandbox_transfer_fire_webhook_request\" is required and cannot be null") if sandbox_transfer_fire_webhook_request.nil?
        unless (_sandbox_transfer_fire_webhook_request = sandbox_transfer_fire_webhook_request).nil?
          _sandbox_transfer_fire_webhook_request.validate if _sandbox_transfer_fire_webhook_request.is_a?(OpenApi::Validatable)
        end
      end

      # resource path
      local_var_path = "/sandbox/transfer/fire_webhook"

      # header parameters
      header_params : Hash(String, String) = Hash(String, String).new
      # HTTP header "Accept" (if needed)
      header_params["Accept"] = @api_client.select_header_accept(["application/json"])
      # HTTP header "Content-Type"
      header_params["Content-Type"] = @api_client.select_header_content_type(["application/json"])

      # cookie parameters
      cookie_params : Hash(String, String) = Hash(String, String).new

      # query parameters
      query_params : Hash(String, (String | Array(String) | JSON::Any)) = Hash(String, (String | Array(String) | JSON::Any)).new

      # form parameters
      form_params : Array(Tuple(String, Crest::ParamsValue)) | Nil = nil

      # http body (model)
      post_body : IO | String | Nil = @api_client.encode(body: sandbox_transfer_fire_webhook_request, content_type: header_params["Content-Type"]?) if !sandbox_transfer_fire_webhook_request.nil?

      # auth_names
      auth_names = ["clientId", "plaidVersion", "secret"]

      @api_client.build_api_request(
        http_method: :"POST",
        path: local_var_path,
        operation: "PlaidApi.sandbox_transfer_fire_webhook",
        post_body: post_body,
        auth_names: auth_names,
        header_params: header_params,
        cookie_params: cookie_params,
        query_params: query_params,
        form_params: form_params
      )
    end

    # Simulate a ledger deposit event in Sandbox
    # Use the `/sandbox/transfer/ledger/deposit/simulate` endpoint to simulate a ledger deposit event in the Sandbox environment.
    # @required @param sandbox_transfer_ledger_deposit_simulate_request [Plaid::SandboxTransferLedgerDepositSimulateRequest?]
    # @return [SandboxTransferLedgerDepositSimulateResponse]
    def sandbox_transfer_ledger_deposit_simulate(
      *,
      sandbox_transfer_ledger_deposit_simulate_request : Plaid::SandboxTransferLedgerDepositSimulateRequest? = nil
    ) : SandboxTransferLedgerDepositSimulateResponse
      data, _status_code, _headers = sandbox_transfer_ledger_deposit_simulate_with_http_info(sandbox_transfer_ledger_deposit_simulate_request: sandbox_transfer_ledger_deposit_simulate_request)
      data
    end

    # Simulate a ledger deposit event in Sandbox
    # Use the &#x60;/sandbox/transfer/ledger/deposit/simulate&#x60; endpoint to simulate a ledger deposit event in the Sandbox environment.
    # @required @param sandbox_transfer_ledger_deposit_simulate_request [Plaid::SandboxTransferLedgerDepositSimulateRequest?]
    # @return [Tuple(SandboxTransferLedgerDepositSimulateResponse, Integer, Hash)] SandboxTransferLedgerDepositSimulateResponse, response status code and response headers
    def sandbox_transfer_ledger_deposit_simulate_with_http_info(
      *,
      sandbox_transfer_ledger_deposit_simulate_request : Plaid::SandboxTransferLedgerDepositSimulateRequest? = nil
    ) : Tuple(SandboxTransferLedgerDepositSimulateResponse, Int32, Hash(String, Array(String) | String))
      request = build_api_request_for_sandbox_transfer_ledger_deposit_simulate(sandbox_transfer_ledger_deposit_simulate_request: sandbox_transfer_ledger_deposit_simulate_request)

      body, status_code, headers = @api_client.execute_api_request(request)

      if debugging?
        Log.debug { "API called: PlaidApi#sandbox_transfer_ledger_deposit_simulate\nBody: #{body.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}" }
      end

      Tuple.new(SandboxTransferLedgerDepositSimulateResponse.from_json(body), status_code, headers)
    end

    # Simulate a ledger deposit event in Sandbox
    # Use the &#x60;/sandbox/transfer/ledger/deposit/simulate&#x60; endpoint to simulate a ledger deposit event in the Sandbox environment.
    # @required @param sandbox_transfer_ledger_deposit_simulate_request [Plaid::SandboxTransferLedgerDepositSimulateRequest?]
    # @return nil
    def sandbox_transfer_ledger_deposit_simulate(
      *,
      sandbox_transfer_ledger_deposit_simulate_request : Plaid::SandboxTransferLedgerDepositSimulateRequest? = nil,
      &block : Crest::Response ->
    ) : Nil
      build_api_request_for_sandbox_transfer_ledger_deposit_simulate(sandbox_transfer_ledger_deposit_simulate_request: sandbox_transfer_ledger_deposit_simulate_request).execute(&block)
    end

    # @return Crest::Request
    def build_api_request_for_sandbox_transfer_ledger_deposit_simulate(
      *,
      sandbox_transfer_ledger_deposit_simulate_request : Plaid::SandboxTransferLedgerDepositSimulateRequest? = nil
    ) : Crest::Request
      if debugging?
        Log.debug { "Calling API: PlaidApi.sandbox_transfer_ledger_deposit_simulate ..." }
      end

      if client_side_validation?
        raise ArgumentError.new("\"sandbox_transfer_ledger_deposit_simulate_request\" is required and cannot be null") if sandbox_transfer_ledger_deposit_simulate_request.nil?
        unless (_sandbox_transfer_ledger_deposit_simulate_request = sandbox_transfer_ledger_deposit_simulate_request).nil?
          _sandbox_transfer_ledger_deposit_simulate_request.validate if _sandbox_transfer_ledger_deposit_simulate_request.is_a?(OpenApi::Validatable)
        end
      end

      # resource path
      local_var_path = "/sandbox/transfer/ledger/deposit/simulate"

      # header parameters
      header_params : Hash(String, String) = Hash(String, String).new
      # HTTP header "Accept" (if needed)
      header_params["Accept"] = @api_client.select_header_accept(["application/json"])
      # HTTP header "Content-Type"
      header_params["Content-Type"] = @api_client.select_header_content_type(["application/json"])

      # cookie parameters
      cookie_params : Hash(String, String) = Hash(String, String).new

      # query parameters
      query_params : Hash(String, (String | Array(String) | JSON::Any)) = Hash(String, (String | Array(String) | JSON::Any)).new

      # form parameters
      form_params : Array(Tuple(String, Crest::ParamsValue)) | Nil = nil

      # http body (model)
      post_body : IO | String | Nil = @api_client.encode(body: sandbox_transfer_ledger_deposit_simulate_request, content_type: header_params["Content-Type"]?) if !sandbox_transfer_ledger_deposit_simulate_request.nil?

      # auth_names
      auth_names = ["clientId", "plaidVersion", "secret"]

      @api_client.build_api_request(
        http_method: :"POST",
        path: local_var_path,
        operation: "PlaidApi.sandbox_transfer_ledger_deposit_simulate",
        post_body: post_body,
        auth_names: auth_names,
        header_params: header_params,
        cookie_params: cookie_params,
        query_params: query_params,
        form_params: form_params
      )
    end

    # Simulate converting pending balance to available balance
    # Use the `/sandbox/transfer/ledger/simulate_available` endpoint to simulate converting pending balance to available balance for all originators in the Sandbox environment.
    # @required @param sandbox_transfer_ledger_simulate_available_request [Plaid::SandboxTransferLedgerSimulateAvailableRequest?]
    # @return [SandboxTransferLedgerSimulateAvailableResponse]
    def sandbox_transfer_ledger_simulate_available(
      *,
      sandbox_transfer_ledger_simulate_available_request : Plaid::SandboxTransferLedgerSimulateAvailableRequest? = nil
    ) : SandboxTransferLedgerSimulateAvailableResponse
      data, _status_code, _headers = sandbox_transfer_ledger_simulate_available_with_http_info(sandbox_transfer_ledger_simulate_available_request: sandbox_transfer_ledger_simulate_available_request)
      data
    end

    # Simulate converting pending balance to available balance
    # Use the &#x60;/sandbox/transfer/ledger/simulate_available&#x60; endpoint to simulate converting pending balance to available balance for all originators in the Sandbox environment.
    # @required @param sandbox_transfer_ledger_simulate_available_request [Plaid::SandboxTransferLedgerSimulateAvailableRequest?]
    # @return [Tuple(SandboxTransferLedgerSimulateAvailableResponse, Integer, Hash)] SandboxTransferLedgerSimulateAvailableResponse, response status code and response headers
    def sandbox_transfer_ledger_simulate_available_with_http_info(
      *,
      sandbox_transfer_ledger_simulate_available_request : Plaid::SandboxTransferLedgerSimulateAvailableRequest? = nil
    ) : Tuple(SandboxTransferLedgerSimulateAvailableResponse, Int32, Hash(String, Array(String) | String))
      request = build_api_request_for_sandbox_transfer_ledger_simulate_available(sandbox_transfer_ledger_simulate_available_request: sandbox_transfer_ledger_simulate_available_request)

      body, status_code, headers = @api_client.execute_api_request(request)

      if debugging?
        Log.debug { "API called: PlaidApi#sandbox_transfer_ledger_simulate_available\nBody: #{body.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}" }
      end

      Tuple.new(SandboxTransferLedgerSimulateAvailableResponse.from_json(body), status_code, headers)
    end

    # Simulate converting pending balance to available balance
    # Use the &#x60;/sandbox/transfer/ledger/simulate_available&#x60; endpoint to simulate converting pending balance to available balance for all originators in the Sandbox environment.
    # @required @param sandbox_transfer_ledger_simulate_available_request [Plaid::SandboxTransferLedgerSimulateAvailableRequest?]
    # @return nil
    def sandbox_transfer_ledger_simulate_available(
      *,
      sandbox_transfer_ledger_simulate_available_request : Plaid::SandboxTransferLedgerSimulateAvailableRequest? = nil,
      &block : Crest::Response ->
    ) : Nil
      build_api_request_for_sandbox_transfer_ledger_simulate_available(sandbox_transfer_ledger_simulate_available_request: sandbox_transfer_ledger_simulate_available_request).execute(&block)
    end

    # @return Crest::Request
    def build_api_request_for_sandbox_transfer_ledger_simulate_available(
      *,
      sandbox_transfer_ledger_simulate_available_request : Plaid::SandboxTransferLedgerSimulateAvailableRequest? = nil
    ) : Crest::Request
      if debugging?
        Log.debug { "Calling API: PlaidApi.sandbox_transfer_ledger_simulate_available ..." }
      end

      if client_side_validation?
        raise ArgumentError.new("\"sandbox_transfer_ledger_simulate_available_request\" is required and cannot be null") if sandbox_transfer_ledger_simulate_available_request.nil?
        unless (_sandbox_transfer_ledger_simulate_available_request = sandbox_transfer_ledger_simulate_available_request).nil?
          _sandbox_transfer_ledger_simulate_available_request.validate if _sandbox_transfer_ledger_simulate_available_request.is_a?(OpenApi::Validatable)
        end
      end

      # resource path
      local_var_path = "/sandbox/transfer/ledger/simulate_available"

      # header parameters
      header_params : Hash(String, String) = Hash(String, String).new
      # HTTP header "Accept" (if needed)
      header_params["Accept"] = @api_client.select_header_accept(["application/json"])
      # HTTP header "Content-Type"
      header_params["Content-Type"] = @api_client.select_header_content_type(["application/json"])

      # cookie parameters
      cookie_params : Hash(String, String) = Hash(String, String).new

      # query parameters
      query_params : Hash(String, (String | Array(String) | JSON::Any)) = Hash(String, (String | Array(String) | JSON::Any)).new

      # form parameters
      form_params : Array(Tuple(String, Crest::ParamsValue)) | Nil = nil

      # http body (model)
      post_body : IO | String | Nil = @api_client.encode(body: sandbox_transfer_ledger_simulate_available_request, content_type: header_params["Content-Type"]?) if !sandbox_transfer_ledger_simulate_available_request.nil?

      # auth_names
      auth_names = ["clientId", "plaidVersion", "secret"]

      @api_client.build_api_request(
        http_method: :"POST",
        path: local_var_path,
        operation: "PlaidApi.sandbox_transfer_ledger_simulate_available",
        post_body: post_body,
        auth_names: auth_names,
        header_params: header_params,
        cookie_params: cookie_params,
        query_params: query_params,
        form_params: form_params
      )
    end

    # Simulate a ledger withdraw event in Sandbox
    # Use the `/sandbox/transfer/ledger/withdraw/simulate` endpoint to simulate a ledger withdraw event in the Sandbox environment.
    # @required @param sandbox_transfer_ledger_withdraw_simulate_request [Plaid::SandboxTransferLedgerWithdrawSimulateRequest?]
    # @return [SandboxTransferLedgerWithdrawSimulateResponse]
    def sandbox_transfer_ledger_withdraw_simulate(
      *,
      sandbox_transfer_ledger_withdraw_simulate_request : Plaid::SandboxTransferLedgerWithdrawSimulateRequest? = nil
    ) : SandboxTransferLedgerWithdrawSimulateResponse
      data, _status_code, _headers = sandbox_transfer_ledger_withdraw_simulate_with_http_info(sandbox_transfer_ledger_withdraw_simulate_request: sandbox_transfer_ledger_withdraw_simulate_request)
      data
    end

    # Simulate a ledger withdraw event in Sandbox
    # Use the &#x60;/sandbox/transfer/ledger/withdraw/simulate&#x60; endpoint to simulate a ledger withdraw event in the Sandbox environment.
    # @required @param sandbox_transfer_ledger_withdraw_simulate_request [Plaid::SandboxTransferLedgerWithdrawSimulateRequest?]
    # @return [Tuple(SandboxTransferLedgerWithdrawSimulateResponse, Integer, Hash)] SandboxTransferLedgerWithdrawSimulateResponse, response status code and response headers
    def sandbox_transfer_ledger_withdraw_simulate_with_http_info(
      *,
      sandbox_transfer_ledger_withdraw_simulate_request : Plaid::SandboxTransferLedgerWithdrawSimulateRequest? = nil
    ) : Tuple(SandboxTransferLedgerWithdrawSimulateResponse, Int32, Hash(String, Array(String) | String))
      request = build_api_request_for_sandbox_transfer_ledger_withdraw_simulate(sandbox_transfer_ledger_withdraw_simulate_request: sandbox_transfer_ledger_withdraw_simulate_request)

      body, status_code, headers = @api_client.execute_api_request(request)

      if debugging?
        Log.debug { "API called: PlaidApi#sandbox_transfer_ledger_withdraw_simulate\nBody: #{body.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}" }
      end

      Tuple.new(SandboxTransferLedgerWithdrawSimulateResponse.from_json(body), status_code, headers)
    end

    # Simulate a ledger withdraw event in Sandbox
    # Use the &#x60;/sandbox/transfer/ledger/withdraw/simulate&#x60; endpoint to simulate a ledger withdraw event in the Sandbox environment.
    # @required @param sandbox_transfer_ledger_withdraw_simulate_request [Plaid::SandboxTransferLedgerWithdrawSimulateRequest?]
    # @return nil
    def sandbox_transfer_ledger_withdraw_simulate(
      *,
      sandbox_transfer_ledger_withdraw_simulate_request : Plaid::SandboxTransferLedgerWithdrawSimulateRequest? = nil,
      &block : Crest::Response ->
    ) : Nil
      build_api_request_for_sandbox_transfer_ledger_withdraw_simulate(sandbox_transfer_ledger_withdraw_simulate_request: sandbox_transfer_ledger_withdraw_simulate_request).execute(&block)
    end

    # @return Crest::Request
    def build_api_request_for_sandbox_transfer_ledger_withdraw_simulate(
      *,
      sandbox_transfer_ledger_withdraw_simulate_request : Plaid::SandboxTransferLedgerWithdrawSimulateRequest? = nil
    ) : Crest::Request
      if debugging?
        Log.debug { "Calling API: PlaidApi.sandbox_transfer_ledger_withdraw_simulate ..." }
      end

      if client_side_validation?
        raise ArgumentError.new("\"sandbox_transfer_ledger_withdraw_simulate_request\" is required and cannot be null") if sandbox_transfer_ledger_withdraw_simulate_request.nil?
        unless (_sandbox_transfer_ledger_withdraw_simulate_request = sandbox_transfer_ledger_withdraw_simulate_request).nil?
          _sandbox_transfer_ledger_withdraw_simulate_request.validate if _sandbox_transfer_ledger_withdraw_simulate_request.is_a?(OpenApi::Validatable)
        end
      end

      # resource path
      local_var_path = "/sandbox/transfer/ledger/withdraw/simulate"

      # header parameters
      header_params : Hash(String, String) = Hash(String, String).new
      # HTTP header "Accept" (if needed)
      header_params["Accept"] = @api_client.select_header_accept(["application/json"])
      # HTTP header "Content-Type"
      header_params["Content-Type"] = @api_client.select_header_content_type(["application/json"])

      # cookie parameters
      cookie_params : Hash(String, String) = Hash(String, String).new

      # query parameters
      query_params : Hash(String, (String | Array(String) | JSON::Any)) = Hash(String, (String | Array(String) | JSON::Any)).new

      # form parameters
      form_params : Array(Tuple(String, Crest::ParamsValue)) | Nil = nil

      # http body (model)
      post_body : IO | String | Nil = @api_client.encode(body: sandbox_transfer_ledger_withdraw_simulate_request, content_type: header_params["Content-Type"]?) if !sandbox_transfer_ledger_withdraw_simulate_request.nil?

      # auth_names
      auth_names = ["clientId", "plaidVersion", "secret"]

      @api_client.build_api_request(
        http_method: :"POST",
        path: local_var_path,
        operation: "PlaidApi.sandbox_transfer_ledger_withdraw_simulate",
        post_body: post_body,
        auth_names: auth_names,
        header_params: header_params,
        cookie_params: cookie_params,
        query_params: query_params,
        form_params: form_params
      )
    end

    # Simulate a refund event in Sandbox
    # Use the `/sandbox/transfer/refund/simulate` endpoint to simulate a refund event in the Sandbox environment.  Note that while an event will be simulated and will appear when using endpoints such as `/transfer/event/sync` or `/transfer/event/list`, no transactions will actually take place and funds will not move between accounts, even within the Sandbox.
    # @required @param sandbox_transfer_refund_simulate_request [Plaid::SandboxTransferRefundSimulateRequest?]
    # @return [SandboxTransferRefundSimulateResponse]
    def sandbox_transfer_refund_simulate(
      *,
      sandbox_transfer_refund_simulate_request : Plaid::SandboxTransferRefundSimulateRequest? = nil
    ) : SandboxTransferRefundSimulateResponse
      data, _status_code, _headers = sandbox_transfer_refund_simulate_with_http_info(sandbox_transfer_refund_simulate_request: sandbox_transfer_refund_simulate_request)
      data
    end

    # Simulate a refund event in Sandbox
    # Use the &#x60;/sandbox/transfer/refund/simulate&#x60; endpoint to simulate a refund event in the Sandbox environment.  Note that while an event will be simulated and will appear when using endpoints such as &#x60;/transfer/event/sync&#x60; or &#x60;/transfer/event/list&#x60;, no transactions will actually take place and funds will not move between accounts, even within the Sandbox.
    # @required @param sandbox_transfer_refund_simulate_request [Plaid::SandboxTransferRefundSimulateRequest?]
    # @return [Tuple(SandboxTransferRefundSimulateResponse, Integer, Hash)] SandboxTransferRefundSimulateResponse, response status code and response headers
    def sandbox_transfer_refund_simulate_with_http_info(
      *,
      sandbox_transfer_refund_simulate_request : Plaid::SandboxTransferRefundSimulateRequest? = nil
    ) : Tuple(SandboxTransferRefundSimulateResponse, Int32, Hash(String, Array(String) | String))
      request = build_api_request_for_sandbox_transfer_refund_simulate(sandbox_transfer_refund_simulate_request: sandbox_transfer_refund_simulate_request)

      body, status_code, headers = @api_client.execute_api_request(request)

      if debugging?
        Log.debug { "API called: PlaidApi#sandbox_transfer_refund_simulate\nBody: #{body.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}" }
      end

      Tuple.new(SandboxTransferRefundSimulateResponse.from_json(body), status_code, headers)
    end

    # Simulate a refund event in Sandbox
    # Use the &#x60;/sandbox/transfer/refund/simulate&#x60; endpoint to simulate a refund event in the Sandbox environment.  Note that while an event will be simulated and will appear when using endpoints such as &#x60;/transfer/event/sync&#x60; or &#x60;/transfer/event/list&#x60;, no transactions will actually take place and funds will not move between accounts, even within the Sandbox.
    # @required @param sandbox_transfer_refund_simulate_request [Plaid::SandboxTransferRefundSimulateRequest?]
    # @return nil
    def sandbox_transfer_refund_simulate(
      *,
      sandbox_transfer_refund_simulate_request : Plaid::SandboxTransferRefundSimulateRequest? = nil,
      &block : Crest::Response ->
    ) : Nil
      build_api_request_for_sandbox_transfer_refund_simulate(sandbox_transfer_refund_simulate_request: sandbox_transfer_refund_simulate_request).execute(&block)
    end

    # @return Crest::Request
    def build_api_request_for_sandbox_transfer_refund_simulate(
      *,
      sandbox_transfer_refund_simulate_request : Plaid::SandboxTransferRefundSimulateRequest? = nil
    ) : Crest::Request
      if debugging?
        Log.debug { "Calling API: PlaidApi.sandbox_transfer_refund_simulate ..." }
      end

      if client_side_validation?
        raise ArgumentError.new("\"sandbox_transfer_refund_simulate_request\" is required and cannot be null") if sandbox_transfer_refund_simulate_request.nil?
        unless (_sandbox_transfer_refund_simulate_request = sandbox_transfer_refund_simulate_request).nil?
          _sandbox_transfer_refund_simulate_request.validate if _sandbox_transfer_refund_simulate_request.is_a?(OpenApi::Validatable)
        end
      end

      # resource path
      local_var_path = "/sandbox/transfer/refund/simulate"

      # header parameters
      header_params : Hash(String, String) = Hash(String, String).new
      # HTTP header "Accept" (if needed)
      header_params["Accept"] = @api_client.select_header_accept(["application/json"])
      # HTTP header "Content-Type"
      header_params["Content-Type"] = @api_client.select_header_content_type(["application/json"])

      # cookie parameters
      cookie_params : Hash(String, String) = Hash(String, String).new

      # query parameters
      query_params : Hash(String, (String | Array(String) | JSON::Any)) = Hash(String, (String | Array(String) | JSON::Any)).new

      # form parameters
      form_params : Array(Tuple(String, Crest::ParamsValue)) | Nil = nil

      # http body (model)
      post_body : IO | String | Nil = @api_client.encode(body: sandbox_transfer_refund_simulate_request, content_type: header_params["Content-Type"]?) if !sandbox_transfer_refund_simulate_request.nil?

      # auth_names
      auth_names = ["clientId", "plaidVersion", "secret"]

      @api_client.build_api_request(
        http_method: :"POST",
        path: local_var_path,
        operation: "PlaidApi.sandbox_transfer_refund_simulate",
        post_body: post_body,
        auth_names: auth_names,
        header_params: header_params,
        cookie_params: cookie_params,
        query_params: query_params,
        form_params: form_params
      )
    end

    # Trigger the creation of a repayment
    # Use the `/sandbox/transfer/repayment/simulate` endpoint to trigger the creation of a repayment. As a side effect of calling this route, a repayment is created that includes all unreimbursed returns of guaranteed transfers. If there are no such returns, an 400 error is returned.
    # @required @param sandbox_transfer_repayment_simulate_request [Plaid::SandboxTransferRepaymentSimulateRequest?]
    # @return [SandboxTransferRepaymentSimulateResponse]
    def sandbox_transfer_repayment_simulate(
      *,
      sandbox_transfer_repayment_simulate_request : Plaid::SandboxTransferRepaymentSimulateRequest? = nil
    ) : SandboxTransferRepaymentSimulateResponse
      data, _status_code, _headers = sandbox_transfer_repayment_simulate_with_http_info(sandbox_transfer_repayment_simulate_request: sandbox_transfer_repayment_simulate_request)
      data
    end

    # Trigger the creation of a repayment
    # Use the &#x60;/sandbox/transfer/repayment/simulate&#x60; endpoint to trigger the creation of a repayment. As a side effect of calling this route, a repayment is created that includes all unreimbursed returns of guaranteed transfers. If there are no such returns, an 400 error is returned.
    # @required @param sandbox_transfer_repayment_simulate_request [Plaid::SandboxTransferRepaymentSimulateRequest?]
    # @return [Tuple(SandboxTransferRepaymentSimulateResponse, Integer, Hash)] SandboxTransferRepaymentSimulateResponse, response status code and response headers
    def sandbox_transfer_repayment_simulate_with_http_info(
      *,
      sandbox_transfer_repayment_simulate_request : Plaid::SandboxTransferRepaymentSimulateRequest? = nil
    ) : Tuple(SandboxTransferRepaymentSimulateResponse, Int32, Hash(String, Array(String) | String))
      request = build_api_request_for_sandbox_transfer_repayment_simulate(sandbox_transfer_repayment_simulate_request: sandbox_transfer_repayment_simulate_request)

      body, status_code, headers = @api_client.execute_api_request(request)

      if debugging?
        Log.debug { "API called: PlaidApi#sandbox_transfer_repayment_simulate\nBody: #{body.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}" }
      end

      Tuple.new(SandboxTransferRepaymentSimulateResponse.from_json(body), status_code, headers)
    end

    # Trigger the creation of a repayment
    # Use the &#x60;/sandbox/transfer/repayment/simulate&#x60; endpoint to trigger the creation of a repayment. As a side effect of calling this route, a repayment is created that includes all unreimbursed returns of guaranteed transfers. If there are no such returns, an 400 error is returned.
    # @required @param sandbox_transfer_repayment_simulate_request [Plaid::SandboxTransferRepaymentSimulateRequest?]
    # @return nil
    def sandbox_transfer_repayment_simulate(
      *,
      sandbox_transfer_repayment_simulate_request : Plaid::SandboxTransferRepaymentSimulateRequest? = nil,
      &block : Crest::Response ->
    ) : Nil
      build_api_request_for_sandbox_transfer_repayment_simulate(sandbox_transfer_repayment_simulate_request: sandbox_transfer_repayment_simulate_request).execute(&block)
    end

    # @return Crest::Request
    def build_api_request_for_sandbox_transfer_repayment_simulate(
      *,
      sandbox_transfer_repayment_simulate_request : Plaid::SandboxTransferRepaymentSimulateRequest? = nil
    ) : Crest::Request
      if debugging?
        Log.debug { "Calling API: PlaidApi.sandbox_transfer_repayment_simulate ..." }
      end

      if client_side_validation?
        raise ArgumentError.new("\"sandbox_transfer_repayment_simulate_request\" is required and cannot be null") if sandbox_transfer_repayment_simulate_request.nil?
        unless (_sandbox_transfer_repayment_simulate_request = sandbox_transfer_repayment_simulate_request).nil?
          _sandbox_transfer_repayment_simulate_request.validate if _sandbox_transfer_repayment_simulate_request.is_a?(OpenApi::Validatable)
        end
      end

      # resource path
      local_var_path = "/sandbox/transfer/repayment/simulate"

      # header parameters
      header_params : Hash(String, String) = Hash(String, String).new
      # HTTP header "Accept" (if needed)
      header_params["Accept"] = @api_client.select_header_accept(["application/json"])
      # HTTP header "Content-Type"
      header_params["Content-Type"] = @api_client.select_header_content_type(["application/json"])

      # cookie parameters
      cookie_params : Hash(String, String) = Hash(String, String).new

      # query parameters
      query_params : Hash(String, (String | Array(String) | JSON::Any)) = Hash(String, (String | Array(String) | JSON::Any)).new

      # form parameters
      form_params : Array(Tuple(String, Crest::ParamsValue)) | Nil = nil

      # http body (model)
      post_body : IO | String | Nil = @api_client.encode(body: sandbox_transfer_repayment_simulate_request, content_type: header_params["Content-Type"]?) if !sandbox_transfer_repayment_simulate_request.nil?

      # auth_names
      auth_names = ["clientId", "plaidVersion", "secret"]

      @api_client.build_api_request(
        http_method: :"POST",
        path: local_var_path,
        operation: "PlaidApi.sandbox_transfer_repayment_simulate",
        post_body: post_body,
        auth_names: auth_names,
        header_params: header_params,
        cookie_params: cookie_params,
        query_params: query_params,
        form_params: form_params
      )
    end

    # Simulate a transfer event in Sandbox
    # Use the `/sandbox/transfer/simulate` endpoint to simulate a transfer event in the Sandbox environment.  Note that while an event will be simulated and will appear when using endpoints such as `/transfer/event/sync` or `/transfer/event/list`, no transactions will actually take place and funds will not move between accounts, even within the Sandbox.
    # @required @param sandbox_transfer_simulate_request [Plaid::SandboxTransferSimulateRequest?]
    # @return [SandboxTransferSimulateResponse]
    def sandbox_transfer_simulate(
      *,
      sandbox_transfer_simulate_request : Plaid::SandboxTransferSimulateRequest? = nil
    ) : SandboxTransferSimulateResponse
      data, _status_code, _headers = sandbox_transfer_simulate_with_http_info(sandbox_transfer_simulate_request: sandbox_transfer_simulate_request)
      data
    end

    # Simulate a transfer event in Sandbox
    # Use the &#x60;/sandbox/transfer/simulate&#x60; endpoint to simulate a transfer event in the Sandbox environment.  Note that while an event will be simulated and will appear when using endpoints such as &#x60;/transfer/event/sync&#x60; or &#x60;/transfer/event/list&#x60;, no transactions will actually take place and funds will not move between accounts, even within the Sandbox.
    # @required @param sandbox_transfer_simulate_request [Plaid::SandboxTransferSimulateRequest?]
    # @return [Tuple(SandboxTransferSimulateResponse, Integer, Hash)] SandboxTransferSimulateResponse, response status code and response headers
    def sandbox_transfer_simulate_with_http_info(
      *,
      sandbox_transfer_simulate_request : Plaid::SandboxTransferSimulateRequest? = nil
    ) : Tuple(SandboxTransferSimulateResponse, Int32, Hash(String, Array(String) | String))
      request = build_api_request_for_sandbox_transfer_simulate(sandbox_transfer_simulate_request: sandbox_transfer_simulate_request)

      body, status_code, headers = @api_client.execute_api_request(request)

      if debugging?
        Log.debug { "API called: PlaidApi#sandbox_transfer_simulate\nBody: #{body.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}" }
      end

      Tuple.new(SandboxTransferSimulateResponse.from_json(body), status_code, headers)
    end

    # Simulate a transfer event in Sandbox
    # Use the &#x60;/sandbox/transfer/simulate&#x60; endpoint to simulate a transfer event in the Sandbox environment.  Note that while an event will be simulated and will appear when using endpoints such as &#x60;/transfer/event/sync&#x60; or &#x60;/transfer/event/list&#x60;, no transactions will actually take place and funds will not move between accounts, even within the Sandbox.
    # @required @param sandbox_transfer_simulate_request [Plaid::SandboxTransferSimulateRequest?]
    # @return nil
    def sandbox_transfer_simulate(
      *,
      sandbox_transfer_simulate_request : Plaid::SandboxTransferSimulateRequest? = nil,
      &block : Crest::Response ->
    ) : Nil
      build_api_request_for_sandbox_transfer_simulate(sandbox_transfer_simulate_request: sandbox_transfer_simulate_request).execute(&block)
    end

    # @return Crest::Request
    def build_api_request_for_sandbox_transfer_simulate(
      *,
      sandbox_transfer_simulate_request : Plaid::SandboxTransferSimulateRequest? = nil
    ) : Crest::Request
      if debugging?
        Log.debug { "Calling API: PlaidApi.sandbox_transfer_simulate ..." }
      end

      if client_side_validation?
        raise ArgumentError.new("\"sandbox_transfer_simulate_request\" is required and cannot be null") if sandbox_transfer_simulate_request.nil?
        unless (_sandbox_transfer_simulate_request = sandbox_transfer_simulate_request).nil?
          _sandbox_transfer_simulate_request.validate if _sandbox_transfer_simulate_request.is_a?(OpenApi::Validatable)
        end
      end

      # resource path
      local_var_path = "/sandbox/transfer/simulate"

      # header parameters
      header_params : Hash(String, String) = Hash(String, String).new
      # HTTP header "Accept" (if needed)
      header_params["Accept"] = @api_client.select_header_accept(["application/json"])
      # HTTP header "Content-Type"
      header_params["Content-Type"] = @api_client.select_header_content_type(["application/json"])

      # cookie parameters
      cookie_params : Hash(String, String) = Hash(String, String).new

      # query parameters
      query_params : Hash(String, (String | Array(String) | JSON::Any)) = Hash(String, (String | Array(String) | JSON::Any)).new

      # form parameters
      form_params : Array(Tuple(String, Crest::ParamsValue)) | Nil = nil

      # http body (model)
      post_body : IO | String | Nil = @api_client.encode(body: sandbox_transfer_simulate_request, content_type: header_params["Content-Type"]?) if !sandbox_transfer_simulate_request.nil?

      # auth_names
      auth_names = ["clientId", "plaidVersion", "secret"]

      @api_client.build_api_request(
        http_method: :"POST",
        path: local_var_path,
        operation: "PlaidApi.sandbox_transfer_simulate",
        post_body: post_body,
        auth_names: auth_names,
        header_params: header_params,
        cookie_params: cookie_params,
        query_params: query_params,
        form_params: form_params
      )
    end

    # Simulate creating a sweep
    # Use the `/sandbox/transfer/sweep/simulate` endpoint to create a sweep and associated events in the Sandbox environment. Upon calling this endpoint, all transfers with a sweep status of `swept` will become `swept_settled`, all `posted` or `pending` transfers with a sweep status of `unswept` will become `swept`, and all `returned` transfers with a sweep status of `swept` will become `return_swept`.
    # @required @param sandbox_transfer_sweep_simulate_request [Plaid::SandboxTransferSweepSimulateRequest?]
    # @return [SandboxTransferSweepSimulateResponse]
    def sandbox_transfer_sweep_simulate(
      *,
      sandbox_transfer_sweep_simulate_request : Plaid::SandboxTransferSweepSimulateRequest? = nil
    ) : SandboxTransferSweepSimulateResponse
      data, _status_code, _headers = sandbox_transfer_sweep_simulate_with_http_info(sandbox_transfer_sweep_simulate_request: sandbox_transfer_sweep_simulate_request)
      data
    end

    # Simulate creating a sweep
    # Use the &#x60;/sandbox/transfer/sweep/simulate&#x60; endpoint to create a sweep and associated events in the Sandbox environment. Upon calling this endpoint, all transfers with a sweep status of &#x60;swept&#x60; will become &#x60;swept_settled&#x60;, all &#x60;posted&#x60; or &#x60;pending&#x60; transfers with a sweep status of &#x60;unswept&#x60; will become &#x60;swept&#x60;, and all &#x60;returned&#x60; transfers with a sweep status of &#x60;swept&#x60; will become &#x60;return_swept&#x60;.
    # @required @param sandbox_transfer_sweep_simulate_request [Plaid::SandboxTransferSweepSimulateRequest?]
    # @return [Tuple(SandboxTransferSweepSimulateResponse, Integer, Hash)] SandboxTransferSweepSimulateResponse, response status code and response headers
    def sandbox_transfer_sweep_simulate_with_http_info(
      *,
      sandbox_transfer_sweep_simulate_request : Plaid::SandboxTransferSweepSimulateRequest? = nil
    ) : Tuple(SandboxTransferSweepSimulateResponse, Int32, Hash(String, Array(String) | String))
      request = build_api_request_for_sandbox_transfer_sweep_simulate(sandbox_transfer_sweep_simulate_request: sandbox_transfer_sweep_simulate_request)

      body, status_code, headers = @api_client.execute_api_request(request)

      if debugging?
        Log.debug { "API called: PlaidApi#sandbox_transfer_sweep_simulate\nBody: #{body.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}" }
      end

      Tuple.new(SandboxTransferSweepSimulateResponse.from_json(body), status_code, headers)
    end

    # Simulate creating a sweep
    # Use the &#x60;/sandbox/transfer/sweep/simulate&#x60; endpoint to create a sweep and associated events in the Sandbox environment. Upon calling this endpoint, all transfers with a sweep status of &#x60;swept&#x60; will become &#x60;swept_settled&#x60;, all &#x60;posted&#x60; or &#x60;pending&#x60; transfers with a sweep status of &#x60;unswept&#x60; will become &#x60;swept&#x60;, and all &#x60;returned&#x60; transfers with a sweep status of &#x60;swept&#x60; will become &#x60;return_swept&#x60;.
    # @required @param sandbox_transfer_sweep_simulate_request [Plaid::SandboxTransferSweepSimulateRequest?]
    # @return nil
    def sandbox_transfer_sweep_simulate(
      *,
      sandbox_transfer_sweep_simulate_request : Plaid::SandboxTransferSweepSimulateRequest? = nil,
      &block : Crest::Response ->
    ) : Nil
      build_api_request_for_sandbox_transfer_sweep_simulate(sandbox_transfer_sweep_simulate_request: sandbox_transfer_sweep_simulate_request).execute(&block)
    end

    # @return Crest::Request
    def build_api_request_for_sandbox_transfer_sweep_simulate(
      *,
      sandbox_transfer_sweep_simulate_request : Plaid::SandboxTransferSweepSimulateRequest? = nil
    ) : Crest::Request
      if debugging?
        Log.debug { "Calling API: PlaidApi.sandbox_transfer_sweep_simulate ..." }
      end

      if client_side_validation?
        raise ArgumentError.new("\"sandbox_transfer_sweep_simulate_request\" is required and cannot be null") if sandbox_transfer_sweep_simulate_request.nil?
        unless (_sandbox_transfer_sweep_simulate_request = sandbox_transfer_sweep_simulate_request).nil?
          _sandbox_transfer_sweep_simulate_request.validate if _sandbox_transfer_sweep_simulate_request.is_a?(OpenApi::Validatable)
        end
      end

      # resource path
      local_var_path = "/sandbox/transfer/sweep/simulate"

      # header parameters
      header_params : Hash(String, String) = Hash(String, String).new
      # HTTP header "Accept" (if needed)
      header_params["Accept"] = @api_client.select_header_accept(["application/json"])
      # HTTP header "Content-Type"
      header_params["Content-Type"] = @api_client.select_header_content_type(["application/json"])

      # cookie parameters
      cookie_params : Hash(String, String) = Hash(String, String).new

      # query parameters
      query_params : Hash(String, (String | Array(String) | JSON::Any)) = Hash(String, (String | Array(String) | JSON::Any)).new

      # form parameters
      form_params : Array(Tuple(String, Crest::ParamsValue)) | Nil = nil

      # http body (model)
      post_body : IO | String | Nil = @api_client.encode(body: sandbox_transfer_sweep_simulate_request, content_type: header_params["Content-Type"]?) if !sandbox_transfer_sweep_simulate_request.nil?

      # auth_names
      auth_names = ["clientId", "plaidVersion", "secret"]

      @api_client.build_api_request(
        http_method: :"POST",
        path: local_var_path,
        operation: "PlaidApi.sandbox_transfer_sweep_simulate",
        post_body: post_body,
        auth_names: auth_names,
        header_params: header_params,
        cookie_params: cookie_params,
        query_params: query_params,
        form_params: form_params
      )
    end

    # Advance a test clock
    # Use the `/sandbox/transfer/test_clock/advance` endpoint to advance a `test_clock` in the Sandbox environment.  A test clock object represents an independent timeline and has a `virtual_time` field indicating the current timestamp of the timeline. A test clock can be advanced by incrementing `virtual_time`, but may never go back to a lower `virtual_time`.  If a test clock is advanced, we will simulate the changes that ought to occur during the time that elapsed.  For example, a client creates a weekly recurring transfer with a test clock set at t. When the client advances the test clock by setting `virtual_time` = t + 15 days, 2 new originations should be created, along with the webhook events.  The advancement of the test clock from its current `virtual_time` should be limited such that there are no more than 20 originations resulting from the advance operation on each `recurring_transfer` associated with the `test_clock`.  For example, if the recurring transfer associated with this test clock originates once every 4 weeks, you can advance the `virtual_time` up to 80 weeks on each API call.
    # @required @param sandbox_transfer_test_clock_advance_request [Plaid::SandboxTransferTestClockAdvanceRequest?]
    # @return [SandboxTransferTestClockAdvanceResponse]
    def sandbox_transfer_test_clock_advance(
      *,
      sandbox_transfer_test_clock_advance_request : Plaid::SandboxTransferTestClockAdvanceRequest? = nil
    ) : SandboxTransferTestClockAdvanceResponse
      data, _status_code, _headers = sandbox_transfer_test_clock_advance_with_http_info(sandbox_transfer_test_clock_advance_request: sandbox_transfer_test_clock_advance_request)
      data
    end

    # Advance a test clock
    # Use the &#x60;/sandbox/transfer/test_clock/advance&#x60; endpoint to advance a &#x60;test_clock&#x60; in the Sandbox environment.  A test clock object represents an independent timeline and has a &#x60;virtual_time&#x60; field indicating the current timestamp of the timeline. A test clock can be advanced by incrementing &#x60;virtual_time&#x60;, but may never go back to a lower &#x60;virtual_time&#x60;.  If a test clock is advanced, we will simulate the changes that ought to occur during the time that elapsed.  For example, a client creates a weekly recurring transfer with a test clock set at t. When the client advances the test clock by setting &#x60;virtual_time&#x60; &#x3D; t + 15 days, 2 new originations should be created, along with the webhook events.  The advancement of the test clock from its current &#x60;virtual_time&#x60; should be limited such that there are no more than 20 originations resulting from the advance operation on each &#x60;recurring_transfer&#x60; associated with the &#x60;test_clock&#x60;.  For example, if the recurring transfer associated with this test clock originates once every 4 weeks, you can advance the &#x60;virtual_time&#x60; up to 80 weeks on each API call.
    # @required @param sandbox_transfer_test_clock_advance_request [Plaid::SandboxTransferTestClockAdvanceRequest?]
    # @return [Tuple(SandboxTransferTestClockAdvanceResponse, Integer, Hash)] SandboxTransferTestClockAdvanceResponse, response status code and response headers
    def sandbox_transfer_test_clock_advance_with_http_info(
      *,
      sandbox_transfer_test_clock_advance_request : Plaid::SandboxTransferTestClockAdvanceRequest? = nil
    ) : Tuple(SandboxTransferTestClockAdvanceResponse, Int32, Hash(String, Array(String) | String))
      request = build_api_request_for_sandbox_transfer_test_clock_advance(sandbox_transfer_test_clock_advance_request: sandbox_transfer_test_clock_advance_request)

      body, status_code, headers = @api_client.execute_api_request(request)

      if debugging?
        Log.debug { "API called: PlaidApi#sandbox_transfer_test_clock_advance\nBody: #{body.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}" }
      end

      Tuple.new(SandboxTransferTestClockAdvanceResponse.from_json(body), status_code, headers)
    end

    # Advance a test clock
    # Use the &#x60;/sandbox/transfer/test_clock/advance&#x60; endpoint to advance a &#x60;test_clock&#x60; in the Sandbox environment.  A test clock object represents an independent timeline and has a &#x60;virtual_time&#x60; field indicating the current timestamp of the timeline. A test clock can be advanced by incrementing &#x60;virtual_time&#x60;, but may never go back to a lower &#x60;virtual_time&#x60;.  If a test clock is advanced, we will simulate the changes that ought to occur during the time that elapsed.  For example, a client creates a weekly recurring transfer with a test clock set at t. When the client advances the test clock by setting &#x60;virtual_time&#x60; &#x3D; t + 15 days, 2 new originations should be created, along with the webhook events.  The advancement of the test clock from its current &#x60;virtual_time&#x60; should be limited such that there are no more than 20 originations resulting from the advance operation on each &#x60;recurring_transfer&#x60; associated with the &#x60;test_clock&#x60;.  For example, if the recurring transfer associated with this test clock originates once every 4 weeks, you can advance the &#x60;virtual_time&#x60; up to 80 weeks on each API call.
    # @required @param sandbox_transfer_test_clock_advance_request [Plaid::SandboxTransferTestClockAdvanceRequest?]
    # @return nil
    def sandbox_transfer_test_clock_advance(
      *,
      sandbox_transfer_test_clock_advance_request : Plaid::SandboxTransferTestClockAdvanceRequest? = nil,
      &block : Crest::Response ->
    ) : Nil
      build_api_request_for_sandbox_transfer_test_clock_advance(sandbox_transfer_test_clock_advance_request: sandbox_transfer_test_clock_advance_request).execute(&block)
    end

    # @return Crest::Request
    def build_api_request_for_sandbox_transfer_test_clock_advance(
      *,
      sandbox_transfer_test_clock_advance_request : Plaid::SandboxTransferTestClockAdvanceRequest? = nil
    ) : Crest::Request
      if debugging?
        Log.debug { "Calling API: PlaidApi.sandbox_transfer_test_clock_advance ..." }
      end

      if client_side_validation?
        raise ArgumentError.new("\"sandbox_transfer_test_clock_advance_request\" is required and cannot be null") if sandbox_transfer_test_clock_advance_request.nil?
        unless (_sandbox_transfer_test_clock_advance_request = sandbox_transfer_test_clock_advance_request).nil?
          _sandbox_transfer_test_clock_advance_request.validate if _sandbox_transfer_test_clock_advance_request.is_a?(OpenApi::Validatable)
        end
      end

      # resource path
      local_var_path = "/sandbox/transfer/test_clock/advance"

      # header parameters
      header_params : Hash(String, String) = Hash(String, String).new
      # HTTP header "Accept" (if needed)
      header_params["Accept"] = @api_client.select_header_accept(["application/json"])
      # HTTP header "Content-Type"
      header_params["Content-Type"] = @api_client.select_header_content_type(["application/json"])

      # cookie parameters
      cookie_params : Hash(String, String) = Hash(String, String).new

      # query parameters
      query_params : Hash(String, (String | Array(String) | JSON::Any)) = Hash(String, (String | Array(String) | JSON::Any)).new

      # form parameters
      form_params : Array(Tuple(String, Crest::ParamsValue)) | Nil = nil

      # http body (model)
      post_body : IO | String | Nil = @api_client.encode(body: sandbox_transfer_test_clock_advance_request, content_type: header_params["Content-Type"]?) if !sandbox_transfer_test_clock_advance_request.nil?

      # auth_names
      auth_names = ["clientId", "plaidVersion", "secret"]

      @api_client.build_api_request(
        http_method: :"POST",
        path: local_var_path,
        operation: "PlaidApi.sandbox_transfer_test_clock_advance",
        post_body: post_body,
        auth_names: auth_names,
        header_params: header_params,
        cookie_params: cookie_params,
        query_params: query_params,
        form_params: form_params
      )
    end

    # Create a test clock
    # Use the `/sandbox/transfer/test_clock/create` endpoint to create a `test_clock` in the Sandbox environment.  A test clock object represents an independent timeline and has a `virtual_time` field indicating the current timestamp of the timeline. Test clocks are used for testing recurring transfers in Sandbox.  A test clock can be associated with up to 5 recurring transfers.
    # @required @param sandbox_transfer_test_clock_create_request [Plaid::SandboxTransferTestClockCreateRequest?]
    # @return [SandboxTransferTestClockCreateResponse]
    def sandbox_transfer_test_clock_create(
      *,
      sandbox_transfer_test_clock_create_request : Plaid::SandboxTransferTestClockCreateRequest? = nil
    ) : SandboxTransferTestClockCreateResponse
      data, _status_code, _headers = sandbox_transfer_test_clock_create_with_http_info(sandbox_transfer_test_clock_create_request: sandbox_transfer_test_clock_create_request)
      data
    end

    # Create a test clock
    # Use the &#x60;/sandbox/transfer/test_clock/create&#x60; endpoint to create a &#x60;test_clock&#x60; in the Sandbox environment.  A test clock object represents an independent timeline and has a &#x60;virtual_time&#x60; field indicating the current timestamp of the timeline. Test clocks are used for testing recurring transfers in Sandbox.  A test clock can be associated with up to 5 recurring transfers.
    # @required @param sandbox_transfer_test_clock_create_request [Plaid::SandboxTransferTestClockCreateRequest?]
    # @return [Tuple(SandboxTransferTestClockCreateResponse, Integer, Hash)] SandboxTransferTestClockCreateResponse, response status code and response headers
    def sandbox_transfer_test_clock_create_with_http_info(
      *,
      sandbox_transfer_test_clock_create_request : Plaid::SandboxTransferTestClockCreateRequest? = nil
    ) : Tuple(SandboxTransferTestClockCreateResponse, Int32, Hash(String, Array(String) | String))
      request = build_api_request_for_sandbox_transfer_test_clock_create(sandbox_transfer_test_clock_create_request: sandbox_transfer_test_clock_create_request)

      body, status_code, headers = @api_client.execute_api_request(request)

      if debugging?
        Log.debug { "API called: PlaidApi#sandbox_transfer_test_clock_create\nBody: #{body.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}" }
      end

      Tuple.new(SandboxTransferTestClockCreateResponse.from_json(body), status_code, headers)
    end

    # Create a test clock
    # Use the &#x60;/sandbox/transfer/test_clock/create&#x60; endpoint to create a &#x60;test_clock&#x60; in the Sandbox environment.  A test clock object represents an independent timeline and has a &#x60;virtual_time&#x60; field indicating the current timestamp of the timeline. Test clocks are used for testing recurring transfers in Sandbox.  A test clock can be associated with up to 5 recurring transfers.
    # @required @param sandbox_transfer_test_clock_create_request [Plaid::SandboxTransferTestClockCreateRequest?]
    # @return nil
    def sandbox_transfer_test_clock_create(
      *,
      sandbox_transfer_test_clock_create_request : Plaid::SandboxTransferTestClockCreateRequest? = nil,
      &block : Crest::Response ->
    ) : Nil
      build_api_request_for_sandbox_transfer_test_clock_create(sandbox_transfer_test_clock_create_request: sandbox_transfer_test_clock_create_request).execute(&block)
    end

    # @return Crest::Request
    def build_api_request_for_sandbox_transfer_test_clock_create(
      *,
      sandbox_transfer_test_clock_create_request : Plaid::SandboxTransferTestClockCreateRequest? = nil
    ) : Crest::Request
      if debugging?
        Log.debug { "Calling API: PlaidApi.sandbox_transfer_test_clock_create ..." }
      end

      if client_side_validation?
        raise ArgumentError.new("\"sandbox_transfer_test_clock_create_request\" is required and cannot be null") if sandbox_transfer_test_clock_create_request.nil?
        unless (_sandbox_transfer_test_clock_create_request = sandbox_transfer_test_clock_create_request).nil?
          _sandbox_transfer_test_clock_create_request.validate if _sandbox_transfer_test_clock_create_request.is_a?(OpenApi::Validatable)
        end
      end

      # resource path
      local_var_path = "/sandbox/transfer/test_clock/create"

      # header parameters
      header_params : Hash(String, String) = Hash(String, String).new
      # HTTP header "Accept" (if needed)
      header_params["Accept"] = @api_client.select_header_accept(["application/json"])
      # HTTP header "Content-Type"
      header_params["Content-Type"] = @api_client.select_header_content_type(["application/json"])

      # cookie parameters
      cookie_params : Hash(String, String) = Hash(String, String).new

      # query parameters
      query_params : Hash(String, (String | Array(String) | JSON::Any)) = Hash(String, (String | Array(String) | JSON::Any)).new

      # form parameters
      form_params : Array(Tuple(String, Crest::ParamsValue)) | Nil = nil

      # http body (model)
      post_body : IO | String | Nil = @api_client.encode(body: sandbox_transfer_test_clock_create_request, content_type: header_params["Content-Type"]?) if !sandbox_transfer_test_clock_create_request.nil?

      # auth_names
      auth_names = ["clientId", "plaidVersion", "secret"]

      @api_client.build_api_request(
        http_method: :"POST",
        path: local_var_path,
        operation: "PlaidApi.sandbox_transfer_test_clock_create",
        post_body: post_body,
        auth_names: auth_names,
        header_params: header_params,
        cookie_params: cookie_params,
        query_params: query_params,
        form_params: form_params
      )
    end

    # Get a test clock
    # Use the `/sandbox/transfer/test_clock/get` endpoint to get a `test_clock` in the Sandbox environment.
    # @required @param sandbox_transfer_test_clock_get_request [Plaid::SandboxTransferTestClockGetRequest?]
    # @return [SandboxTransferTestClockGetResponse]
    def sandbox_transfer_test_clock_get(
      *,
      sandbox_transfer_test_clock_get_request : Plaid::SandboxTransferTestClockGetRequest? = nil
    ) : SandboxTransferTestClockGetResponse
      data, _status_code, _headers = sandbox_transfer_test_clock_get_with_http_info(sandbox_transfer_test_clock_get_request: sandbox_transfer_test_clock_get_request)
      data
    end

    # Get a test clock
    # Use the &#x60;/sandbox/transfer/test_clock/get&#x60; endpoint to get a &#x60;test_clock&#x60; in the Sandbox environment.
    # @required @param sandbox_transfer_test_clock_get_request [Plaid::SandboxTransferTestClockGetRequest?]
    # @return [Tuple(SandboxTransferTestClockGetResponse, Integer, Hash)] SandboxTransferTestClockGetResponse, response status code and response headers
    def sandbox_transfer_test_clock_get_with_http_info(
      *,
      sandbox_transfer_test_clock_get_request : Plaid::SandboxTransferTestClockGetRequest? = nil
    ) : Tuple(SandboxTransferTestClockGetResponse, Int32, Hash(String, Array(String) | String))
      request = build_api_request_for_sandbox_transfer_test_clock_get(sandbox_transfer_test_clock_get_request: sandbox_transfer_test_clock_get_request)

      body, status_code, headers = @api_client.execute_api_request(request)

      if debugging?
        Log.debug { "API called: PlaidApi#sandbox_transfer_test_clock_get\nBody: #{body.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}" }
      end

      Tuple.new(SandboxTransferTestClockGetResponse.from_json(body), status_code, headers)
    end

    # Get a test clock
    # Use the &#x60;/sandbox/transfer/test_clock/get&#x60; endpoint to get a &#x60;test_clock&#x60; in the Sandbox environment.
    # @required @param sandbox_transfer_test_clock_get_request [Plaid::SandboxTransferTestClockGetRequest?]
    # @return nil
    def sandbox_transfer_test_clock_get(
      *,
      sandbox_transfer_test_clock_get_request : Plaid::SandboxTransferTestClockGetRequest? = nil,
      &block : Crest::Response ->
    ) : Nil
      build_api_request_for_sandbox_transfer_test_clock_get(sandbox_transfer_test_clock_get_request: sandbox_transfer_test_clock_get_request).execute(&block)
    end

    # @return Crest::Request
    def build_api_request_for_sandbox_transfer_test_clock_get(
      *,
      sandbox_transfer_test_clock_get_request : Plaid::SandboxTransferTestClockGetRequest? = nil
    ) : Crest::Request
      if debugging?
        Log.debug { "Calling API: PlaidApi.sandbox_transfer_test_clock_get ..." }
      end

      if client_side_validation?
        raise ArgumentError.new("\"sandbox_transfer_test_clock_get_request\" is required and cannot be null") if sandbox_transfer_test_clock_get_request.nil?
        unless (_sandbox_transfer_test_clock_get_request = sandbox_transfer_test_clock_get_request).nil?
          _sandbox_transfer_test_clock_get_request.validate if _sandbox_transfer_test_clock_get_request.is_a?(OpenApi::Validatable)
        end
      end

      # resource path
      local_var_path = "/sandbox/transfer/test_clock/get"

      # header parameters
      header_params : Hash(String, String) = Hash(String, String).new
      # HTTP header "Accept" (if needed)
      header_params["Accept"] = @api_client.select_header_accept(["application/json"])
      # HTTP header "Content-Type"
      header_params["Content-Type"] = @api_client.select_header_content_type(["application/json"])

      # cookie parameters
      cookie_params : Hash(String, String) = Hash(String, String).new

      # query parameters
      query_params : Hash(String, (String | Array(String) | JSON::Any)) = Hash(String, (String | Array(String) | JSON::Any)).new

      # form parameters
      form_params : Array(Tuple(String, Crest::ParamsValue)) | Nil = nil

      # http body (model)
      post_body : IO | String | Nil = @api_client.encode(body: sandbox_transfer_test_clock_get_request, content_type: header_params["Content-Type"]?) if !sandbox_transfer_test_clock_get_request.nil?

      # auth_names
      auth_names = ["clientId", "plaidVersion", "secret"]

      @api_client.build_api_request(
        http_method: :"POST",
        path: local_var_path,
        operation: "PlaidApi.sandbox_transfer_test_clock_get",
        post_body: post_body,
        auth_names: auth_names,
        header_params: header_params,
        cookie_params: cookie_params,
        query_params: query_params,
        form_params: form_params
      )
    end

    # List test clocks
    # Use the `/sandbox/transfer/test_clock/list` endpoint to see a list of all your test clocks in the Sandbox environment, by ascending `virtual_time`. Results are paginated; use the `count` and `offset` query parameters to retrieve the desired test clocks.
    # @required @param sandbox_transfer_test_clock_list_request [Plaid::SandboxTransferTestClockListRequest?]
    # @return [SandboxTransferTestClockListResponse]
    def sandbox_transfer_test_clock_list(
      *,
      sandbox_transfer_test_clock_list_request : Plaid::SandboxTransferTestClockListRequest? = nil
    ) : SandboxTransferTestClockListResponse
      data, _status_code, _headers = sandbox_transfer_test_clock_list_with_http_info(sandbox_transfer_test_clock_list_request: sandbox_transfer_test_clock_list_request)
      data
    end

    # List test clocks
    # Use the &#x60;/sandbox/transfer/test_clock/list&#x60; endpoint to see a list of all your test clocks in the Sandbox environment, by ascending &#x60;virtual_time&#x60;. Results are paginated; use the &#x60;count&#x60; and &#x60;offset&#x60; query parameters to retrieve the desired test clocks.
    # @required @param sandbox_transfer_test_clock_list_request [Plaid::SandboxTransferTestClockListRequest?]
    # @return [Tuple(SandboxTransferTestClockListResponse, Integer, Hash)] SandboxTransferTestClockListResponse, response status code and response headers
    def sandbox_transfer_test_clock_list_with_http_info(
      *,
      sandbox_transfer_test_clock_list_request : Plaid::SandboxTransferTestClockListRequest? = nil
    ) : Tuple(SandboxTransferTestClockListResponse, Int32, Hash(String, Array(String) | String))
      request = build_api_request_for_sandbox_transfer_test_clock_list(sandbox_transfer_test_clock_list_request: sandbox_transfer_test_clock_list_request)

      body, status_code, headers = @api_client.execute_api_request(request)

      if debugging?
        Log.debug { "API called: PlaidApi#sandbox_transfer_test_clock_list\nBody: #{body.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}" }
      end

      Tuple.new(SandboxTransferTestClockListResponse.from_json(body), status_code, headers)
    end

    # List test clocks
    # Use the &#x60;/sandbox/transfer/test_clock/list&#x60; endpoint to see a list of all your test clocks in the Sandbox environment, by ascending &#x60;virtual_time&#x60;. Results are paginated; use the &#x60;count&#x60; and &#x60;offset&#x60; query parameters to retrieve the desired test clocks.
    # @required @param sandbox_transfer_test_clock_list_request [Plaid::SandboxTransferTestClockListRequest?]
    # @return nil
    def sandbox_transfer_test_clock_list(
      *,
      sandbox_transfer_test_clock_list_request : Plaid::SandboxTransferTestClockListRequest? = nil,
      &block : Crest::Response ->
    ) : Nil
      build_api_request_for_sandbox_transfer_test_clock_list(sandbox_transfer_test_clock_list_request: sandbox_transfer_test_clock_list_request).execute(&block)
    end

    # @return Crest::Request
    def build_api_request_for_sandbox_transfer_test_clock_list(
      *,
      sandbox_transfer_test_clock_list_request : Plaid::SandboxTransferTestClockListRequest? = nil
    ) : Crest::Request
      if debugging?
        Log.debug { "Calling API: PlaidApi.sandbox_transfer_test_clock_list ..." }
      end

      if client_side_validation?
        raise ArgumentError.new("\"sandbox_transfer_test_clock_list_request\" is required and cannot be null") if sandbox_transfer_test_clock_list_request.nil?
        unless (_sandbox_transfer_test_clock_list_request = sandbox_transfer_test_clock_list_request).nil?
          _sandbox_transfer_test_clock_list_request.validate if _sandbox_transfer_test_clock_list_request.is_a?(OpenApi::Validatable)
        end
      end

      # resource path
      local_var_path = "/sandbox/transfer/test_clock/list"

      # header parameters
      header_params : Hash(String, String) = Hash(String, String).new
      # HTTP header "Accept" (if needed)
      header_params["Accept"] = @api_client.select_header_accept(["application/json"])
      # HTTP header "Content-Type"
      header_params["Content-Type"] = @api_client.select_header_content_type(["application/json"])

      # cookie parameters
      cookie_params : Hash(String, String) = Hash(String, String).new

      # query parameters
      query_params : Hash(String, (String | Array(String) | JSON::Any)) = Hash(String, (String | Array(String) | JSON::Any)).new

      # form parameters
      form_params : Array(Tuple(String, Crest::ParamsValue)) | Nil = nil

      # http body (model)
      post_body : IO | String | Nil = @api_client.encode(body: sandbox_transfer_test_clock_list_request, content_type: header_params["Content-Type"]?) if !sandbox_transfer_test_clock_list_request.nil?

      # auth_names
      auth_names = ["clientId", "plaidVersion", "secret"]

      @api_client.build_api_request(
        http_method: :"POST",
        path: local_var_path,
        operation: "PlaidApi.sandbox_transfer_test_clock_list",
        post_body: post_body,
        auth_names: auth_names,
        header_params: header_params,
        cookie_params: cookie_params,
        query_params: query_params,
        form_params: form_params
      )
    end

    # Report whether you initiated an ACH transaction
    # After calling `/signal/evaluate`, call `/signal/decision/report` to report whether the transaction was initiated.
    # @required @param signal_decision_report_request [Plaid::SignalDecisionReportRequest?]
    # @return [SignalDecisionReportResponse]
    def signal_decision_report(
      *,
      signal_decision_report_request : Plaid::SignalDecisionReportRequest? = nil
    ) : SignalDecisionReportResponse
      data, _status_code, _headers = signal_decision_report_with_http_info(signal_decision_report_request: signal_decision_report_request)
      data
    end

    # Report whether you initiated an ACH transaction
    # After calling &#x60;/signal/evaluate&#x60;, call &#x60;/signal/decision/report&#x60; to report whether the transaction was initiated.
    # @required @param signal_decision_report_request [Plaid::SignalDecisionReportRequest?]
    # @return [Tuple(SignalDecisionReportResponse, Integer, Hash)] SignalDecisionReportResponse, response status code and response headers
    def signal_decision_report_with_http_info(
      *,
      signal_decision_report_request : Plaid::SignalDecisionReportRequest? = nil
    ) : Tuple(SignalDecisionReportResponse, Int32, Hash(String, Array(String) | String))
      request = build_api_request_for_signal_decision_report(signal_decision_report_request: signal_decision_report_request)

      body, status_code, headers = @api_client.execute_api_request(request)

      if debugging?
        Log.debug { "API called: PlaidApi#signal_decision_report\nBody: #{body.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}" }
      end

      Tuple.new(SignalDecisionReportResponse.from_json(body), status_code, headers)
    end

    # Report whether you initiated an ACH transaction
    # After calling &#x60;/signal/evaluate&#x60;, call &#x60;/signal/decision/report&#x60; to report whether the transaction was initiated.
    # @required @param signal_decision_report_request [Plaid::SignalDecisionReportRequest?]
    # @return nil
    def signal_decision_report(
      *,
      signal_decision_report_request : Plaid::SignalDecisionReportRequest? = nil,
      &block : Crest::Response ->
    ) : Nil
      build_api_request_for_signal_decision_report(signal_decision_report_request: signal_decision_report_request).execute(&block)
    end

    # @return Crest::Request
    def build_api_request_for_signal_decision_report(
      *,
      signal_decision_report_request : Plaid::SignalDecisionReportRequest? = nil
    ) : Crest::Request
      if debugging?
        Log.debug { "Calling API: PlaidApi.signal_decision_report ..." }
      end

      if client_side_validation?
        raise ArgumentError.new("\"signal_decision_report_request\" is required and cannot be null") if signal_decision_report_request.nil?
        unless (_signal_decision_report_request = signal_decision_report_request).nil?
          _signal_decision_report_request.validate if _signal_decision_report_request.is_a?(OpenApi::Validatable)
        end
      end

      # resource path
      local_var_path = "/signal/decision/report"

      # header parameters
      header_params : Hash(String, String) = Hash(String, String).new
      # HTTP header "Accept" (if needed)
      header_params["Accept"] = @api_client.select_header_accept(["application/json"])
      # HTTP header "Content-Type"
      header_params["Content-Type"] = @api_client.select_header_content_type(["application/json"])

      # cookie parameters
      cookie_params : Hash(String, String) = Hash(String, String).new

      # query parameters
      query_params : Hash(String, (String | Array(String) | JSON::Any)) = Hash(String, (String | Array(String) | JSON::Any)).new

      # form parameters
      form_params : Array(Tuple(String, Crest::ParamsValue)) | Nil = nil

      # http body (model)
      post_body : IO | String | Nil = @api_client.encode(body: signal_decision_report_request, content_type: header_params["Content-Type"]?) if !signal_decision_report_request.nil?

      # auth_names
      auth_names = ["clientId", "plaidVersion", "secret"]

      @api_client.build_api_request(
        http_method: :"POST",
        path: local_var_path,
        operation: "PlaidApi.signal_decision_report",
        post_body: post_body,
        auth_names: auth_names,
        header_params: header_params,
        cookie_params: cookie_params,
        query_params: query_params,
        form_params: form_params
      )
    end

    # Evaluate a planned ACH transaction
    # Use `/signal/evaluate` to evaluate a planned ACH transaction to get a return risk assessment (such as a risk score and risk tier) and additional risk signals.  In order to obtain a valid score for an ACH transaction, Plaid must have an access token for the account, and the Item must be healthy (receiving product updates) or have recently been in a healthy state. If the transaction does not meet eligibility requirements, an error will be returned corresponding to the underlying cause. If `/signal/evaluate` is called on the same transaction multiple times within a 24-hour period, cached results may be returned. For more information please refer to the error documentation on [Item errors](/docs/errors/item/) and [Link in Update Mode](/docs/link/update-mode/).  Note: This request may take some time to complete if Signal is being added to an existing Item. This is because Plaid must communicate directly with the institution when retrieving the data for the first time.
    # @required @param signal_evaluate_request [Plaid::SignalEvaluateRequest?]
    # @return [SignalEvaluateResponse]
    def signal_evaluate(
      *,
      signal_evaluate_request : Plaid::SignalEvaluateRequest? = nil
    ) : SignalEvaluateResponse
      data, _status_code, _headers = signal_evaluate_with_http_info(signal_evaluate_request: signal_evaluate_request)
      data
    end

    # Evaluate a planned ACH transaction
    # Use &#x60;/signal/evaluate&#x60; to evaluate a planned ACH transaction to get a return risk assessment (such as a risk score and risk tier) and additional risk signals.  In order to obtain a valid score for an ACH transaction, Plaid must have an access token for the account, and the Item must be healthy (receiving product updates) or have recently been in a healthy state. If the transaction does not meet eligibility requirements, an error will be returned corresponding to the underlying cause. If &#x60;/signal/evaluate&#x60; is called on the same transaction multiple times within a 24-hour period, cached results may be returned. For more information please refer to the error documentation on [Item errors](/docs/errors/item/) and [Link in Update Mode](/docs/link/update-mode/).  Note: This request may take some time to complete if Signal is being added to an existing Item. This is because Plaid must communicate directly with the institution when retrieving the data for the first time.
    # @required @param signal_evaluate_request [Plaid::SignalEvaluateRequest?]
    # @return [Tuple(SignalEvaluateResponse, Integer, Hash)] SignalEvaluateResponse, response status code and response headers
    def signal_evaluate_with_http_info(
      *,
      signal_evaluate_request : Plaid::SignalEvaluateRequest? = nil
    ) : Tuple(SignalEvaluateResponse, Int32, Hash(String, Array(String) | String))
      request = build_api_request_for_signal_evaluate(signal_evaluate_request: signal_evaluate_request)

      body, status_code, headers = @api_client.execute_api_request(request)

      if debugging?
        Log.debug { "API called: PlaidApi#signal_evaluate\nBody: #{body.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}" }
      end

      Tuple.new(SignalEvaluateResponse.from_json(body), status_code, headers)
    end

    # Evaluate a planned ACH transaction
    # Use &#x60;/signal/evaluate&#x60; to evaluate a planned ACH transaction to get a return risk assessment (such as a risk score and risk tier) and additional risk signals.  In order to obtain a valid score for an ACH transaction, Plaid must have an access token for the account, and the Item must be healthy (receiving product updates) or have recently been in a healthy state. If the transaction does not meet eligibility requirements, an error will be returned corresponding to the underlying cause. If &#x60;/signal/evaluate&#x60; is called on the same transaction multiple times within a 24-hour period, cached results may be returned. For more information please refer to the error documentation on [Item errors](/docs/errors/item/) and [Link in Update Mode](/docs/link/update-mode/).  Note: This request may take some time to complete if Signal is being added to an existing Item. This is because Plaid must communicate directly with the institution when retrieving the data for the first time.
    # @required @param signal_evaluate_request [Plaid::SignalEvaluateRequest?]
    # @return nil
    def signal_evaluate(
      *,
      signal_evaluate_request : Plaid::SignalEvaluateRequest? = nil,
      &block : Crest::Response ->
    ) : Nil
      build_api_request_for_signal_evaluate(signal_evaluate_request: signal_evaluate_request).execute(&block)
    end

    # @return Crest::Request
    def build_api_request_for_signal_evaluate(
      *,
      signal_evaluate_request : Plaid::SignalEvaluateRequest? = nil
    ) : Crest::Request
      if debugging?
        Log.debug { "Calling API: PlaidApi.signal_evaluate ..." }
      end

      if client_side_validation?
        raise ArgumentError.new("\"signal_evaluate_request\" is required and cannot be null") if signal_evaluate_request.nil?
        unless (_signal_evaluate_request = signal_evaluate_request).nil?
          _signal_evaluate_request.validate if _signal_evaluate_request.is_a?(OpenApi::Validatable)
        end
      end

      # resource path
      local_var_path = "/signal/evaluate"

      # header parameters
      header_params : Hash(String, String) = Hash(String, String).new
      # HTTP header "Accept" (if needed)
      header_params["Accept"] = @api_client.select_header_accept(["application/json"])
      # HTTP header "Content-Type"
      header_params["Content-Type"] = @api_client.select_header_content_type(["application/json"])

      # cookie parameters
      cookie_params : Hash(String, String) = Hash(String, String).new

      # query parameters
      query_params : Hash(String, (String | Array(String) | JSON::Any)) = Hash(String, (String | Array(String) | JSON::Any)).new

      # form parameters
      form_params : Array(Tuple(String, Crest::ParamsValue)) | Nil = nil

      # http body (model)
      post_body : IO | String | Nil = @api_client.encode(body: signal_evaluate_request, content_type: header_params["Content-Type"]?) if !signal_evaluate_request.nil?

      # auth_names
      auth_names = ["clientId", "plaidVersion", "secret"]

      @api_client.build_api_request(
        http_method: :"POST",
        path: local_var_path,
        operation: "PlaidApi.signal_evaluate",
        post_body: post_body,
        auth_names: auth_names,
        header_params: header_params,
        cookie_params: cookie_params,
        query_params: query_params,
        form_params: form_params
      )
    end

    # Opt-in an Item to Signal
    # When Link is not initialized with Signal, call `/signal/prepare` to opt-in that Item to the Signal data collection process, developing a Signal score.  If you are using other Plaid products after Link, e.g. Identity or Assets, call `/signal/prepare` after those product calls are complete.  Example flow: Link is initialized with Auth, call `/auth/get` for the account and routing number, call `/identity/get` to retrieve bank ownership details, then call `/signal/prepare` to begin Signal data collection. Later, once you have obtained details about the proposed transaction from the user, call `/signal/evaluate` for a Signal score. For more information please see [Recommendations for initializing Link with specific product combinations](https://www.plaid.com/docs/link/initializing-products/#recommendations-for-initializing-link-with-specific-product-combinations).  If run on an Item that is already initialized with Signal, this endpoint will return a 200 response and will not modify the Item.
    # @required @param signal_prepare_request [Plaid::SignalPrepareRequest?]
    # @return [SignalPrepareResponse]
    def signal_prepare(
      *,
      signal_prepare_request : Plaid::SignalPrepareRequest? = nil
    ) : SignalPrepareResponse
      data, _status_code, _headers = signal_prepare_with_http_info(signal_prepare_request: signal_prepare_request)
      data
    end

    # Opt-in an Item to Signal
    # When Link is not initialized with Signal, call &#x60;/signal/prepare&#x60; to opt-in that Item to the Signal data collection process, developing a Signal score.  If you are using other Plaid products after Link, e.g. Identity or Assets, call &#x60;/signal/prepare&#x60; after those product calls are complete.  Example flow: Link is initialized with Auth, call &#x60;/auth/get&#x60; for the account and routing number, call &#x60;/identity/get&#x60; to retrieve bank ownership details, then call &#x60;/signal/prepare&#x60; to begin Signal data collection. Later, once you have obtained details about the proposed transaction from the user, call &#x60;/signal/evaluate&#x60; for a Signal score. For more information please see [Recommendations for initializing Link with specific product combinations](https://www.plaid.com/docs/link/initializing-products/#recommendations-for-initializing-link-with-specific-product-combinations).  If run on an Item that is already initialized with Signal, this endpoint will return a 200 response and will not modify the Item.
    # @required @param signal_prepare_request [Plaid::SignalPrepareRequest?]
    # @return [Tuple(SignalPrepareResponse, Integer, Hash)] SignalPrepareResponse, response status code and response headers
    def signal_prepare_with_http_info(
      *,
      signal_prepare_request : Plaid::SignalPrepareRequest? = nil
    ) : Tuple(SignalPrepareResponse, Int32, Hash(String, Array(String) | String))
      request = build_api_request_for_signal_prepare(signal_prepare_request: signal_prepare_request)

      body, status_code, headers = @api_client.execute_api_request(request)

      if debugging?
        Log.debug { "API called: PlaidApi#signal_prepare\nBody: #{body.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}" }
      end

      Tuple.new(SignalPrepareResponse.from_json(body), status_code, headers)
    end

    # Opt-in an Item to Signal
    # When Link is not initialized with Signal, call &#x60;/signal/prepare&#x60; to opt-in that Item to the Signal data collection process, developing a Signal score.  If you are using other Plaid products after Link, e.g. Identity or Assets, call &#x60;/signal/prepare&#x60; after those product calls are complete.  Example flow: Link is initialized with Auth, call &#x60;/auth/get&#x60; for the account and routing number, call &#x60;/identity/get&#x60; to retrieve bank ownership details, then call &#x60;/signal/prepare&#x60; to begin Signal data collection. Later, once you have obtained details about the proposed transaction from the user, call &#x60;/signal/evaluate&#x60; for a Signal score. For more information please see [Recommendations for initializing Link with specific product combinations](https://www.plaid.com/docs/link/initializing-products/#recommendations-for-initializing-link-with-specific-product-combinations).  If run on an Item that is already initialized with Signal, this endpoint will return a 200 response and will not modify the Item.
    # @required @param signal_prepare_request [Plaid::SignalPrepareRequest?]
    # @return nil
    def signal_prepare(
      *,
      signal_prepare_request : Plaid::SignalPrepareRequest? = nil,
      &block : Crest::Response ->
    ) : Nil
      build_api_request_for_signal_prepare(signal_prepare_request: signal_prepare_request).execute(&block)
    end

    # @return Crest::Request
    def build_api_request_for_signal_prepare(
      *,
      signal_prepare_request : Plaid::SignalPrepareRequest? = nil
    ) : Crest::Request
      if debugging?
        Log.debug { "Calling API: PlaidApi.signal_prepare ..." }
      end

      if client_side_validation?
        raise ArgumentError.new("\"signal_prepare_request\" is required and cannot be null") if signal_prepare_request.nil?
        unless (_signal_prepare_request = signal_prepare_request).nil?
          _signal_prepare_request.validate if _signal_prepare_request.is_a?(OpenApi::Validatable)
        end
      end

      # resource path
      local_var_path = "/signal/prepare"

      # header parameters
      header_params : Hash(String, String) = Hash(String, String).new
      # HTTP header "Accept" (if needed)
      header_params["Accept"] = @api_client.select_header_accept(["application/json"])
      # HTTP header "Content-Type"
      header_params["Content-Type"] = @api_client.select_header_content_type(["application/json"])

      # cookie parameters
      cookie_params : Hash(String, String) = Hash(String, String).new

      # query parameters
      query_params : Hash(String, (String | Array(String) | JSON::Any)) = Hash(String, (String | Array(String) | JSON::Any)).new

      # form parameters
      form_params : Array(Tuple(String, Crest::ParamsValue)) | Nil = nil

      # http body (model)
      post_body : IO | String | Nil = @api_client.encode(body: signal_prepare_request, content_type: header_params["Content-Type"]?) if !signal_prepare_request.nil?

      # auth_names
      auth_names = ["clientId", "plaidVersion", "secret"]

      @api_client.build_api_request(
        http_method: :"POST",
        path: local_var_path,
        operation: "PlaidApi.signal_prepare",
        post_body: post_body,
        auth_names: auth_names,
        header_params: header_params,
        cookie_params: cookie_params,
        query_params: query_params,
        form_params: form_params
      )
    end

    # Report a return for an ACH transaction
    # Call the `/signal/return/report` endpoint to report a returned transaction that was previously sent to the `/signal/evaluate` endpoint. Your feedback will be used by the model to incorporate the latest risk trend in your portfolio.
    # @required @param signal_return_report_request [Plaid::SignalReturnReportRequest?]
    # @return [SignalReturnReportResponse]
    def signal_return_report(
      *,
      signal_return_report_request : Plaid::SignalReturnReportRequest? = nil
    ) : SignalReturnReportResponse
      data, _status_code, _headers = signal_return_report_with_http_info(signal_return_report_request: signal_return_report_request)
      data
    end

    # Report a return for an ACH transaction
    # Call the &#x60;/signal/return/report&#x60; endpoint to report a returned transaction that was previously sent to the &#x60;/signal/evaluate&#x60; endpoint. Your feedback will be used by the model to incorporate the latest risk trend in your portfolio.
    # @required @param signal_return_report_request [Plaid::SignalReturnReportRequest?]
    # @return [Tuple(SignalReturnReportResponse, Integer, Hash)] SignalReturnReportResponse, response status code and response headers
    def signal_return_report_with_http_info(
      *,
      signal_return_report_request : Plaid::SignalReturnReportRequest? = nil
    ) : Tuple(SignalReturnReportResponse, Int32, Hash(String, Array(String) | String))
      request = build_api_request_for_signal_return_report(signal_return_report_request: signal_return_report_request)

      body, status_code, headers = @api_client.execute_api_request(request)

      if debugging?
        Log.debug { "API called: PlaidApi#signal_return_report\nBody: #{body.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}" }
      end

      Tuple.new(SignalReturnReportResponse.from_json(body), status_code, headers)
    end

    # Report a return for an ACH transaction
    # Call the &#x60;/signal/return/report&#x60; endpoint to report a returned transaction that was previously sent to the &#x60;/signal/evaluate&#x60; endpoint. Your feedback will be used by the model to incorporate the latest risk trend in your portfolio.
    # @required @param signal_return_report_request [Plaid::SignalReturnReportRequest?]
    # @return nil
    def signal_return_report(
      *,
      signal_return_report_request : Plaid::SignalReturnReportRequest? = nil,
      &block : Crest::Response ->
    ) : Nil
      build_api_request_for_signal_return_report(signal_return_report_request: signal_return_report_request).execute(&block)
    end

    # @return Crest::Request
    def build_api_request_for_signal_return_report(
      *,
      signal_return_report_request : Plaid::SignalReturnReportRequest? = nil
    ) : Crest::Request
      if debugging?
        Log.debug { "Calling API: PlaidApi.signal_return_report ..." }
      end

      if client_side_validation?
        raise ArgumentError.new("\"signal_return_report_request\" is required and cannot be null") if signal_return_report_request.nil?
        unless (_signal_return_report_request = signal_return_report_request).nil?
          _signal_return_report_request.validate if _signal_return_report_request.is_a?(OpenApi::Validatable)
        end
      end

      # resource path
      local_var_path = "/signal/return/report"

      # header parameters
      header_params : Hash(String, String) = Hash(String, String).new
      # HTTP header "Accept" (if needed)
      header_params["Accept"] = @api_client.select_header_accept(["application/json"])
      # HTTP header "Content-Type"
      header_params["Content-Type"] = @api_client.select_header_content_type(["application/json"])

      # cookie parameters
      cookie_params : Hash(String, String) = Hash(String, String).new

      # query parameters
      query_params : Hash(String, (String | Array(String) | JSON::Any)) = Hash(String, (String | Array(String) | JSON::Any)).new

      # form parameters
      form_params : Array(Tuple(String, Crest::ParamsValue)) | Nil = nil

      # http body (model)
      post_body : IO | String | Nil = @api_client.encode(body: signal_return_report_request, content_type: header_params["Content-Type"]?) if !signal_return_report_request.nil?

      # auth_names
      auth_names = ["clientId", "plaidVersion", "secret"]

      @api_client.build_api_request(
        http_method: :"POST",
        path: local_var_path,
        operation: "PlaidApi.signal_return_report",
        post_body: post_body,
        auth_names: auth_names,
        header_params: header_params,
        cookie_params: cookie_params,
        query_params: query_params,
        form_params: form_params
      )
    end

    # Retrieve a single statement.
    # The `/statements/download` endpoint retrieves a single statement PDF in binary format.  The response will contain a `Plaid-Content-Hash` header containing a SHA 256 checksum of the statement. This can be used to verify that the file being sent by Plaid is the same file that was downloaded to your system.
    # @required @param statements_download_request [Plaid::StatementsDownloadRequest?]
    # @return [::File]
    def statements_download(
      *,
      statements_download_request : Plaid::StatementsDownloadRequest? = nil
    ) : ::File
      data, _status_code, _headers = statements_download_with_http_info(statements_download_request: statements_download_request)
      data
    end

    # Retrieve a single statement.
    # The &#x60;/statements/download&#x60; endpoint retrieves a single statement PDF in binary format.  The response will contain a &#x60;Plaid-Content-Hash&#x60; header containing a SHA 256 checksum of the statement. This can be used to verify that the file being sent by Plaid is the same file that was downloaded to your system.
    # @required @param statements_download_request [Plaid::StatementsDownloadRequest?]
    # @return [Tuple(::File, Integer, Hash)] ::File, response status code and response headers
    def statements_download_with_http_info(
      *,
      statements_download_request : Plaid::StatementsDownloadRequest? = nil
    ) : Tuple(::File, Int32, Hash(String, Array(String) | String))
      request = build_api_request_for_statements_download(statements_download_request: statements_download_request)

      body, status_code, headers = @api_client.execute_api_request(request)

      if debugging?
        Log.debug { "API called: PlaidApi#statements_download\nBody: #{body.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}" }
      end

      Tuple.new(::File.from_json(body), status_code, headers)
    end

    # Retrieve a single statement.
    # The &#x60;/statements/download&#x60; endpoint retrieves a single statement PDF in binary format.  The response will contain a &#x60;Plaid-Content-Hash&#x60; header containing a SHA 256 checksum of the statement. This can be used to verify that the file being sent by Plaid is the same file that was downloaded to your system.
    # @required @param statements_download_request [Plaid::StatementsDownloadRequest?]
    # @return nil
    def statements_download(
      *,
      statements_download_request : Plaid::StatementsDownloadRequest? = nil,
      &block : Crest::Response ->
    ) : Nil
      build_api_request_for_statements_download(statements_download_request: statements_download_request).execute(&block)
    end

    # @return Crest::Request
    def build_api_request_for_statements_download(
      *,
      statements_download_request : Plaid::StatementsDownloadRequest? = nil
    ) : Crest::Request
      if debugging?
        Log.debug { "Calling API: PlaidApi.statements_download ..." }
      end

      if client_side_validation?
        raise ArgumentError.new("\"statements_download_request\" is required and cannot be null") if statements_download_request.nil?
        unless (_statements_download_request = statements_download_request).nil?
          _statements_download_request.validate if _statements_download_request.is_a?(OpenApi::Validatable)
        end
      end

      # resource path
      local_var_path = "/statements/download"

      # header parameters
      header_params : Hash(String, String) = Hash(String, String).new
      # HTTP header "Accept" (if needed)
      header_params["Accept"] = @api_client.select_header_accept(["application/json"])
      # HTTP header "Content-Type"
      header_params["Content-Type"] = @api_client.select_header_content_type(["application/json"])

      # cookie parameters
      cookie_params : Hash(String, String) = Hash(String, String).new

      # query parameters
      query_params : Hash(String, (String | Array(String) | JSON::Any)) = Hash(String, (String | Array(String) | JSON::Any)).new

      # form parameters
      form_params : Array(Tuple(String, Crest::ParamsValue)) | Nil = nil

      # http body (model)
      post_body : IO | String | Nil = @api_client.encode(body: statements_download_request, content_type: header_params["Content-Type"]?) if !statements_download_request.nil?

      # auth_names
      auth_names = ["clientId", "plaidVersion", "secret"]

      @api_client.build_api_request(
        http_method: :"POST",
        path: local_var_path,
        operation: "PlaidApi.statements_download",
        post_body: post_body,
        auth_names: auth_names,
        header_params: header_params,
        cookie_params: cookie_params,
        query_params: query_params,
        form_params: form_params
      )
    end

    # Retrieve a list of all statements associated with the provided item.
    # The `/statements/list` endpoint retrieves a list of all statements associated with the provided item.
    # @required @param statements_list_request [Plaid::StatementsListRequest?]
    # @return [StatementsListResponse]
    def statements_list(
      *,
      statements_list_request : Plaid::StatementsListRequest? = nil
    ) : StatementsListResponse
      data, _status_code, _headers = statements_list_with_http_info(statements_list_request: statements_list_request)
      data
    end

    # Retrieve a list of all statements associated with the provided item.
    # The &#x60;/statements/list&#x60; endpoint retrieves a list of all statements associated with the provided item.
    # @required @param statements_list_request [Plaid::StatementsListRequest?]
    # @return [Tuple(StatementsListResponse, Integer, Hash)] StatementsListResponse, response status code and response headers
    def statements_list_with_http_info(
      *,
      statements_list_request : Plaid::StatementsListRequest? = nil
    ) : Tuple(StatementsListResponse, Int32, Hash(String, Array(String) | String))
      request = build_api_request_for_statements_list(statements_list_request: statements_list_request)

      body, status_code, headers = @api_client.execute_api_request(request)

      if debugging?
        Log.debug { "API called: PlaidApi#statements_list\nBody: #{body.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}" }
      end

      Tuple.new(StatementsListResponse.from_json(body), status_code, headers)
    end

    # Retrieve a list of all statements associated with the provided item.
    # The &#x60;/statements/list&#x60; endpoint retrieves a list of all statements associated with the provided item.
    # @required @param statements_list_request [Plaid::StatementsListRequest?]
    # @return nil
    def statements_list(
      *,
      statements_list_request : Plaid::StatementsListRequest? = nil,
      &block : Crest::Response ->
    ) : Nil
      build_api_request_for_statements_list(statements_list_request: statements_list_request).execute(&block)
    end

    # @return Crest::Request
    def build_api_request_for_statements_list(
      *,
      statements_list_request : Plaid::StatementsListRequest? = nil
    ) : Crest::Request
      if debugging?
        Log.debug { "Calling API: PlaidApi.statements_list ..." }
      end

      if client_side_validation?
        raise ArgumentError.new("\"statements_list_request\" is required and cannot be null") if statements_list_request.nil?
        unless (_statements_list_request = statements_list_request).nil?
          _statements_list_request.validate if _statements_list_request.is_a?(OpenApi::Validatable)
        end
      end

      # resource path
      local_var_path = "/statements/list"

      # header parameters
      header_params : Hash(String, String) = Hash(String, String).new
      # HTTP header "Accept" (if needed)
      header_params["Accept"] = @api_client.select_header_accept(["application/json"])
      # HTTP header "Content-Type"
      header_params["Content-Type"] = @api_client.select_header_content_type(["application/json"])

      # cookie parameters
      cookie_params : Hash(String, String) = Hash(String, String).new

      # query parameters
      query_params : Hash(String, (String | Array(String) | JSON::Any)) = Hash(String, (String | Array(String) | JSON::Any)).new

      # form parameters
      form_params : Array(Tuple(String, Crest::ParamsValue)) | Nil = nil

      # http body (model)
      post_body : IO | String | Nil = @api_client.encode(body: statements_list_request, content_type: header_params["Content-Type"]?) if !statements_list_request.nil?

      # auth_names
      auth_names = ["clientId", "plaidVersion", "secret"]

      @api_client.build_api_request(
        http_method: :"POST",
        path: local_var_path,
        operation: "PlaidApi.statements_list",
        post_body: post_body,
        auth_names: auth_names,
        header_params: header_params,
        cookie_params: cookie_params,
        query_params: query_params,
        form_params: form_params
      )
    end

    # enhance locally-held transaction data
    # The `/beta/transactions/v1/enhance` endpoint enriches raw transaction data provided directly by clients.  The product is currently in beta.
    # @required @param transactions_enhance_get_request [Plaid::TransactionsEnhanceGetRequest?]
    # @return [TransactionsEnhanceGetResponse]
    def transactions_enhance(
      *,
      transactions_enhance_get_request : Plaid::TransactionsEnhanceGetRequest? = nil
    ) : TransactionsEnhanceGetResponse
      data, _status_code, _headers = transactions_enhance_with_http_info(transactions_enhance_get_request: transactions_enhance_get_request)
      data
    end

    # enhance locally-held transaction data
    # The &#x60;/beta/transactions/v1/enhance&#x60; endpoint enriches raw transaction data provided directly by clients.  The product is currently in beta.
    # @required @param transactions_enhance_get_request [Plaid::TransactionsEnhanceGetRequest?]
    # @return [Tuple(TransactionsEnhanceGetResponse, Integer, Hash)] TransactionsEnhanceGetResponse, response status code and response headers
    def transactions_enhance_with_http_info(
      *,
      transactions_enhance_get_request : Plaid::TransactionsEnhanceGetRequest? = nil
    ) : Tuple(TransactionsEnhanceGetResponse, Int32, Hash(String, Array(String) | String))
      request = build_api_request_for_transactions_enhance(transactions_enhance_get_request: transactions_enhance_get_request)

      body, status_code, headers = @api_client.execute_api_request(request)

      if debugging?
        Log.debug { "API called: PlaidApi#transactions_enhance\nBody: #{body.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}" }
      end

      Tuple.new(TransactionsEnhanceGetResponse.from_json(body), status_code, headers)
    end

    # enhance locally-held transaction data
    # The &#x60;/beta/transactions/v1/enhance&#x60; endpoint enriches raw transaction data provided directly by clients.  The product is currently in beta.
    # @required @param transactions_enhance_get_request [Plaid::TransactionsEnhanceGetRequest?]
    # @return nil
    def transactions_enhance(
      *,
      transactions_enhance_get_request : Plaid::TransactionsEnhanceGetRequest? = nil,
      &block : Crest::Response ->
    ) : Nil
      build_api_request_for_transactions_enhance(transactions_enhance_get_request: transactions_enhance_get_request).execute(&block)
    end

    # @return Crest::Request
    def build_api_request_for_transactions_enhance(
      *,
      transactions_enhance_get_request : Plaid::TransactionsEnhanceGetRequest? = nil
    ) : Crest::Request
      if debugging?
        Log.debug { "Calling API: PlaidApi.transactions_enhance ..." }
      end

      if client_side_validation?
        raise ArgumentError.new("\"transactions_enhance_get_request\" is required and cannot be null") if transactions_enhance_get_request.nil?
        unless (_transactions_enhance_get_request = transactions_enhance_get_request).nil?
          _transactions_enhance_get_request.validate if _transactions_enhance_get_request.is_a?(OpenApi::Validatable)
        end
      end

      # resource path
      local_var_path = "/beta/transactions/v1/enhance"

      # header parameters
      header_params : Hash(String, String) = Hash(String, String).new
      # HTTP header "Accept" (if needed)
      header_params["Accept"] = @api_client.select_header_accept(["application/json"])
      # HTTP header "Content-Type"
      header_params["Content-Type"] = @api_client.select_header_content_type(["application/json"])

      # cookie parameters
      cookie_params : Hash(String, String) = Hash(String, String).new

      # query parameters
      query_params : Hash(String, (String | Array(String) | JSON::Any)) = Hash(String, (String | Array(String) | JSON::Any)).new

      # form parameters
      form_params : Array(Tuple(String, Crest::ParamsValue)) | Nil = nil

      # http body (model)
      post_body : IO | String | Nil = @api_client.encode(body: transactions_enhance_get_request, content_type: header_params["Content-Type"]?) if !transactions_enhance_get_request.nil?

      # auth_names
      auth_names = ["clientId", "plaidVersion", "secret"]

      @api_client.build_api_request(
        http_method: :"POST",
        path: local_var_path,
        operation: "PlaidApi.transactions_enhance",
        post_body: post_body,
        auth_names: auth_names,
        header_params: header_params,
        cookie_params: cookie_params,
        query_params: query_params,
        form_params: form_params
      )
    end

    # Enrich locally-held transaction data
    # The `/transactions/enrich` endpoint enriches raw transaction data generated by your own banking products or retrieved from other non-Plaid sources.
    # @required @param transactions_enrich_request [Plaid::TransactionsEnrichRequest?]
    # @return [TransactionsEnrichResponse]
    def transactions_enrich(
      *,
      transactions_enrich_request : Plaid::TransactionsEnrichRequest? = nil
    ) : TransactionsEnrichResponse
      data, _status_code, _headers = transactions_enrich_with_http_info(transactions_enrich_request: transactions_enrich_request)
      data
    end

    # Enrich locally-held transaction data
    # The &#x60;/transactions/enrich&#x60; endpoint enriches raw transaction data generated by your own banking products or retrieved from other non-Plaid sources.
    # @required @param transactions_enrich_request [Plaid::TransactionsEnrichRequest?]
    # @return [Tuple(TransactionsEnrichResponse, Integer, Hash)] TransactionsEnrichResponse, response status code and response headers
    def transactions_enrich_with_http_info(
      *,
      transactions_enrich_request : Plaid::TransactionsEnrichRequest? = nil
    ) : Tuple(TransactionsEnrichResponse, Int32, Hash(String, Array(String) | String))
      request = build_api_request_for_transactions_enrich(transactions_enrich_request: transactions_enrich_request)

      body, status_code, headers = @api_client.execute_api_request(request)

      if debugging?
        Log.debug { "API called: PlaidApi#transactions_enrich\nBody: #{body.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}" }
      end

      Tuple.new(TransactionsEnrichResponse.from_json(body), status_code, headers)
    end

    # Enrich locally-held transaction data
    # The &#x60;/transactions/enrich&#x60; endpoint enriches raw transaction data generated by your own banking products or retrieved from other non-Plaid sources.
    # @required @param transactions_enrich_request [Plaid::TransactionsEnrichRequest?]
    # @return nil
    def transactions_enrich(
      *,
      transactions_enrich_request : Plaid::TransactionsEnrichRequest? = nil,
      &block : Crest::Response ->
    ) : Nil
      build_api_request_for_transactions_enrich(transactions_enrich_request: transactions_enrich_request).execute(&block)
    end

    # @return Crest::Request
    def build_api_request_for_transactions_enrich(
      *,
      transactions_enrich_request : Plaid::TransactionsEnrichRequest? = nil
    ) : Crest::Request
      if debugging?
        Log.debug { "Calling API: PlaidApi.transactions_enrich ..." }
      end

      if client_side_validation?
        raise ArgumentError.new("\"transactions_enrich_request\" is required and cannot be null") if transactions_enrich_request.nil?
        unless (_transactions_enrich_request = transactions_enrich_request).nil?
          _transactions_enrich_request.validate if _transactions_enrich_request.is_a?(OpenApi::Validatable)
        end
      end

      # resource path
      local_var_path = "/transactions/enrich"

      # header parameters
      header_params : Hash(String, String) = Hash(String, String).new
      # HTTP header "Accept" (if needed)
      header_params["Accept"] = @api_client.select_header_accept(["application/json"])
      # HTTP header "Content-Type"
      header_params["Content-Type"] = @api_client.select_header_content_type(["application/json"])

      # cookie parameters
      cookie_params : Hash(String, String) = Hash(String, String).new

      # query parameters
      query_params : Hash(String, (String | Array(String) | JSON::Any)) = Hash(String, (String | Array(String) | JSON::Any)).new

      # form parameters
      form_params : Array(Tuple(String, Crest::ParamsValue)) | Nil = nil

      # http body (model)
      post_body : IO | String | Nil = @api_client.encode(body: transactions_enrich_request, content_type: header_params["Content-Type"]?) if !transactions_enrich_request.nil?

      # auth_names
      auth_names = ["clientId", "plaidVersion", "secret"]

      @api_client.build_api_request(
        http_method: :"POST",
        path: local_var_path,
        operation: "PlaidApi.transactions_enrich",
        post_body: post_body,
        auth_names: auth_names,
        header_params: header_params,
        cookie_params: cookie_params,
        query_params: query_params,
        form_params: form_params
      )
    end

    # Get transaction data
    # Note: All new implementations are encouraged to use `/transactions/sync` rather than `/transactions/get`. `/transactions/sync` provides the same functionality as `/transactions/get` and improves developer ease-of-use for handling transactions updates.  The `/transactions/get` endpoint allows developers to receive user-authorized transaction data for credit, depository, and some loan-type accounts (only those with account subtype `student`; coverage may be limited). For transaction history from investments accounts, use the [Investments endpoint](https://plaid.com/docs/api/products/investments/) instead. Transaction data is standardized across financial institutions, and in many cases transactions are linked to a clean name, entity type, location, and category. Similarly, account data is standardized and returned with a clean name, number, balance, and other meta information where available.  Transactions are returned in reverse-chronological order, and the sequence of transaction ordering is stable and will not shift.  Transactions are not immutable and can also be removed altogether by the institution; a removed transaction will no longer appear in `/transactions/get`.  For more details, see [Pending and posted transactions](https://plaid.com/docs/transactions/transactions-data/#pending-and-posted-transactions).  Due to the potentially large number of transactions associated with an Item, results are paginated. Manipulate the `count` and `offset` parameters in conjunction with the `total_transactions` response body field to fetch all available transactions.  Data returned by `/transactions/get` will be the data available for the Item as of the most recent successful check for new transactions. Plaid typically checks for new data multiple times a day, but these checks may occur less frequently, such as once a day, depending on the institution. An Item's `status.transactions.last_successful_update` field will show the timestamp of the most recent successful update. To force Plaid to check for new transactions, you can use the `/transactions/refresh` endpoint.  Note that data may not be immediately available to `/transactions/get`. Plaid will begin to prepare transactions data upon Item link, if Link was initialized with `transactions`, or upon the first call to `/transactions/get`, if it wasn't. To be alerted when transaction data is ready to be fetched, listen for the [`INITIAL_UPDATE`](https://plaid.com/docs/api/products/transactions/#initial_update) and [`HISTORICAL_UPDATE`](https://plaid.com/docs/api/products/transactions/#historical_update) webhooks. If no transaction history is ready when `/transactions/get` is called, it will return a `PRODUCT_NOT_READY` error.
    # @required @param transactions_get_request [Plaid::TransactionsGetRequest?]
    # @return [TransactionsGetResponse]
    def transactions_get(
      *,
      transactions_get_request : Plaid::TransactionsGetRequest? = nil
    ) : TransactionsGetResponse
      data, _status_code, _headers = transactions_get_with_http_info(transactions_get_request: transactions_get_request)
      data
    end

    # Get transaction data
    # Note: All new implementations are encouraged to use &#x60;/transactions/sync&#x60; rather than &#x60;/transactions/get&#x60;. &#x60;/transactions/sync&#x60; provides the same functionality as &#x60;/transactions/get&#x60; and improves developer ease-of-use for handling transactions updates.  The &#x60;/transactions/get&#x60; endpoint allows developers to receive user-authorized transaction data for credit, depository, and some loan-type accounts (only those with account subtype &#x60;student&#x60;; coverage may be limited). For transaction history from investments accounts, use the [Investments endpoint](https://plaid.com/docs/api/products/investments/) instead. Transaction data is standardized across financial institutions, and in many cases transactions are linked to a clean name, entity type, location, and category. Similarly, account data is standardized and returned with a clean name, number, balance, and other meta information where available.  Transactions are returned in reverse-chronological order, and the sequence of transaction ordering is stable and will not shift.  Transactions are not immutable and can also be removed altogether by the institution; a removed transaction will no longer appear in &#x60;/transactions/get&#x60;.  For more details, see [Pending and posted transactions](https://plaid.com/docs/transactions/transactions-data/#pending-and-posted-transactions).  Due to the potentially large number of transactions associated with an Item, results are paginated. Manipulate the &#x60;count&#x60; and &#x60;offset&#x60; parameters in conjunction with the &#x60;total_transactions&#x60; response body field to fetch all available transactions.  Data returned by &#x60;/transactions/get&#x60; will be the data available for the Item as of the most recent successful check for new transactions. Plaid typically checks for new data multiple times a day, but these checks may occur less frequently, such as once a day, depending on the institution. An Item&#39;s &#x60;status.transactions.last_successful_update&#x60; field will show the timestamp of the most recent successful update. To force Plaid to check for new transactions, you can use the &#x60;/transactions/refresh&#x60; endpoint.  Note that data may not be immediately available to &#x60;/transactions/get&#x60;. Plaid will begin to prepare transactions data upon Item link, if Link was initialized with &#x60;transactions&#x60;, or upon the first call to &#x60;/transactions/get&#x60;, if it wasn&#39;t. To be alerted when transaction data is ready to be fetched, listen for the [&#x60;INITIAL_UPDATE&#x60;](https://plaid.com/docs/api/products/transactions/#initial_update) and [&#x60;HISTORICAL_UPDATE&#x60;](https://plaid.com/docs/api/products/transactions/#historical_update) webhooks. If no transaction history is ready when &#x60;/transactions/get&#x60; is called, it will return a &#x60;PRODUCT_NOT_READY&#x60; error.
    # @required @param transactions_get_request [Plaid::TransactionsGetRequest?]
    # @return [Tuple(TransactionsGetResponse, Integer, Hash)] TransactionsGetResponse, response status code and response headers
    def transactions_get_with_http_info(
      *,
      transactions_get_request : Plaid::TransactionsGetRequest? = nil
    ) : Tuple(TransactionsGetResponse, Int32, Hash(String, Array(String) | String))
      request = build_api_request_for_transactions_get(transactions_get_request: transactions_get_request)

      body, status_code, headers = @api_client.execute_api_request(request)

      if debugging?
        Log.debug { "API called: PlaidApi#transactions_get\nBody: #{body.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}" }
      end

      Tuple.new(TransactionsGetResponse.from_json(body), status_code, headers)
    end

    # Get transaction data
    # Note: All new implementations are encouraged to use &#x60;/transactions/sync&#x60; rather than &#x60;/transactions/get&#x60;. &#x60;/transactions/sync&#x60; provides the same functionality as &#x60;/transactions/get&#x60; and improves developer ease-of-use for handling transactions updates.  The &#x60;/transactions/get&#x60; endpoint allows developers to receive user-authorized transaction data for credit, depository, and some loan-type accounts (only those with account subtype &#x60;student&#x60;; coverage may be limited). For transaction history from investments accounts, use the [Investments endpoint](https://plaid.com/docs/api/products/investments/) instead. Transaction data is standardized across financial institutions, and in many cases transactions are linked to a clean name, entity type, location, and category. Similarly, account data is standardized and returned with a clean name, number, balance, and other meta information where available.  Transactions are returned in reverse-chronological order, and the sequence of transaction ordering is stable and will not shift.  Transactions are not immutable and can also be removed altogether by the institution; a removed transaction will no longer appear in &#x60;/transactions/get&#x60;.  For more details, see [Pending and posted transactions](https://plaid.com/docs/transactions/transactions-data/#pending-and-posted-transactions).  Due to the potentially large number of transactions associated with an Item, results are paginated. Manipulate the &#x60;count&#x60; and &#x60;offset&#x60; parameters in conjunction with the &#x60;total_transactions&#x60; response body field to fetch all available transactions.  Data returned by &#x60;/transactions/get&#x60; will be the data available for the Item as of the most recent successful check for new transactions. Plaid typically checks for new data multiple times a day, but these checks may occur less frequently, such as once a day, depending on the institution. An Item&#39;s &#x60;status.transactions.last_successful_update&#x60; field will show the timestamp of the most recent successful update. To force Plaid to check for new transactions, you can use the &#x60;/transactions/refresh&#x60; endpoint.  Note that data may not be immediately available to &#x60;/transactions/get&#x60;. Plaid will begin to prepare transactions data upon Item link, if Link was initialized with &#x60;transactions&#x60;, or upon the first call to &#x60;/transactions/get&#x60;, if it wasn&#39;t. To be alerted when transaction data is ready to be fetched, listen for the [&#x60;INITIAL_UPDATE&#x60;](https://plaid.com/docs/api/products/transactions/#initial_update) and [&#x60;HISTORICAL_UPDATE&#x60;](https://plaid.com/docs/api/products/transactions/#historical_update) webhooks. If no transaction history is ready when &#x60;/transactions/get&#x60; is called, it will return a &#x60;PRODUCT_NOT_READY&#x60; error.
    # @required @param transactions_get_request [Plaid::TransactionsGetRequest?]
    # @return nil
    def transactions_get(
      *,
      transactions_get_request : Plaid::TransactionsGetRequest? = nil,
      &block : Crest::Response ->
    ) : Nil
      build_api_request_for_transactions_get(transactions_get_request: transactions_get_request).execute(&block)
    end

    # @return Crest::Request
    def build_api_request_for_transactions_get(
      *,
      transactions_get_request : Plaid::TransactionsGetRequest? = nil
    ) : Crest::Request
      if debugging?
        Log.debug { "Calling API: PlaidApi.transactions_get ..." }
      end

      if client_side_validation?
        raise ArgumentError.new("\"transactions_get_request\" is required and cannot be null") if transactions_get_request.nil?
        unless (_transactions_get_request = transactions_get_request).nil?
          _transactions_get_request.validate if _transactions_get_request.is_a?(OpenApi::Validatable)
        end
      end

      # resource path
      local_var_path = "/transactions/get"

      # header parameters
      header_params : Hash(String, String) = Hash(String, String).new
      # HTTP header "Accept" (if needed)
      header_params["Accept"] = @api_client.select_header_accept(["application/json"])
      # HTTP header "Content-Type"
      header_params["Content-Type"] = @api_client.select_header_content_type(["application/json"])

      # cookie parameters
      cookie_params : Hash(String, String) = Hash(String, String).new

      # query parameters
      query_params : Hash(String, (String | Array(String) | JSON::Any)) = Hash(String, (String | Array(String) | JSON::Any)).new

      # form parameters
      form_params : Array(Tuple(String, Crest::ParamsValue)) | Nil = nil

      # http body (model)
      post_body : IO | String | Nil = @api_client.encode(body: transactions_get_request, content_type: header_params["Content-Type"]?) if !transactions_get_request.nil?

      # auth_names
      auth_names = ["clientId", "plaidVersion", "secret"]

      @api_client.build_api_request(
        http_method: :"POST",
        path: local_var_path,
        operation: "PlaidApi.transactions_get",
        post_body: post_body,
        auth_names: auth_names,
        header_params: header_params,
        cookie_params: cookie_params,
        query_params: query_params,
        form_params: form_params
      )
    end

    # Fetch recurring transaction streams
    # The `/transactions/recurring/get` endpoint allows developers to receive a summary of the recurring outflow and inflow streams (expenses and deposits) from a user’s checking, savings or credit card accounts. Additionally, Plaid provides key insights about each recurring stream including the category, merchant, last amount, and more. Developers can use these insights to build tools and experiences that help their users better manage cash flow, monitor subscriptions, reduce spend, and stay on track with bill payments.  This endpoint is offered as an add-on to Transactions. To request access to this endpoint, submit a [product access request](https://dashboard.plaid.com/team/products) or contact your Plaid account manager.  This endpoint can only be called on an Item that has already been initialized with Transactions (either during Link, by specifying it in `/link/token/create`; or after Link, by calling `/transactions/get` or `/transactions/sync`). Once all historical transactions have been fetched, call `/transactions/recurring/get` to receive the Recurring Transactions streams and subscribe to the [`RECURRING_TRANSACTIONS_UPDATE`](https://plaid.com/docs/api/products/transactions/#recurring_transactions_update) webhook. To know when historical transactions have been fetched, if you are using `/transactions/sync` listen for the [`SYNC_UPDATES_AVAILABLE`](https://plaid.com/docs/api/products/transactions/#SyncUpdatesAvailableWebhook-historical-update-complete) webhook and check that the `historical_update_complete` field in the payload is `true`. If using `/transactions/get`, listen for the [`HISTORICAL_UPDATE`](https://plaid.com/docs/api/products/transactions/#historical_update) webhook.  After the initial call, you can call `/transactions/recurring/get` endpoint at any point in the future to retrieve the latest summary of recurring streams. Listen to the [`RECURRING_TRANSACTIONS_UPDATE`](https://plaid.com/docs/api/products/transactions/#recurring_transactions_update) webhook to be notified when new updates are available.
    # @required @param transactions_recurring_get_request [Plaid::TransactionsRecurringGetRequest?]
    # @return [TransactionsRecurringGetResponse]
    def transactions_recurring_get(
      *,
      transactions_recurring_get_request : Plaid::TransactionsRecurringGetRequest? = nil
    ) : TransactionsRecurringGetResponse
      data, _status_code, _headers = transactions_recurring_get_with_http_info(transactions_recurring_get_request: transactions_recurring_get_request)
      data
    end

    # Fetch recurring transaction streams
    # The &#x60;/transactions/recurring/get&#x60; endpoint allows developers to receive a summary of the recurring outflow and inflow streams (expenses and deposits) from a user’s checking, savings or credit card accounts. Additionally, Plaid provides key insights about each recurring stream including the category, merchant, last amount, and more. Developers can use these insights to build tools and experiences that help their users better manage cash flow, monitor subscriptions, reduce spend, and stay on track with bill payments.  This endpoint is offered as an add-on to Transactions. To request access to this endpoint, submit a [product access request](https://dashboard.plaid.com/team/products) or contact your Plaid account manager.  This endpoint can only be called on an Item that has already been initialized with Transactions (either during Link, by specifying it in &#x60;/link/token/create&#x60;; or after Link, by calling &#x60;/transactions/get&#x60; or &#x60;/transactions/sync&#x60;). Once all historical transactions have been fetched, call &#x60;/transactions/recurring/get&#x60; to receive the Recurring Transactions streams and subscribe to the [&#x60;RECURRING_TRANSACTIONS_UPDATE&#x60;](https://plaid.com/docs/api/products/transactions/#recurring_transactions_update) webhook. To know when historical transactions have been fetched, if you are using &#x60;/transactions/sync&#x60; listen for the [&#x60;SYNC_UPDATES_AVAILABLE&#x60;](https://plaid.com/docs/api/products/transactions/#SyncUpdatesAvailableWebhook-historical-update-complete) webhook and check that the &#x60;historical_update_complete&#x60; field in the payload is &#x60;true&#x60;. If using &#x60;/transactions/get&#x60;, listen for the [&#x60;HISTORICAL_UPDATE&#x60;](https://plaid.com/docs/api/products/transactions/#historical_update) webhook.  After the initial call, you can call &#x60;/transactions/recurring/get&#x60; endpoint at any point in the future to retrieve the latest summary of recurring streams. Listen to the [&#x60;RECURRING_TRANSACTIONS_UPDATE&#x60;](https://plaid.com/docs/api/products/transactions/#recurring_transactions_update) webhook to be notified when new updates are available.
    # @required @param transactions_recurring_get_request [Plaid::TransactionsRecurringGetRequest?]
    # @return [Tuple(TransactionsRecurringGetResponse, Integer, Hash)] TransactionsRecurringGetResponse, response status code and response headers
    def transactions_recurring_get_with_http_info(
      *,
      transactions_recurring_get_request : Plaid::TransactionsRecurringGetRequest? = nil
    ) : Tuple(TransactionsRecurringGetResponse, Int32, Hash(String, Array(String) | String))
      request = build_api_request_for_transactions_recurring_get(transactions_recurring_get_request: transactions_recurring_get_request)

      body, status_code, headers = @api_client.execute_api_request(request)

      if debugging?
        Log.debug { "API called: PlaidApi#transactions_recurring_get\nBody: #{body.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}" }
      end

      Tuple.new(TransactionsRecurringGetResponse.from_json(body), status_code, headers)
    end

    # Fetch recurring transaction streams
    # The &#x60;/transactions/recurring/get&#x60; endpoint allows developers to receive a summary of the recurring outflow and inflow streams (expenses and deposits) from a user’s checking, savings or credit card accounts. Additionally, Plaid provides key insights about each recurring stream including the category, merchant, last amount, and more. Developers can use these insights to build tools and experiences that help their users better manage cash flow, monitor subscriptions, reduce spend, and stay on track with bill payments.  This endpoint is offered as an add-on to Transactions. To request access to this endpoint, submit a [product access request](https://dashboard.plaid.com/team/products) or contact your Plaid account manager.  This endpoint can only be called on an Item that has already been initialized with Transactions (either during Link, by specifying it in &#x60;/link/token/create&#x60;; or after Link, by calling &#x60;/transactions/get&#x60; or &#x60;/transactions/sync&#x60;). Once all historical transactions have been fetched, call &#x60;/transactions/recurring/get&#x60; to receive the Recurring Transactions streams and subscribe to the [&#x60;RECURRING_TRANSACTIONS_UPDATE&#x60;](https://plaid.com/docs/api/products/transactions/#recurring_transactions_update) webhook. To know when historical transactions have been fetched, if you are using &#x60;/transactions/sync&#x60; listen for the [&#x60;SYNC_UPDATES_AVAILABLE&#x60;](https://plaid.com/docs/api/products/transactions/#SyncUpdatesAvailableWebhook-historical-update-complete) webhook and check that the &#x60;historical_update_complete&#x60; field in the payload is &#x60;true&#x60;. If using &#x60;/transactions/get&#x60;, listen for the [&#x60;HISTORICAL_UPDATE&#x60;](https://plaid.com/docs/api/products/transactions/#historical_update) webhook.  After the initial call, you can call &#x60;/transactions/recurring/get&#x60; endpoint at any point in the future to retrieve the latest summary of recurring streams. Listen to the [&#x60;RECURRING_TRANSACTIONS_UPDATE&#x60;](https://plaid.com/docs/api/products/transactions/#recurring_transactions_update) webhook to be notified when new updates are available.
    # @required @param transactions_recurring_get_request [Plaid::TransactionsRecurringGetRequest?]
    # @return nil
    def transactions_recurring_get(
      *,
      transactions_recurring_get_request : Plaid::TransactionsRecurringGetRequest? = nil,
      &block : Crest::Response ->
    ) : Nil
      build_api_request_for_transactions_recurring_get(transactions_recurring_get_request: transactions_recurring_get_request).execute(&block)
    end

    # @return Crest::Request
    def build_api_request_for_transactions_recurring_get(
      *,
      transactions_recurring_get_request : Plaid::TransactionsRecurringGetRequest? = nil
    ) : Crest::Request
      if debugging?
        Log.debug { "Calling API: PlaidApi.transactions_recurring_get ..." }
      end

      if client_side_validation?
        raise ArgumentError.new("\"transactions_recurring_get_request\" is required and cannot be null") if transactions_recurring_get_request.nil?
        unless (_transactions_recurring_get_request = transactions_recurring_get_request).nil?
          _transactions_recurring_get_request.validate if _transactions_recurring_get_request.is_a?(OpenApi::Validatable)
        end
      end

      # resource path
      local_var_path = "/transactions/recurring/get"

      # header parameters
      header_params : Hash(String, String) = Hash(String, String).new
      # HTTP header "Accept" (if needed)
      header_params["Accept"] = @api_client.select_header_accept(["application/json"])
      # HTTP header "Content-Type"
      header_params["Content-Type"] = @api_client.select_header_content_type(["application/json"])

      # cookie parameters
      cookie_params : Hash(String, String) = Hash(String, String).new

      # query parameters
      query_params : Hash(String, (String | Array(String) | JSON::Any)) = Hash(String, (String | Array(String) | JSON::Any)).new

      # form parameters
      form_params : Array(Tuple(String, Crest::ParamsValue)) | Nil = nil

      # http body (model)
      post_body : IO | String | Nil = @api_client.encode(body: transactions_recurring_get_request, content_type: header_params["Content-Type"]?) if !transactions_recurring_get_request.nil?

      # auth_names
      auth_names = ["clientId", "plaidVersion", "secret"]

      @api_client.build_api_request(
        http_method: :"POST",
        path: local_var_path,
        operation: "PlaidApi.transactions_recurring_get",
        post_body: post_body,
        auth_names: auth_names,
        header_params: header_params,
        cookie_params: cookie_params,
        query_params: query_params,
        form_params: form_params
      )
    end

    # Refresh transaction data
    # `/transactions/refresh` is an optional endpoint for users of the Transactions product. It initiates an on-demand extraction to fetch the newest transactions for an Item. This on-demand extraction takes place in addition to the periodic extractions that automatically occur multiple times a day for any Transactions-enabled Item. If changes to transactions are discovered after calling `/transactions/refresh`, Plaid will fire a webhook: for `/transactions/sync` users, [`SYNC_UPDATES_AVAILABLE`](https://plaid.com/docs/api/products/transactions/#sync_updates_available) will be fired if there are any transactions updated, added, or removed. For users of both `/transactions/sync` and `/transactions/get`, [`TRANSACTIONS_REMOVED`](https://plaid.com/docs/api/products/transactions/#transactions_removed) will be fired if any removed transactions are detected, and [`DEFAULT_UPDATE`](https://plaid.com/docs/api/products/transactions/#default_update) will be fired if any new transactions are detected. New transactions can be fetched by calling `/transactions/get` or `/transactions/sync`. Note that the `/transactions/refresh` endpoint is not supported for Capital One (`ins_128026`) and will result in a `PRODUCT_NOT_SUPPORTED` error if called on an Item from that institution.  `/transactions/refresh` is offered as an add-on to Transactions and has a separate [fee model](/docs/account/billing/#per-request-flat-fee). To request access to this endpoint, submit a [product access request](https://dashboard.plaid.com/team/products) or contact your Plaid account manager.
    # @required @param transactions_refresh_request [Plaid::TransactionsRefreshRequest?]
    # @return [TransactionsRefreshResponse]
    def transactions_refresh(
      *,
      transactions_refresh_request : Plaid::TransactionsRefreshRequest? = nil
    ) : TransactionsRefreshResponse
      data, _status_code, _headers = transactions_refresh_with_http_info(transactions_refresh_request: transactions_refresh_request)
      data
    end

    # Refresh transaction data
    # &#x60;/transactions/refresh&#x60; is an optional endpoint for users of the Transactions product. It initiates an on-demand extraction to fetch the newest transactions for an Item. This on-demand extraction takes place in addition to the periodic extractions that automatically occur multiple times a day for any Transactions-enabled Item. If changes to transactions are discovered after calling &#x60;/transactions/refresh&#x60;, Plaid will fire a webhook: for &#x60;/transactions/sync&#x60; users, [&#x60;SYNC_UPDATES_AVAILABLE&#x60;](https://plaid.com/docs/api/products/transactions/#sync_updates_available) will be fired if there are any transactions updated, added, or removed. For users of both &#x60;/transactions/sync&#x60; and &#x60;/transactions/get&#x60;, [&#x60;TRANSACTIONS_REMOVED&#x60;](https://plaid.com/docs/api/products/transactions/#transactions_removed) will be fired if any removed transactions are detected, and [&#x60;DEFAULT_UPDATE&#x60;](https://plaid.com/docs/api/products/transactions/#default_update) will be fired if any new transactions are detected. New transactions can be fetched by calling &#x60;/transactions/get&#x60; or &#x60;/transactions/sync&#x60;. Note that the &#x60;/transactions/refresh&#x60; endpoint is not supported for Capital One (&#x60;ins_128026&#x60;) and will result in a &#x60;PRODUCT_NOT_SUPPORTED&#x60; error if called on an Item from that institution.  &#x60;/transactions/refresh&#x60; is offered as an add-on to Transactions and has a separate [fee model](/docs/account/billing/#per-request-flat-fee). To request access to this endpoint, submit a [product access request](https://dashboard.plaid.com/team/products) or contact your Plaid account manager.
    # @required @param transactions_refresh_request [Plaid::TransactionsRefreshRequest?]
    # @return [Tuple(TransactionsRefreshResponse, Integer, Hash)] TransactionsRefreshResponse, response status code and response headers
    def transactions_refresh_with_http_info(
      *,
      transactions_refresh_request : Plaid::TransactionsRefreshRequest? = nil
    ) : Tuple(TransactionsRefreshResponse, Int32, Hash(String, Array(String) | String))
      request = build_api_request_for_transactions_refresh(transactions_refresh_request: transactions_refresh_request)

      body, status_code, headers = @api_client.execute_api_request(request)

      if debugging?
        Log.debug { "API called: PlaidApi#transactions_refresh\nBody: #{body.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}" }
      end

      Tuple.new(TransactionsRefreshResponse.from_json(body), status_code, headers)
    end

    # Refresh transaction data
    # &#x60;/transactions/refresh&#x60; is an optional endpoint for users of the Transactions product. It initiates an on-demand extraction to fetch the newest transactions for an Item. This on-demand extraction takes place in addition to the periodic extractions that automatically occur multiple times a day for any Transactions-enabled Item. If changes to transactions are discovered after calling &#x60;/transactions/refresh&#x60;, Plaid will fire a webhook: for &#x60;/transactions/sync&#x60; users, [&#x60;SYNC_UPDATES_AVAILABLE&#x60;](https://plaid.com/docs/api/products/transactions/#sync_updates_available) will be fired if there are any transactions updated, added, or removed. For users of both &#x60;/transactions/sync&#x60; and &#x60;/transactions/get&#x60;, [&#x60;TRANSACTIONS_REMOVED&#x60;](https://plaid.com/docs/api/products/transactions/#transactions_removed) will be fired if any removed transactions are detected, and [&#x60;DEFAULT_UPDATE&#x60;](https://plaid.com/docs/api/products/transactions/#default_update) will be fired if any new transactions are detected. New transactions can be fetched by calling &#x60;/transactions/get&#x60; or &#x60;/transactions/sync&#x60;. Note that the &#x60;/transactions/refresh&#x60; endpoint is not supported for Capital One (&#x60;ins_128026&#x60;) and will result in a &#x60;PRODUCT_NOT_SUPPORTED&#x60; error if called on an Item from that institution.  &#x60;/transactions/refresh&#x60; is offered as an add-on to Transactions and has a separate [fee model](/docs/account/billing/#per-request-flat-fee). To request access to this endpoint, submit a [product access request](https://dashboard.plaid.com/team/products) or contact your Plaid account manager.
    # @required @param transactions_refresh_request [Plaid::TransactionsRefreshRequest?]
    # @return nil
    def transactions_refresh(
      *,
      transactions_refresh_request : Plaid::TransactionsRefreshRequest? = nil,
      &block : Crest::Response ->
    ) : Nil
      build_api_request_for_transactions_refresh(transactions_refresh_request: transactions_refresh_request).execute(&block)
    end

    # @return Crest::Request
    def build_api_request_for_transactions_refresh(
      *,
      transactions_refresh_request : Plaid::TransactionsRefreshRequest? = nil
    ) : Crest::Request
      if debugging?
        Log.debug { "Calling API: PlaidApi.transactions_refresh ..." }
      end

      if client_side_validation?
        raise ArgumentError.new("\"transactions_refresh_request\" is required and cannot be null") if transactions_refresh_request.nil?
        unless (_transactions_refresh_request = transactions_refresh_request).nil?
          _transactions_refresh_request.validate if _transactions_refresh_request.is_a?(OpenApi::Validatable)
        end
      end

      # resource path
      local_var_path = "/transactions/refresh"

      # header parameters
      header_params : Hash(String, String) = Hash(String, String).new
      # HTTP header "Accept" (if needed)
      header_params["Accept"] = @api_client.select_header_accept(["application/json"])
      # HTTP header "Content-Type"
      header_params["Content-Type"] = @api_client.select_header_content_type(["application/json"])

      # cookie parameters
      cookie_params : Hash(String, String) = Hash(String, String).new

      # query parameters
      query_params : Hash(String, (String | Array(String) | JSON::Any)) = Hash(String, (String | Array(String) | JSON::Any)).new

      # form parameters
      form_params : Array(Tuple(String, Crest::ParamsValue)) | Nil = nil

      # http body (model)
      post_body : IO | String | Nil = @api_client.encode(body: transactions_refresh_request, content_type: header_params["Content-Type"]?) if !transactions_refresh_request.nil?

      # auth_names
      auth_names = ["clientId", "plaidVersion", "secret"]

      @api_client.build_api_request(
        http_method: :"POST",
        path: local_var_path,
        operation: "PlaidApi.transactions_refresh",
        post_body: post_body,
        auth_names: auth_names,
        header_params: header_params,
        cookie_params: cookie_params,
        query_params: query_params,
        form_params: form_params
      )
    end

    # Create transaction category rule
    # The `/transactions/rules/v1/create` endpoint creates transaction categorization rules.  Rules will be applied on the Item's transactions returned in `/transactions/get` response.  The product is currently in beta. To request access, contact transactions-feedback@plaid.com.
    # @required @param transactions_rules_create_request [Plaid::TransactionsRulesCreateRequest?]
    # @return [TransactionsRulesCreateResponse]
    def transactions_rules_create(
      *,
      transactions_rules_create_request : Plaid::TransactionsRulesCreateRequest? = nil
    ) : TransactionsRulesCreateResponse
      data, _status_code, _headers = transactions_rules_create_with_http_info(transactions_rules_create_request: transactions_rules_create_request)
      data
    end

    # Create transaction category rule
    # The &#x60;/transactions/rules/v1/create&#x60; endpoint creates transaction categorization rules.  Rules will be applied on the Item&#39;s transactions returned in &#x60;/transactions/get&#x60; response.  The product is currently in beta. To request access, contact transactions-feedback@plaid.com.
    # @required @param transactions_rules_create_request [Plaid::TransactionsRulesCreateRequest?]
    # @return [Tuple(TransactionsRulesCreateResponse, Integer, Hash)] TransactionsRulesCreateResponse, response status code and response headers
    def transactions_rules_create_with_http_info(
      *,
      transactions_rules_create_request : Plaid::TransactionsRulesCreateRequest? = nil
    ) : Tuple(TransactionsRulesCreateResponse, Int32, Hash(String, Array(String) | String))
      request = build_api_request_for_transactions_rules_create(transactions_rules_create_request: transactions_rules_create_request)

      body, status_code, headers = @api_client.execute_api_request(request)

      if debugging?
        Log.debug { "API called: PlaidApi#transactions_rules_create\nBody: #{body.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}" }
      end

      Tuple.new(TransactionsRulesCreateResponse.from_json(body), status_code, headers)
    end

    # Create transaction category rule
    # The &#x60;/transactions/rules/v1/create&#x60; endpoint creates transaction categorization rules.  Rules will be applied on the Item&#39;s transactions returned in &#x60;/transactions/get&#x60; response.  The product is currently in beta. To request access, contact transactions-feedback@plaid.com.
    # @required @param transactions_rules_create_request [Plaid::TransactionsRulesCreateRequest?]
    # @return nil
    def transactions_rules_create(
      *,
      transactions_rules_create_request : Plaid::TransactionsRulesCreateRequest? = nil,
      &block : Crest::Response ->
    ) : Nil
      build_api_request_for_transactions_rules_create(transactions_rules_create_request: transactions_rules_create_request).execute(&block)
    end

    # @return Crest::Request
    def build_api_request_for_transactions_rules_create(
      *,
      transactions_rules_create_request : Plaid::TransactionsRulesCreateRequest? = nil
    ) : Crest::Request
      if debugging?
        Log.debug { "Calling API: PlaidApi.transactions_rules_create ..." }
      end

      if client_side_validation?
        raise ArgumentError.new("\"transactions_rules_create_request\" is required and cannot be null") if transactions_rules_create_request.nil?
        unless (_transactions_rules_create_request = transactions_rules_create_request).nil?
          _transactions_rules_create_request.validate if _transactions_rules_create_request.is_a?(OpenApi::Validatable)
        end
      end

      # resource path
      local_var_path = "/beta/transactions/rules/v1/create"

      # header parameters
      header_params : Hash(String, String) = Hash(String, String).new
      # HTTP header "Accept" (if needed)
      header_params["Accept"] = @api_client.select_header_accept(["application/json"])
      # HTTP header "Content-Type"
      header_params["Content-Type"] = @api_client.select_header_content_type(["application/json"])

      # cookie parameters
      cookie_params : Hash(String, String) = Hash(String, String).new

      # query parameters
      query_params : Hash(String, (String | Array(String) | JSON::Any)) = Hash(String, (String | Array(String) | JSON::Any)).new

      # form parameters
      form_params : Array(Tuple(String, Crest::ParamsValue)) | Nil = nil

      # http body (model)
      post_body : IO | String | Nil = @api_client.encode(body: transactions_rules_create_request, content_type: header_params["Content-Type"]?) if !transactions_rules_create_request.nil?

      # auth_names
      auth_names = ["clientId", "plaidVersion", "secret"]

      @api_client.build_api_request(
        http_method: :"POST",
        path: local_var_path,
        operation: "PlaidApi.transactions_rules_create",
        post_body: post_body,
        auth_names: auth_names,
        header_params: header_params,
        cookie_params: cookie_params,
        query_params: query_params,
        form_params: form_params
      )
    end

    # Return a list of rules created for the Item associated with the access token.
    # The `/transactions/rules/v1/list` returns a list of transaction rules created for the Item associated with the access token.
    # @required @param transactions_rules_list_request [Plaid::TransactionsRulesListRequest?]
    # @return [TransactionsRulesListResponse]
    def transactions_rules_list(
      *,
      transactions_rules_list_request : Plaid::TransactionsRulesListRequest? = nil
    ) : TransactionsRulesListResponse
      data, _status_code, _headers = transactions_rules_list_with_http_info(transactions_rules_list_request: transactions_rules_list_request)
      data
    end

    # Return a list of rules created for the Item associated with the access token.
    # The &#x60;/transactions/rules/v1/list&#x60; returns a list of transaction rules created for the Item associated with the access token.
    # @required @param transactions_rules_list_request [Plaid::TransactionsRulesListRequest?]
    # @return [Tuple(TransactionsRulesListResponse, Integer, Hash)] TransactionsRulesListResponse, response status code and response headers
    def transactions_rules_list_with_http_info(
      *,
      transactions_rules_list_request : Plaid::TransactionsRulesListRequest? = nil
    ) : Tuple(TransactionsRulesListResponse, Int32, Hash(String, Array(String) | String))
      request = build_api_request_for_transactions_rules_list(transactions_rules_list_request: transactions_rules_list_request)

      body, status_code, headers = @api_client.execute_api_request(request)

      if debugging?
        Log.debug { "API called: PlaidApi#transactions_rules_list\nBody: #{body.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}" }
      end

      Tuple.new(TransactionsRulesListResponse.from_json(body), status_code, headers)
    end

    # Return a list of rules created for the Item associated with the access token.
    # The &#x60;/transactions/rules/v1/list&#x60; returns a list of transaction rules created for the Item associated with the access token.
    # @required @param transactions_rules_list_request [Plaid::TransactionsRulesListRequest?]
    # @return nil
    def transactions_rules_list(
      *,
      transactions_rules_list_request : Plaid::TransactionsRulesListRequest? = nil,
      &block : Crest::Response ->
    ) : Nil
      build_api_request_for_transactions_rules_list(transactions_rules_list_request: transactions_rules_list_request).execute(&block)
    end

    # @return Crest::Request
    def build_api_request_for_transactions_rules_list(
      *,
      transactions_rules_list_request : Plaid::TransactionsRulesListRequest? = nil
    ) : Crest::Request
      if debugging?
        Log.debug { "Calling API: PlaidApi.transactions_rules_list ..." }
      end

      if client_side_validation?
        raise ArgumentError.new("\"transactions_rules_list_request\" is required and cannot be null") if transactions_rules_list_request.nil?
        unless (_transactions_rules_list_request = transactions_rules_list_request).nil?
          _transactions_rules_list_request.validate if _transactions_rules_list_request.is_a?(OpenApi::Validatable)
        end
      end

      # resource path
      local_var_path = "/beta/transactions/rules/v1/list"

      # header parameters
      header_params : Hash(String, String) = Hash(String, String).new
      # HTTP header "Accept" (if needed)
      header_params["Accept"] = @api_client.select_header_accept(["application/json"])
      # HTTP header "Content-Type"
      header_params["Content-Type"] = @api_client.select_header_content_type(["application/json"])

      # cookie parameters
      cookie_params : Hash(String, String) = Hash(String, String).new

      # query parameters
      query_params : Hash(String, (String | Array(String) | JSON::Any)) = Hash(String, (String | Array(String) | JSON::Any)).new

      # form parameters
      form_params : Array(Tuple(String, Crest::ParamsValue)) | Nil = nil

      # http body (model)
      post_body : IO | String | Nil = @api_client.encode(body: transactions_rules_list_request, content_type: header_params["Content-Type"]?) if !transactions_rules_list_request.nil?

      # auth_names
      auth_names = ["clientId", "plaidVersion", "secret"]

      @api_client.build_api_request(
        http_method: :"POST",
        path: local_var_path,
        operation: "PlaidApi.transactions_rules_list",
        post_body: post_body,
        auth_names: auth_names,
        header_params: header_params,
        cookie_params: cookie_params,
        query_params: query_params,
        form_params: form_params
      )
    end

    # Remove transaction rule
    # The `/transactions/rules/v1/remove` endpoint is used to remove a transaction rule.
    # @required @param transactions_rules_remove_request [Plaid::TransactionsRulesRemoveRequest?]
    # @return [TransactionsRulesRemoveResponse]
    def transactions_rules_remove(
      *,
      transactions_rules_remove_request : Plaid::TransactionsRulesRemoveRequest? = nil
    ) : TransactionsRulesRemoveResponse
      data, _status_code, _headers = transactions_rules_remove_with_http_info(transactions_rules_remove_request: transactions_rules_remove_request)
      data
    end

    # Remove transaction rule
    # The &#x60;/transactions/rules/v1/remove&#x60; endpoint is used to remove a transaction rule.
    # @required @param transactions_rules_remove_request [Plaid::TransactionsRulesRemoveRequest?]
    # @return [Tuple(TransactionsRulesRemoveResponse, Integer, Hash)] TransactionsRulesRemoveResponse, response status code and response headers
    def transactions_rules_remove_with_http_info(
      *,
      transactions_rules_remove_request : Plaid::TransactionsRulesRemoveRequest? = nil
    ) : Tuple(TransactionsRulesRemoveResponse, Int32, Hash(String, Array(String) | String))
      request = build_api_request_for_transactions_rules_remove(transactions_rules_remove_request: transactions_rules_remove_request)

      body, status_code, headers = @api_client.execute_api_request(request)

      if debugging?
        Log.debug { "API called: PlaidApi#transactions_rules_remove\nBody: #{body.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}" }
      end

      Tuple.new(TransactionsRulesRemoveResponse.from_json(body), status_code, headers)
    end

    # Remove transaction rule
    # The &#x60;/transactions/rules/v1/remove&#x60; endpoint is used to remove a transaction rule.
    # @required @param transactions_rules_remove_request [Plaid::TransactionsRulesRemoveRequest?]
    # @return nil
    def transactions_rules_remove(
      *,
      transactions_rules_remove_request : Plaid::TransactionsRulesRemoveRequest? = nil,
      &block : Crest::Response ->
    ) : Nil
      build_api_request_for_transactions_rules_remove(transactions_rules_remove_request: transactions_rules_remove_request).execute(&block)
    end

    # @return Crest::Request
    def build_api_request_for_transactions_rules_remove(
      *,
      transactions_rules_remove_request : Plaid::TransactionsRulesRemoveRequest? = nil
    ) : Crest::Request
      if debugging?
        Log.debug { "Calling API: PlaidApi.transactions_rules_remove ..." }
      end

      if client_side_validation?
        raise ArgumentError.new("\"transactions_rules_remove_request\" is required and cannot be null") if transactions_rules_remove_request.nil?
        unless (_transactions_rules_remove_request = transactions_rules_remove_request).nil?
          _transactions_rules_remove_request.validate if _transactions_rules_remove_request.is_a?(OpenApi::Validatable)
        end
      end

      # resource path
      local_var_path = "/beta/transactions/rules/v1/remove"

      # header parameters
      header_params : Hash(String, String) = Hash(String, String).new
      # HTTP header "Accept" (if needed)
      header_params["Accept"] = @api_client.select_header_accept(["application/json"])
      # HTTP header "Content-Type"
      header_params["Content-Type"] = @api_client.select_header_content_type(["application/json"])

      # cookie parameters
      cookie_params : Hash(String, String) = Hash(String, String).new

      # query parameters
      query_params : Hash(String, (String | Array(String) | JSON::Any)) = Hash(String, (String | Array(String) | JSON::Any)).new

      # form parameters
      form_params : Array(Tuple(String, Crest::ParamsValue)) | Nil = nil

      # http body (model)
      post_body : IO | String | Nil = @api_client.encode(body: transactions_rules_remove_request, content_type: header_params["Content-Type"]?) if !transactions_rules_remove_request.nil?

      # auth_names
      auth_names = ["clientId", "plaidVersion", "secret"]

      @api_client.build_api_request(
        http_method: :"POST",
        path: local_var_path,
        operation: "PlaidApi.transactions_rules_remove",
        post_body: post_body,
        auth_names: auth_names,
        header_params: header_params,
        cookie_params: cookie_params,
        query_params: query_params,
        form_params: form_params
      )
    end

    # Get incremental transaction updates on an Item
    # The `/transactions/sync` endpoint allows developers to subscribe to all transactions associated with an Item and get updates synchronously in a stream-like manner, using a cursor to track which updates have already been seen.  `/transactions/sync` provides the same functionality as `/transactions/get` and can be used instead of `/transactions/get` to simplify the process of tracking transactions updates. To learn more about migrating from `/transactions/get`, see the [Transactions Sync migration guide](https://plaid.com/docs/transactions/sync-migration/).  This endpoint provides user-authorized transaction data for `credit`, `depository`, and some loan-type accounts (only those with account subtype `student`; coverage may be limited). For transaction history from `investments` accounts, use `/investments/transactions/get` instead.  Returned transactions data is grouped into three types of update, indicating whether the transaction was added, removed, or modified since the last call to the API.  In the first call to `/transactions/sync` for an Item, the endpoint will return all historical transactions data associated with that Item up until the time of the API call (as \"adds\"), which then generates a `next_cursor` for that Item. In subsequent calls, send the `next_cursor` to receive only the changes that have occurred since the previous call.  Due to the potentially large number of transactions associated with an Item, results are paginated. The `has_more` field specifies if additional calls are necessary to fetch all available transaction updates. Call `/transactions/sync` with the new cursor, pulling all updates, until `has_more` is `false`.  When retrieving paginated updates, track both the `next_cursor` from the latest response and the original cursor from the first call in which `has_more` was `true`; if a call to `/transactions/sync` fails due to the [`TRANSACTIONS_SYNC_MUTATION_DURING_PAGINATION`](https://plaid.com/docs/errors/transactions/#transactions_sync_mutation_during_pagination) error, the entire pagination request loop must be restarted beginning with the cursor for the first page of the update, rather than retrying only the single request that failed.  Whenever new or updated transaction data becomes available, `/transactions/sync` will provide these updates. Plaid typically checks for new data multiple times a day, but these checks may occur less frequently, such as once a day, depending on the institution. An Item's `status.transactions.last_successful_update` field will show the timestamp of the most recent successful update. To force Plaid to check for new transactions, use the `/transactions/refresh` endpoint.  For newly created Items, data may not be immediately available to `/transactions/sync`. Plaid begins preparing transactions data when the Item is created, but the process can take anywhere from a few seconds to several minutes to complete, depending on the number of transactions available.  To be alerted when new data is available, listen for the [`SYNC_UPDATES_AVAILABLE`](https://plaid.com/docs/api/products/transactions/#sync_updates_available) webhook.  `/transactions/sync` does not directly return balance data. To get the balance for an account, call `/accounts/get`, which is a free-to-use endpoint that will return the cached balance as of the last successful transactions update.
    # @required @param transactions_sync_request [Plaid::TransactionsSyncRequest?]
    # @return [TransactionsSyncResponse]
    def transactions_sync(
      *,
      transactions_sync_request : Plaid::TransactionsSyncRequest? = nil
    ) : TransactionsSyncResponse
      data, _status_code, _headers = transactions_sync_with_http_info(transactions_sync_request: transactions_sync_request)
      data
    end

    # Get incremental transaction updates on an Item
    # The &#x60;/transactions/sync&#x60; endpoint allows developers to subscribe to all transactions associated with an Item and get updates synchronously in a stream-like manner, using a cursor to track which updates have already been seen.  &#x60;/transactions/sync&#x60; provides the same functionality as &#x60;/transactions/get&#x60; and can be used instead of &#x60;/transactions/get&#x60; to simplify the process of tracking transactions updates. To learn more about migrating from &#x60;/transactions/get&#x60;, see the [Transactions Sync migration guide](https://plaid.com/docs/transactions/sync-migration/).  This endpoint provides user-authorized transaction data for &#x60;credit&#x60;, &#x60;depository&#x60;, and some loan-type accounts (only those with account subtype &#x60;student&#x60;; coverage may be limited). For transaction history from &#x60;investments&#x60; accounts, use &#x60;/investments/transactions/get&#x60; instead.  Returned transactions data is grouped into three types of update, indicating whether the transaction was added, removed, or modified since the last call to the API.  In the first call to &#x60;/transactions/sync&#x60; for an Item, the endpoint will return all historical transactions data associated with that Item up until the time of the API call (as \&quot;adds\&quot;), which then generates a &#x60;next_cursor&#x60; for that Item. In subsequent calls, send the &#x60;next_cursor&#x60; to receive only the changes that have occurred since the previous call.  Due to the potentially large number of transactions associated with an Item, results are paginated. The &#x60;has_more&#x60; field specifies if additional calls are necessary to fetch all available transaction updates. Call &#x60;/transactions/sync&#x60; with the new cursor, pulling all updates, until &#x60;has_more&#x60; is &#x60;false&#x60;.  When retrieving paginated updates, track both the &#x60;next_cursor&#x60; from the latest response and the original cursor from the first call in which &#x60;has_more&#x60; was &#x60;true&#x60;; if a call to &#x60;/transactions/sync&#x60; fails due to the [&#x60;TRANSACTIONS_SYNC_MUTATION_DURING_PAGINATION&#x60;](https://plaid.com/docs/errors/transactions/#transactions_sync_mutation_during_pagination) error, the entire pagination request loop must be restarted beginning with the cursor for the first page of the update, rather than retrying only the single request that failed.  Whenever new or updated transaction data becomes available, &#x60;/transactions/sync&#x60; will provide these updates. Plaid typically checks for new data multiple times a day, but these checks may occur less frequently, such as once a day, depending on the institution. An Item&#39;s &#x60;status.transactions.last_successful_update&#x60; field will show the timestamp of the most recent successful update. To force Plaid to check for new transactions, use the &#x60;/transactions/refresh&#x60; endpoint.  For newly created Items, data may not be immediately available to &#x60;/transactions/sync&#x60;. Plaid begins preparing transactions data when the Item is created, but the process can take anywhere from a few seconds to several minutes to complete, depending on the number of transactions available.  To be alerted when new data is available, listen for the [&#x60;SYNC_UPDATES_AVAILABLE&#x60;](https://plaid.com/docs/api/products/transactions/#sync_updates_available) webhook.  &#x60;/transactions/sync&#x60; does not directly return balance data. To get the balance for an account, call &#x60;/accounts/get&#x60;, which is a free-to-use endpoint that will return the cached balance as of the last successful transactions update.
    # @required @param transactions_sync_request [Plaid::TransactionsSyncRequest?]
    # @return [Tuple(TransactionsSyncResponse, Integer, Hash)] TransactionsSyncResponse, response status code and response headers
    def transactions_sync_with_http_info(
      *,
      transactions_sync_request : Plaid::TransactionsSyncRequest? = nil
    ) : Tuple(TransactionsSyncResponse, Int32, Hash(String, Array(String) | String))
      request = build_api_request_for_transactions_sync(transactions_sync_request: transactions_sync_request)

      body, status_code, headers = @api_client.execute_api_request(request)

      if debugging?
        Log.debug { "API called: PlaidApi#transactions_sync\nBody: #{body.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}" }
      end

      Tuple.new(TransactionsSyncResponse.from_json(body), status_code, headers)
    end

    # Get incremental transaction updates on an Item
    # The &#x60;/transactions/sync&#x60; endpoint allows developers to subscribe to all transactions associated with an Item and get updates synchronously in a stream-like manner, using a cursor to track which updates have already been seen.  &#x60;/transactions/sync&#x60; provides the same functionality as &#x60;/transactions/get&#x60; and can be used instead of &#x60;/transactions/get&#x60; to simplify the process of tracking transactions updates. To learn more about migrating from &#x60;/transactions/get&#x60;, see the [Transactions Sync migration guide](https://plaid.com/docs/transactions/sync-migration/).  This endpoint provides user-authorized transaction data for &#x60;credit&#x60;, &#x60;depository&#x60;, and some loan-type accounts (only those with account subtype &#x60;student&#x60;; coverage may be limited). For transaction history from &#x60;investments&#x60; accounts, use &#x60;/investments/transactions/get&#x60; instead.  Returned transactions data is grouped into three types of update, indicating whether the transaction was added, removed, or modified since the last call to the API.  In the first call to &#x60;/transactions/sync&#x60; for an Item, the endpoint will return all historical transactions data associated with that Item up until the time of the API call (as \&quot;adds\&quot;), which then generates a &#x60;next_cursor&#x60; for that Item. In subsequent calls, send the &#x60;next_cursor&#x60; to receive only the changes that have occurred since the previous call.  Due to the potentially large number of transactions associated with an Item, results are paginated. The &#x60;has_more&#x60; field specifies if additional calls are necessary to fetch all available transaction updates. Call &#x60;/transactions/sync&#x60; with the new cursor, pulling all updates, until &#x60;has_more&#x60; is &#x60;false&#x60;.  When retrieving paginated updates, track both the &#x60;next_cursor&#x60; from the latest response and the original cursor from the first call in which &#x60;has_more&#x60; was &#x60;true&#x60;; if a call to &#x60;/transactions/sync&#x60; fails due to the [&#x60;TRANSACTIONS_SYNC_MUTATION_DURING_PAGINATION&#x60;](https://plaid.com/docs/errors/transactions/#transactions_sync_mutation_during_pagination) error, the entire pagination request loop must be restarted beginning with the cursor for the first page of the update, rather than retrying only the single request that failed.  Whenever new or updated transaction data becomes available, &#x60;/transactions/sync&#x60; will provide these updates. Plaid typically checks for new data multiple times a day, but these checks may occur less frequently, such as once a day, depending on the institution. An Item&#39;s &#x60;status.transactions.last_successful_update&#x60; field will show the timestamp of the most recent successful update. To force Plaid to check for new transactions, use the &#x60;/transactions/refresh&#x60; endpoint.  For newly created Items, data may not be immediately available to &#x60;/transactions/sync&#x60;. Plaid begins preparing transactions data when the Item is created, but the process can take anywhere from a few seconds to several minutes to complete, depending on the number of transactions available.  To be alerted when new data is available, listen for the [&#x60;SYNC_UPDATES_AVAILABLE&#x60;](https://plaid.com/docs/api/products/transactions/#sync_updates_available) webhook.  &#x60;/transactions/sync&#x60; does not directly return balance data. To get the balance for an account, call &#x60;/accounts/get&#x60;, which is a free-to-use endpoint that will return the cached balance as of the last successful transactions update.
    # @required @param transactions_sync_request [Plaid::TransactionsSyncRequest?]
    # @return nil
    def transactions_sync(
      *,
      transactions_sync_request : Plaid::TransactionsSyncRequest? = nil,
      &block : Crest::Response ->
    ) : Nil
      build_api_request_for_transactions_sync(transactions_sync_request: transactions_sync_request).execute(&block)
    end

    # @return Crest::Request
    def build_api_request_for_transactions_sync(
      *,
      transactions_sync_request : Plaid::TransactionsSyncRequest? = nil
    ) : Crest::Request
      if debugging?
        Log.debug { "Calling API: PlaidApi.transactions_sync ..." }
      end

      if client_side_validation?
        raise ArgumentError.new("\"transactions_sync_request\" is required and cannot be null") if transactions_sync_request.nil?
        unless (_transactions_sync_request = transactions_sync_request).nil?
          _transactions_sync_request.validate if _transactions_sync_request.is_a?(OpenApi::Validatable)
        end
      end

      # resource path
      local_var_path = "/transactions/sync"

      # header parameters
      header_params : Hash(String, String) = Hash(String, String).new
      # HTTP header "Accept" (if needed)
      header_params["Accept"] = @api_client.select_header_accept(["application/json"])
      # HTTP header "Content-Type"
      header_params["Content-Type"] = @api_client.select_header_content_type(["application/json"])

      # cookie parameters
      cookie_params : Hash(String, String) = Hash(String, String).new

      # query parameters
      query_params : Hash(String, (String | Array(String) | JSON::Any)) = Hash(String, (String | Array(String) | JSON::Any)).new

      # form parameters
      form_params : Array(Tuple(String, Crest::ParamsValue)) | Nil = nil

      # http body (model)
      post_body : IO | String | Nil = @api_client.encode(body: transactions_sync_request, content_type: header_params["Content-Type"]?) if !transactions_sync_request.nil?

      # auth_names
      auth_names = ["clientId", "plaidVersion", "secret"]

      @api_client.build_api_request(
        http_method: :"POST",
        path: local_var_path,
        operation: "PlaidApi.transactions_sync",
        post_body: post_body,
        auth_names: auth_names,
        header_params: header_params,
        cookie_params: cookie_params,
        query_params: query_params,
        form_params: form_params
      )
    end

    # Obtain user insights based on transactions sent through /transactions/enrich
    # The `/beta/transactions/user_insights/v1/get` gets user insights for clients who have enriched data with `/transactions/enrich`.  The product is currently in beta.
    # @required @param transactions_user_insights_get_request [Plaid::TransactionsUserInsightsGetRequest?]
    # @return [TransactionsUserInsightsGetResponse]
    def transactions_user_insights_get(
      *,
      transactions_user_insights_get_request : Plaid::TransactionsUserInsightsGetRequest? = nil
    ) : TransactionsUserInsightsGetResponse
      data, _status_code, _headers = transactions_user_insights_get_with_http_info(transactions_user_insights_get_request: transactions_user_insights_get_request)
      data
    end

    # Obtain user insights based on transactions sent through /transactions/enrich
    # The &#x60;/beta/transactions/user_insights/v1/get&#x60; gets user insights for clients who have enriched data with &#x60;/transactions/enrich&#x60;.  The product is currently in beta.
    # @required @param transactions_user_insights_get_request [Plaid::TransactionsUserInsightsGetRequest?]
    # @return [Tuple(TransactionsUserInsightsGetResponse, Integer, Hash)] TransactionsUserInsightsGetResponse, response status code and response headers
    def transactions_user_insights_get_with_http_info(
      *,
      transactions_user_insights_get_request : Plaid::TransactionsUserInsightsGetRequest? = nil
    ) : Tuple(TransactionsUserInsightsGetResponse, Int32, Hash(String, Array(String) | String))
      request = build_api_request_for_transactions_user_insights_get(transactions_user_insights_get_request: transactions_user_insights_get_request)

      body, status_code, headers = @api_client.execute_api_request(request)

      if debugging?
        Log.debug { "API called: PlaidApi#transactions_user_insights_get\nBody: #{body.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}" }
      end

      Tuple.new(TransactionsUserInsightsGetResponse.from_json(body), status_code, headers)
    end

    # Obtain user insights based on transactions sent through /transactions/enrich
    # The &#x60;/beta/transactions/user_insights/v1/get&#x60; gets user insights for clients who have enriched data with &#x60;/transactions/enrich&#x60;.  The product is currently in beta.
    # @required @param transactions_user_insights_get_request [Plaid::TransactionsUserInsightsGetRequest?]
    # @return nil
    def transactions_user_insights_get(
      *,
      transactions_user_insights_get_request : Plaid::TransactionsUserInsightsGetRequest? = nil,
      &block : Crest::Response ->
    ) : Nil
      build_api_request_for_transactions_user_insights_get(transactions_user_insights_get_request: transactions_user_insights_get_request).execute(&block)
    end

    # @return Crest::Request
    def build_api_request_for_transactions_user_insights_get(
      *,
      transactions_user_insights_get_request : Plaid::TransactionsUserInsightsGetRequest? = nil
    ) : Crest::Request
      if debugging?
        Log.debug { "Calling API: PlaidApi.transactions_user_insights_get ..." }
      end

      if client_side_validation?
        raise ArgumentError.new("\"transactions_user_insights_get_request\" is required and cannot be null") if transactions_user_insights_get_request.nil?
        unless (_transactions_user_insights_get_request = transactions_user_insights_get_request).nil?
          _transactions_user_insights_get_request.validate if _transactions_user_insights_get_request.is_a?(OpenApi::Validatable)
        end
      end

      # resource path
      local_var_path = "/beta/transactions/user_insights/v1/get"

      # header parameters
      header_params : Hash(String, String) = Hash(String, String).new
      # HTTP header "Accept" (if needed)
      header_params["Accept"] = @api_client.select_header_accept(["application/json"])
      # HTTP header "Content-Type"
      header_params["Content-Type"] = @api_client.select_header_content_type(["application/json"])

      # cookie parameters
      cookie_params : Hash(String, String) = Hash(String, String).new

      # query parameters
      query_params : Hash(String, (String | Array(String) | JSON::Any)) = Hash(String, (String | Array(String) | JSON::Any)).new

      # form parameters
      form_params : Array(Tuple(String, Crest::ParamsValue)) | Nil = nil

      # http body (model)
      post_body : IO | String | Nil = @api_client.encode(body: transactions_user_insights_get_request, content_type: header_params["Content-Type"]?) if !transactions_user_insights_get_request.nil?

      # auth_names
      auth_names = ["clientId", "plaidVersion", "secret"]

      @api_client.build_api_request(
        http_method: :"POST",
        path: local_var_path,
        operation: "PlaidApi.transactions_user_insights_get",
        post_body: post_body,
        auth_names: auth_names,
        header_params: header_params,
        cookie_params: cookie_params,
        query_params: query_params,
        form_params: form_params
      )
    end

    # Create a transfer authorization
    # Use the `/transfer/authorization/create` endpoint to authorize a transfer. This endpoint must be called prior to calling `/transfer/create`.  There are three possible outcomes to calling this endpoint: If the `authorization.decision` in the response is `declined`, the proposed transfer has failed the risk check and you cannot proceed with the transfer. If the `authorization.decision` is `approved`, and the `authorization.rationale_code` is `null`, the transfer has passed the risk check and you can proceed to call `/transfer/create`. If the `authorization.decision` is `approved` and the `authorization.rationale_code` is non-`null`, the risk check could not be run: you may proceed with the transfer, but should perform your own risk evaluation. For more details, see the response schema.  In Plaid's Sandbox environment the decisions will be returned as follows:    - To approve a transfer with `null` rationale code, make an authorization request with an `amount` less than the available balance in the account.    - To approve a transfer with the rationale code `MANUALLY_VERIFIED_ITEM`, create an Item in Link through the [Same Day Micro-deposits flow](https://plaid.com/docs/auth/coverage/testing/#testing-same-day-micro-deposits).    - To approve a transfer with the rationale code `ITEM_LOGIN_REQUIRED`, [reset the login for an Item](https://plaid.com/docs/sandbox/#item_login_required).    - To decline a transfer with the rationale code `NSF`, the available balance on the account must be less than the authorization `amount`. See [Create Sandbox test data](https://plaid.com/docs/sandbox/user-custom/) for details on how to customize data in Sandbox.    - To decline a transfer with the rationale code `RISK`, the available balance on the account must be exactly $0. See [Create Sandbox test data](https://plaid.com/docs/sandbox/user-custom/) for details on how to customize data in Sandbox.
    # @required @param transfer_authorization_create_request [Plaid::TransferAuthorizationCreateRequest?]
    # @return [TransferAuthorizationCreateResponse]
    def transfer_authorization_create(
      *,
      transfer_authorization_create_request : Plaid::TransferAuthorizationCreateRequest? = nil
    ) : TransferAuthorizationCreateResponse
      data, _status_code, _headers = transfer_authorization_create_with_http_info(transfer_authorization_create_request: transfer_authorization_create_request)
      data
    end

    # Create a transfer authorization
    # Use the &#x60;/transfer/authorization/create&#x60; endpoint to authorize a transfer. This endpoint must be called prior to calling &#x60;/transfer/create&#x60;.  There are three possible outcomes to calling this endpoint: If the &#x60;authorization.decision&#x60; in the response is &#x60;declined&#x60;, the proposed transfer has failed the risk check and you cannot proceed with the transfer. If the &#x60;authorization.decision&#x60; is &#x60;approved&#x60;, and the &#x60;authorization.rationale_code&#x60; is &#x60;null&#x60;, the transfer has passed the risk check and you can proceed to call &#x60;/transfer/create&#x60;. If the &#x60;authorization.decision&#x60; is &#x60;approved&#x60; and the &#x60;authorization.rationale_code&#x60; is non-&#x60;null&#x60;, the risk check could not be run: you may proceed with the transfer, but should perform your own risk evaluation. For more details, see the response schema.  In Plaid&#39;s Sandbox environment the decisions will be returned as follows:    - To approve a transfer with &#x60;null&#x60; rationale code, make an authorization request with an &#x60;amount&#x60; less than the available balance in the account.    - To approve a transfer with the rationale code &#x60;MANUALLY_VERIFIED_ITEM&#x60;, create an Item in Link through the [Same Day Micro-deposits flow](https://plaid.com/docs/auth/coverage/testing/#testing-same-day-micro-deposits).    - To approve a transfer with the rationale code &#x60;ITEM_LOGIN_REQUIRED&#x60;, [reset the login for an Item](https://plaid.com/docs/sandbox/#item_login_required).    - To decline a transfer with the rationale code &#x60;NSF&#x60;, the available balance on the account must be less than the authorization &#x60;amount&#x60;. See [Create Sandbox test data](https://plaid.com/docs/sandbox/user-custom/) for details on how to customize data in Sandbox.    - To decline a transfer with the rationale code &#x60;RISK&#x60;, the available balance on the account must be exactly $0. See [Create Sandbox test data](https://plaid.com/docs/sandbox/user-custom/) for details on how to customize data in Sandbox.
    # @required @param transfer_authorization_create_request [Plaid::TransferAuthorizationCreateRequest?]
    # @return [Tuple(TransferAuthorizationCreateResponse, Integer, Hash)] TransferAuthorizationCreateResponse, response status code and response headers
    def transfer_authorization_create_with_http_info(
      *,
      transfer_authorization_create_request : Plaid::TransferAuthorizationCreateRequest? = nil
    ) : Tuple(TransferAuthorizationCreateResponse, Int32, Hash(String, Array(String) | String))
      request = build_api_request_for_transfer_authorization_create(transfer_authorization_create_request: transfer_authorization_create_request)

      body, status_code, headers = @api_client.execute_api_request(request)

      if debugging?
        Log.debug { "API called: PlaidApi#transfer_authorization_create\nBody: #{body.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}" }
      end

      Tuple.new(TransferAuthorizationCreateResponse.from_json(body), status_code, headers)
    end

    # Create a transfer authorization
    # Use the &#x60;/transfer/authorization/create&#x60; endpoint to authorize a transfer. This endpoint must be called prior to calling &#x60;/transfer/create&#x60;.  There are three possible outcomes to calling this endpoint: If the &#x60;authorization.decision&#x60; in the response is &#x60;declined&#x60;, the proposed transfer has failed the risk check and you cannot proceed with the transfer. If the &#x60;authorization.decision&#x60; is &#x60;approved&#x60;, and the &#x60;authorization.rationale_code&#x60; is &#x60;null&#x60;, the transfer has passed the risk check and you can proceed to call &#x60;/transfer/create&#x60;. If the &#x60;authorization.decision&#x60; is &#x60;approved&#x60; and the &#x60;authorization.rationale_code&#x60; is non-&#x60;null&#x60;, the risk check could not be run: you may proceed with the transfer, but should perform your own risk evaluation. For more details, see the response schema.  In Plaid&#39;s Sandbox environment the decisions will be returned as follows:    - To approve a transfer with &#x60;null&#x60; rationale code, make an authorization request with an &#x60;amount&#x60; less than the available balance in the account.    - To approve a transfer with the rationale code &#x60;MANUALLY_VERIFIED_ITEM&#x60;, create an Item in Link through the [Same Day Micro-deposits flow](https://plaid.com/docs/auth/coverage/testing/#testing-same-day-micro-deposits).    - To approve a transfer with the rationale code &#x60;ITEM_LOGIN_REQUIRED&#x60;, [reset the login for an Item](https://plaid.com/docs/sandbox/#item_login_required).    - To decline a transfer with the rationale code &#x60;NSF&#x60;, the available balance on the account must be less than the authorization &#x60;amount&#x60;. See [Create Sandbox test data](https://plaid.com/docs/sandbox/user-custom/) for details on how to customize data in Sandbox.    - To decline a transfer with the rationale code &#x60;RISK&#x60;, the available balance on the account must be exactly $0. See [Create Sandbox test data](https://plaid.com/docs/sandbox/user-custom/) for details on how to customize data in Sandbox.
    # @required @param transfer_authorization_create_request [Plaid::TransferAuthorizationCreateRequest?]
    # @return nil
    def transfer_authorization_create(
      *,
      transfer_authorization_create_request : Plaid::TransferAuthorizationCreateRequest? = nil,
      &block : Crest::Response ->
    ) : Nil
      build_api_request_for_transfer_authorization_create(transfer_authorization_create_request: transfer_authorization_create_request).execute(&block)
    end

    # @return Crest::Request
    def build_api_request_for_transfer_authorization_create(
      *,
      transfer_authorization_create_request : Plaid::TransferAuthorizationCreateRequest? = nil
    ) : Crest::Request
      if debugging?
        Log.debug { "Calling API: PlaidApi.transfer_authorization_create ..." }
      end

      if client_side_validation?
        raise ArgumentError.new("\"transfer_authorization_create_request\" is required and cannot be null") if transfer_authorization_create_request.nil?
        unless (_transfer_authorization_create_request = transfer_authorization_create_request).nil?
          _transfer_authorization_create_request.validate if _transfer_authorization_create_request.is_a?(OpenApi::Validatable)
        end
      end

      # resource path
      local_var_path = "/transfer/authorization/create"

      # header parameters
      header_params : Hash(String, String) = Hash(String, String).new
      # HTTP header "Accept" (if needed)
      header_params["Accept"] = @api_client.select_header_accept(["application/json"])
      # HTTP header "Content-Type"
      header_params["Content-Type"] = @api_client.select_header_content_type(["application/json"])

      # cookie parameters
      cookie_params : Hash(String, String) = Hash(String, String).new

      # query parameters
      query_params : Hash(String, (String | Array(String) | JSON::Any)) = Hash(String, (String | Array(String) | JSON::Any)).new

      # form parameters
      form_params : Array(Tuple(String, Crest::ParamsValue)) | Nil = nil

      # http body (model)
      post_body : IO | String | Nil = @api_client.encode(body: transfer_authorization_create_request, content_type: header_params["Content-Type"]?) if !transfer_authorization_create_request.nil?

      # auth_names
      auth_names = ["clientId", "plaidVersion", "secret"]

      @api_client.build_api_request(
        http_method: :"POST",
        path: local_var_path,
        operation: "PlaidApi.transfer_authorization_create",
        post_body: post_body,
        auth_names: auth_names,
        header_params: header_params,
        cookie_params: cookie_params,
        query_params: query_params,
        form_params: form_params
      )
    end

    # Retrieve a balance held with Plaid
    # Use the `/transfer/balance/get` endpoint to view a balance held with Plaid.
    # @required @param transfer_balance_get_request [Plaid::TransferBalanceGetRequest?]
    # @return [TransferBalanceGetResponse]
    def transfer_balance_get(
      *,
      transfer_balance_get_request : Plaid::TransferBalanceGetRequest? = nil
    ) : TransferBalanceGetResponse
      data, _status_code, _headers = transfer_balance_get_with_http_info(transfer_balance_get_request: transfer_balance_get_request)
      data
    end

    # Retrieve a balance held with Plaid
    # Use the &#x60;/transfer/balance/get&#x60; endpoint to view a balance held with Plaid.
    # @required @param transfer_balance_get_request [Plaid::TransferBalanceGetRequest?]
    # @return [Tuple(TransferBalanceGetResponse, Integer, Hash)] TransferBalanceGetResponse, response status code and response headers
    def transfer_balance_get_with_http_info(
      *,
      transfer_balance_get_request : Plaid::TransferBalanceGetRequest? = nil
    ) : Tuple(TransferBalanceGetResponse, Int32, Hash(String, Array(String) | String))
      request = build_api_request_for_transfer_balance_get(transfer_balance_get_request: transfer_balance_get_request)

      body, status_code, headers = @api_client.execute_api_request(request)

      if debugging?
        Log.debug { "API called: PlaidApi#transfer_balance_get\nBody: #{body.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}" }
      end

      Tuple.new(TransferBalanceGetResponse.from_json(body), status_code, headers)
    end

    # Retrieve a balance held with Plaid
    # Use the &#x60;/transfer/balance/get&#x60; endpoint to view a balance held with Plaid.
    # @required @param transfer_balance_get_request [Plaid::TransferBalanceGetRequest?]
    # @return nil
    def transfer_balance_get(
      *,
      transfer_balance_get_request : Plaid::TransferBalanceGetRequest? = nil,
      &block : Crest::Response ->
    ) : Nil
      build_api_request_for_transfer_balance_get(transfer_balance_get_request: transfer_balance_get_request).execute(&block)
    end

    # @return Crest::Request
    def build_api_request_for_transfer_balance_get(
      *,
      transfer_balance_get_request : Plaid::TransferBalanceGetRequest? = nil
    ) : Crest::Request
      if debugging?
        Log.debug { "Calling API: PlaidApi.transfer_balance_get ..." }
      end

      if client_side_validation?
        raise ArgumentError.new("\"transfer_balance_get_request\" is required and cannot be null") if transfer_balance_get_request.nil?
        unless (_transfer_balance_get_request = transfer_balance_get_request).nil?
          _transfer_balance_get_request.validate if _transfer_balance_get_request.is_a?(OpenApi::Validatable)
        end
      end

      # resource path
      local_var_path = "/transfer/balance/get"

      # header parameters
      header_params : Hash(String, String) = Hash(String, String).new
      # HTTP header "Accept" (if needed)
      header_params["Accept"] = @api_client.select_header_accept(["application/json"])
      # HTTP header "Content-Type"
      header_params["Content-Type"] = @api_client.select_header_content_type(["application/json"])

      # cookie parameters
      cookie_params : Hash(String, String) = Hash(String, String).new

      # query parameters
      query_params : Hash(String, (String | Array(String) | JSON::Any)) = Hash(String, (String | Array(String) | JSON::Any)).new

      # form parameters
      form_params : Array(Tuple(String, Crest::ParamsValue)) | Nil = nil

      # http body (model)
      post_body : IO | String | Nil = @api_client.encode(body: transfer_balance_get_request, content_type: header_params["Content-Type"]?) if !transfer_balance_get_request.nil?

      # auth_names
      auth_names = ["clientId", "plaidVersion", "secret"]

      @api_client.build_api_request(
        http_method: :"POST",
        path: local_var_path,
        operation: "PlaidApi.transfer_balance_get",
        post_body: post_body,
        auth_names: auth_names,
        header_params: header_params,
        cookie_params: cookie_params,
        query_params: query_params,
        form_params: form_params
      )
    end

    # Cancel a transfer
    # Use the `/transfer/cancel` endpoint to cancel a transfer.  A transfer is eligible for cancellation if the `cancellable` property returned by `/transfer/get` is `true`.
    # @required @param transfer_cancel_request [Plaid::TransferCancelRequest?]
    # @return [TransferCancelResponse]
    def transfer_cancel(
      *,
      transfer_cancel_request : Plaid::TransferCancelRequest? = nil
    ) : TransferCancelResponse
      data, _status_code, _headers = transfer_cancel_with_http_info(transfer_cancel_request: transfer_cancel_request)
      data
    end

    # Cancel a transfer
    # Use the &#x60;/transfer/cancel&#x60; endpoint to cancel a transfer.  A transfer is eligible for cancellation if the &#x60;cancellable&#x60; property returned by &#x60;/transfer/get&#x60; is &#x60;true&#x60;.
    # @required @param transfer_cancel_request [Plaid::TransferCancelRequest?]
    # @return [Tuple(TransferCancelResponse, Integer, Hash)] TransferCancelResponse, response status code and response headers
    def transfer_cancel_with_http_info(
      *,
      transfer_cancel_request : Plaid::TransferCancelRequest? = nil
    ) : Tuple(TransferCancelResponse, Int32, Hash(String, Array(String) | String))
      request = build_api_request_for_transfer_cancel(transfer_cancel_request: transfer_cancel_request)

      body, status_code, headers = @api_client.execute_api_request(request)

      if debugging?
        Log.debug { "API called: PlaidApi#transfer_cancel\nBody: #{body.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}" }
      end

      Tuple.new(TransferCancelResponse.from_json(body), status_code, headers)
    end

    # Cancel a transfer
    # Use the &#x60;/transfer/cancel&#x60; endpoint to cancel a transfer.  A transfer is eligible for cancellation if the &#x60;cancellable&#x60; property returned by &#x60;/transfer/get&#x60; is &#x60;true&#x60;.
    # @required @param transfer_cancel_request [Plaid::TransferCancelRequest?]
    # @return nil
    def transfer_cancel(
      *,
      transfer_cancel_request : Plaid::TransferCancelRequest? = nil,
      &block : Crest::Response ->
    ) : Nil
      build_api_request_for_transfer_cancel(transfer_cancel_request: transfer_cancel_request).execute(&block)
    end

    # @return Crest::Request
    def build_api_request_for_transfer_cancel(
      *,
      transfer_cancel_request : Plaid::TransferCancelRequest? = nil
    ) : Crest::Request
      if debugging?
        Log.debug { "Calling API: PlaidApi.transfer_cancel ..." }
      end

      if client_side_validation?
        raise ArgumentError.new("\"transfer_cancel_request\" is required and cannot be null") if transfer_cancel_request.nil?
        unless (_transfer_cancel_request = transfer_cancel_request).nil?
          _transfer_cancel_request.validate if _transfer_cancel_request.is_a?(OpenApi::Validatable)
        end
      end

      # resource path
      local_var_path = "/transfer/cancel"

      # header parameters
      header_params : Hash(String, String) = Hash(String, String).new
      # HTTP header "Accept" (if needed)
      header_params["Accept"] = @api_client.select_header_accept(["application/json"])
      # HTTP header "Content-Type"
      header_params["Content-Type"] = @api_client.select_header_content_type(["application/json"])

      # cookie parameters
      cookie_params : Hash(String, String) = Hash(String, String).new

      # query parameters
      query_params : Hash(String, (String | Array(String) | JSON::Any)) = Hash(String, (String | Array(String) | JSON::Any)).new

      # form parameters
      form_params : Array(Tuple(String, Crest::ParamsValue)) | Nil = nil

      # http body (model)
      post_body : IO | String | Nil = @api_client.encode(body: transfer_cancel_request, content_type: header_params["Content-Type"]?) if !transfer_cancel_request.nil?

      # auth_names
      auth_names = ["clientId", "plaidVersion", "secret"]

      @api_client.build_api_request(
        http_method: :"POST",
        path: local_var_path,
        operation: "PlaidApi.transfer_cancel",
        post_body: post_body,
        auth_names: auth_names,
        header_params: header_params,
        cookie_params: cookie_params,
        query_params: query_params,
        form_params: form_params
      )
    end

    # Get RTP eligibility information of a transfer
    # Use the `/transfer/capabilities/get` endpoint to determine the RTP eligibility information of a transfer. To simulate RTP eligibility in Sandbox, log in using the username `user_good` and password `pass_good` and use the first two checking and savings accounts in the \"First Platypus Bank\" institution (ending in 0000 or 1111), which will return `true`. Any other account will return `false`.
    # @required @param transfer_capabilities_get_request [Plaid::TransferCapabilitiesGetRequest?]
    # @return [TransferCapabilitiesGetResponse]
    def transfer_capabilities_get(
      *,
      transfer_capabilities_get_request : Plaid::TransferCapabilitiesGetRequest? = nil
    ) : TransferCapabilitiesGetResponse
      data, _status_code, _headers = transfer_capabilities_get_with_http_info(transfer_capabilities_get_request: transfer_capabilities_get_request)
      data
    end

    # Get RTP eligibility information of a transfer
    # Use the &#x60;/transfer/capabilities/get&#x60; endpoint to determine the RTP eligibility information of a transfer. To simulate RTP eligibility in Sandbox, log in using the username &#x60;user_good&#x60; and password &#x60;pass_good&#x60; and use the first two checking and savings accounts in the \&quot;First Platypus Bank\&quot; institution (ending in 0000 or 1111), which will return &#x60;true&#x60;. Any other account will return &#x60;false&#x60;.
    # @required @param transfer_capabilities_get_request [Plaid::TransferCapabilitiesGetRequest?]
    # @return [Tuple(TransferCapabilitiesGetResponse, Integer, Hash)] TransferCapabilitiesGetResponse, response status code and response headers
    def transfer_capabilities_get_with_http_info(
      *,
      transfer_capabilities_get_request : Plaid::TransferCapabilitiesGetRequest? = nil
    ) : Tuple(TransferCapabilitiesGetResponse, Int32, Hash(String, Array(String) | String))
      request = build_api_request_for_transfer_capabilities_get(transfer_capabilities_get_request: transfer_capabilities_get_request)

      body, status_code, headers = @api_client.execute_api_request(request)

      if debugging?
        Log.debug { "API called: PlaidApi#transfer_capabilities_get\nBody: #{body.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}" }
      end

      Tuple.new(TransferCapabilitiesGetResponse.from_json(body), status_code, headers)
    end

    # Get RTP eligibility information of a transfer
    # Use the &#x60;/transfer/capabilities/get&#x60; endpoint to determine the RTP eligibility information of a transfer. To simulate RTP eligibility in Sandbox, log in using the username &#x60;user_good&#x60; and password &#x60;pass_good&#x60; and use the first two checking and savings accounts in the \&quot;First Platypus Bank\&quot; institution (ending in 0000 or 1111), which will return &#x60;true&#x60;. Any other account will return &#x60;false&#x60;.
    # @required @param transfer_capabilities_get_request [Plaid::TransferCapabilitiesGetRequest?]
    # @return nil
    def transfer_capabilities_get(
      *,
      transfer_capabilities_get_request : Plaid::TransferCapabilitiesGetRequest? = nil,
      &block : Crest::Response ->
    ) : Nil
      build_api_request_for_transfer_capabilities_get(transfer_capabilities_get_request: transfer_capabilities_get_request).execute(&block)
    end

    # @return Crest::Request
    def build_api_request_for_transfer_capabilities_get(
      *,
      transfer_capabilities_get_request : Plaid::TransferCapabilitiesGetRequest? = nil
    ) : Crest::Request
      if debugging?
        Log.debug { "Calling API: PlaidApi.transfer_capabilities_get ..." }
      end

      if client_side_validation?
        raise ArgumentError.new("\"transfer_capabilities_get_request\" is required and cannot be null") if transfer_capabilities_get_request.nil?
        unless (_transfer_capabilities_get_request = transfer_capabilities_get_request).nil?
          _transfer_capabilities_get_request.validate if _transfer_capabilities_get_request.is_a?(OpenApi::Validatable)
        end
      end

      # resource path
      local_var_path = "/transfer/capabilities/get"

      # header parameters
      header_params : Hash(String, String) = Hash(String, String).new
      # HTTP header "Accept" (if needed)
      header_params["Accept"] = @api_client.select_header_accept(["application/json"])
      # HTTP header "Content-Type"
      header_params["Content-Type"] = @api_client.select_header_content_type(["application/json"])

      # cookie parameters
      cookie_params : Hash(String, String) = Hash(String, String).new

      # query parameters
      query_params : Hash(String, (String | Array(String) | JSON::Any)) = Hash(String, (String | Array(String) | JSON::Any)).new

      # form parameters
      form_params : Array(Tuple(String, Crest::ParamsValue)) | Nil = nil

      # http body (model)
      post_body : IO | String | Nil = @api_client.encode(body: transfer_capabilities_get_request, content_type: header_params["Content-Type"]?) if !transfer_capabilities_get_request.nil?

      # auth_names
      auth_names = ["clientId", "plaidVersion", "secret"]

      @api_client.build_api_request(
        http_method: :"POST",
        path: local_var_path,
        operation: "PlaidApi.transfer_capabilities_get",
        post_body: post_body,
        auth_names: auth_names,
        header_params: header_params,
        cookie_params: cookie_params,
        query_params: query_params,
        form_params: form_params
      )
    end

    # Get transfer product configuration
    # Use the `/transfer/configuration/get` endpoint to view your transfer product configurations.
    # @required @param transfer_configuration_get_request [Plaid::TransferConfigurationGetRequest?]
    # @return [TransferConfigurationGetResponse]
    def transfer_configuration_get(
      *,
      transfer_configuration_get_request : Plaid::TransferConfigurationGetRequest? = nil
    ) : TransferConfigurationGetResponse
      data, _status_code, _headers = transfer_configuration_get_with_http_info(transfer_configuration_get_request: transfer_configuration_get_request)
      data
    end

    # Get transfer product configuration
    # Use the &#x60;/transfer/configuration/get&#x60; endpoint to view your transfer product configurations.
    # @required @param transfer_configuration_get_request [Plaid::TransferConfigurationGetRequest?]
    # @return [Tuple(TransferConfigurationGetResponse, Integer, Hash)] TransferConfigurationGetResponse, response status code and response headers
    def transfer_configuration_get_with_http_info(
      *,
      transfer_configuration_get_request : Plaid::TransferConfigurationGetRequest? = nil
    ) : Tuple(TransferConfigurationGetResponse, Int32, Hash(String, Array(String) | String))
      request = build_api_request_for_transfer_configuration_get(transfer_configuration_get_request: transfer_configuration_get_request)

      body, status_code, headers = @api_client.execute_api_request(request)

      if debugging?
        Log.debug { "API called: PlaidApi#transfer_configuration_get\nBody: #{body.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}" }
      end

      Tuple.new(TransferConfigurationGetResponse.from_json(body), status_code, headers)
    end

    # Get transfer product configuration
    # Use the &#x60;/transfer/configuration/get&#x60; endpoint to view your transfer product configurations.
    # @required @param transfer_configuration_get_request [Plaid::TransferConfigurationGetRequest?]
    # @return nil
    def transfer_configuration_get(
      *,
      transfer_configuration_get_request : Plaid::TransferConfigurationGetRequest? = nil,
      &block : Crest::Response ->
    ) : Nil
      build_api_request_for_transfer_configuration_get(transfer_configuration_get_request: transfer_configuration_get_request).execute(&block)
    end

    # @return Crest::Request
    def build_api_request_for_transfer_configuration_get(
      *,
      transfer_configuration_get_request : Plaid::TransferConfigurationGetRequest? = nil
    ) : Crest::Request
      if debugging?
        Log.debug { "Calling API: PlaidApi.transfer_configuration_get ..." }
      end

      if client_side_validation?
        raise ArgumentError.new("\"transfer_configuration_get_request\" is required and cannot be null") if transfer_configuration_get_request.nil?
        unless (_transfer_configuration_get_request = transfer_configuration_get_request).nil?
          _transfer_configuration_get_request.validate if _transfer_configuration_get_request.is_a?(OpenApi::Validatable)
        end
      end

      # resource path
      local_var_path = "/transfer/configuration/get"

      # header parameters
      header_params : Hash(String, String) = Hash(String, String).new
      # HTTP header "Accept" (if needed)
      header_params["Accept"] = @api_client.select_header_accept(["application/json"])
      # HTTP header "Content-Type"
      header_params["Content-Type"] = @api_client.select_header_content_type(["application/json"])

      # cookie parameters
      cookie_params : Hash(String, String) = Hash(String, String).new

      # query parameters
      query_params : Hash(String, (String | Array(String) | JSON::Any)) = Hash(String, (String | Array(String) | JSON::Any)).new

      # form parameters
      form_params : Array(Tuple(String, Crest::ParamsValue)) | Nil = nil

      # http body (model)
      post_body : IO | String | Nil = @api_client.encode(body: transfer_configuration_get_request, content_type: header_params["Content-Type"]?) if !transfer_configuration_get_request.nil?

      # auth_names
      auth_names = ["clientId", "plaidVersion", "secret"]

      @api_client.build_api_request(
        http_method: :"POST",
        path: local_var_path,
        operation: "PlaidApi.transfer_configuration_get",
        post_body: post_body,
        auth_names: auth_names,
        header_params: header_params,
        cookie_params: cookie_params,
        query_params: query_params,
        form_params: form_params
      )
    end

    # Create a transfer
    # Use the `/transfer/create` endpoint to initiate a new transfer.
    # @required @param transfer_create_request [Plaid::TransferCreateRequest?]
    # @return [TransferCreateResponse]
    def transfer_create(
      *,
      transfer_create_request : Plaid::TransferCreateRequest? = nil
    ) : TransferCreateResponse
      data, _status_code, _headers = transfer_create_with_http_info(transfer_create_request: transfer_create_request)
      data
    end

    # Create a transfer
    # Use the &#x60;/transfer/create&#x60; endpoint to initiate a new transfer.
    # @required @param transfer_create_request [Plaid::TransferCreateRequest?]
    # @return [Tuple(TransferCreateResponse, Integer, Hash)] TransferCreateResponse, response status code and response headers
    def transfer_create_with_http_info(
      *,
      transfer_create_request : Plaid::TransferCreateRequest? = nil
    ) : Tuple(TransferCreateResponse, Int32, Hash(String, Array(String) | String))
      request = build_api_request_for_transfer_create(transfer_create_request: transfer_create_request)

      body, status_code, headers = @api_client.execute_api_request(request)

      if debugging?
        Log.debug { "API called: PlaidApi#transfer_create\nBody: #{body.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}" }
      end

      Tuple.new(TransferCreateResponse.from_json(body), status_code, headers)
    end

    # Create a transfer
    # Use the &#x60;/transfer/create&#x60; endpoint to initiate a new transfer.
    # @required @param transfer_create_request [Plaid::TransferCreateRequest?]
    # @return nil
    def transfer_create(
      *,
      transfer_create_request : Plaid::TransferCreateRequest? = nil,
      &block : Crest::Response ->
    ) : Nil
      build_api_request_for_transfer_create(transfer_create_request: transfer_create_request).execute(&block)
    end

    # @return Crest::Request
    def build_api_request_for_transfer_create(
      *,
      transfer_create_request : Plaid::TransferCreateRequest? = nil
    ) : Crest::Request
      if debugging?
        Log.debug { "Calling API: PlaidApi.transfer_create ..." }
      end

      if client_side_validation?
        raise ArgumentError.new("\"transfer_create_request\" is required and cannot be null") if transfer_create_request.nil?
        unless (_transfer_create_request = transfer_create_request).nil?
          _transfer_create_request.validate if _transfer_create_request.is_a?(OpenApi::Validatable)
        end
      end

      # resource path
      local_var_path = "/transfer/create"

      # header parameters
      header_params : Hash(String, String) = Hash(String, String).new
      # HTTP header "Accept" (if needed)
      header_params["Accept"] = @api_client.select_header_accept(["application/json"])
      # HTTP header "Content-Type"
      header_params["Content-Type"] = @api_client.select_header_content_type(["application/json"])

      # cookie parameters
      cookie_params : Hash(String, String) = Hash(String, String).new

      # query parameters
      query_params : Hash(String, (String | Array(String) | JSON::Any)) = Hash(String, (String | Array(String) | JSON::Any)).new

      # form parameters
      form_params : Array(Tuple(String, Crest::ParamsValue)) | Nil = nil

      # http body (model)
      post_body : IO | String | Nil = @api_client.encode(body: transfer_create_request, content_type: header_params["Content-Type"]?) if !transfer_create_request.nil?

      # auth_names
      auth_names = ["clientId", "plaidVersion", "secret"]

      @api_client.build_api_request(
        http_method: :"POST",
        path: local_var_path,
        operation: "PlaidApi.transfer_create",
        post_body: post_body,
        auth_names: auth_names,
        header_params: header_params,
        cookie_params: cookie_params,
        query_params: query_params,
        form_params: form_params
      )
    end

    # Upload transfer diligence document on behalf of the originator
    # Third-party sender customers can use `/transfer/diligence/document/upload` endpoint to upload a document on behalf of its end customer (i.e. originator) to Plaid. You’ll need to send a request of type multipart/form-data. You must provide the `client_id` in the `PLAID-CLIENT-ID` header and `secret` in the `PLAID-SECRET` header.
    # @required @param transfer_diligence_document_upload_request [Plaid::TransferDiligenceDocumentUploadRequest?]
    # @return [TransferDiligenceDocumentUploadResponse]
    def transfer_diligence_document_upload(
      *,
      transfer_diligence_document_upload_request : Plaid::TransferDiligenceDocumentUploadRequest? = nil
    ) : TransferDiligenceDocumentUploadResponse
      data, _status_code, _headers = transfer_diligence_document_upload_with_http_info(transfer_diligence_document_upload_request: transfer_diligence_document_upload_request)
      data
    end

    # Upload transfer diligence document on behalf of the originator
    # Third-party sender customers can use &#x60;/transfer/diligence/document/upload&#x60; endpoint to upload a document on behalf of its end customer (i.e. originator) to Plaid. You’ll need to send a request of type multipart/form-data. You must provide the &#x60;client_id&#x60; in the &#x60;PLAID-CLIENT-ID&#x60; header and &#x60;secret&#x60; in the &#x60;PLAID-SECRET&#x60; header.
    # @required @param transfer_diligence_document_upload_request [Plaid::TransferDiligenceDocumentUploadRequest?]
    # @return [Tuple(TransferDiligenceDocumentUploadResponse, Integer, Hash)] TransferDiligenceDocumentUploadResponse, response status code and response headers
    def transfer_diligence_document_upload_with_http_info(
      *,
      transfer_diligence_document_upload_request : Plaid::TransferDiligenceDocumentUploadRequest? = nil
    ) : Tuple(TransferDiligenceDocumentUploadResponse, Int32, Hash(String, Array(String) | String))
      request = build_api_request_for_transfer_diligence_document_upload(transfer_diligence_document_upload_request: transfer_diligence_document_upload_request)

      body, status_code, headers = @api_client.execute_api_request(request)

      if debugging?
        Log.debug { "API called: PlaidApi#transfer_diligence_document_upload\nBody: #{body.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}" }
      end

      Tuple.new(TransferDiligenceDocumentUploadResponse.from_json(body), status_code, headers)
    end

    # Upload transfer diligence document on behalf of the originator
    # Third-party sender customers can use &#x60;/transfer/diligence/document/upload&#x60; endpoint to upload a document on behalf of its end customer (i.e. originator) to Plaid. You’ll need to send a request of type multipart/form-data. You must provide the &#x60;client_id&#x60; in the &#x60;PLAID-CLIENT-ID&#x60; header and &#x60;secret&#x60; in the &#x60;PLAID-SECRET&#x60; header.
    # @required @param transfer_diligence_document_upload_request [Plaid::TransferDiligenceDocumentUploadRequest?]
    # @return nil
    def transfer_diligence_document_upload(
      *,
      transfer_diligence_document_upload_request : Plaid::TransferDiligenceDocumentUploadRequest? = nil,
      &block : Crest::Response ->
    ) : Nil
      build_api_request_for_transfer_diligence_document_upload(transfer_diligence_document_upload_request: transfer_diligence_document_upload_request).execute(&block)
    end

    # @return Crest::Request
    def build_api_request_for_transfer_diligence_document_upload(
      *,
      transfer_diligence_document_upload_request : Plaid::TransferDiligenceDocumentUploadRequest? = nil
    ) : Crest::Request
      if debugging?
        Log.debug { "Calling API: PlaidApi.transfer_diligence_document_upload ..." }
      end

      if client_side_validation?
        raise ArgumentError.new("\"transfer_diligence_document_upload_request\" is required and cannot be null") if transfer_diligence_document_upload_request.nil?
        unless (_transfer_diligence_document_upload_request = transfer_diligence_document_upload_request).nil?
          _transfer_diligence_document_upload_request.validate if _transfer_diligence_document_upload_request.is_a?(OpenApi::Validatable)
        end
      end

      # resource path
      local_var_path = "/transfer/diligence/document/upload"

      # header parameters
      header_params : Hash(String, String) = Hash(String, String).new
      # HTTP header "Accept" (if needed)
      header_params["Accept"] = @api_client.select_header_accept(["application/json"])
      # HTTP header "Content-Type"
      header_params["Content-Type"] = @api_client.select_header_content_type(["application/json"])

      # cookie parameters
      cookie_params : Hash(String, String) = Hash(String, String).new

      # query parameters
      query_params : Hash(String, (String | Array(String) | JSON::Any)) = Hash(String, (String | Array(String) | JSON::Any)).new

      # form parameters
      form_params : Array(Tuple(String, Crest::ParamsValue)) | Nil = nil

      # http body (model)
      post_body : IO | String | Nil = @api_client.encode(body: transfer_diligence_document_upload_request, content_type: header_params["Content-Type"]?) if !transfer_diligence_document_upload_request.nil?

      # auth_names
      auth_names = ["clientId", "plaidVersion", "secret"]

      @api_client.build_api_request(
        http_method: :"POST",
        path: local_var_path,
        operation: "PlaidApi.transfer_diligence_document_upload",
        post_body: post_body,
        auth_names: auth_names,
        header_params: header_params,
        cookie_params: cookie_params,
        query_params: query_params,
        form_params: form_params
      )
    end

    # Submit transfer diligence on behalf of the originator
    # Use the `/transfer/diligence/submit` endpoint to submit transfer diligence on behalf of the originator (i.e., the end customer).
    # @required @param transfer_diligence_submit_request [Plaid::TransferDiligenceSubmitRequest?]
    # @return [TransferDiligenceSubmitResponse]
    def transfer_diligence_submit(
      *,
      transfer_diligence_submit_request : Plaid::TransferDiligenceSubmitRequest? = nil
    ) : TransferDiligenceSubmitResponse
      data, _status_code, _headers = transfer_diligence_submit_with_http_info(transfer_diligence_submit_request: transfer_diligence_submit_request)
      data
    end

    # Submit transfer diligence on behalf of the originator
    # Use the &#x60;/transfer/diligence/submit&#x60; endpoint to submit transfer diligence on behalf of the originator (i.e., the end customer).
    # @required @param transfer_diligence_submit_request [Plaid::TransferDiligenceSubmitRequest?]
    # @return [Tuple(TransferDiligenceSubmitResponse, Integer, Hash)] TransferDiligenceSubmitResponse, response status code and response headers
    def transfer_diligence_submit_with_http_info(
      *,
      transfer_diligence_submit_request : Plaid::TransferDiligenceSubmitRequest? = nil
    ) : Tuple(TransferDiligenceSubmitResponse, Int32, Hash(String, Array(String) | String))
      request = build_api_request_for_transfer_diligence_submit(transfer_diligence_submit_request: transfer_diligence_submit_request)

      body, status_code, headers = @api_client.execute_api_request(request)

      if debugging?
        Log.debug { "API called: PlaidApi#transfer_diligence_submit\nBody: #{body.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}" }
      end

      Tuple.new(TransferDiligenceSubmitResponse.from_json(body), status_code, headers)
    end

    # Submit transfer diligence on behalf of the originator
    # Use the &#x60;/transfer/diligence/submit&#x60; endpoint to submit transfer diligence on behalf of the originator (i.e., the end customer).
    # @required @param transfer_diligence_submit_request [Plaid::TransferDiligenceSubmitRequest?]
    # @return nil
    def transfer_diligence_submit(
      *,
      transfer_diligence_submit_request : Plaid::TransferDiligenceSubmitRequest? = nil,
      &block : Crest::Response ->
    ) : Nil
      build_api_request_for_transfer_diligence_submit(transfer_diligence_submit_request: transfer_diligence_submit_request).execute(&block)
    end

    # @return Crest::Request
    def build_api_request_for_transfer_diligence_submit(
      *,
      transfer_diligence_submit_request : Plaid::TransferDiligenceSubmitRequest? = nil
    ) : Crest::Request
      if debugging?
        Log.debug { "Calling API: PlaidApi.transfer_diligence_submit ..." }
      end

      if client_side_validation?
        raise ArgumentError.new("\"transfer_diligence_submit_request\" is required and cannot be null") if transfer_diligence_submit_request.nil?
        unless (_transfer_diligence_submit_request = transfer_diligence_submit_request).nil?
          _transfer_diligence_submit_request.validate if _transfer_diligence_submit_request.is_a?(OpenApi::Validatable)
        end
      end

      # resource path
      local_var_path = "/transfer/diligence/submit"

      # header parameters
      header_params : Hash(String, String) = Hash(String, String).new
      # HTTP header "Accept" (if needed)
      header_params["Accept"] = @api_client.select_header_accept(["application/json"])
      # HTTP header "Content-Type"
      header_params["Content-Type"] = @api_client.select_header_content_type(["application/json"])

      # cookie parameters
      cookie_params : Hash(String, String) = Hash(String, String).new

      # query parameters
      query_params : Hash(String, (String | Array(String) | JSON::Any)) = Hash(String, (String | Array(String) | JSON::Any)).new

      # form parameters
      form_params : Array(Tuple(String, Crest::ParamsValue)) | Nil = nil

      # http body (model)
      post_body : IO | String | Nil = @api_client.encode(body: transfer_diligence_submit_request, content_type: header_params["Content-Type"]?) if !transfer_diligence_submit_request.nil?

      # auth_names
      auth_names = ["clientId", "plaidVersion", "secret"]

      @api_client.build_api_request(
        http_method: :"POST",
        path: local_var_path,
        operation: "PlaidApi.transfer_diligence_submit",
        post_body: post_body,
        auth_names: auth_names,
        header_params: header_params,
        cookie_params: cookie_params,
        query_params: query_params,
        form_params: form_params
      )
    end

    # List transfer events
    # Use the `/transfer/event/list` endpoint to get a list of transfer events based on specified filter criteria.
    # @required @param transfer_event_list_request [Plaid::TransferEventListRequest?]
    # @return [TransferEventListResponse]
    def transfer_event_list(
      *,
      transfer_event_list_request : Plaid::TransferEventListRequest? = nil
    ) : TransferEventListResponse
      data, _status_code, _headers = transfer_event_list_with_http_info(transfer_event_list_request: transfer_event_list_request)
      data
    end

    # List transfer events
    # Use the &#x60;/transfer/event/list&#x60; endpoint to get a list of transfer events based on specified filter criteria.
    # @required @param transfer_event_list_request [Plaid::TransferEventListRequest?]
    # @return [Tuple(TransferEventListResponse, Integer, Hash)] TransferEventListResponse, response status code and response headers
    def transfer_event_list_with_http_info(
      *,
      transfer_event_list_request : Plaid::TransferEventListRequest? = nil
    ) : Tuple(TransferEventListResponse, Int32, Hash(String, Array(String) | String))
      request = build_api_request_for_transfer_event_list(transfer_event_list_request: transfer_event_list_request)

      body, status_code, headers = @api_client.execute_api_request(request)

      if debugging?
        Log.debug { "API called: PlaidApi#transfer_event_list\nBody: #{body.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}" }
      end

      Tuple.new(TransferEventListResponse.from_json(body), status_code, headers)
    end

    # List transfer events
    # Use the &#x60;/transfer/event/list&#x60; endpoint to get a list of transfer events based on specified filter criteria.
    # @required @param transfer_event_list_request [Plaid::TransferEventListRequest?]
    # @return nil
    def transfer_event_list(
      *,
      transfer_event_list_request : Plaid::TransferEventListRequest? = nil,
      &block : Crest::Response ->
    ) : Nil
      build_api_request_for_transfer_event_list(transfer_event_list_request: transfer_event_list_request).execute(&block)
    end

    # @return Crest::Request
    def build_api_request_for_transfer_event_list(
      *,
      transfer_event_list_request : Plaid::TransferEventListRequest? = nil
    ) : Crest::Request
      if debugging?
        Log.debug { "Calling API: PlaidApi.transfer_event_list ..." }
      end

      if client_side_validation?
        raise ArgumentError.new("\"transfer_event_list_request\" is required and cannot be null") if transfer_event_list_request.nil?
        unless (_transfer_event_list_request = transfer_event_list_request).nil?
          _transfer_event_list_request.validate if _transfer_event_list_request.is_a?(OpenApi::Validatable)
        end
      end

      # resource path
      local_var_path = "/transfer/event/list"

      # header parameters
      header_params : Hash(String, String) = Hash(String, String).new
      # HTTP header "Accept" (if needed)
      header_params["Accept"] = @api_client.select_header_accept(["application/json"])
      # HTTP header "Content-Type"
      header_params["Content-Type"] = @api_client.select_header_content_type(["application/json"])

      # cookie parameters
      cookie_params : Hash(String, String) = Hash(String, String).new

      # query parameters
      query_params : Hash(String, (String | Array(String) | JSON::Any)) = Hash(String, (String | Array(String) | JSON::Any)).new

      # form parameters
      form_params : Array(Tuple(String, Crest::ParamsValue)) | Nil = nil

      # http body (model)
      post_body : IO | String | Nil = @api_client.encode(body: transfer_event_list_request, content_type: header_params["Content-Type"]?) if !transfer_event_list_request.nil?

      # auth_names
      auth_names = ["clientId", "plaidVersion", "secret"]

      @api_client.build_api_request(
        http_method: :"POST",
        path: local_var_path,
        operation: "PlaidApi.transfer_event_list",
        post_body: post_body,
        auth_names: auth_names,
        header_params: header_params,
        cookie_params: cookie_params,
        query_params: query_params,
        form_params: form_params
      )
    end

    # Sync transfer events
    # `/transfer/event/sync` allows you to request up to the next 25 transfer events that happened after a specific `event_id`. Use the `/transfer/event/sync` endpoint to guarantee you have seen all transfer events.
    # @required @param transfer_event_sync_request [Plaid::TransferEventSyncRequest?]
    # @return [TransferEventSyncResponse]
    def transfer_event_sync(
      *,
      transfer_event_sync_request : Plaid::TransferEventSyncRequest? = nil
    ) : TransferEventSyncResponse
      data, _status_code, _headers = transfer_event_sync_with_http_info(transfer_event_sync_request: transfer_event_sync_request)
      data
    end

    # Sync transfer events
    # &#x60;/transfer/event/sync&#x60; allows you to request up to the next 25 transfer events that happened after a specific &#x60;event_id&#x60;. Use the &#x60;/transfer/event/sync&#x60; endpoint to guarantee you have seen all transfer events.
    # @required @param transfer_event_sync_request [Plaid::TransferEventSyncRequest?]
    # @return [Tuple(TransferEventSyncResponse, Integer, Hash)] TransferEventSyncResponse, response status code and response headers
    def transfer_event_sync_with_http_info(
      *,
      transfer_event_sync_request : Plaid::TransferEventSyncRequest? = nil
    ) : Tuple(TransferEventSyncResponse, Int32, Hash(String, Array(String) | String))
      request = build_api_request_for_transfer_event_sync(transfer_event_sync_request: transfer_event_sync_request)

      body, status_code, headers = @api_client.execute_api_request(request)

      if debugging?
        Log.debug { "API called: PlaidApi#transfer_event_sync\nBody: #{body.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}" }
      end

      Tuple.new(TransferEventSyncResponse.from_json(body), status_code, headers)
    end

    # Sync transfer events
    # &#x60;/transfer/event/sync&#x60; allows you to request up to the next 25 transfer events that happened after a specific &#x60;event_id&#x60;. Use the &#x60;/transfer/event/sync&#x60; endpoint to guarantee you have seen all transfer events.
    # @required @param transfer_event_sync_request [Plaid::TransferEventSyncRequest?]
    # @return nil
    def transfer_event_sync(
      *,
      transfer_event_sync_request : Plaid::TransferEventSyncRequest? = nil,
      &block : Crest::Response ->
    ) : Nil
      build_api_request_for_transfer_event_sync(transfer_event_sync_request: transfer_event_sync_request).execute(&block)
    end

    # @return Crest::Request
    def build_api_request_for_transfer_event_sync(
      *,
      transfer_event_sync_request : Plaid::TransferEventSyncRequest? = nil
    ) : Crest::Request
      if debugging?
        Log.debug { "Calling API: PlaidApi.transfer_event_sync ..." }
      end

      if client_side_validation?
        raise ArgumentError.new("\"transfer_event_sync_request\" is required and cannot be null") if transfer_event_sync_request.nil?
        unless (_transfer_event_sync_request = transfer_event_sync_request).nil?
          _transfer_event_sync_request.validate if _transfer_event_sync_request.is_a?(OpenApi::Validatable)
        end
      end

      # resource path
      local_var_path = "/transfer/event/sync"

      # header parameters
      header_params : Hash(String, String) = Hash(String, String).new
      # HTTP header "Accept" (if needed)
      header_params["Accept"] = @api_client.select_header_accept(["application/json"])
      # HTTP header "Content-Type"
      header_params["Content-Type"] = @api_client.select_header_content_type(["application/json"])

      # cookie parameters
      cookie_params : Hash(String, String) = Hash(String, String).new

      # query parameters
      query_params : Hash(String, (String | Array(String) | JSON::Any)) = Hash(String, (String | Array(String) | JSON::Any)).new

      # form parameters
      form_params : Array(Tuple(String, Crest::ParamsValue)) | Nil = nil

      # http body (model)
      post_body : IO | String | Nil = @api_client.encode(body: transfer_event_sync_request, content_type: header_params["Content-Type"]?) if !transfer_event_sync_request.nil?

      # auth_names
      auth_names = ["clientId", "plaidVersion", "secret"]

      @api_client.build_api_request(
        http_method: :"POST",
        path: local_var_path,
        operation: "PlaidApi.transfer_event_sync",
        post_body: post_body,
        auth_names: auth_names,
        header_params: header_params,
        cookie_params: cookie_params,
        query_params: query_params,
        form_params: form_params
      )
    end

    # Retrieve a transfer
    # The `/transfer/get` endpoint fetches information about the transfer corresponding to the given `transfer_id`.
    # @required @param transfer_get_request [Plaid::TransferGetRequest?]
    # @return [TransferGetResponse]
    def transfer_get(
      *,
      transfer_get_request : Plaid::TransferGetRequest? = nil
    ) : TransferGetResponse
      data, _status_code, _headers = transfer_get_with_http_info(transfer_get_request: transfer_get_request)
      data
    end

    # Retrieve a transfer
    # The &#x60;/transfer/get&#x60; endpoint fetches information about the transfer corresponding to the given &#x60;transfer_id&#x60;.
    # @required @param transfer_get_request [Plaid::TransferGetRequest?]
    # @return [Tuple(TransferGetResponse, Integer, Hash)] TransferGetResponse, response status code and response headers
    def transfer_get_with_http_info(
      *,
      transfer_get_request : Plaid::TransferGetRequest? = nil
    ) : Tuple(TransferGetResponse, Int32, Hash(String, Array(String) | String))
      request = build_api_request_for_transfer_get(transfer_get_request: transfer_get_request)

      body, status_code, headers = @api_client.execute_api_request(request)

      if debugging?
        Log.debug { "API called: PlaidApi#transfer_get\nBody: #{body.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}" }
      end

      Tuple.new(TransferGetResponse.from_json(body), status_code, headers)
    end

    # Retrieve a transfer
    # The &#x60;/transfer/get&#x60; endpoint fetches information about the transfer corresponding to the given &#x60;transfer_id&#x60;.
    # @required @param transfer_get_request [Plaid::TransferGetRequest?]
    # @return nil
    def transfer_get(
      *,
      transfer_get_request : Plaid::TransferGetRequest? = nil,
      &block : Crest::Response ->
    ) : Nil
      build_api_request_for_transfer_get(transfer_get_request: transfer_get_request).execute(&block)
    end

    # @return Crest::Request
    def build_api_request_for_transfer_get(
      *,
      transfer_get_request : Plaid::TransferGetRequest? = nil
    ) : Crest::Request
      if debugging?
        Log.debug { "Calling API: PlaidApi.transfer_get ..." }
      end

      if client_side_validation?
        raise ArgumentError.new("\"transfer_get_request\" is required and cannot be null") if transfer_get_request.nil?
        unless (_transfer_get_request = transfer_get_request).nil?
          _transfer_get_request.validate if _transfer_get_request.is_a?(OpenApi::Validatable)
        end
      end

      # resource path
      local_var_path = "/transfer/get"

      # header parameters
      header_params : Hash(String, String) = Hash(String, String).new
      # HTTP header "Accept" (if needed)
      header_params["Accept"] = @api_client.select_header_accept(["application/json"])
      # HTTP header "Content-Type"
      header_params["Content-Type"] = @api_client.select_header_content_type(["application/json"])

      # cookie parameters
      cookie_params : Hash(String, String) = Hash(String, String).new

      # query parameters
      query_params : Hash(String, (String | Array(String) | JSON::Any)) = Hash(String, (String | Array(String) | JSON::Any)).new

      # form parameters
      form_params : Array(Tuple(String, Crest::ParamsValue)) | Nil = nil

      # http body (model)
      post_body : IO | String | Nil = @api_client.encode(body: transfer_get_request, content_type: header_params["Content-Type"]?) if !transfer_get_request.nil?

      # auth_names
      auth_names = ["clientId", "plaidVersion", "secret"]

      @api_client.build_api_request(
        http_method: :"POST",
        path: local_var_path,
        operation: "PlaidApi.transfer_get",
        post_body: post_body,
        auth_names: auth_names,
        header_params: header_params,
        cookie_params: cookie_params,
        query_params: query_params,
        form_params: form_params
      )
    end

    # Create a transfer intent object to invoke the Transfer UI
    # Use the `/transfer/intent/create` endpoint to generate a transfer intent object and invoke the Transfer UI.
    # @required @param transfer_intent_create_request [Plaid::TransferIntentCreateRequest?]
    # @return [TransferIntentCreateResponse]
    def transfer_intent_create(
      *,
      transfer_intent_create_request : Plaid::TransferIntentCreateRequest? = nil
    ) : TransferIntentCreateResponse
      data, _status_code, _headers = transfer_intent_create_with_http_info(transfer_intent_create_request: transfer_intent_create_request)
      data
    end

    # Create a transfer intent object to invoke the Transfer UI
    # Use the &#x60;/transfer/intent/create&#x60; endpoint to generate a transfer intent object and invoke the Transfer UI.
    # @required @param transfer_intent_create_request [Plaid::TransferIntentCreateRequest?]
    # @return [Tuple(TransferIntentCreateResponse, Integer, Hash)] TransferIntentCreateResponse, response status code and response headers
    def transfer_intent_create_with_http_info(
      *,
      transfer_intent_create_request : Plaid::TransferIntentCreateRequest? = nil
    ) : Tuple(TransferIntentCreateResponse, Int32, Hash(String, Array(String) | String))
      request = build_api_request_for_transfer_intent_create(transfer_intent_create_request: transfer_intent_create_request)

      body, status_code, headers = @api_client.execute_api_request(request)

      if debugging?
        Log.debug { "API called: PlaidApi#transfer_intent_create\nBody: #{body.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}" }
      end

      Tuple.new(TransferIntentCreateResponse.from_json(body), status_code, headers)
    end

    # Create a transfer intent object to invoke the Transfer UI
    # Use the &#x60;/transfer/intent/create&#x60; endpoint to generate a transfer intent object and invoke the Transfer UI.
    # @required @param transfer_intent_create_request [Plaid::TransferIntentCreateRequest?]
    # @return nil
    def transfer_intent_create(
      *,
      transfer_intent_create_request : Plaid::TransferIntentCreateRequest? = nil,
      &block : Crest::Response ->
    ) : Nil
      build_api_request_for_transfer_intent_create(transfer_intent_create_request: transfer_intent_create_request).execute(&block)
    end

    # @return Crest::Request
    def build_api_request_for_transfer_intent_create(
      *,
      transfer_intent_create_request : Plaid::TransferIntentCreateRequest? = nil
    ) : Crest::Request
      if debugging?
        Log.debug { "Calling API: PlaidApi.transfer_intent_create ..." }
      end

      if client_side_validation?
        raise ArgumentError.new("\"transfer_intent_create_request\" is required and cannot be null") if transfer_intent_create_request.nil?
        unless (_transfer_intent_create_request = transfer_intent_create_request).nil?
          _transfer_intent_create_request.validate if _transfer_intent_create_request.is_a?(OpenApi::Validatable)
        end
      end

      # resource path
      local_var_path = "/transfer/intent/create"

      # header parameters
      header_params : Hash(String, String) = Hash(String, String).new
      # HTTP header "Accept" (if needed)
      header_params["Accept"] = @api_client.select_header_accept(["application/json"])
      # HTTP header "Content-Type"
      header_params["Content-Type"] = @api_client.select_header_content_type(["application/json"])

      # cookie parameters
      cookie_params : Hash(String, String) = Hash(String, String).new

      # query parameters
      query_params : Hash(String, (String | Array(String) | JSON::Any)) = Hash(String, (String | Array(String) | JSON::Any)).new

      # form parameters
      form_params : Array(Tuple(String, Crest::ParamsValue)) | Nil = nil

      # http body (model)
      post_body : IO | String | Nil = @api_client.encode(body: transfer_intent_create_request, content_type: header_params["Content-Type"]?) if !transfer_intent_create_request.nil?

      # auth_names
      auth_names = ["clientId", "plaidVersion", "secret"]

      @api_client.build_api_request(
        http_method: :"POST",
        path: local_var_path,
        operation: "PlaidApi.transfer_intent_create",
        post_body: post_body,
        auth_names: auth_names,
        header_params: header_params,
        cookie_params: cookie_params,
        query_params: query_params,
        form_params: form_params
      )
    end

    # Retrieve more information about a transfer intent
    # Use the `/transfer/intent/get` endpoint to retrieve more information about a transfer intent.
    # @required @param transfer_intent_get_request [Plaid::TransferIntentGetRequest?]
    # @return [TransferIntentGetResponse]
    def transfer_intent_get(
      *,
      transfer_intent_get_request : Plaid::TransferIntentGetRequest? = nil
    ) : TransferIntentGetResponse
      data, _status_code, _headers = transfer_intent_get_with_http_info(transfer_intent_get_request: transfer_intent_get_request)
      data
    end

    # Retrieve more information about a transfer intent
    # Use the &#x60;/transfer/intent/get&#x60; endpoint to retrieve more information about a transfer intent.
    # @required @param transfer_intent_get_request [Plaid::TransferIntentGetRequest?]
    # @return [Tuple(TransferIntentGetResponse, Integer, Hash)] TransferIntentGetResponse, response status code and response headers
    def transfer_intent_get_with_http_info(
      *,
      transfer_intent_get_request : Plaid::TransferIntentGetRequest? = nil
    ) : Tuple(TransferIntentGetResponse, Int32, Hash(String, Array(String) | String))
      request = build_api_request_for_transfer_intent_get(transfer_intent_get_request: transfer_intent_get_request)

      body, status_code, headers = @api_client.execute_api_request(request)

      if debugging?
        Log.debug { "API called: PlaidApi#transfer_intent_get\nBody: #{body.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}" }
      end

      Tuple.new(TransferIntentGetResponse.from_json(body), status_code, headers)
    end

    # Retrieve more information about a transfer intent
    # Use the &#x60;/transfer/intent/get&#x60; endpoint to retrieve more information about a transfer intent.
    # @required @param transfer_intent_get_request [Plaid::TransferIntentGetRequest?]
    # @return nil
    def transfer_intent_get(
      *,
      transfer_intent_get_request : Plaid::TransferIntentGetRequest? = nil,
      &block : Crest::Response ->
    ) : Nil
      build_api_request_for_transfer_intent_get(transfer_intent_get_request: transfer_intent_get_request).execute(&block)
    end

    # @return Crest::Request
    def build_api_request_for_transfer_intent_get(
      *,
      transfer_intent_get_request : Plaid::TransferIntentGetRequest? = nil
    ) : Crest::Request
      if debugging?
        Log.debug { "Calling API: PlaidApi.transfer_intent_get ..." }
      end

      if client_side_validation?
        raise ArgumentError.new("\"transfer_intent_get_request\" is required and cannot be null") if transfer_intent_get_request.nil?
        unless (_transfer_intent_get_request = transfer_intent_get_request).nil?
          _transfer_intent_get_request.validate if _transfer_intent_get_request.is_a?(OpenApi::Validatable)
        end
      end

      # resource path
      local_var_path = "/transfer/intent/get"

      # header parameters
      header_params : Hash(String, String) = Hash(String, String).new
      # HTTP header "Accept" (if needed)
      header_params["Accept"] = @api_client.select_header_accept(["application/json"])
      # HTTP header "Content-Type"
      header_params["Content-Type"] = @api_client.select_header_content_type(["application/json"])

      # cookie parameters
      cookie_params : Hash(String, String) = Hash(String, String).new

      # query parameters
      query_params : Hash(String, (String | Array(String) | JSON::Any)) = Hash(String, (String | Array(String) | JSON::Any)).new

      # form parameters
      form_params : Array(Tuple(String, Crest::ParamsValue)) | Nil = nil

      # http body (model)
      post_body : IO | String | Nil = @api_client.encode(body: transfer_intent_get_request, content_type: header_params["Content-Type"]?) if !transfer_intent_get_request.nil?

      # auth_names
      auth_names = ["clientId", "plaidVersion", "secret"]

      @api_client.build_api_request(
        http_method: :"POST",
        path: local_var_path,
        operation: "PlaidApi.transfer_intent_get",
        post_body: post_body,
        auth_names: auth_names,
        header_params: header_params,
        cookie_params: cookie_params,
        query_params: query_params,
        form_params: form_params
      )
    end

    # Deposit funds into a Plaid Ledger balance
    # Use the `/transfer/ledger/deposit` endpoint to deposit funds into Plaid Ledger.
    # @required @param transfer_ledger_deposit_request [Plaid::TransferLedgerDepositRequest?]
    # @return [TransferLedgerDepositResponse]
    def transfer_ledger_deposit(
      *,
      transfer_ledger_deposit_request : Plaid::TransferLedgerDepositRequest? = nil
    ) : TransferLedgerDepositResponse
      data, _status_code, _headers = transfer_ledger_deposit_with_http_info(transfer_ledger_deposit_request: transfer_ledger_deposit_request)
      data
    end

    # Deposit funds into a Plaid Ledger balance
    # Use the &#x60;/transfer/ledger/deposit&#x60; endpoint to deposit funds into Plaid Ledger.
    # @required @param transfer_ledger_deposit_request [Plaid::TransferLedgerDepositRequest?]
    # @return [Tuple(TransferLedgerDepositResponse, Integer, Hash)] TransferLedgerDepositResponse, response status code and response headers
    def transfer_ledger_deposit_with_http_info(
      *,
      transfer_ledger_deposit_request : Plaid::TransferLedgerDepositRequest? = nil
    ) : Tuple(TransferLedgerDepositResponse, Int32, Hash(String, Array(String) | String))
      request = build_api_request_for_transfer_ledger_deposit(transfer_ledger_deposit_request: transfer_ledger_deposit_request)

      body, status_code, headers = @api_client.execute_api_request(request)

      if debugging?
        Log.debug { "API called: PlaidApi#transfer_ledger_deposit\nBody: #{body.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}" }
      end

      Tuple.new(TransferLedgerDepositResponse.from_json(body), status_code, headers)
    end

    # Deposit funds into a Plaid Ledger balance
    # Use the &#x60;/transfer/ledger/deposit&#x60; endpoint to deposit funds into Plaid Ledger.
    # @required @param transfer_ledger_deposit_request [Plaid::TransferLedgerDepositRequest?]
    # @return nil
    def transfer_ledger_deposit(
      *,
      transfer_ledger_deposit_request : Plaid::TransferLedgerDepositRequest? = nil,
      &block : Crest::Response ->
    ) : Nil
      build_api_request_for_transfer_ledger_deposit(transfer_ledger_deposit_request: transfer_ledger_deposit_request).execute(&block)
    end

    # @return Crest::Request
    def build_api_request_for_transfer_ledger_deposit(
      *,
      transfer_ledger_deposit_request : Plaid::TransferLedgerDepositRequest? = nil
    ) : Crest::Request
      if debugging?
        Log.debug { "Calling API: PlaidApi.transfer_ledger_deposit ..." }
      end

      if client_side_validation?
        raise ArgumentError.new("\"transfer_ledger_deposit_request\" is required and cannot be null") if transfer_ledger_deposit_request.nil?
        unless (_transfer_ledger_deposit_request = transfer_ledger_deposit_request).nil?
          _transfer_ledger_deposit_request.validate if _transfer_ledger_deposit_request.is_a?(OpenApi::Validatable)
        end
      end

      # resource path
      local_var_path = "/transfer/ledger/deposit"

      # header parameters
      header_params : Hash(String, String) = Hash(String, String).new
      # HTTP header "Accept" (if needed)
      header_params["Accept"] = @api_client.select_header_accept(["application/json"])
      # HTTP header "Content-Type"
      header_params["Content-Type"] = @api_client.select_header_content_type(["application/json"])

      # cookie parameters
      cookie_params : Hash(String, String) = Hash(String, String).new

      # query parameters
      query_params : Hash(String, (String | Array(String) | JSON::Any)) = Hash(String, (String | Array(String) | JSON::Any)).new

      # form parameters
      form_params : Array(Tuple(String, Crest::ParamsValue)) | Nil = nil

      # http body (model)
      post_body : IO | String | Nil = @api_client.encode(body: transfer_ledger_deposit_request, content_type: header_params["Content-Type"]?) if !transfer_ledger_deposit_request.nil?

      # auth_names
      auth_names = ["clientId", "plaidVersion", "secret"]

      @api_client.build_api_request(
        http_method: :"POST",
        path: local_var_path,
        operation: "PlaidApi.transfer_ledger_deposit",
        post_body: post_body,
        auth_names: auth_names,
        header_params: header_params,
        cookie_params: cookie_params,
        query_params: query_params,
        form_params: form_params
      )
    end

    # Move available balance between the ledgers of the platform and one of its originators
    # Use the `/transfer/ledger/distribute` endpoint to move available balance between the ledgers of the platform and one of its originators.
    # @required @param transfer_ledger_distribute_request [Plaid::TransferLedgerDistributeRequest?]
    # @return [TransferLedgerDistributeResponse]
    def transfer_ledger_distribute(
      *,
      transfer_ledger_distribute_request : Plaid::TransferLedgerDistributeRequest? = nil
    ) : TransferLedgerDistributeResponse
      data, _status_code, _headers = transfer_ledger_distribute_with_http_info(transfer_ledger_distribute_request: transfer_ledger_distribute_request)
      data
    end

    # Move available balance between the ledgers of the platform and one of its originators
    # Use the &#x60;/transfer/ledger/distribute&#x60; endpoint to move available balance between the ledgers of the platform and one of its originators.
    # @required @param transfer_ledger_distribute_request [Plaid::TransferLedgerDistributeRequest?]
    # @return [Tuple(TransferLedgerDistributeResponse, Integer, Hash)] TransferLedgerDistributeResponse, response status code and response headers
    def transfer_ledger_distribute_with_http_info(
      *,
      transfer_ledger_distribute_request : Plaid::TransferLedgerDistributeRequest? = nil
    ) : Tuple(TransferLedgerDistributeResponse, Int32, Hash(String, Array(String) | String))
      request = build_api_request_for_transfer_ledger_distribute(transfer_ledger_distribute_request: transfer_ledger_distribute_request)

      body, status_code, headers = @api_client.execute_api_request(request)

      if debugging?
        Log.debug { "API called: PlaidApi#transfer_ledger_distribute\nBody: #{body.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}" }
      end

      Tuple.new(TransferLedgerDistributeResponse.from_json(body), status_code, headers)
    end

    # Move available balance between the ledgers of the platform and one of its originators
    # Use the &#x60;/transfer/ledger/distribute&#x60; endpoint to move available balance between the ledgers of the platform and one of its originators.
    # @required @param transfer_ledger_distribute_request [Plaid::TransferLedgerDistributeRequest?]
    # @return nil
    def transfer_ledger_distribute(
      *,
      transfer_ledger_distribute_request : Plaid::TransferLedgerDistributeRequest? = nil,
      &block : Crest::Response ->
    ) : Nil
      build_api_request_for_transfer_ledger_distribute(transfer_ledger_distribute_request: transfer_ledger_distribute_request).execute(&block)
    end

    # @return Crest::Request
    def build_api_request_for_transfer_ledger_distribute(
      *,
      transfer_ledger_distribute_request : Plaid::TransferLedgerDistributeRequest? = nil
    ) : Crest::Request
      if debugging?
        Log.debug { "Calling API: PlaidApi.transfer_ledger_distribute ..." }
      end

      if client_side_validation?
        raise ArgumentError.new("\"transfer_ledger_distribute_request\" is required and cannot be null") if transfer_ledger_distribute_request.nil?
        unless (_transfer_ledger_distribute_request = transfer_ledger_distribute_request).nil?
          _transfer_ledger_distribute_request.validate if _transfer_ledger_distribute_request.is_a?(OpenApi::Validatable)
        end
      end

      # resource path
      local_var_path = "/transfer/ledger/distribute"

      # header parameters
      header_params : Hash(String, String) = Hash(String, String).new
      # HTTP header "Accept" (if needed)
      header_params["Accept"] = @api_client.select_header_accept(["application/json"])
      # HTTP header "Content-Type"
      header_params["Content-Type"] = @api_client.select_header_content_type(["application/json"])

      # cookie parameters
      cookie_params : Hash(String, String) = Hash(String, String).new

      # query parameters
      query_params : Hash(String, (String | Array(String) | JSON::Any)) = Hash(String, (String | Array(String) | JSON::Any)).new

      # form parameters
      form_params : Array(Tuple(String, Crest::ParamsValue)) | Nil = nil

      # http body (model)
      post_body : IO | String | Nil = @api_client.encode(body: transfer_ledger_distribute_request, content_type: header_params["Content-Type"]?) if !transfer_ledger_distribute_request.nil?

      # auth_names
      auth_names = ["clientId", "plaidVersion", "secret"]

      @api_client.build_api_request(
        http_method: :"POST",
        path: local_var_path,
        operation: "PlaidApi.transfer_ledger_distribute",
        post_body: post_body,
        auth_names: auth_names,
        header_params: header_params,
        cookie_params: cookie_params,
        query_params: query_params,
        form_params: form_params
      )
    end

    # Retrieve Plaid Ledger balance
    # Use the `/transfer/ledger/get` endpoint to view a balance on the ledger held with Plaid.
    # @required @param transfer_ledger_get_request [Plaid::TransferLedgerGetRequest?]
    # @return [TransferLedgerGetResponse]
    def transfer_ledger_get(
      *,
      transfer_ledger_get_request : Plaid::TransferLedgerGetRequest? = nil
    ) : TransferLedgerGetResponse
      data, _status_code, _headers = transfer_ledger_get_with_http_info(transfer_ledger_get_request: transfer_ledger_get_request)
      data
    end

    # Retrieve Plaid Ledger balance
    # Use the &#x60;/transfer/ledger/get&#x60; endpoint to view a balance on the ledger held with Plaid.
    # @required @param transfer_ledger_get_request [Plaid::TransferLedgerGetRequest?]
    # @return [Tuple(TransferLedgerGetResponse, Integer, Hash)] TransferLedgerGetResponse, response status code and response headers
    def transfer_ledger_get_with_http_info(
      *,
      transfer_ledger_get_request : Plaid::TransferLedgerGetRequest? = nil
    ) : Tuple(TransferLedgerGetResponse, Int32, Hash(String, Array(String) | String))
      request = build_api_request_for_transfer_ledger_get(transfer_ledger_get_request: transfer_ledger_get_request)

      body, status_code, headers = @api_client.execute_api_request(request)

      if debugging?
        Log.debug { "API called: PlaidApi#transfer_ledger_get\nBody: #{body.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}" }
      end

      Tuple.new(TransferLedgerGetResponse.from_json(body), status_code, headers)
    end

    # Retrieve Plaid Ledger balance
    # Use the &#x60;/transfer/ledger/get&#x60; endpoint to view a balance on the ledger held with Plaid.
    # @required @param transfer_ledger_get_request [Plaid::TransferLedgerGetRequest?]
    # @return nil
    def transfer_ledger_get(
      *,
      transfer_ledger_get_request : Plaid::TransferLedgerGetRequest? = nil,
      &block : Crest::Response ->
    ) : Nil
      build_api_request_for_transfer_ledger_get(transfer_ledger_get_request: transfer_ledger_get_request).execute(&block)
    end

    # @return Crest::Request
    def build_api_request_for_transfer_ledger_get(
      *,
      transfer_ledger_get_request : Plaid::TransferLedgerGetRequest? = nil
    ) : Crest::Request
      if debugging?
        Log.debug { "Calling API: PlaidApi.transfer_ledger_get ..." }
      end

      if client_side_validation?
        raise ArgumentError.new("\"transfer_ledger_get_request\" is required and cannot be null") if transfer_ledger_get_request.nil?
        unless (_transfer_ledger_get_request = transfer_ledger_get_request).nil?
          _transfer_ledger_get_request.validate if _transfer_ledger_get_request.is_a?(OpenApi::Validatable)
        end
      end

      # resource path
      local_var_path = "/transfer/ledger/get"

      # header parameters
      header_params : Hash(String, String) = Hash(String, String).new
      # HTTP header "Accept" (if needed)
      header_params["Accept"] = @api_client.select_header_accept(["application/json"])
      # HTTP header "Content-Type"
      header_params["Content-Type"] = @api_client.select_header_content_type(["application/json"])

      # cookie parameters
      cookie_params : Hash(String, String) = Hash(String, String).new

      # query parameters
      query_params : Hash(String, (String | Array(String) | JSON::Any)) = Hash(String, (String | Array(String) | JSON::Any)).new

      # form parameters
      form_params : Array(Tuple(String, Crest::ParamsValue)) | Nil = nil

      # http body (model)
      post_body : IO | String | Nil = @api_client.encode(body: transfer_ledger_get_request, content_type: header_params["Content-Type"]?) if !transfer_ledger_get_request.nil?

      # auth_names
      auth_names = ["clientId", "plaidVersion", "secret"]

      @api_client.build_api_request(
        http_method: :"POST",
        path: local_var_path,
        operation: "PlaidApi.transfer_ledger_get",
        post_body: post_body,
        auth_names: auth_names,
        header_params: header_params,
        cookie_params: cookie_params,
        query_params: query_params,
        form_params: form_params
      )
    end

    # Withdraw funds from a Plaid Ledger balance
    # Use the `/transfer/ledger/withdraw` endpoint to withdraw funds from a Plaid Ledger balance.
    # @required @param transfer_ledger_withdraw_request [Plaid::TransferLedgerWithdrawRequest?]
    # @return [TransferLedgerWithdrawResponse]
    def transfer_ledger_withdraw(
      *,
      transfer_ledger_withdraw_request : Plaid::TransferLedgerWithdrawRequest? = nil
    ) : TransferLedgerWithdrawResponse
      data, _status_code, _headers = transfer_ledger_withdraw_with_http_info(transfer_ledger_withdraw_request: transfer_ledger_withdraw_request)
      data
    end

    # Withdraw funds from a Plaid Ledger balance
    # Use the &#x60;/transfer/ledger/withdraw&#x60; endpoint to withdraw funds from a Plaid Ledger balance.
    # @required @param transfer_ledger_withdraw_request [Plaid::TransferLedgerWithdrawRequest?]
    # @return [Tuple(TransferLedgerWithdrawResponse, Integer, Hash)] TransferLedgerWithdrawResponse, response status code and response headers
    def transfer_ledger_withdraw_with_http_info(
      *,
      transfer_ledger_withdraw_request : Plaid::TransferLedgerWithdrawRequest? = nil
    ) : Tuple(TransferLedgerWithdrawResponse, Int32, Hash(String, Array(String) | String))
      request = build_api_request_for_transfer_ledger_withdraw(transfer_ledger_withdraw_request: transfer_ledger_withdraw_request)

      body, status_code, headers = @api_client.execute_api_request(request)

      if debugging?
        Log.debug { "API called: PlaidApi#transfer_ledger_withdraw\nBody: #{body.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}" }
      end

      Tuple.new(TransferLedgerWithdrawResponse.from_json(body), status_code, headers)
    end

    # Withdraw funds from a Plaid Ledger balance
    # Use the &#x60;/transfer/ledger/withdraw&#x60; endpoint to withdraw funds from a Plaid Ledger balance.
    # @required @param transfer_ledger_withdraw_request [Plaid::TransferLedgerWithdrawRequest?]
    # @return nil
    def transfer_ledger_withdraw(
      *,
      transfer_ledger_withdraw_request : Plaid::TransferLedgerWithdrawRequest? = nil,
      &block : Crest::Response ->
    ) : Nil
      build_api_request_for_transfer_ledger_withdraw(transfer_ledger_withdraw_request: transfer_ledger_withdraw_request).execute(&block)
    end

    # @return Crest::Request
    def build_api_request_for_transfer_ledger_withdraw(
      *,
      transfer_ledger_withdraw_request : Plaid::TransferLedgerWithdrawRequest? = nil
    ) : Crest::Request
      if debugging?
        Log.debug { "Calling API: PlaidApi.transfer_ledger_withdraw ..." }
      end

      if client_side_validation?
        raise ArgumentError.new("\"transfer_ledger_withdraw_request\" is required and cannot be null") if transfer_ledger_withdraw_request.nil?
        unless (_transfer_ledger_withdraw_request = transfer_ledger_withdraw_request).nil?
          _transfer_ledger_withdraw_request.validate if _transfer_ledger_withdraw_request.is_a?(OpenApi::Validatable)
        end
      end

      # resource path
      local_var_path = "/transfer/ledger/withdraw"

      # header parameters
      header_params : Hash(String, String) = Hash(String, String).new
      # HTTP header "Accept" (if needed)
      header_params["Accept"] = @api_client.select_header_accept(["application/json"])
      # HTTP header "Content-Type"
      header_params["Content-Type"] = @api_client.select_header_content_type(["application/json"])

      # cookie parameters
      cookie_params : Hash(String, String) = Hash(String, String).new

      # query parameters
      query_params : Hash(String, (String | Array(String) | JSON::Any)) = Hash(String, (String | Array(String) | JSON::Any)).new

      # form parameters
      form_params : Array(Tuple(String, Crest::ParamsValue)) | Nil = nil

      # http body (model)
      post_body : IO | String | Nil = @api_client.encode(body: transfer_ledger_withdraw_request, content_type: header_params["Content-Type"]?) if !transfer_ledger_withdraw_request.nil?

      # auth_names
      auth_names = ["clientId", "plaidVersion", "secret"]

      @api_client.build_api_request(
        http_method: :"POST",
        path: local_var_path,
        operation: "PlaidApi.transfer_ledger_withdraw",
        post_body: post_body,
        auth_names: auth_names,
        header_params: header_params,
        cookie_params: cookie_params,
        query_params: query_params,
        form_params: form_params
      )
    end

    # List transfers
    # Use the `/transfer/list` endpoint to see a list of all your transfers and their statuses. Results are paginated; use the `count` and `offset` query parameters to retrieve the desired transfers.
    # @required @param transfer_list_request [Plaid::TransferListRequest?]
    # @return [TransferListResponse]
    def transfer_list(
      *,
      transfer_list_request : Plaid::TransferListRequest? = nil
    ) : TransferListResponse
      data, _status_code, _headers = transfer_list_with_http_info(transfer_list_request: transfer_list_request)
      data
    end

    # List transfers
    # Use the &#x60;/transfer/list&#x60; endpoint to see a list of all your transfers and their statuses. Results are paginated; use the &#x60;count&#x60; and &#x60;offset&#x60; query parameters to retrieve the desired transfers.
    # @required @param transfer_list_request [Plaid::TransferListRequest?]
    # @return [Tuple(TransferListResponse, Integer, Hash)] TransferListResponse, response status code and response headers
    def transfer_list_with_http_info(
      *,
      transfer_list_request : Plaid::TransferListRequest? = nil
    ) : Tuple(TransferListResponse, Int32, Hash(String, Array(String) | String))
      request = build_api_request_for_transfer_list(transfer_list_request: transfer_list_request)

      body, status_code, headers = @api_client.execute_api_request(request)

      if debugging?
        Log.debug { "API called: PlaidApi#transfer_list\nBody: #{body.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}" }
      end

      Tuple.new(TransferListResponse.from_json(body), status_code, headers)
    end

    # List transfers
    # Use the &#x60;/transfer/list&#x60; endpoint to see a list of all your transfers and their statuses. Results are paginated; use the &#x60;count&#x60; and &#x60;offset&#x60; query parameters to retrieve the desired transfers.
    # @required @param transfer_list_request [Plaid::TransferListRequest?]
    # @return nil
    def transfer_list(
      *,
      transfer_list_request : Plaid::TransferListRequest? = nil,
      &block : Crest::Response ->
    ) : Nil
      build_api_request_for_transfer_list(transfer_list_request: transfer_list_request).execute(&block)
    end

    # @return Crest::Request
    def build_api_request_for_transfer_list(
      *,
      transfer_list_request : Plaid::TransferListRequest? = nil
    ) : Crest::Request
      if debugging?
        Log.debug { "Calling API: PlaidApi.transfer_list ..." }
      end

      if client_side_validation?
        raise ArgumentError.new("\"transfer_list_request\" is required and cannot be null") if transfer_list_request.nil?
        unless (_transfer_list_request = transfer_list_request).nil?
          _transfer_list_request.validate if _transfer_list_request.is_a?(OpenApi::Validatable)
        end
      end

      # resource path
      local_var_path = "/transfer/list"

      # header parameters
      header_params : Hash(String, String) = Hash(String, String).new
      # HTTP header "Accept" (if needed)
      header_params["Accept"] = @api_client.select_header_accept(["application/json"])
      # HTTP header "Content-Type"
      header_params["Content-Type"] = @api_client.select_header_content_type(["application/json"])

      # cookie parameters
      cookie_params : Hash(String, String) = Hash(String, String).new

      # query parameters
      query_params : Hash(String, (String | Array(String) | JSON::Any)) = Hash(String, (String | Array(String) | JSON::Any)).new

      # form parameters
      form_params : Array(Tuple(String, Crest::ParamsValue)) | Nil = nil

      # http body (model)
      post_body : IO | String | Nil = @api_client.encode(body: transfer_list_request, content_type: header_params["Content-Type"]?) if !transfer_list_request.nil?

      # auth_names
      auth_names = ["clientId", "plaidVersion", "secret"]

      @api_client.build_api_request(
        http_method: :"POST",
        path: local_var_path,
        operation: "PlaidApi.transfer_list",
        post_body: post_body,
        auth_names: auth_names,
        header_params: header_params,
        cookie_params: cookie_params,
        query_params: query_params,
        form_params: form_params
      )
    end

    # Get transfer product usage metrics
    # Use the `/transfer/metrics/get` endpoint to view your transfer product usage metrics.
    # @required @param transfer_metrics_get_request [Plaid::TransferMetricsGetRequest?]
    # @return [TransferMetricsGetResponse]
    def transfer_metrics_get(
      *,
      transfer_metrics_get_request : Plaid::TransferMetricsGetRequest? = nil
    ) : TransferMetricsGetResponse
      data, _status_code, _headers = transfer_metrics_get_with_http_info(transfer_metrics_get_request: transfer_metrics_get_request)
      data
    end

    # Get transfer product usage metrics
    # Use the &#x60;/transfer/metrics/get&#x60; endpoint to view your transfer product usage metrics.
    # @required @param transfer_metrics_get_request [Plaid::TransferMetricsGetRequest?]
    # @return [Tuple(TransferMetricsGetResponse, Integer, Hash)] TransferMetricsGetResponse, response status code and response headers
    def transfer_metrics_get_with_http_info(
      *,
      transfer_metrics_get_request : Plaid::TransferMetricsGetRequest? = nil
    ) : Tuple(TransferMetricsGetResponse, Int32, Hash(String, Array(String) | String))
      request = build_api_request_for_transfer_metrics_get(transfer_metrics_get_request: transfer_metrics_get_request)

      body, status_code, headers = @api_client.execute_api_request(request)

      if debugging?
        Log.debug { "API called: PlaidApi#transfer_metrics_get\nBody: #{body.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}" }
      end

      Tuple.new(TransferMetricsGetResponse.from_json(body), status_code, headers)
    end

    # Get transfer product usage metrics
    # Use the &#x60;/transfer/metrics/get&#x60; endpoint to view your transfer product usage metrics.
    # @required @param transfer_metrics_get_request [Plaid::TransferMetricsGetRequest?]
    # @return nil
    def transfer_metrics_get(
      *,
      transfer_metrics_get_request : Plaid::TransferMetricsGetRequest? = nil,
      &block : Crest::Response ->
    ) : Nil
      build_api_request_for_transfer_metrics_get(transfer_metrics_get_request: transfer_metrics_get_request).execute(&block)
    end

    # @return Crest::Request
    def build_api_request_for_transfer_metrics_get(
      *,
      transfer_metrics_get_request : Plaid::TransferMetricsGetRequest? = nil
    ) : Crest::Request
      if debugging?
        Log.debug { "Calling API: PlaidApi.transfer_metrics_get ..." }
      end

      if client_side_validation?
        raise ArgumentError.new("\"transfer_metrics_get_request\" is required and cannot be null") if transfer_metrics_get_request.nil?
        unless (_transfer_metrics_get_request = transfer_metrics_get_request).nil?
          _transfer_metrics_get_request.validate if _transfer_metrics_get_request.is_a?(OpenApi::Validatable)
        end
      end

      # resource path
      local_var_path = "/transfer/metrics/get"

      # header parameters
      header_params : Hash(String, String) = Hash(String, String).new
      # HTTP header "Accept" (if needed)
      header_params["Accept"] = @api_client.select_header_accept(["application/json"])
      # HTTP header "Content-Type"
      header_params["Content-Type"] = @api_client.select_header_content_type(["application/json"])

      # cookie parameters
      cookie_params : Hash(String, String) = Hash(String, String).new

      # query parameters
      query_params : Hash(String, (String | Array(String) | JSON::Any)) = Hash(String, (String | Array(String) | JSON::Any)).new

      # form parameters
      form_params : Array(Tuple(String, Crest::ParamsValue)) | Nil = nil

      # http body (model)
      post_body : IO | String | Nil = @api_client.encode(body: transfer_metrics_get_request, content_type: header_params["Content-Type"]?) if !transfer_metrics_get_request.nil?

      # auth_names
      auth_names = ["clientId", "plaidVersion", "secret"]

      @api_client.build_api_request(
        http_method: :"POST",
        path: local_var_path,
        operation: "PlaidApi.transfer_metrics_get",
        post_body: post_body,
        auth_names: auth_names,
        header_params: header_params,
        cookie_params: cookie_params,
        query_params: query_params,
        form_params: form_params
      )
    end

    # Migrate account into Transfers
    # As an alternative to adding Items via Link, you can also use the `/transfer/migrate_account` endpoint to migrate known account and routing numbers to Plaid Items.  Note that Items created in this way are not compatible with endpoints for other products, such as `/accounts/balance/get`, and can only be used with Transfer endpoints.  If you require access to other endpoints, create the Item through Link instead.  Access to `/transfer/migrate_account` is not enabled by default; to obtain access, contact your Plaid Account Manager.
    # @required @param transfer_migrate_account_request [Plaid::TransferMigrateAccountRequest?]
    # @return [TransferMigrateAccountResponse]
    def transfer_migrate_account(
      *,
      transfer_migrate_account_request : Plaid::TransferMigrateAccountRequest? = nil
    ) : TransferMigrateAccountResponse
      data, _status_code, _headers = transfer_migrate_account_with_http_info(transfer_migrate_account_request: transfer_migrate_account_request)
      data
    end

    # Migrate account into Transfers
    # As an alternative to adding Items via Link, you can also use the &#x60;/transfer/migrate_account&#x60; endpoint to migrate known account and routing numbers to Plaid Items.  Note that Items created in this way are not compatible with endpoints for other products, such as &#x60;/accounts/balance/get&#x60;, and can only be used with Transfer endpoints.  If you require access to other endpoints, create the Item through Link instead.  Access to &#x60;/transfer/migrate_account&#x60; is not enabled by default; to obtain access, contact your Plaid Account Manager.
    # @required @param transfer_migrate_account_request [Plaid::TransferMigrateAccountRequest?]
    # @return [Tuple(TransferMigrateAccountResponse, Integer, Hash)] TransferMigrateAccountResponse, response status code and response headers
    def transfer_migrate_account_with_http_info(
      *,
      transfer_migrate_account_request : Plaid::TransferMigrateAccountRequest? = nil
    ) : Tuple(TransferMigrateAccountResponse, Int32, Hash(String, Array(String) | String))
      request = build_api_request_for_transfer_migrate_account(transfer_migrate_account_request: transfer_migrate_account_request)

      body, status_code, headers = @api_client.execute_api_request(request)

      if debugging?
        Log.debug { "API called: PlaidApi#transfer_migrate_account\nBody: #{body.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}" }
      end

      Tuple.new(TransferMigrateAccountResponse.from_json(body), status_code, headers)
    end

    # Migrate account into Transfers
    # As an alternative to adding Items via Link, you can also use the &#x60;/transfer/migrate_account&#x60; endpoint to migrate known account and routing numbers to Plaid Items.  Note that Items created in this way are not compatible with endpoints for other products, such as &#x60;/accounts/balance/get&#x60;, and can only be used with Transfer endpoints.  If you require access to other endpoints, create the Item through Link instead.  Access to &#x60;/transfer/migrate_account&#x60; is not enabled by default; to obtain access, contact your Plaid Account Manager.
    # @required @param transfer_migrate_account_request [Plaid::TransferMigrateAccountRequest?]
    # @return nil
    def transfer_migrate_account(
      *,
      transfer_migrate_account_request : Plaid::TransferMigrateAccountRequest? = nil,
      &block : Crest::Response ->
    ) : Nil
      build_api_request_for_transfer_migrate_account(transfer_migrate_account_request: transfer_migrate_account_request).execute(&block)
    end

    # @return Crest::Request
    def build_api_request_for_transfer_migrate_account(
      *,
      transfer_migrate_account_request : Plaid::TransferMigrateAccountRequest? = nil
    ) : Crest::Request
      if debugging?
        Log.debug { "Calling API: PlaidApi.transfer_migrate_account ..." }
      end

      if client_side_validation?
        raise ArgumentError.new("\"transfer_migrate_account_request\" is required and cannot be null") if transfer_migrate_account_request.nil?
        unless (_transfer_migrate_account_request = transfer_migrate_account_request).nil?
          _transfer_migrate_account_request.validate if _transfer_migrate_account_request.is_a?(OpenApi::Validatable)
        end
      end

      # resource path
      local_var_path = "/transfer/migrate_account"

      # header parameters
      header_params : Hash(String, String) = Hash(String, String).new
      # HTTP header "Accept" (if needed)
      header_params["Accept"] = @api_client.select_header_accept(["application/json"])
      # HTTP header "Content-Type"
      header_params["Content-Type"] = @api_client.select_header_content_type(["application/json"])

      # cookie parameters
      cookie_params : Hash(String, String) = Hash(String, String).new

      # query parameters
      query_params : Hash(String, (String | Array(String) | JSON::Any)) = Hash(String, (String | Array(String) | JSON::Any)).new

      # form parameters
      form_params : Array(Tuple(String, Crest::ParamsValue)) | Nil = nil

      # http body (model)
      post_body : IO | String | Nil = @api_client.encode(body: transfer_migrate_account_request, content_type: header_params["Content-Type"]?) if !transfer_migrate_account_request.nil?

      # auth_names
      auth_names = ["clientId", "plaidVersion", "secret"]

      @api_client.build_api_request(
        http_method: :"POST",
        path: local_var_path,
        operation: "PlaidApi.transfer_migrate_account",
        post_body: post_body,
        auth_names: auth_names,
        header_params: header_params,
        cookie_params: cookie_params,
        query_params: query_params,
        form_params: form_params
      )
    end

    # Create a new originator
    # Use the `/transfer/originator/create` endpoint to create a new originator and return an `originator_client_id`.
    # @required @param transfer_originator_create_request [Plaid::TransferOriginatorCreateRequest?]
    # @return [TransferOriginatorCreateResponse]
    def transfer_originator_create(
      *,
      transfer_originator_create_request : Plaid::TransferOriginatorCreateRequest? = nil
    ) : TransferOriginatorCreateResponse
      data, _status_code, _headers = transfer_originator_create_with_http_info(transfer_originator_create_request: transfer_originator_create_request)
      data
    end

    # Create a new originator
    # Use the &#x60;/transfer/originator/create&#x60; endpoint to create a new originator and return an &#x60;originator_client_id&#x60;.
    # @required @param transfer_originator_create_request [Plaid::TransferOriginatorCreateRequest?]
    # @return [Tuple(TransferOriginatorCreateResponse, Integer, Hash)] TransferOriginatorCreateResponse, response status code and response headers
    def transfer_originator_create_with_http_info(
      *,
      transfer_originator_create_request : Plaid::TransferOriginatorCreateRequest? = nil
    ) : Tuple(TransferOriginatorCreateResponse, Int32, Hash(String, Array(String) | String))
      request = build_api_request_for_transfer_originator_create(transfer_originator_create_request: transfer_originator_create_request)

      body, status_code, headers = @api_client.execute_api_request(request)

      if debugging?
        Log.debug { "API called: PlaidApi#transfer_originator_create\nBody: #{body.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}" }
      end

      Tuple.new(TransferOriginatorCreateResponse.from_json(body), status_code, headers)
    end

    # Create a new originator
    # Use the &#x60;/transfer/originator/create&#x60; endpoint to create a new originator and return an &#x60;originator_client_id&#x60;.
    # @required @param transfer_originator_create_request [Plaid::TransferOriginatorCreateRequest?]
    # @return nil
    def transfer_originator_create(
      *,
      transfer_originator_create_request : Plaid::TransferOriginatorCreateRequest? = nil,
      &block : Crest::Response ->
    ) : Nil
      build_api_request_for_transfer_originator_create(transfer_originator_create_request: transfer_originator_create_request).execute(&block)
    end

    # @return Crest::Request
    def build_api_request_for_transfer_originator_create(
      *,
      transfer_originator_create_request : Plaid::TransferOriginatorCreateRequest? = nil
    ) : Crest::Request
      if debugging?
        Log.debug { "Calling API: PlaidApi.transfer_originator_create ..." }
      end

      if client_side_validation?
        raise ArgumentError.new("\"transfer_originator_create_request\" is required and cannot be null") if transfer_originator_create_request.nil?
        unless (_transfer_originator_create_request = transfer_originator_create_request).nil?
          _transfer_originator_create_request.validate if _transfer_originator_create_request.is_a?(OpenApi::Validatable)
        end
      end

      # resource path
      local_var_path = "/transfer/originator/create"

      # header parameters
      header_params : Hash(String, String) = Hash(String, String).new
      # HTTP header "Accept" (if needed)
      header_params["Accept"] = @api_client.select_header_accept(["application/json"])
      # HTTP header "Content-Type"
      header_params["Content-Type"] = @api_client.select_header_content_type(["application/json"])

      # cookie parameters
      cookie_params : Hash(String, String) = Hash(String, String).new

      # query parameters
      query_params : Hash(String, (String | Array(String) | JSON::Any)) = Hash(String, (String | Array(String) | JSON::Any)).new

      # form parameters
      form_params : Array(Tuple(String, Crest::ParamsValue)) | Nil = nil

      # http body (model)
      post_body : IO | String | Nil = @api_client.encode(body: transfer_originator_create_request, content_type: header_params["Content-Type"]?) if !transfer_originator_create_request.nil?

      # auth_names
      auth_names = ["clientId", "plaidVersion", "secret"]

      @api_client.build_api_request(
        http_method: :"POST",
        path: local_var_path,
        operation: "PlaidApi.transfer_originator_create",
        post_body: post_body,
        auth_names: auth_names,
        header_params: header_params,
        cookie_params: cookie_params,
        query_params: query_params,
        form_params: form_params
      )
    end

    # Update the funding account associated with the originator
    # Use the `/transfer/originator/funding_account/update` endpoint to update the funding account associated with the originator.
    # @required @param transfer_originator_funding_account_update_request [Plaid::TransferOriginatorFundingAccountUpdateRequest?]
    # @return [TransferOriginatorFundingAccountUpdateResponse]
    def transfer_originator_funding_account_update(
      *,
      transfer_originator_funding_account_update_request : Plaid::TransferOriginatorFundingAccountUpdateRequest? = nil
    ) : TransferOriginatorFundingAccountUpdateResponse
      data, _status_code, _headers = transfer_originator_funding_account_update_with_http_info(transfer_originator_funding_account_update_request: transfer_originator_funding_account_update_request)
      data
    end

    # Update the funding account associated with the originator
    # Use the &#x60;/transfer/originator/funding_account/update&#x60; endpoint to update the funding account associated with the originator.
    # @required @param transfer_originator_funding_account_update_request [Plaid::TransferOriginatorFundingAccountUpdateRequest?]
    # @return [Tuple(TransferOriginatorFundingAccountUpdateResponse, Integer, Hash)] TransferOriginatorFundingAccountUpdateResponse, response status code and response headers
    def transfer_originator_funding_account_update_with_http_info(
      *,
      transfer_originator_funding_account_update_request : Plaid::TransferOriginatorFundingAccountUpdateRequest? = nil
    ) : Tuple(TransferOriginatorFundingAccountUpdateResponse, Int32, Hash(String, Array(String) | String))
      request = build_api_request_for_transfer_originator_funding_account_update(transfer_originator_funding_account_update_request: transfer_originator_funding_account_update_request)

      body, status_code, headers = @api_client.execute_api_request(request)

      if debugging?
        Log.debug { "API called: PlaidApi#transfer_originator_funding_account_update\nBody: #{body.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}" }
      end

      Tuple.new(TransferOriginatorFundingAccountUpdateResponse.from_json(body), status_code, headers)
    end

    # Update the funding account associated with the originator
    # Use the &#x60;/transfer/originator/funding_account/update&#x60; endpoint to update the funding account associated with the originator.
    # @required @param transfer_originator_funding_account_update_request [Plaid::TransferOriginatorFundingAccountUpdateRequest?]
    # @return nil
    def transfer_originator_funding_account_update(
      *,
      transfer_originator_funding_account_update_request : Plaid::TransferOriginatorFundingAccountUpdateRequest? = nil,
      &block : Crest::Response ->
    ) : Nil
      build_api_request_for_transfer_originator_funding_account_update(transfer_originator_funding_account_update_request: transfer_originator_funding_account_update_request).execute(&block)
    end

    # @return Crest::Request
    def build_api_request_for_transfer_originator_funding_account_update(
      *,
      transfer_originator_funding_account_update_request : Plaid::TransferOriginatorFundingAccountUpdateRequest? = nil
    ) : Crest::Request
      if debugging?
        Log.debug { "Calling API: PlaidApi.transfer_originator_funding_account_update ..." }
      end

      if client_side_validation?
        raise ArgumentError.new("\"transfer_originator_funding_account_update_request\" is required and cannot be null") if transfer_originator_funding_account_update_request.nil?
        unless (_transfer_originator_funding_account_update_request = transfer_originator_funding_account_update_request).nil?
          _transfer_originator_funding_account_update_request.validate if _transfer_originator_funding_account_update_request.is_a?(OpenApi::Validatable)
        end
      end

      # resource path
      local_var_path = "/transfer/originator/funding_account/update"

      # header parameters
      header_params : Hash(String, String) = Hash(String, String).new
      # HTTP header "Accept" (if needed)
      header_params["Accept"] = @api_client.select_header_accept(["application/json"])
      # HTTP header "Content-Type"
      header_params["Content-Type"] = @api_client.select_header_content_type(["application/json"])

      # cookie parameters
      cookie_params : Hash(String, String) = Hash(String, String).new

      # query parameters
      query_params : Hash(String, (String | Array(String) | JSON::Any)) = Hash(String, (String | Array(String) | JSON::Any)).new

      # form parameters
      form_params : Array(Tuple(String, Crest::ParamsValue)) | Nil = nil

      # http body (model)
      post_body : IO | String | Nil = @api_client.encode(body: transfer_originator_funding_account_update_request, content_type: header_params["Content-Type"]?) if !transfer_originator_funding_account_update_request.nil?

      # auth_names
      auth_names = ["clientId", "plaidVersion", "secret"]

      @api_client.build_api_request(
        http_method: :"POST",
        path: local_var_path,
        operation: "PlaidApi.transfer_originator_funding_account_update",
        post_body: post_body,
        auth_names: auth_names,
        header_params: header_params,
        cookie_params: cookie_params,
        query_params: query_params,
        form_params: form_params
      )
    end

    # Get status of an originator's onboarding
    # The `/transfer/originator/get` endpoint gets status updates for an originator's onboarding process. This information is also available via the Transfer page on the Plaid dashboard.
    # @required @param transfer_originator_get_request [Plaid::TransferOriginatorGetRequest?]
    # @return [TransferOriginatorGetResponse]
    def transfer_originator_get(
      *,
      transfer_originator_get_request : Plaid::TransferOriginatorGetRequest? = nil
    ) : TransferOriginatorGetResponse
      data, _status_code, _headers = transfer_originator_get_with_http_info(transfer_originator_get_request: transfer_originator_get_request)
      data
    end

    # Get status of an originator&#39;s onboarding
    # The &#x60;/transfer/originator/get&#x60; endpoint gets status updates for an originator&#39;s onboarding process. This information is also available via the Transfer page on the Plaid dashboard.
    # @required @param transfer_originator_get_request [Plaid::TransferOriginatorGetRequest?]
    # @return [Tuple(TransferOriginatorGetResponse, Integer, Hash)] TransferOriginatorGetResponse, response status code and response headers
    def transfer_originator_get_with_http_info(
      *,
      transfer_originator_get_request : Plaid::TransferOriginatorGetRequest? = nil
    ) : Tuple(TransferOriginatorGetResponse, Int32, Hash(String, Array(String) | String))
      request = build_api_request_for_transfer_originator_get(transfer_originator_get_request: transfer_originator_get_request)

      body, status_code, headers = @api_client.execute_api_request(request)

      if debugging?
        Log.debug { "API called: PlaidApi#transfer_originator_get\nBody: #{body.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}" }
      end

      Tuple.new(TransferOriginatorGetResponse.from_json(body), status_code, headers)
    end

    # Get status of an originator&#39;s onboarding
    # The &#x60;/transfer/originator/get&#x60; endpoint gets status updates for an originator&#39;s onboarding process. This information is also available via the Transfer page on the Plaid dashboard.
    # @required @param transfer_originator_get_request [Plaid::TransferOriginatorGetRequest?]
    # @return nil
    def transfer_originator_get(
      *,
      transfer_originator_get_request : Plaid::TransferOriginatorGetRequest? = nil,
      &block : Crest::Response ->
    ) : Nil
      build_api_request_for_transfer_originator_get(transfer_originator_get_request: transfer_originator_get_request).execute(&block)
    end

    # @return Crest::Request
    def build_api_request_for_transfer_originator_get(
      *,
      transfer_originator_get_request : Plaid::TransferOriginatorGetRequest? = nil
    ) : Crest::Request
      if debugging?
        Log.debug { "Calling API: PlaidApi.transfer_originator_get ..." }
      end

      if client_side_validation?
        raise ArgumentError.new("\"transfer_originator_get_request\" is required and cannot be null") if transfer_originator_get_request.nil?
        unless (_transfer_originator_get_request = transfer_originator_get_request).nil?
          _transfer_originator_get_request.validate if _transfer_originator_get_request.is_a?(OpenApi::Validatable)
        end
      end

      # resource path
      local_var_path = "/transfer/originator/get"

      # header parameters
      header_params : Hash(String, String) = Hash(String, String).new
      # HTTP header "Accept" (if needed)
      header_params["Accept"] = @api_client.select_header_accept(["application/json"])
      # HTTP header "Content-Type"
      header_params["Content-Type"] = @api_client.select_header_content_type(["application/json", "examples"])

      # cookie parameters
      cookie_params : Hash(String, String) = Hash(String, String).new

      # query parameters
      query_params : Hash(String, (String | Array(String) | JSON::Any)) = Hash(String, (String | Array(String) | JSON::Any)).new

      # form parameters
      form_params : Array(Tuple(String, Crest::ParamsValue)) | Nil = nil

      # http body (model)
      post_body : IO | String | Nil = @api_client.encode(body: transfer_originator_get_request, content_type: header_params["Content-Type"]?) if !transfer_originator_get_request.nil?

      # auth_names
      auth_names = ["clientId", "plaidVersion", "secret"]

      @api_client.build_api_request(
        http_method: :"POST",
        path: local_var_path,
        operation: "PlaidApi.transfer_originator_get",
        post_body: post_body,
        auth_names: auth_names,
        header_params: header_params,
        cookie_params: cookie_params,
        query_params: query_params,
        form_params: form_params
      )
    end

    # Get status of all originators' onboarding
    # The `/transfer/originator/list` endpoint gets status updates for all of your originators' onboarding. This information is also available via the Plaid dashboard.
    # @required @param transfer_originator_list_request [Plaid::TransferOriginatorListRequest?]
    # @return [TransferOriginatorListResponse]
    def transfer_originator_list(
      *,
      transfer_originator_list_request : Plaid::TransferOriginatorListRequest? = nil
    ) : TransferOriginatorListResponse
      data, _status_code, _headers = transfer_originator_list_with_http_info(transfer_originator_list_request: transfer_originator_list_request)
      data
    end

    # Get status of all originators&#39; onboarding
    # The &#x60;/transfer/originator/list&#x60; endpoint gets status updates for all of your originators&#39; onboarding. This information is also available via the Plaid dashboard.
    # @required @param transfer_originator_list_request [Plaid::TransferOriginatorListRequest?]
    # @return [Tuple(TransferOriginatorListResponse, Integer, Hash)] TransferOriginatorListResponse, response status code and response headers
    def transfer_originator_list_with_http_info(
      *,
      transfer_originator_list_request : Plaid::TransferOriginatorListRequest? = nil
    ) : Tuple(TransferOriginatorListResponse, Int32, Hash(String, Array(String) | String))
      request = build_api_request_for_transfer_originator_list(transfer_originator_list_request: transfer_originator_list_request)

      body, status_code, headers = @api_client.execute_api_request(request)

      if debugging?
        Log.debug { "API called: PlaidApi#transfer_originator_list\nBody: #{body.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}" }
      end

      Tuple.new(TransferOriginatorListResponse.from_json(body), status_code, headers)
    end

    # Get status of all originators&#39; onboarding
    # The &#x60;/transfer/originator/list&#x60; endpoint gets status updates for all of your originators&#39; onboarding. This information is also available via the Plaid dashboard.
    # @required @param transfer_originator_list_request [Plaid::TransferOriginatorListRequest?]
    # @return nil
    def transfer_originator_list(
      *,
      transfer_originator_list_request : Plaid::TransferOriginatorListRequest? = nil,
      &block : Crest::Response ->
    ) : Nil
      build_api_request_for_transfer_originator_list(transfer_originator_list_request: transfer_originator_list_request).execute(&block)
    end

    # @return Crest::Request
    def build_api_request_for_transfer_originator_list(
      *,
      transfer_originator_list_request : Plaid::TransferOriginatorListRequest? = nil
    ) : Crest::Request
      if debugging?
        Log.debug { "Calling API: PlaidApi.transfer_originator_list ..." }
      end

      if client_side_validation?
        raise ArgumentError.new("\"transfer_originator_list_request\" is required and cannot be null") if transfer_originator_list_request.nil?
        unless (_transfer_originator_list_request = transfer_originator_list_request).nil?
          _transfer_originator_list_request.validate if _transfer_originator_list_request.is_a?(OpenApi::Validatable)
        end
      end

      # resource path
      local_var_path = "/transfer/originator/list"

      # header parameters
      header_params : Hash(String, String) = Hash(String, String).new
      # HTTP header "Accept" (if needed)
      header_params["Accept"] = @api_client.select_header_accept(["application/json"])
      # HTTP header "Content-Type"
      header_params["Content-Type"] = @api_client.select_header_content_type(["application/json"])

      # cookie parameters
      cookie_params : Hash(String, String) = Hash(String, String).new

      # query parameters
      query_params : Hash(String, (String | Array(String) | JSON::Any)) = Hash(String, (String | Array(String) | JSON::Any)).new

      # form parameters
      form_params : Array(Tuple(String, Crest::ParamsValue)) | Nil = nil

      # http body (model)
      post_body : IO | String | Nil = @api_client.encode(body: transfer_originator_list_request, content_type: header_params["Content-Type"]?) if !transfer_originator_list_request.nil?

      # auth_names
      auth_names = ["clientId", "plaidVersion", "secret"]

      @api_client.build_api_request(
        http_method: :"POST",
        path: local_var_path,
        operation: "PlaidApi.transfer_originator_list",
        post_body: post_body,
        auth_names: auth_names,
        header_params: header_params,
        cookie_params: cookie_params,
        query_params: query_params,
        form_params: form_params
      )
    end

    # Generate a Plaid-hosted onboarding UI URL.
    # The `/transfer/questionnaire/create` endpoint generates a Plaid-hosted onboarding UI URL. Redirect the originator to this URL to provide their due diligence information and agree to Plaid’s terms for ACH money movement.
    # @required @param transfer_questionnaire_create_request [Plaid::TransferQuestionnaireCreateRequest?]
    # @return [TransferQuestionnaireCreateResponse]
    def transfer_questionnaire_create(
      *,
      transfer_questionnaire_create_request : Plaid::TransferQuestionnaireCreateRequest? = nil
    ) : TransferQuestionnaireCreateResponse
      data, _status_code, _headers = transfer_questionnaire_create_with_http_info(transfer_questionnaire_create_request: transfer_questionnaire_create_request)
      data
    end

    # Generate a Plaid-hosted onboarding UI URL.
    # The &#x60;/transfer/questionnaire/create&#x60; endpoint generates a Plaid-hosted onboarding UI URL. Redirect the originator to this URL to provide their due diligence information and agree to Plaid’s terms for ACH money movement.
    # @required @param transfer_questionnaire_create_request [Plaid::TransferQuestionnaireCreateRequest?]
    # @return [Tuple(TransferQuestionnaireCreateResponse, Integer, Hash)] TransferQuestionnaireCreateResponse, response status code and response headers
    def transfer_questionnaire_create_with_http_info(
      *,
      transfer_questionnaire_create_request : Plaid::TransferQuestionnaireCreateRequest? = nil
    ) : Tuple(TransferQuestionnaireCreateResponse, Int32, Hash(String, Array(String) | String))
      request = build_api_request_for_transfer_questionnaire_create(transfer_questionnaire_create_request: transfer_questionnaire_create_request)

      body, status_code, headers = @api_client.execute_api_request(request)

      if debugging?
        Log.debug { "API called: PlaidApi#transfer_questionnaire_create\nBody: #{body.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}" }
      end

      Tuple.new(TransferQuestionnaireCreateResponse.from_json(body), status_code, headers)
    end

    # Generate a Plaid-hosted onboarding UI URL.
    # The &#x60;/transfer/questionnaire/create&#x60; endpoint generates a Plaid-hosted onboarding UI URL. Redirect the originator to this URL to provide their due diligence information and agree to Plaid’s terms for ACH money movement.
    # @required @param transfer_questionnaire_create_request [Plaid::TransferQuestionnaireCreateRequest?]
    # @return nil
    def transfer_questionnaire_create(
      *,
      transfer_questionnaire_create_request : Plaid::TransferQuestionnaireCreateRequest? = nil,
      &block : Crest::Response ->
    ) : Nil
      build_api_request_for_transfer_questionnaire_create(transfer_questionnaire_create_request: transfer_questionnaire_create_request).execute(&block)
    end

    # @return Crest::Request
    def build_api_request_for_transfer_questionnaire_create(
      *,
      transfer_questionnaire_create_request : Plaid::TransferQuestionnaireCreateRequest? = nil
    ) : Crest::Request
      if debugging?
        Log.debug { "Calling API: PlaidApi.transfer_questionnaire_create ..." }
      end

      if client_side_validation?
        raise ArgumentError.new("\"transfer_questionnaire_create_request\" is required and cannot be null") if transfer_questionnaire_create_request.nil?
        unless (_transfer_questionnaire_create_request = transfer_questionnaire_create_request).nil?
          _transfer_questionnaire_create_request.validate if _transfer_questionnaire_create_request.is_a?(OpenApi::Validatable)
        end
      end

      # resource path
      local_var_path = "/transfer/questionnaire/create"

      # header parameters
      header_params : Hash(String, String) = Hash(String, String).new
      # HTTP header "Accept" (if needed)
      header_params["Accept"] = @api_client.select_header_accept(["application/json"])
      # HTTP header "Content-Type"
      header_params["Content-Type"] = @api_client.select_header_content_type(["application/json"])

      # cookie parameters
      cookie_params : Hash(String, String) = Hash(String, String).new

      # query parameters
      query_params : Hash(String, (String | Array(String) | JSON::Any)) = Hash(String, (String | Array(String) | JSON::Any)).new

      # form parameters
      form_params : Array(Tuple(String, Crest::ParamsValue)) | Nil = nil

      # http body (model)
      post_body : IO | String | Nil = @api_client.encode(body: transfer_questionnaire_create_request, content_type: header_params["Content-Type"]?) if !transfer_questionnaire_create_request.nil?

      # auth_names
      auth_names = ["clientId", "plaidVersion", "secret"]

      @api_client.build_api_request(
        http_method: :"POST",
        path: local_var_path,
        operation: "PlaidApi.transfer_questionnaire_create",
        post_body: post_body,
        auth_names: auth_names,
        header_params: header_params,
        cookie_params: cookie_params,
        query_params: query_params,
        form_params: form_params
      )
    end

    # Cancel a recurring transfer.
    # Use the `/transfer/recurring/cancel` endpoint to cancel a recurring transfer.  Scheduled transfer that hasn't been submitted to bank will be cancelled.
    # @required @param transfer_recurring_cancel_request [Plaid::TransferRecurringCancelRequest?]
    # @return [TransferRecurringCancelResponse]
    def transfer_recurring_cancel(
      *,
      transfer_recurring_cancel_request : Plaid::TransferRecurringCancelRequest? = nil
    ) : TransferRecurringCancelResponse
      data, _status_code, _headers = transfer_recurring_cancel_with_http_info(transfer_recurring_cancel_request: transfer_recurring_cancel_request)
      data
    end

    # Cancel a recurring transfer.
    # Use the &#x60;/transfer/recurring/cancel&#x60; endpoint to cancel a recurring transfer.  Scheduled transfer that hasn&#39;t been submitted to bank will be cancelled.
    # @required @param transfer_recurring_cancel_request [Plaid::TransferRecurringCancelRequest?]
    # @return [Tuple(TransferRecurringCancelResponse, Integer, Hash)] TransferRecurringCancelResponse, response status code and response headers
    def transfer_recurring_cancel_with_http_info(
      *,
      transfer_recurring_cancel_request : Plaid::TransferRecurringCancelRequest? = nil
    ) : Tuple(TransferRecurringCancelResponse, Int32, Hash(String, Array(String) | String))
      request = build_api_request_for_transfer_recurring_cancel(transfer_recurring_cancel_request: transfer_recurring_cancel_request)

      body, status_code, headers = @api_client.execute_api_request(request)

      if debugging?
        Log.debug { "API called: PlaidApi#transfer_recurring_cancel\nBody: #{body.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}" }
      end

      Tuple.new(TransferRecurringCancelResponse.from_json(body), status_code, headers)
    end

    # Cancel a recurring transfer.
    # Use the &#x60;/transfer/recurring/cancel&#x60; endpoint to cancel a recurring transfer.  Scheduled transfer that hasn&#39;t been submitted to bank will be cancelled.
    # @required @param transfer_recurring_cancel_request [Plaid::TransferRecurringCancelRequest?]
    # @return nil
    def transfer_recurring_cancel(
      *,
      transfer_recurring_cancel_request : Plaid::TransferRecurringCancelRequest? = nil,
      &block : Crest::Response ->
    ) : Nil
      build_api_request_for_transfer_recurring_cancel(transfer_recurring_cancel_request: transfer_recurring_cancel_request).execute(&block)
    end

    # @return Crest::Request
    def build_api_request_for_transfer_recurring_cancel(
      *,
      transfer_recurring_cancel_request : Plaid::TransferRecurringCancelRequest? = nil
    ) : Crest::Request
      if debugging?
        Log.debug { "Calling API: PlaidApi.transfer_recurring_cancel ..." }
      end

      if client_side_validation?
        raise ArgumentError.new("\"transfer_recurring_cancel_request\" is required and cannot be null") if transfer_recurring_cancel_request.nil?
        unless (_transfer_recurring_cancel_request = transfer_recurring_cancel_request).nil?
          _transfer_recurring_cancel_request.validate if _transfer_recurring_cancel_request.is_a?(OpenApi::Validatable)
        end
      end

      # resource path
      local_var_path = "/transfer/recurring/cancel"

      # header parameters
      header_params : Hash(String, String) = Hash(String, String).new
      # HTTP header "Accept" (if needed)
      header_params["Accept"] = @api_client.select_header_accept(["application/json"])
      # HTTP header "Content-Type"
      header_params["Content-Type"] = @api_client.select_header_content_type(["application/json"])

      # cookie parameters
      cookie_params : Hash(String, String) = Hash(String, String).new

      # query parameters
      query_params : Hash(String, (String | Array(String) | JSON::Any)) = Hash(String, (String | Array(String) | JSON::Any)).new

      # form parameters
      form_params : Array(Tuple(String, Crest::ParamsValue)) | Nil = nil

      # http body (model)
      post_body : IO | String | Nil = @api_client.encode(body: transfer_recurring_cancel_request, content_type: header_params["Content-Type"]?) if !transfer_recurring_cancel_request.nil?

      # auth_names
      auth_names = ["clientId", "plaidVersion", "secret"]

      @api_client.build_api_request(
        http_method: :"POST",
        path: local_var_path,
        operation: "PlaidApi.transfer_recurring_cancel",
        post_body: post_body,
        auth_names: auth_names,
        header_params: header_params,
        cookie_params: cookie_params,
        query_params: query_params,
        form_params: form_params
      )
    end

    # Create a recurring transfer
    # Use the `/transfer/recurring/create` endpoint to initiate a new recurring transfer. This capability is not currently supported for Transfer UI or Platform Payments (beta) customers.
    # @required @param transfer_recurring_create_request [Plaid::TransferRecurringCreateRequest?]
    # @return [TransferRecurringCreateResponse]
    def transfer_recurring_create(
      *,
      transfer_recurring_create_request : Plaid::TransferRecurringCreateRequest? = nil
    ) : TransferRecurringCreateResponse
      data, _status_code, _headers = transfer_recurring_create_with_http_info(transfer_recurring_create_request: transfer_recurring_create_request)
      data
    end

    # Create a recurring transfer
    # Use the &#x60;/transfer/recurring/create&#x60; endpoint to initiate a new recurring transfer. This capability is not currently supported for Transfer UI or Platform Payments (beta) customers.
    # @required @param transfer_recurring_create_request [Plaid::TransferRecurringCreateRequest?]
    # @return [Tuple(TransferRecurringCreateResponse, Integer, Hash)] TransferRecurringCreateResponse, response status code and response headers
    def transfer_recurring_create_with_http_info(
      *,
      transfer_recurring_create_request : Plaid::TransferRecurringCreateRequest? = nil
    ) : Tuple(TransferRecurringCreateResponse, Int32, Hash(String, Array(String) | String))
      request = build_api_request_for_transfer_recurring_create(transfer_recurring_create_request: transfer_recurring_create_request)

      body, status_code, headers = @api_client.execute_api_request(request)

      if debugging?
        Log.debug { "API called: PlaidApi#transfer_recurring_create\nBody: #{body.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}" }
      end

      Tuple.new(TransferRecurringCreateResponse.from_json(body), status_code, headers)
    end

    # Create a recurring transfer
    # Use the &#x60;/transfer/recurring/create&#x60; endpoint to initiate a new recurring transfer. This capability is not currently supported for Transfer UI or Platform Payments (beta) customers.
    # @required @param transfer_recurring_create_request [Plaid::TransferRecurringCreateRequest?]
    # @return nil
    def transfer_recurring_create(
      *,
      transfer_recurring_create_request : Plaid::TransferRecurringCreateRequest? = nil,
      &block : Crest::Response ->
    ) : Nil
      build_api_request_for_transfer_recurring_create(transfer_recurring_create_request: transfer_recurring_create_request).execute(&block)
    end

    # @return Crest::Request
    def build_api_request_for_transfer_recurring_create(
      *,
      transfer_recurring_create_request : Plaid::TransferRecurringCreateRequest? = nil
    ) : Crest::Request
      if debugging?
        Log.debug { "Calling API: PlaidApi.transfer_recurring_create ..." }
      end

      if client_side_validation?
        raise ArgumentError.new("\"transfer_recurring_create_request\" is required and cannot be null") if transfer_recurring_create_request.nil?
        unless (_transfer_recurring_create_request = transfer_recurring_create_request).nil?
          _transfer_recurring_create_request.validate if _transfer_recurring_create_request.is_a?(OpenApi::Validatable)
        end
      end

      # resource path
      local_var_path = "/transfer/recurring/create"

      # header parameters
      header_params : Hash(String, String) = Hash(String, String).new
      # HTTP header "Accept" (if needed)
      header_params["Accept"] = @api_client.select_header_accept(["application/json"])
      # HTTP header "Content-Type"
      header_params["Content-Type"] = @api_client.select_header_content_type(["application/json"])

      # cookie parameters
      cookie_params : Hash(String, String) = Hash(String, String).new

      # query parameters
      query_params : Hash(String, (String | Array(String) | JSON::Any)) = Hash(String, (String | Array(String) | JSON::Any)).new

      # form parameters
      form_params : Array(Tuple(String, Crest::ParamsValue)) | Nil = nil

      # http body (model)
      post_body : IO | String | Nil = @api_client.encode(body: transfer_recurring_create_request, content_type: header_params["Content-Type"]?) if !transfer_recurring_create_request.nil?

      # auth_names
      auth_names = ["clientId", "plaidVersion", "secret"]

      @api_client.build_api_request(
        http_method: :"POST",
        path: local_var_path,
        operation: "PlaidApi.transfer_recurring_create",
        post_body: post_body,
        auth_names: auth_names,
        header_params: header_params,
        cookie_params: cookie_params,
        query_params: query_params,
        form_params: form_params
      )
    end

    # Retrieve a recurring transfer
    # The `/transfer/recurring/get` fetches information about the recurring transfer corresponding to the given `recurring_transfer_id`.
    # @required @param transfer_recurring_get_request [Plaid::TransferRecurringGetRequest?]
    # @return [TransferRecurringGetResponse]
    def transfer_recurring_get(
      *,
      transfer_recurring_get_request : Plaid::TransferRecurringGetRequest? = nil
    ) : TransferRecurringGetResponse
      data, _status_code, _headers = transfer_recurring_get_with_http_info(transfer_recurring_get_request: transfer_recurring_get_request)
      data
    end

    # Retrieve a recurring transfer
    # The &#x60;/transfer/recurring/get&#x60; fetches information about the recurring transfer corresponding to the given &#x60;recurring_transfer_id&#x60;.
    # @required @param transfer_recurring_get_request [Plaid::TransferRecurringGetRequest?]
    # @return [Tuple(TransferRecurringGetResponse, Integer, Hash)] TransferRecurringGetResponse, response status code and response headers
    def transfer_recurring_get_with_http_info(
      *,
      transfer_recurring_get_request : Plaid::TransferRecurringGetRequest? = nil
    ) : Tuple(TransferRecurringGetResponse, Int32, Hash(String, Array(String) | String))
      request = build_api_request_for_transfer_recurring_get(transfer_recurring_get_request: transfer_recurring_get_request)

      body, status_code, headers = @api_client.execute_api_request(request)

      if debugging?
        Log.debug { "API called: PlaidApi#transfer_recurring_get\nBody: #{body.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}" }
      end

      Tuple.new(TransferRecurringGetResponse.from_json(body), status_code, headers)
    end

    # Retrieve a recurring transfer
    # The &#x60;/transfer/recurring/get&#x60; fetches information about the recurring transfer corresponding to the given &#x60;recurring_transfer_id&#x60;.
    # @required @param transfer_recurring_get_request [Plaid::TransferRecurringGetRequest?]
    # @return nil
    def transfer_recurring_get(
      *,
      transfer_recurring_get_request : Plaid::TransferRecurringGetRequest? = nil,
      &block : Crest::Response ->
    ) : Nil
      build_api_request_for_transfer_recurring_get(transfer_recurring_get_request: transfer_recurring_get_request).execute(&block)
    end

    # @return Crest::Request
    def build_api_request_for_transfer_recurring_get(
      *,
      transfer_recurring_get_request : Plaid::TransferRecurringGetRequest? = nil
    ) : Crest::Request
      if debugging?
        Log.debug { "Calling API: PlaidApi.transfer_recurring_get ..." }
      end

      if client_side_validation?
        raise ArgumentError.new("\"transfer_recurring_get_request\" is required and cannot be null") if transfer_recurring_get_request.nil?
        unless (_transfer_recurring_get_request = transfer_recurring_get_request).nil?
          _transfer_recurring_get_request.validate if _transfer_recurring_get_request.is_a?(OpenApi::Validatable)
        end
      end

      # resource path
      local_var_path = "/transfer/recurring/get"

      # header parameters
      header_params : Hash(String, String) = Hash(String, String).new
      # HTTP header "Accept" (if needed)
      header_params["Accept"] = @api_client.select_header_accept(["application/json"])
      # HTTP header "Content-Type"
      header_params["Content-Type"] = @api_client.select_header_content_type(["application/json"])

      # cookie parameters
      cookie_params : Hash(String, String) = Hash(String, String).new

      # query parameters
      query_params : Hash(String, (String | Array(String) | JSON::Any)) = Hash(String, (String | Array(String) | JSON::Any)).new

      # form parameters
      form_params : Array(Tuple(String, Crest::ParamsValue)) | Nil = nil

      # http body (model)
      post_body : IO | String | Nil = @api_client.encode(body: transfer_recurring_get_request, content_type: header_params["Content-Type"]?) if !transfer_recurring_get_request.nil?

      # auth_names
      auth_names = ["clientId", "plaidVersion", "secret"]

      @api_client.build_api_request(
        http_method: :"POST",
        path: local_var_path,
        operation: "PlaidApi.transfer_recurring_get",
        post_body: post_body,
        auth_names: auth_names,
        header_params: header_params,
        cookie_params: cookie_params,
        query_params: query_params,
        form_params: form_params
      )
    end

    # List recurring transfers
    # Use the `/transfer/recurring/list` endpoint to see a list of all your recurring transfers and their statuses. Results are paginated; use the `count` and `offset` query parameters to retrieve the desired recurring transfers.
    # @required @param transfer_recurring_list_request [Plaid::TransferRecurringListRequest?]
    # @return [TransferRecurringListResponse]
    def transfer_recurring_list(
      *,
      transfer_recurring_list_request : Plaid::TransferRecurringListRequest? = nil
    ) : TransferRecurringListResponse
      data, _status_code, _headers = transfer_recurring_list_with_http_info(transfer_recurring_list_request: transfer_recurring_list_request)
      data
    end

    # List recurring transfers
    # Use the &#x60;/transfer/recurring/list&#x60; endpoint to see a list of all your recurring transfers and their statuses. Results are paginated; use the &#x60;count&#x60; and &#x60;offset&#x60; query parameters to retrieve the desired recurring transfers.
    # @required @param transfer_recurring_list_request [Plaid::TransferRecurringListRequest?]
    # @return [Tuple(TransferRecurringListResponse, Integer, Hash)] TransferRecurringListResponse, response status code and response headers
    def transfer_recurring_list_with_http_info(
      *,
      transfer_recurring_list_request : Plaid::TransferRecurringListRequest? = nil
    ) : Tuple(TransferRecurringListResponse, Int32, Hash(String, Array(String) | String))
      request = build_api_request_for_transfer_recurring_list(transfer_recurring_list_request: transfer_recurring_list_request)

      body, status_code, headers = @api_client.execute_api_request(request)

      if debugging?
        Log.debug { "API called: PlaidApi#transfer_recurring_list\nBody: #{body.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}" }
      end

      Tuple.new(TransferRecurringListResponse.from_json(body), status_code, headers)
    end

    # List recurring transfers
    # Use the &#x60;/transfer/recurring/list&#x60; endpoint to see a list of all your recurring transfers and their statuses. Results are paginated; use the &#x60;count&#x60; and &#x60;offset&#x60; query parameters to retrieve the desired recurring transfers.
    # @required @param transfer_recurring_list_request [Plaid::TransferRecurringListRequest?]
    # @return nil
    def transfer_recurring_list(
      *,
      transfer_recurring_list_request : Plaid::TransferRecurringListRequest? = nil,
      &block : Crest::Response ->
    ) : Nil
      build_api_request_for_transfer_recurring_list(transfer_recurring_list_request: transfer_recurring_list_request).execute(&block)
    end

    # @return Crest::Request
    def build_api_request_for_transfer_recurring_list(
      *,
      transfer_recurring_list_request : Plaid::TransferRecurringListRequest? = nil
    ) : Crest::Request
      if debugging?
        Log.debug { "Calling API: PlaidApi.transfer_recurring_list ..." }
      end

      if client_side_validation?
        raise ArgumentError.new("\"transfer_recurring_list_request\" is required and cannot be null") if transfer_recurring_list_request.nil?
        unless (_transfer_recurring_list_request = transfer_recurring_list_request).nil?
          _transfer_recurring_list_request.validate if _transfer_recurring_list_request.is_a?(OpenApi::Validatable)
        end
      end

      # resource path
      local_var_path = "/transfer/recurring/list"

      # header parameters
      header_params : Hash(String, String) = Hash(String, String).new
      # HTTP header "Accept" (if needed)
      header_params["Accept"] = @api_client.select_header_accept(["application/json"])
      # HTTP header "Content-Type"
      header_params["Content-Type"] = @api_client.select_header_content_type(["application/json"])

      # cookie parameters
      cookie_params : Hash(String, String) = Hash(String, String).new

      # query parameters
      query_params : Hash(String, (String | Array(String) | JSON::Any)) = Hash(String, (String | Array(String) | JSON::Any)).new

      # form parameters
      form_params : Array(Tuple(String, Crest::ParamsValue)) | Nil = nil

      # http body (model)
      post_body : IO | String | Nil = @api_client.encode(body: transfer_recurring_list_request, content_type: header_params["Content-Type"]?) if !transfer_recurring_list_request.nil?

      # auth_names
      auth_names = ["clientId", "plaidVersion", "secret"]

      @api_client.build_api_request(
        http_method: :"POST",
        path: local_var_path,
        operation: "PlaidApi.transfer_recurring_list",
        post_body: post_body,
        auth_names: auth_names,
        header_params: header_params,
        cookie_params: cookie_params,
        query_params: query_params,
        form_params: form_params
      )
    end

    # Cancel a refund
    # Use the `/transfer/refund/cancel` endpoint to cancel a refund.  A refund is eligible for cancellation if it has not yet been submitted to the payment network.
    # @required @param transfer_refund_cancel_request [Plaid::TransferRefundCancelRequest?]
    # @return [TransferRefundCancelResponse]
    def transfer_refund_cancel(
      *,
      transfer_refund_cancel_request : Plaid::TransferRefundCancelRequest? = nil
    ) : TransferRefundCancelResponse
      data, _status_code, _headers = transfer_refund_cancel_with_http_info(transfer_refund_cancel_request: transfer_refund_cancel_request)
      data
    end

    # Cancel a refund
    # Use the &#x60;/transfer/refund/cancel&#x60; endpoint to cancel a refund.  A refund is eligible for cancellation if it has not yet been submitted to the payment network.
    # @required @param transfer_refund_cancel_request [Plaid::TransferRefundCancelRequest?]
    # @return [Tuple(TransferRefundCancelResponse, Integer, Hash)] TransferRefundCancelResponse, response status code and response headers
    def transfer_refund_cancel_with_http_info(
      *,
      transfer_refund_cancel_request : Plaid::TransferRefundCancelRequest? = nil
    ) : Tuple(TransferRefundCancelResponse, Int32, Hash(String, Array(String) | String))
      request = build_api_request_for_transfer_refund_cancel(transfer_refund_cancel_request: transfer_refund_cancel_request)

      body, status_code, headers = @api_client.execute_api_request(request)

      if debugging?
        Log.debug { "API called: PlaidApi#transfer_refund_cancel\nBody: #{body.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}" }
      end

      Tuple.new(TransferRefundCancelResponse.from_json(body), status_code, headers)
    end

    # Cancel a refund
    # Use the &#x60;/transfer/refund/cancel&#x60; endpoint to cancel a refund.  A refund is eligible for cancellation if it has not yet been submitted to the payment network.
    # @required @param transfer_refund_cancel_request [Plaid::TransferRefundCancelRequest?]
    # @return nil
    def transfer_refund_cancel(
      *,
      transfer_refund_cancel_request : Plaid::TransferRefundCancelRequest? = nil,
      &block : Crest::Response ->
    ) : Nil
      build_api_request_for_transfer_refund_cancel(transfer_refund_cancel_request: transfer_refund_cancel_request).execute(&block)
    end

    # @return Crest::Request
    def build_api_request_for_transfer_refund_cancel(
      *,
      transfer_refund_cancel_request : Plaid::TransferRefundCancelRequest? = nil
    ) : Crest::Request
      if debugging?
        Log.debug { "Calling API: PlaidApi.transfer_refund_cancel ..." }
      end

      if client_side_validation?
        raise ArgumentError.new("\"transfer_refund_cancel_request\" is required and cannot be null") if transfer_refund_cancel_request.nil?
        unless (_transfer_refund_cancel_request = transfer_refund_cancel_request).nil?
          _transfer_refund_cancel_request.validate if _transfer_refund_cancel_request.is_a?(OpenApi::Validatable)
        end
      end

      # resource path
      local_var_path = "/transfer/refund/cancel"

      # header parameters
      header_params : Hash(String, String) = Hash(String, String).new
      # HTTP header "Accept" (if needed)
      header_params["Accept"] = @api_client.select_header_accept(["application/json"])
      # HTTP header "Content-Type"
      header_params["Content-Type"] = @api_client.select_header_content_type(["application/json"])

      # cookie parameters
      cookie_params : Hash(String, String) = Hash(String, String).new

      # query parameters
      query_params : Hash(String, (String | Array(String) | JSON::Any)) = Hash(String, (String | Array(String) | JSON::Any)).new

      # form parameters
      form_params : Array(Tuple(String, Crest::ParamsValue)) | Nil = nil

      # http body (model)
      post_body : IO | String | Nil = @api_client.encode(body: transfer_refund_cancel_request, content_type: header_params["Content-Type"]?) if !transfer_refund_cancel_request.nil?

      # auth_names
      auth_names = ["clientId", "plaidVersion", "secret"]

      @api_client.build_api_request(
        http_method: :"POST",
        path: local_var_path,
        operation: "PlaidApi.transfer_refund_cancel",
        post_body: post_body,
        auth_names: auth_names,
        header_params: header_params,
        cookie_params: cookie_params,
        query_params: query_params,
        form_params: form_params
      )
    end

    # Create a refund
    # Use the `/transfer/refund/create` endpoint to create a refund for a transfer. A transfer can be refunded if the transfer was initiated in the past 180 days.  Processing of the refund will not occur until at least 4 business days following the transfer's settlement date, plus any hold/settlement delays. This 3-day window helps better protect your business from regular ACH returns. Consumer initiated returns (unauthorized returns) could still happen for about 60 days from the settlement date. If the original transfer is canceled, returned or failed, all pending refunds will automatically be canceled. Processed refunds cannot be revoked.
    # @required @param transfer_refund_create_request [Plaid::TransferRefundCreateRequest?]
    # @return [TransferRefundCreateResponse]
    def transfer_refund_create(
      *,
      transfer_refund_create_request : Plaid::TransferRefundCreateRequest? = nil
    ) : TransferRefundCreateResponse
      data, _status_code, _headers = transfer_refund_create_with_http_info(transfer_refund_create_request: transfer_refund_create_request)
      data
    end

    # Create a refund
    # Use the &#x60;/transfer/refund/create&#x60; endpoint to create a refund for a transfer. A transfer can be refunded if the transfer was initiated in the past 180 days.  Processing of the refund will not occur until at least 4 business days following the transfer&#39;s settlement date, plus any hold/settlement delays. This 3-day window helps better protect your business from regular ACH returns. Consumer initiated returns (unauthorized returns) could still happen for about 60 days from the settlement date. If the original transfer is canceled, returned or failed, all pending refunds will automatically be canceled. Processed refunds cannot be revoked.
    # @required @param transfer_refund_create_request [Plaid::TransferRefundCreateRequest?]
    # @return [Tuple(TransferRefundCreateResponse, Integer, Hash)] TransferRefundCreateResponse, response status code and response headers
    def transfer_refund_create_with_http_info(
      *,
      transfer_refund_create_request : Plaid::TransferRefundCreateRequest? = nil
    ) : Tuple(TransferRefundCreateResponse, Int32, Hash(String, Array(String) | String))
      request = build_api_request_for_transfer_refund_create(transfer_refund_create_request: transfer_refund_create_request)

      body, status_code, headers = @api_client.execute_api_request(request)

      if debugging?
        Log.debug { "API called: PlaidApi#transfer_refund_create\nBody: #{body.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}" }
      end

      Tuple.new(TransferRefundCreateResponse.from_json(body), status_code, headers)
    end

    # Create a refund
    # Use the &#x60;/transfer/refund/create&#x60; endpoint to create a refund for a transfer. A transfer can be refunded if the transfer was initiated in the past 180 days.  Processing of the refund will not occur until at least 4 business days following the transfer&#39;s settlement date, plus any hold/settlement delays. This 3-day window helps better protect your business from regular ACH returns. Consumer initiated returns (unauthorized returns) could still happen for about 60 days from the settlement date. If the original transfer is canceled, returned or failed, all pending refunds will automatically be canceled. Processed refunds cannot be revoked.
    # @required @param transfer_refund_create_request [Plaid::TransferRefundCreateRequest?]
    # @return nil
    def transfer_refund_create(
      *,
      transfer_refund_create_request : Plaid::TransferRefundCreateRequest? = nil,
      &block : Crest::Response ->
    ) : Nil
      build_api_request_for_transfer_refund_create(transfer_refund_create_request: transfer_refund_create_request).execute(&block)
    end

    # @return Crest::Request
    def build_api_request_for_transfer_refund_create(
      *,
      transfer_refund_create_request : Plaid::TransferRefundCreateRequest? = nil
    ) : Crest::Request
      if debugging?
        Log.debug { "Calling API: PlaidApi.transfer_refund_create ..." }
      end

      if client_side_validation?
        raise ArgumentError.new("\"transfer_refund_create_request\" is required and cannot be null") if transfer_refund_create_request.nil?
        unless (_transfer_refund_create_request = transfer_refund_create_request).nil?
          _transfer_refund_create_request.validate if _transfer_refund_create_request.is_a?(OpenApi::Validatable)
        end
      end

      # resource path
      local_var_path = "/transfer/refund/create"

      # header parameters
      header_params : Hash(String, String) = Hash(String, String).new
      # HTTP header "Accept" (if needed)
      header_params["Accept"] = @api_client.select_header_accept(["application/json"])
      # HTTP header "Content-Type"
      header_params["Content-Type"] = @api_client.select_header_content_type(["application/json"])

      # cookie parameters
      cookie_params : Hash(String, String) = Hash(String, String).new

      # query parameters
      query_params : Hash(String, (String | Array(String) | JSON::Any)) = Hash(String, (String | Array(String) | JSON::Any)).new

      # form parameters
      form_params : Array(Tuple(String, Crest::ParamsValue)) | Nil = nil

      # http body (model)
      post_body : IO | String | Nil = @api_client.encode(body: transfer_refund_create_request, content_type: header_params["Content-Type"]?) if !transfer_refund_create_request.nil?

      # auth_names
      auth_names = ["clientId", "plaidVersion", "secret"]

      @api_client.build_api_request(
        http_method: :"POST",
        path: local_var_path,
        operation: "PlaidApi.transfer_refund_create",
        post_body: post_body,
        auth_names: auth_names,
        header_params: header_params,
        cookie_params: cookie_params,
        query_params: query_params,
        form_params: form_params
      )
    end

    # Retrieve a refund
    # The `/transfer/refund/get` endpoint fetches information about the refund corresponding to the given `refund_id`.
    # @required @param transfer_refund_get_request [Plaid::TransferRefundGetRequest?]
    # @return [TransferRefundGetResponse]
    def transfer_refund_get(
      *,
      transfer_refund_get_request : Plaid::TransferRefundGetRequest? = nil
    ) : TransferRefundGetResponse
      data, _status_code, _headers = transfer_refund_get_with_http_info(transfer_refund_get_request: transfer_refund_get_request)
      data
    end

    # Retrieve a refund
    # The &#x60;/transfer/refund/get&#x60; endpoint fetches information about the refund corresponding to the given &#x60;refund_id&#x60;.
    # @required @param transfer_refund_get_request [Plaid::TransferRefundGetRequest?]
    # @return [Tuple(TransferRefundGetResponse, Integer, Hash)] TransferRefundGetResponse, response status code and response headers
    def transfer_refund_get_with_http_info(
      *,
      transfer_refund_get_request : Plaid::TransferRefundGetRequest? = nil
    ) : Tuple(TransferRefundGetResponse, Int32, Hash(String, Array(String) | String))
      request = build_api_request_for_transfer_refund_get(transfer_refund_get_request: transfer_refund_get_request)

      body, status_code, headers = @api_client.execute_api_request(request)

      if debugging?
        Log.debug { "API called: PlaidApi#transfer_refund_get\nBody: #{body.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}" }
      end

      Tuple.new(TransferRefundGetResponse.from_json(body), status_code, headers)
    end

    # Retrieve a refund
    # The &#x60;/transfer/refund/get&#x60; endpoint fetches information about the refund corresponding to the given &#x60;refund_id&#x60;.
    # @required @param transfer_refund_get_request [Plaid::TransferRefundGetRequest?]
    # @return nil
    def transfer_refund_get(
      *,
      transfer_refund_get_request : Plaid::TransferRefundGetRequest? = nil,
      &block : Crest::Response ->
    ) : Nil
      build_api_request_for_transfer_refund_get(transfer_refund_get_request: transfer_refund_get_request).execute(&block)
    end

    # @return Crest::Request
    def build_api_request_for_transfer_refund_get(
      *,
      transfer_refund_get_request : Plaid::TransferRefundGetRequest? = nil
    ) : Crest::Request
      if debugging?
        Log.debug { "Calling API: PlaidApi.transfer_refund_get ..." }
      end

      if client_side_validation?
        raise ArgumentError.new("\"transfer_refund_get_request\" is required and cannot be null") if transfer_refund_get_request.nil?
        unless (_transfer_refund_get_request = transfer_refund_get_request).nil?
          _transfer_refund_get_request.validate if _transfer_refund_get_request.is_a?(OpenApi::Validatable)
        end
      end

      # resource path
      local_var_path = "/transfer/refund/get"

      # header parameters
      header_params : Hash(String, String) = Hash(String, String).new
      # HTTP header "Accept" (if needed)
      header_params["Accept"] = @api_client.select_header_accept(["application/json"])
      # HTTP header "Content-Type"
      header_params["Content-Type"] = @api_client.select_header_content_type(["application/json"])

      # cookie parameters
      cookie_params : Hash(String, String) = Hash(String, String).new

      # query parameters
      query_params : Hash(String, (String | Array(String) | JSON::Any)) = Hash(String, (String | Array(String) | JSON::Any)).new

      # form parameters
      form_params : Array(Tuple(String, Crest::ParamsValue)) | Nil = nil

      # http body (model)
      post_body : IO | String | Nil = @api_client.encode(body: transfer_refund_get_request, content_type: header_params["Content-Type"]?) if !transfer_refund_get_request.nil?

      # auth_names
      auth_names = ["clientId", "plaidVersion", "secret"]

      @api_client.build_api_request(
        http_method: :"POST",
        path: local_var_path,
        operation: "PlaidApi.transfer_refund_get",
        post_body: post_body,
        auth_names: auth_names,
        header_params: header_params,
        cookie_params: cookie_params,
        query_params: query_params,
        form_params: form_params
      )
    end

    # Lists historical repayments
    # The `/transfer/repayment/list` endpoint fetches repayments matching the given filters. Repayments are returned in reverse-chronological order (most recent first) starting at the given `start_time`.
    # @required @param transfer_repayment_list_request [Plaid::TransferRepaymentListRequest?]
    # @return [TransferRepaymentListResponse]
    def transfer_repayment_list(
      *,
      transfer_repayment_list_request : Plaid::TransferRepaymentListRequest? = nil
    ) : TransferRepaymentListResponse
      data, _status_code, _headers = transfer_repayment_list_with_http_info(transfer_repayment_list_request: transfer_repayment_list_request)
      data
    end

    # Lists historical repayments
    # The &#x60;/transfer/repayment/list&#x60; endpoint fetches repayments matching the given filters. Repayments are returned in reverse-chronological order (most recent first) starting at the given &#x60;start_time&#x60;.
    # @required @param transfer_repayment_list_request [Plaid::TransferRepaymentListRequest?]
    # @return [Tuple(TransferRepaymentListResponse, Integer, Hash)] TransferRepaymentListResponse, response status code and response headers
    def transfer_repayment_list_with_http_info(
      *,
      transfer_repayment_list_request : Plaid::TransferRepaymentListRequest? = nil
    ) : Tuple(TransferRepaymentListResponse, Int32, Hash(String, Array(String) | String))
      request = build_api_request_for_transfer_repayment_list(transfer_repayment_list_request: transfer_repayment_list_request)

      body, status_code, headers = @api_client.execute_api_request(request)

      if debugging?
        Log.debug { "API called: PlaidApi#transfer_repayment_list\nBody: #{body.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}" }
      end

      Tuple.new(TransferRepaymentListResponse.from_json(body), status_code, headers)
    end

    # Lists historical repayments
    # The &#x60;/transfer/repayment/list&#x60; endpoint fetches repayments matching the given filters. Repayments are returned in reverse-chronological order (most recent first) starting at the given &#x60;start_time&#x60;.
    # @required @param transfer_repayment_list_request [Plaid::TransferRepaymentListRequest?]
    # @return nil
    def transfer_repayment_list(
      *,
      transfer_repayment_list_request : Plaid::TransferRepaymentListRequest? = nil,
      &block : Crest::Response ->
    ) : Nil
      build_api_request_for_transfer_repayment_list(transfer_repayment_list_request: transfer_repayment_list_request).execute(&block)
    end

    # @return Crest::Request
    def build_api_request_for_transfer_repayment_list(
      *,
      transfer_repayment_list_request : Plaid::TransferRepaymentListRequest? = nil
    ) : Crest::Request
      if debugging?
        Log.debug { "Calling API: PlaidApi.transfer_repayment_list ..." }
      end

      if client_side_validation?
        raise ArgumentError.new("\"transfer_repayment_list_request\" is required and cannot be null") if transfer_repayment_list_request.nil?
        unless (_transfer_repayment_list_request = transfer_repayment_list_request).nil?
          _transfer_repayment_list_request.validate if _transfer_repayment_list_request.is_a?(OpenApi::Validatable)
        end
      end

      # resource path
      local_var_path = "/transfer/repayment/list"

      # header parameters
      header_params : Hash(String, String) = Hash(String, String).new
      # HTTP header "Accept" (if needed)
      header_params["Accept"] = @api_client.select_header_accept(["application/json"])
      # HTTP header "Content-Type"
      header_params["Content-Type"] = @api_client.select_header_content_type(["application/json"])

      # cookie parameters
      cookie_params : Hash(String, String) = Hash(String, String).new

      # query parameters
      query_params : Hash(String, (String | Array(String) | JSON::Any)) = Hash(String, (String | Array(String) | JSON::Any)).new

      # form parameters
      form_params : Array(Tuple(String, Crest::ParamsValue)) | Nil = nil

      # http body (model)
      post_body : IO | String | Nil = @api_client.encode(body: transfer_repayment_list_request, content_type: header_params["Content-Type"]?) if !transfer_repayment_list_request.nil?

      # auth_names
      auth_names = ["clientId", "plaidVersion", "secret"]

      @api_client.build_api_request(
        http_method: :"POST",
        path: local_var_path,
        operation: "PlaidApi.transfer_repayment_list",
        post_body: post_body,
        auth_names: auth_names,
        header_params: header_params,
        cookie_params: cookie_params,
        query_params: query_params,
        form_params: form_params
      )
    end

    # List the returns included in a repayment
    # The `/transfer/repayment/return/list` endpoint retrieves the set of returns that were batched together into the specified repayment. The sum of amounts of returns retrieved by this request equals the amount of the repayment.
    # @required @param transfer_repayment_return_list_request [Plaid::TransferRepaymentReturnListRequest?]
    # @return [TransferRepaymentReturnListResponse]
    def transfer_repayment_return_list(
      *,
      transfer_repayment_return_list_request : Plaid::TransferRepaymentReturnListRequest? = nil
    ) : TransferRepaymentReturnListResponse
      data, _status_code, _headers = transfer_repayment_return_list_with_http_info(transfer_repayment_return_list_request: transfer_repayment_return_list_request)
      data
    end

    # List the returns included in a repayment
    # The &#x60;/transfer/repayment/return/list&#x60; endpoint retrieves the set of returns that were batched together into the specified repayment. The sum of amounts of returns retrieved by this request equals the amount of the repayment.
    # @required @param transfer_repayment_return_list_request [Plaid::TransferRepaymentReturnListRequest?]
    # @return [Tuple(TransferRepaymentReturnListResponse, Integer, Hash)] TransferRepaymentReturnListResponse, response status code and response headers
    def transfer_repayment_return_list_with_http_info(
      *,
      transfer_repayment_return_list_request : Plaid::TransferRepaymentReturnListRequest? = nil
    ) : Tuple(TransferRepaymentReturnListResponse, Int32, Hash(String, Array(String) | String))
      request = build_api_request_for_transfer_repayment_return_list(transfer_repayment_return_list_request: transfer_repayment_return_list_request)

      body, status_code, headers = @api_client.execute_api_request(request)

      if debugging?
        Log.debug { "API called: PlaidApi#transfer_repayment_return_list\nBody: #{body.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}" }
      end

      Tuple.new(TransferRepaymentReturnListResponse.from_json(body), status_code, headers)
    end

    # List the returns included in a repayment
    # The &#x60;/transfer/repayment/return/list&#x60; endpoint retrieves the set of returns that were batched together into the specified repayment. The sum of amounts of returns retrieved by this request equals the amount of the repayment.
    # @required @param transfer_repayment_return_list_request [Plaid::TransferRepaymentReturnListRequest?]
    # @return nil
    def transfer_repayment_return_list(
      *,
      transfer_repayment_return_list_request : Plaid::TransferRepaymentReturnListRequest? = nil,
      &block : Crest::Response ->
    ) : Nil
      build_api_request_for_transfer_repayment_return_list(transfer_repayment_return_list_request: transfer_repayment_return_list_request).execute(&block)
    end

    # @return Crest::Request
    def build_api_request_for_transfer_repayment_return_list(
      *,
      transfer_repayment_return_list_request : Plaid::TransferRepaymentReturnListRequest? = nil
    ) : Crest::Request
      if debugging?
        Log.debug { "Calling API: PlaidApi.transfer_repayment_return_list ..." }
      end

      if client_side_validation?
        raise ArgumentError.new("\"transfer_repayment_return_list_request\" is required and cannot be null") if transfer_repayment_return_list_request.nil?
        unless (_transfer_repayment_return_list_request = transfer_repayment_return_list_request).nil?
          _transfer_repayment_return_list_request.validate if _transfer_repayment_return_list_request.is_a?(OpenApi::Validatable)
        end
      end

      # resource path
      local_var_path = "/transfer/repayment/return/list"

      # header parameters
      header_params : Hash(String, String) = Hash(String, String).new
      # HTTP header "Accept" (if needed)
      header_params["Accept"] = @api_client.select_header_accept(["application/json"])
      # HTTP header "Content-Type"
      header_params["Content-Type"] = @api_client.select_header_content_type(["application/json"])

      # cookie parameters
      cookie_params : Hash(String, String) = Hash(String, String).new

      # query parameters
      query_params : Hash(String, (String | Array(String) | JSON::Any)) = Hash(String, (String | Array(String) | JSON::Any)).new

      # form parameters
      form_params : Array(Tuple(String, Crest::ParamsValue)) | Nil = nil

      # http body (model)
      post_body : IO | String | Nil = @api_client.encode(body: transfer_repayment_return_list_request, content_type: header_params["Content-Type"]?) if !transfer_repayment_return_list_request.nil?

      # auth_names
      auth_names = ["clientId", "plaidVersion", "secret"]

      @api_client.build_api_request(
        http_method: :"POST",
        path: local_var_path,
        operation: "PlaidApi.transfer_repayment_return_list",
        post_body: post_body,
        auth_names: auth_names,
        header_params: header_params,
        cookie_params: cookie_params,
        query_params: query_params,
        form_params: form_params
      )
    end

    # Retrieve a sweep
    # The `/transfer/sweep/get` endpoint fetches a sweep corresponding to the given `sweep_id`.
    # @required @param transfer_sweep_get_request [Plaid::TransferSweepGetRequest?]
    # @return [TransferSweepGetResponse]
    def transfer_sweep_get(
      *,
      transfer_sweep_get_request : Plaid::TransferSweepGetRequest? = nil
    ) : TransferSweepGetResponse
      data, _status_code, _headers = transfer_sweep_get_with_http_info(transfer_sweep_get_request: transfer_sweep_get_request)
      data
    end

    # Retrieve a sweep
    # The &#x60;/transfer/sweep/get&#x60; endpoint fetches a sweep corresponding to the given &#x60;sweep_id&#x60;.
    # @required @param transfer_sweep_get_request [Plaid::TransferSweepGetRequest?]
    # @return [Tuple(TransferSweepGetResponse, Integer, Hash)] TransferSweepGetResponse, response status code and response headers
    def transfer_sweep_get_with_http_info(
      *,
      transfer_sweep_get_request : Plaid::TransferSweepGetRequest? = nil
    ) : Tuple(TransferSweepGetResponse, Int32, Hash(String, Array(String) | String))
      request = build_api_request_for_transfer_sweep_get(transfer_sweep_get_request: transfer_sweep_get_request)

      body, status_code, headers = @api_client.execute_api_request(request)

      if debugging?
        Log.debug { "API called: PlaidApi#transfer_sweep_get\nBody: #{body.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}" }
      end

      Tuple.new(TransferSweepGetResponse.from_json(body), status_code, headers)
    end

    # Retrieve a sweep
    # The &#x60;/transfer/sweep/get&#x60; endpoint fetches a sweep corresponding to the given &#x60;sweep_id&#x60;.
    # @required @param transfer_sweep_get_request [Plaid::TransferSweepGetRequest?]
    # @return nil
    def transfer_sweep_get(
      *,
      transfer_sweep_get_request : Plaid::TransferSweepGetRequest? = nil,
      &block : Crest::Response ->
    ) : Nil
      build_api_request_for_transfer_sweep_get(transfer_sweep_get_request: transfer_sweep_get_request).execute(&block)
    end

    # @return Crest::Request
    def build_api_request_for_transfer_sweep_get(
      *,
      transfer_sweep_get_request : Plaid::TransferSweepGetRequest? = nil
    ) : Crest::Request
      if debugging?
        Log.debug { "Calling API: PlaidApi.transfer_sweep_get ..." }
      end

      if client_side_validation?
        raise ArgumentError.new("\"transfer_sweep_get_request\" is required and cannot be null") if transfer_sweep_get_request.nil?
        unless (_transfer_sweep_get_request = transfer_sweep_get_request).nil?
          _transfer_sweep_get_request.validate if _transfer_sweep_get_request.is_a?(OpenApi::Validatable)
        end
      end

      # resource path
      local_var_path = "/transfer/sweep/get"

      # header parameters
      header_params : Hash(String, String) = Hash(String, String).new
      # HTTP header "Accept" (if needed)
      header_params["Accept"] = @api_client.select_header_accept(["application/json"])
      # HTTP header "Content-Type"
      header_params["Content-Type"] = @api_client.select_header_content_type(["application/json"])

      # cookie parameters
      cookie_params : Hash(String, String) = Hash(String, String).new

      # query parameters
      query_params : Hash(String, (String | Array(String) | JSON::Any)) = Hash(String, (String | Array(String) | JSON::Any)).new

      # form parameters
      form_params : Array(Tuple(String, Crest::ParamsValue)) | Nil = nil

      # http body (model)
      post_body : IO | String | Nil = @api_client.encode(body: transfer_sweep_get_request, content_type: header_params["Content-Type"]?) if !transfer_sweep_get_request.nil?

      # auth_names
      auth_names = ["clientId", "plaidVersion", "secret"]

      @api_client.build_api_request(
        http_method: :"POST",
        path: local_var_path,
        operation: "PlaidApi.transfer_sweep_get",
        post_body: post_body,
        auth_names: auth_names,
        header_params: header_params,
        cookie_params: cookie_params,
        query_params: query_params,
        form_params: form_params
      )
    end

    # List sweeps
    # The `/transfer/sweep/list` endpoint fetches sweeps matching the given filters.
    # @required @param transfer_sweep_list_request [Plaid::TransferSweepListRequest?]
    # @return [TransferSweepListResponse]
    def transfer_sweep_list(
      *,
      transfer_sweep_list_request : Plaid::TransferSweepListRequest? = nil
    ) : TransferSweepListResponse
      data, _status_code, _headers = transfer_sweep_list_with_http_info(transfer_sweep_list_request: transfer_sweep_list_request)
      data
    end

    # List sweeps
    # The &#x60;/transfer/sweep/list&#x60; endpoint fetches sweeps matching the given filters.
    # @required @param transfer_sweep_list_request [Plaid::TransferSweepListRequest?]
    # @return [Tuple(TransferSweepListResponse, Integer, Hash)] TransferSweepListResponse, response status code and response headers
    def transfer_sweep_list_with_http_info(
      *,
      transfer_sweep_list_request : Plaid::TransferSweepListRequest? = nil
    ) : Tuple(TransferSweepListResponse, Int32, Hash(String, Array(String) | String))
      request = build_api_request_for_transfer_sweep_list(transfer_sweep_list_request: transfer_sweep_list_request)

      body, status_code, headers = @api_client.execute_api_request(request)

      if debugging?
        Log.debug { "API called: PlaidApi#transfer_sweep_list\nBody: #{body.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}" }
      end

      Tuple.new(TransferSweepListResponse.from_json(body), status_code, headers)
    end

    # List sweeps
    # The &#x60;/transfer/sweep/list&#x60; endpoint fetches sweeps matching the given filters.
    # @required @param transfer_sweep_list_request [Plaid::TransferSweepListRequest?]
    # @return nil
    def transfer_sweep_list(
      *,
      transfer_sweep_list_request : Plaid::TransferSweepListRequest? = nil,
      &block : Crest::Response ->
    ) : Nil
      build_api_request_for_transfer_sweep_list(transfer_sweep_list_request: transfer_sweep_list_request).execute(&block)
    end

    # @return Crest::Request
    def build_api_request_for_transfer_sweep_list(
      *,
      transfer_sweep_list_request : Plaid::TransferSweepListRequest? = nil
    ) : Crest::Request
      if debugging?
        Log.debug { "Calling API: PlaidApi.transfer_sweep_list ..." }
      end

      if client_side_validation?
        raise ArgumentError.new("\"transfer_sweep_list_request\" is required and cannot be null") if transfer_sweep_list_request.nil?
        unless (_transfer_sweep_list_request = transfer_sweep_list_request).nil?
          _transfer_sweep_list_request.validate if _transfer_sweep_list_request.is_a?(OpenApi::Validatable)
        end
      end

      # resource path
      local_var_path = "/transfer/sweep/list"

      # header parameters
      header_params : Hash(String, String) = Hash(String, String).new
      # HTTP header "Accept" (if needed)
      header_params["Accept"] = @api_client.select_header_accept(["application/json"])
      # HTTP header "Content-Type"
      header_params["Content-Type"] = @api_client.select_header_content_type(["application/json"])

      # cookie parameters
      cookie_params : Hash(String, String) = Hash(String, String).new

      # query parameters
      query_params : Hash(String, (String | Array(String) | JSON::Any)) = Hash(String, (String | Array(String) | JSON::Any)).new

      # form parameters
      form_params : Array(Tuple(String, Crest::ParamsValue)) | Nil = nil

      # http body (model)
      post_body : IO | String | Nil = @api_client.encode(body: transfer_sweep_list_request, content_type: header_params["Content-Type"]?) if !transfer_sweep_list_request.nil?

      # auth_names
      auth_names = ["clientId", "plaidVersion", "secret"]

      @api_client.build_api_request(
        http_method: :"POST",
        path: local_var_path,
        operation: "PlaidApi.transfer_sweep_list",
        post_body: post_body,
        auth_names: auth_names,
        header_params: header_params,
        cookie_params: cookie_params,
        query_params: query_params,
        form_params: form_params
      )
    end

    # Create user
    # This endpoint should be called for each of your end users before they begin a Plaid income flow. This provides you a single token to access all income data associated with the user. You should only create one per end user.  If you call the endpoint multiple times with the same `client_user_id`, the first creation call will succeed and the rest will fail with an error message indicating that the user has been created for the given `client_user_id`.  Ensure that you store the `user_token` along with your user's identifier in your database, as it is not possible to retrieve a previously created `user_token`.
    # @required @param user_create_request [Plaid::UserCreateRequest?]
    # @return [UserCreateResponse]
    def user_create(
      *,
      user_create_request : Plaid::UserCreateRequest? = nil
    ) : UserCreateResponse
      data, _status_code, _headers = user_create_with_http_info(user_create_request: user_create_request)
      data
    end

    # Create user
    # This endpoint should be called for each of your end users before they begin a Plaid income flow. This provides you a single token to access all income data associated with the user. You should only create one per end user.  If you call the endpoint multiple times with the same &#x60;client_user_id&#x60;, the first creation call will succeed and the rest will fail with an error message indicating that the user has been created for the given &#x60;client_user_id&#x60;.  Ensure that you store the &#x60;user_token&#x60; along with your user&#39;s identifier in your database, as it is not possible to retrieve a previously created &#x60;user_token&#x60;.
    # @required @param user_create_request [Plaid::UserCreateRequest?]
    # @return [Tuple(UserCreateResponse, Integer, Hash)] UserCreateResponse, response status code and response headers
    def user_create_with_http_info(
      *,
      user_create_request : Plaid::UserCreateRequest? = nil
    ) : Tuple(UserCreateResponse, Int32, Hash(String, Array(String) | String))
      request = build_api_request_for_user_create(user_create_request: user_create_request)

      body, status_code, headers = @api_client.execute_api_request(request)

      if debugging?
        Log.debug { "API called: PlaidApi#user_create\nBody: #{body.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}" }
      end

      Tuple.new(UserCreateResponse.from_json(body), status_code, headers)
    end

    # Create user
    # This endpoint should be called for each of your end users before they begin a Plaid income flow. This provides you a single token to access all income data associated with the user. You should only create one per end user.  If you call the endpoint multiple times with the same &#x60;client_user_id&#x60;, the first creation call will succeed and the rest will fail with an error message indicating that the user has been created for the given &#x60;client_user_id&#x60;.  Ensure that you store the &#x60;user_token&#x60; along with your user&#39;s identifier in your database, as it is not possible to retrieve a previously created &#x60;user_token&#x60;.
    # @required @param user_create_request [Plaid::UserCreateRequest?]
    # @return nil
    def user_create(
      *,
      user_create_request : Plaid::UserCreateRequest? = nil,
      &block : Crest::Response ->
    ) : Nil
      build_api_request_for_user_create(user_create_request: user_create_request).execute(&block)
    end

    # @return Crest::Request
    def build_api_request_for_user_create(
      *,
      user_create_request : Plaid::UserCreateRequest? = nil
    ) : Crest::Request
      if debugging?
        Log.debug { "Calling API: PlaidApi.user_create ..." }
      end

      if client_side_validation?
        raise ArgumentError.new("\"user_create_request\" is required and cannot be null") if user_create_request.nil?
        unless (_user_create_request = user_create_request).nil?
          _user_create_request.validate if _user_create_request.is_a?(OpenApi::Validatable)
        end
      end

      # resource path
      local_var_path = "/user/create"

      # header parameters
      header_params : Hash(String, String) = Hash(String, String).new
      # HTTP header "Accept" (if needed)
      header_params["Accept"] = @api_client.select_header_accept(["application/json"])
      # HTTP header "Content-Type"
      header_params["Content-Type"] = @api_client.select_header_content_type(["application/json"])

      # cookie parameters
      cookie_params : Hash(String, String) = Hash(String, String).new

      # query parameters
      query_params : Hash(String, (String | Array(String) | JSON::Any)) = Hash(String, (String | Array(String) | JSON::Any)).new

      # form parameters
      form_params : Array(Tuple(String, Crest::ParamsValue)) | Nil = nil

      # http body (model)
      post_body : IO | String | Nil = @api_client.encode(body: user_create_request, content_type: header_params["Content-Type"]?) if !user_create_request.nil?

      # auth_names
      auth_names = ["clientId", "plaidVersion", "secret"]

      @api_client.build_api_request(
        http_method: :"POST",
        path: local_var_path,
        operation: "PlaidApi.user_create",
        post_body: post_body,
        auth_names: auth_names,
        header_params: header_params,
        cookie_params: cookie_params,
        query_params: query_params,
        form_params: form_params
      )
    end

    # Update user information
    # This endpoint is used to update user information associated with an existing `user_token`. The `user_token` should be in the response of `/user/create` call  If you call the endpoint with a non-exist `user_token`, the call will fail with an error message indicating that the user token is not found.
    # @required @param user_update_request [Plaid::UserUpdateRequest?]
    # @return [UserUpdateResponse]
    def user_update(
      *,
      user_update_request : Plaid::UserUpdateRequest? = nil
    ) : UserUpdateResponse
      data, _status_code, _headers = user_update_with_http_info(user_update_request: user_update_request)
      data
    end

    # Update user information
    # This endpoint is used to update user information associated with an existing &#x60;user_token&#x60;. The &#x60;user_token&#x60; should be in the response of &#x60;/user/create&#x60; call  If you call the endpoint with a non-exist &#x60;user_token&#x60;, the call will fail with an error message indicating that the user token is not found.
    # @required @param user_update_request [Plaid::UserUpdateRequest?]
    # @return [Tuple(UserUpdateResponse, Integer, Hash)] UserUpdateResponse, response status code and response headers
    def user_update_with_http_info(
      *,
      user_update_request : Plaid::UserUpdateRequest? = nil
    ) : Tuple(UserUpdateResponse, Int32, Hash(String, Array(String) | String))
      request = build_api_request_for_user_update(user_update_request: user_update_request)

      body, status_code, headers = @api_client.execute_api_request(request)

      if debugging?
        Log.debug { "API called: PlaidApi#user_update\nBody: #{body.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}" }
      end

      Tuple.new(UserUpdateResponse.from_json(body), status_code, headers)
    end

    # Update user information
    # This endpoint is used to update user information associated with an existing &#x60;user_token&#x60;. The &#x60;user_token&#x60; should be in the response of &#x60;/user/create&#x60; call  If you call the endpoint with a non-exist &#x60;user_token&#x60;, the call will fail with an error message indicating that the user token is not found.
    # @required @param user_update_request [Plaid::UserUpdateRequest?]
    # @return nil
    def user_update(
      *,
      user_update_request : Plaid::UserUpdateRequest? = nil,
      &block : Crest::Response ->
    ) : Nil
      build_api_request_for_user_update(user_update_request: user_update_request).execute(&block)
    end

    # @return Crest::Request
    def build_api_request_for_user_update(
      *,
      user_update_request : Plaid::UserUpdateRequest? = nil
    ) : Crest::Request
      if debugging?
        Log.debug { "Calling API: PlaidApi.user_update ..." }
      end

      if client_side_validation?
        raise ArgumentError.new("\"user_update_request\" is required and cannot be null") if user_update_request.nil?
        unless (_user_update_request = user_update_request).nil?
          _user_update_request.validate if _user_update_request.is_a?(OpenApi::Validatable)
        end
      end

      # resource path
      local_var_path = "/user/update"

      # header parameters
      header_params : Hash(String, String) = Hash(String, String).new
      # HTTP header "Accept" (if needed)
      header_params["Accept"] = @api_client.select_header_accept(["application/json"])
      # HTTP header "Content-Type"
      header_params["Content-Type"] = @api_client.select_header_content_type(["application/json"])

      # cookie parameters
      cookie_params : Hash(String, String) = Hash(String, String).new

      # query parameters
      query_params : Hash(String, (String | Array(String) | JSON::Any)) = Hash(String, (String | Array(String) | JSON::Any)).new

      # form parameters
      form_params : Array(Tuple(String, Crest::ParamsValue)) | Nil = nil

      # http body (model)
      post_body : IO | String | Nil = @api_client.encode(body: user_update_request, content_type: header_params["Content-Type"]?) if !user_update_request.nil?

      # auth_names
      auth_names = ["clientId", "plaidVersion", "secret"]

      @api_client.build_api_request(
        http_method: :"POST",
        path: local_var_path,
        operation: "PlaidApi.user_update",
        post_body: post_body,
        auth_names: auth_names,
        header_params: header_params,
        cookie_params: cookie_params,
        query_params: query_params,
        form_params: form_params
      )
    end

    # Create an e-wallet
    # Create an e-wallet. The response is the newly created e-wallet object.
    # @required @param wallet_create_request [Plaid::WalletCreateRequest?]
    # @return [Plaid::WalletCreateResponse]
    def wallet_create(
      *,
      wallet_create_request : Plaid::WalletCreateRequest? = nil
    ) : Plaid::WalletCreateResponse
      data, _status_code, _headers = wallet_create_with_http_info(wallet_create_request: wallet_create_request)
      data
    end

    # Create an e-wallet
    # Create an e-wallet. The response is the newly created e-wallet object.
    # @required @param wallet_create_request [Plaid::WalletCreateRequest?]
    # @return [Tuple(Plaid::WalletCreateResponse, Integer, Hash)] Plaid::WalletCreateResponse, response status code and response headers
    def wallet_create_with_http_info(
      *,
      wallet_create_request : Plaid::WalletCreateRequest? = nil
    ) : Tuple(Plaid::WalletCreateResponse, Int32, Hash(String, Array(String) | String))
      request = build_api_request_for_wallet_create(wallet_create_request: wallet_create_request)

      body, status_code, headers = @api_client.execute_api_request(request)

      if debugging?
        Log.debug { "API called: PlaidApi#wallet_create\nBody: #{body.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}" }
      end

      Tuple.new(Plaid::WalletCreateResponse.from_json(body), status_code, headers)
    end

    # Create an e-wallet
    # Create an e-wallet. The response is the newly created e-wallet object.
    # @required @param wallet_create_request [Plaid::WalletCreateRequest?]
    # @return nil
    def wallet_create(
      *,
      wallet_create_request : Plaid::WalletCreateRequest? = nil,
      &block : Crest::Response ->
    ) : Nil
      build_api_request_for_wallet_create(wallet_create_request: wallet_create_request).execute(&block)
    end

    # @return Crest::Request
    def build_api_request_for_wallet_create(
      *,
      wallet_create_request : Plaid::WalletCreateRequest? = nil
    ) : Crest::Request
      if debugging?
        Log.debug { "Calling API: PlaidApi.wallet_create ..." }
      end

      if client_side_validation?
        raise ArgumentError.new("\"wallet_create_request\" is required and cannot be null") if wallet_create_request.nil?
        unless (_wallet_create_request = wallet_create_request).nil?
          _wallet_create_request.validate if _wallet_create_request.is_a?(OpenApi::Validatable)
        end
      end

      # resource path
      local_var_path = "/wallet/create"

      # header parameters
      header_params : Hash(String, String) = Hash(String, String).new
      # HTTP header "Accept" (if needed)
      header_params["Accept"] = @api_client.select_header_accept(["application/json"])
      # HTTP header "Content-Type"
      header_params["Content-Type"] = @api_client.select_header_content_type(["application/json"])

      # cookie parameters
      cookie_params : Hash(String, String) = Hash(String, String).new

      # query parameters
      query_params : Hash(String, (String | Array(String) | JSON::Any)) = Hash(String, (String | Array(String) | JSON::Any)).new

      # form parameters
      form_params : Array(Tuple(String, Crest::ParamsValue)) | Nil = nil

      # http body (model)
      post_body : IO | String | Nil = @api_client.encode(body: wallet_create_request, content_type: header_params["Content-Type"]?) if !wallet_create_request.nil?

      # auth_names
      auth_names = ["clientId", "plaidVersion", "secret"]

      @api_client.build_api_request(
        http_method: :"POST",
        path: local_var_path,
        operation: "PlaidApi.wallet_create",
        post_body: post_body,
        auth_names: auth_names,
        header_params: header_params,
        cookie_params: cookie_params,
        query_params: query_params,
        form_params: form_params
      )
    end

    # Fetch an e-wallet
    # Fetch an e-wallet. The response includes the current balance.
    # @required @param wallet_get_request [Plaid::WalletGetRequest?]
    # @return [Plaid::WalletGetResponse]
    def wallet_get(
      *,
      wallet_get_request : Plaid::WalletGetRequest? = nil
    ) : Plaid::WalletGetResponse
      data, _status_code, _headers = wallet_get_with_http_info(wallet_get_request: wallet_get_request)
      data
    end

    # Fetch an e-wallet
    # Fetch an e-wallet. The response includes the current balance.
    # @required @param wallet_get_request [Plaid::WalletGetRequest?]
    # @return [Tuple(Plaid::WalletGetResponse, Integer, Hash)] Plaid::WalletGetResponse, response status code and response headers
    def wallet_get_with_http_info(
      *,
      wallet_get_request : Plaid::WalletGetRequest? = nil
    ) : Tuple(Plaid::WalletGetResponse, Int32, Hash(String, Array(String) | String))
      request = build_api_request_for_wallet_get(wallet_get_request: wallet_get_request)

      body, status_code, headers = @api_client.execute_api_request(request)

      if debugging?
        Log.debug { "API called: PlaidApi#wallet_get\nBody: #{body.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}" }
      end

      Tuple.new(Plaid::WalletGetResponse.from_json(body), status_code, headers)
    end

    # Fetch an e-wallet
    # Fetch an e-wallet. The response includes the current balance.
    # @required @param wallet_get_request [Plaid::WalletGetRequest?]
    # @return nil
    def wallet_get(
      *,
      wallet_get_request : Plaid::WalletGetRequest? = nil,
      &block : Crest::Response ->
    ) : Nil
      build_api_request_for_wallet_get(wallet_get_request: wallet_get_request).execute(&block)
    end

    # @return Crest::Request
    def build_api_request_for_wallet_get(
      *,
      wallet_get_request : Plaid::WalletGetRequest? = nil
    ) : Crest::Request
      if debugging?
        Log.debug { "Calling API: PlaidApi.wallet_get ..." }
      end

      if client_side_validation?
        raise ArgumentError.new("\"wallet_get_request\" is required and cannot be null") if wallet_get_request.nil?
        unless (_wallet_get_request = wallet_get_request).nil?
          _wallet_get_request.validate if _wallet_get_request.is_a?(OpenApi::Validatable)
        end
      end

      # resource path
      local_var_path = "/wallet/get"

      # header parameters
      header_params : Hash(String, String) = Hash(String, String).new
      # HTTP header "Accept" (if needed)
      header_params["Accept"] = @api_client.select_header_accept(["application/json"])
      # HTTP header "Content-Type"
      header_params["Content-Type"] = @api_client.select_header_content_type(["application/json"])

      # cookie parameters
      cookie_params : Hash(String, String) = Hash(String, String).new

      # query parameters
      query_params : Hash(String, (String | Array(String) | JSON::Any)) = Hash(String, (String | Array(String) | JSON::Any)).new

      # form parameters
      form_params : Array(Tuple(String, Crest::ParamsValue)) | Nil = nil

      # http body (model)
      post_body : IO | String | Nil = @api_client.encode(body: wallet_get_request, content_type: header_params["Content-Type"]?) if !wallet_get_request.nil?

      # auth_names
      auth_names = ["clientId", "plaidVersion", "secret"]

      @api_client.build_api_request(
        http_method: :"POST",
        path: local_var_path,
        operation: "PlaidApi.wallet_get",
        post_body: post_body,
        auth_names: auth_names,
        header_params: header_params,
        cookie_params: cookie_params,
        query_params: query_params,
        form_params: form_params
      )
    end

    # Fetch a list of e-wallets
    # This endpoint lists all e-wallets in descending order of creation.
    # @required @param wallet_list_request [Plaid::WalletListRequest?]
    # @return [WalletListResponse]
    def wallet_list(
      *,
      wallet_list_request : Plaid::WalletListRequest? = nil
    ) : WalletListResponse
      data, _status_code, _headers = wallet_list_with_http_info(wallet_list_request: wallet_list_request)
      data
    end

    # Fetch a list of e-wallets
    # This endpoint lists all e-wallets in descending order of creation.
    # @required @param wallet_list_request [Plaid::WalletListRequest?]
    # @return [Tuple(WalletListResponse, Integer, Hash)] WalletListResponse, response status code and response headers
    def wallet_list_with_http_info(
      *,
      wallet_list_request : Plaid::WalletListRequest? = nil
    ) : Tuple(WalletListResponse, Int32, Hash(String, Array(String) | String))
      request = build_api_request_for_wallet_list(wallet_list_request: wallet_list_request)

      body, status_code, headers = @api_client.execute_api_request(request)

      if debugging?
        Log.debug { "API called: PlaidApi#wallet_list\nBody: #{body.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}" }
      end

      Tuple.new(WalletListResponse.from_json(body), status_code, headers)
    end

    # Fetch a list of e-wallets
    # This endpoint lists all e-wallets in descending order of creation.
    # @required @param wallet_list_request [Plaid::WalletListRequest?]
    # @return nil
    def wallet_list(
      *,
      wallet_list_request : Plaid::WalletListRequest? = nil,
      &block : Crest::Response ->
    ) : Nil
      build_api_request_for_wallet_list(wallet_list_request: wallet_list_request).execute(&block)
    end

    # @return Crest::Request
    def build_api_request_for_wallet_list(
      *,
      wallet_list_request : Plaid::WalletListRequest? = nil
    ) : Crest::Request
      if debugging?
        Log.debug { "Calling API: PlaidApi.wallet_list ..." }
      end

      if client_side_validation?
        raise ArgumentError.new("\"wallet_list_request\" is required and cannot be null") if wallet_list_request.nil?
        unless (_wallet_list_request = wallet_list_request).nil?
          _wallet_list_request.validate if _wallet_list_request.is_a?(OpenApi::Validatable)
        end
      end

      # resource path
      local_var_path = "/wallet/list"

      # header parameters
      header_params : Hash(String, String) = Hash(String, String).new
      # HTTP header "Accept" (if needed)
      header_params["Accept"] = @api_client.select_header_accept(["application/json"])
      # HTTP header "Content-Type"
      header_params["Content-Type"] = @api_client.select_header_content_type(["application/json"])

      # cookie parameters
      cookie_params : Hash(String, String) = Hash(String, String).new

      # query parameters
      query_params : Hash(String, (String | Array(String) | JSON::Any)) = Hash(String, (String | Array(String) | JSON::Any)).new

      # form parameters
      form_params : Array(Tuple(String, Crest::ParamsValue)) | Nil = nil

      # http body (model)
      post_body : IO | String | Nil = @api_client.encode(body: wallet_list_request, content_type: header_params["Content-Type"]?) if !wallet_list_request.nil?

      # auth_names
      auth_names = ["clientId", "plaidVersion", "secret"]

      @api_client.build_api_request(
        http_method: :"POST",
        path: local_var_path,
        operation: "PlaidApi.wallet_list",
        post_body: post_body,
        auth_names: auth_names,
        header_params: header_params,
        cookie_params: cookie_params,
        query_params: query_params,
        form_params: form_params
      )
    end

    # Execute a transaction using an e-wallet
    # Execute a transaction using the specified e-wallet. Specify the e-wallet to debit from, the counterparty to credit to, the idempotency key to prevent duplicate transactions, the amount and reference for the transaction. Transactions will settle in seconds to several days, depending on the underlying payment rail.
    # @required @param wallet_transaction_execute_request [Plaid::WalletTransactionExecuteRequest?]
    # @return [WalletTransactionExecuteResponse]
    def wallet_transaction_execute(
      *,
      wallet_transaction_execute_request : Plaid::WalletTransactionExecuteRequest? = nil
    ) : WalletTransactionExecuteResponse
      data, _status_code, _headers = wallet_transaction_execute_with_http_info(wallet_transaction_execute_request: wallet_transaction_execute_request)
      data
    end

    # Execute a transaction using an e-wallet
    # Execute a transaction using the specified e-wallet. Specify the e-wallet to debit from, the counterparty to credit to, the idempotency key to prevent duplicate transactions, the amount and reference for the transaction. Transactions will settle in seconds to several days, depending on the underlying payment rail.
    # @required @param wallet_transaction_execute_request [Plaid::WalletTransactionExecuteRequest?]
    # @return [Tuple(WalletTransactionExecuteResponse, Integer, Hash)] WalletTransactionExecuteResponse, response status code and response headers
    def wallet_transaction_execute_with_http_info(
      *,
      wallet_transaction_execute_request : Plaid::WalletTransactionExecuteRequest? = nil
    ) : Tuple(WalletTransactionExecuteResponse, Int32, Hash(String, Array(String) | String))
      request = build_api_request_for_wallet_transaction_execute(wallet_transaction_execute_request: wallet_transaction_execute_request)

      body, status_code, headers = @api_client.execute_api_request(request)

      if debugging?
        Log.debug { "API called: PlaidApi#wallet_transaction_execute\nBody: #{body.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}" }
      end

      Tuple.new(WalletTransactionExecuteResponse.from_json(body), status_code, headers)
    end

    # Execute a transaction using an e-wallet
    # Execute a transaction using the specified e-wallet. Specify the e-wallet to debit from, the counterparty to credit to, the idempotency key to prevent duplicate transactions, the amount and reference for the transaction. Transactions will settle in seconds to several days, depending on the underlying payment rail.
    # @required @param wallet_transaction_execute_request [Plaid::WalletTransactionExecuteRequest?]
    # @return nil
    def wallet_transaction_execute(
      *,
      wallet_transaction_execute_request : Plaid::WalletTransactionExecuteRequest? = nil,
      &block : Crest::Response ->
    ) : Nil
      build_api_request_for_wallet_transaction_execute(wallet_transaction_execute_request: wallet_transaction_execute_request).execute(&block)
    end

    # @return Crest::Request
    def build_api_request_for_wallet_transaction_execute(
      *,
      wallet_transaction_execute_request : Plaid::WalletTransactionExecuteRequest? = nil
    ) : Crest::Request
      if debugging?
        Log.debug { "Calling API: PlaidApi.wallet_transaction_execute ..." }
      end

      if client_side_validation?
        raise ArgumentError.new("\"wallet_transaction_execute_request\" is required and cannot be null") if wallet_transaction_execute_request.nil?
        unless (_wallet_transaction_execute_request = wallet_transaction_execute_request).nil?
          _wallet_transaction_execute_request.validate if _wallet_transaction_execute_request.is_a?(OpenApi::Validatable)
        end
      end

      # resource path
      local_var_path = "/wallet/transaction/execute"

      # header parameters
      header_params : Hash(String, String) = Hash(String, String).new
      # HTTP header "Accept" (if needed)
      header_params["Accept"] = @api_client.select_header_accept(["application/json"])
      # HTTP header "Content-Type"
      header_params["Content-Type"] = @api_client.select_header_content_type(["application/json"])

      # cookie parameters
      cookie_params : Hash(String, String) = Hash(String, String).new

      # query parameters
      query_params : Hash(String, (String | Array(String) | JSON::Any)) = Hash(String, (String | Array(String) | JSON::Any)).new

      # form parameters
      form_params : Array(Tuple(String, Crest::ParamsValue)) | Nil = nil

      # http body (model)
      post_body : IO | String | Nil = @api_client.encode(body: wallet_transaction_execute_request, content_type: header_params["Content-Type"]?) if !wallet_transaction_execute_request.nil?

      # auth_names
      auth_names = ["clientId", "plaidVersion", "secret"]

      @api_client.build_api_request(
        http_method: :"POST",
        path: local_var_path,
        operation: "PlaidApi.wallet_transaction_execute",
        post_body: post_body,
        auth_names: auth_names,
        header_params: header_params,
        cookie_params: cookie_params,
        query_params: query_params,
        form_params: form_params
      )
    end

    # Fetch an e-wallet transaction
    # Fetch a specific e-wallet transaction
    # @required @param wallet_transaction_get_request [Plaid::WalletTransactionGetRequest?]
    # @return [Plaid::WalletTransactionGetResponse]
    def wallet_transaction_get(
      *,
      wallet_transaction_get_request : Plaid::WalletTransactionGetRequest? = nil
    ) : Plaid::WalletTransactionGetResponse
      data, _status_code, _headers = wallet_transaction_get_with_http_info(wallet_transaction_get_request: wallet_transaction_get_request)
      data
    end

    # Fetch an e-wallet transaction
    # Fetch a specific e-wallet transaction
    # @required @param wallet_transaction_get_request [Plaid::WalletTransactionGetRequest?]
    # @return [Tuple(Plaid::WalletTransactionGetResponse, Integer, Hash)] Plaid::WalletTransactionGetResponse, response status code and response headers
    def wallet_transaction_get_with_http_info(
      *,
      wallet_transaction_get_request : Plaid::WalletTransactionGetRequest? = nil
    ) : Tuple(Plaid::WalletTransactionGetResponse, Int32, Hash(String, Array(String) | String))
      request = build_api_request_for_wallet_transaction_get(wallet_transaction_get_request: wallet_transaction_get_request)

      body, status_code, headers = @api_client.execute_api_request(request)

      if debugging?
        Log.debug { "API called: PlaidApi#wallet_transaction_get\nBody: #{body.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}" }
      end

      Tuple.new(Plaid::WalletTransactionGetResponse.from_json(body), status_code, headers)
    end

    # Fetch an e-wallet transaction
    # Fetch a specific e-wallet transaction
    # @required @param wallet_transaction_get_request [Plaid::WalletTransactionGetRequest?]
    # @return nil
    def wallet_transaction_get(
      *,
      wallet_transaction_get_request : Plaid::WalletTransactionGetRequest? = nil,
      &block : Crest::Response ->
    ) : Nil
      build_api_request_for_wallet_transaction_get(wallet_transaction_get_request: wallet_transaction_get_request).execute(&block)
    end

    # @return Crest::Request
    def build_api_request_for_wallet_transaction_get(
      *,
      wallet_transaction_get_request : Plaid::WalletTransactionGetRequest? = nil
    ) : Crest::Request
      if debugging?
        Log.debug { "Calling API: PlaidApi.wallet_transaction_get ..." }
      end

      if client_side_validation?
        raise ArgumentError.new("\"wallet_transaction_get_request\" is required and cannot be null") if wallet_transaction_get_request.nil?
        unless (_wallet_transaction_get_request = wallet_transaction_get_request).nil?
          _wallet_transaction_get_request.validate if _wallet_transaction_get_request.is_a?(OpenApi::Validatable)
        end
      end

      # resource path
      local_var_path = "/wallet/transaction/get"

      # header parameters
      header_params : Hash(String, String) = Hash(String, String).new
      # HTTP header "Accept" (if needed)
      header_params["Accept"] = @api_client.select_header_accept(["application/json"])
      # HTTP header "Content-Type"
      header_params["Content-Type"] = @api_client.select_header_content_type(["application/json"])

      # cookie parameters
      cookie_params : Hash(String, String) = Hash(String, String).new

      # query parameters
      query_params : Hash(String, (String | Array(String) | JSON::Any)) = Hash(String, (String | Array(String) | JSON::Any)).new

      # form parameters
      form_params : Array(Tuple(String, Crest::ParamsValue)) | Nil = nil

      # http body (model)
      post_body : IO | String | Nil = @api_client.encode(body: wallet_transaction_get_request, content_type: header_params["Content-Type"]?) if !wallet_transaction_get_request.nil?

      # auth_names
      auth_names = ["clientId", "plaidVersion", "secret"]

      @api_client.build_api_request(
        http_method: :"POST",
        path: local_var_path,
        operation: "PlaidApi.wallet_transaction_get",
        post_body: post_body,
        auth_names: auth_names,
        header_params: header_params,
        cookie_params: cookie_params,
        query_params: query_params,
        form_params: form_params
      )
    end

    # List e-wallet transactions
    # This endpoint lists the latest transactions of the specified e-wallet. Transactions are returned in descending order by the `created_at` time.
    # @required @param wallet_transaction_list_request [Plaid::WalletTransactionListRequest?]
    # @return [WalletTransactionListResponse]
    def wallet_transaction_list(
      *,
      wallet_transaction_list_request : Plaid::WalletTransactionListRequest? = nil
    ) : WalletTransactionListResponse
      data, _status_code, _headers = wallet_transaction_list_with_http_info(wallet_transaction_list_request: wallet_transaction_list_request)
      data
    end

    # List e-wallet transactions
    # This endpoint lists the latest transactions of the specified e-wallet. Transactions are returned in descending order by the &#x60;created_at&#x60; time.
    # @required @param wallet_transaction_list_request [Plaid::WalletTransactionListRequest?]
    # @return [Tuple(WalletTransactionListResponse, Integer, Hash)] WalletTransactionListResponse, response status code and response headers
    def wallet_transaction_list_with_http_info(
      *,
      wallet_transaction_list_request : Plaid::WalletTransactionListRequest? = nil
    ) : Tuple(WalletTransactionListResponse, Int32, Hash(String, Array(String) | String))
      request = build_api_request_for_wallet_transaction_list(wallet_transaction_list_request: wallet_transaction_list_request)

      body, status_code, headers = @api_client.execute_api_request(request)

      if debugging?
        Log.debug { "API called: PlaidApi#wallet_transaction_list\nBody: #{body.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}" }
      end

      Tuple.new(WalletTransactionListResponse.from_json(body), status_code, headers)
    end

    # List e-wallet transactions
    # This endpoint lists the latest transactions of the specified e-wallet. Transactions are returned in descending order by the &#x60;created_at&#x60; time.
    # @required @param wallet_transaction_list_request [Plaid::WalletTransactionListRequest?]
    # @return nil
    def wallet_transaction_list(
      *,
      wallet_transaction_list_request : Plaid::WalletTransactionListRequest? = nil,
      &block : Crest::Response ->
    ) : Nil
      build_api_request_for_wallet_transaction_list(wallet_transaction_list_request: wallet_transaction_list_request).execute(&block)
    end

    # @return Crest::Request
    def build_api_request_for_wallet_transaction_list(
      *,
      wallet_transaction_list_request : Plaid::WalletTransactionListRequest? = nil
    ) : Crest::Request
      if debugging?
        Log.debug { "Calling API: PlaidApi.wallet_transaction_list ..." }
      end

      if client_side_validation?
        raise ArgumentError.new("\"wallet_transaction_list_request\" is required and cannot be null") if wallet_transaction_list_request.nil?
        unless (_wallet_transaction_list_request = wallet_transaction_list_request).nil?
          _wallet_transaction_list_request.validate if _wallet_transaction_list_request.is_a?(OpenApi::Validatable)
        end
      end

      # resource path
      local_var_path = "/wallet/transaction/list"

      # header parameters
      header_params : Hash(String, String) = Hash(String, String).new
      # HTTP header "Accept" (if needed)
      header_params["Accept"] = @api_client.select_header_accept(["application/json"])
      # HTTP header "Content-Type"
      header_params["Content-Type"] = @api_client.select_header_content_type(["application/json"])

      # cookie parameters
      cookie_params : Hash(String, String) = Hash(String, String).new

      # query parameters
      query_params : Hash(String, (String | Array(String) | JSON::Any)) = Hash(String, (String | Array(String) | JSON::Any)).new

      # form parameters
      form_params : Array(Tuple(String, Crest::ParamsValue)) | Nil = nil

      # http body (model)
      post_body : IO | String | Nil = @api_client.encode(body: wallet_transaction_list_request, content_type: header_params["Content-Type"]?) if !wallet_transaction_list_request.nil?

      # auth_names
      auth_names = ["clientId", "plaidVersion", "secret"]

      @api_client.build_api_request(
        http_method: :"POST",
        path: local_var_path,
        operation: "PlaidApi.wallet_transaction_list",
        post_body: post_body,
        auth_names: auth_names,
        header_params: header_params,
        cookie_params: cookie_params,
        query_params: query_params,
        form_params: form_params
      )
    end

    # Create a watchlist screening for an entity
    # Create a new entity watchlist screening to check your customer against watchlists defined in the associated entity watchlist program. If your associated program has ongoing screening enabled, this is the profile information that will be used to monitor your customer over time.
    # @required @param watchlist_screening_entity_create_request [Plaid::WatchlistScreeningEntityCreateRequest?]
    # @return [WatchlistScreeningEntityCreateResponse]
    def watchlist_screening_entity_create(
      *,
      watchlist_screening_entity_create_request : Plaid::WatchlistScreeningEntityCreateRequest? = nil
    ) : WatchlistScreeningEntityCreateResponse
      data, _status_code, _headers = watchlist_screening_entity_create_with_http_info(watchlist_screening_entity_create_request: watchlist_screening_entity_create_request)
      data
    end

    # Create a watchlist screening for an entity
    # Create a new entity watchlist screening to check your customer against watchlists defined in the associated entity watchlist program. If your associated program has ongoing screening enabled, this is the profile information that will be used to monitor your customer over time.
    # @required @param watchlist_screening_entity_create_request [Plaid::WatchlistScreeningEntityCreateRequest?]
    # @return [Tuple(WatchlistScreeningEntityCreateResponse, Integer, Hash)] WatchlistScreeningEntityCreateResponse, response status code and response headers
    def watchlist_screening_entity_create_with_http_info(
      *,
      watchlist_screening_entity_create_request : Plaid::WatchlistScreeningEntityCreateRequest? = nil
    ) : Tuple(WatchlistScreeningEntityCreateResponse, Int32, Hash(String, Array(String) | String))
      request = build_api_request_for_watchlist_screening_entity_create(watchlist_screening_entity_create_request: watchlist_screening_entity_create_request)

      body, status_code, headers = @api_client.execute_api_request(request)

      if debugging?
        Log.debug { "API called: PlaidApi#watchlist_screening_entity_create\nBody: #{body.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}" }
      end

      Tuple.new(WatchlistScreeningEntityCreateResponse.from_json(body), status_code, headers)
    end

    # Create a watchlist screening for an entity
    # Create a new entity watchlist screening to check your customer against watchlists defined in the associated entity watchlist program. If your associated program has ongoing screening enabled, this is the profile information that will be used to monitor your customer over time.
    # @required @param watchlist_screening_entity_create_request [Plaid::WatchlistScreeningEntityCreateRequest?]
    # @return nil
    def watchlist_screening_entity_create(
      *,
      watchlist_screening_entity_create_request : Plaid::WatchlistScreeningEntityCreateRequest? = nil,
      &block : Crest::Response ->
    ) : Nil
      build_api_request_for_watchlist_screening_entity_create(watchlist_screening_entity_create_request: watchlist_screening_entity_create_request).execute(&block)
    end

    # @return Crest::Request
    def build_api_request_for_watchlist_screening_entity_create(
      *,
      watchlist_screening_entity_create_request : Plaid::WatchlistScreeningEntityCreateRequest? = nil
    ) : Crest::Request
      if debugging?
        Log.debug { "Calling API: PlaidApi.watchlist_screening_entity_create ..." }
      end

      if client_side_validation?
        raise ArgumentError.new("\"watchlist_screening_entity_create_request\" is required and cannot be null") if watchlist_screening_entity_create_request.nil?
        unless (_watchlist_screening_entity_create_request = watchlist_screening_entity_create_request).nil?
          _watchlist_screening_entity_create_request.validate if _watchlist_screening_entity_create_request.is_a?(OpenApi::Validatable)
        end
      end

      # resource path
      local_var_path = "/watchlist_screening/entity/create"

      # header parameters
      header_params : Hash(String, String) = Hash(String, String).new
      # HTTP header "Accept" (if needed)
      header_params["Accept"] = @api_client.select_header_accept(["application/json"])
      # HTTP header "Content-Type"
      header_params["Content-Type"] = @api_client.select_header_content_type(["application/json"])

      # cookie parameters
      cookie_params : Hash(String, String) = Hash(String, String).new

      # query parameters
      query_params : Hash(String, (String | Array(String) | JSON::Any)) = Hash(String, (String | Array(String) | JSON::Any)).new

      # form parameters
      form_params : Array(Tuple(String, Crest::ParamsValue)) | Nil = nil

      # http body (model)
      post_body : IO | String | Nil = @api_client.encode(body: watchlist_screening_entity_create_request, content_type: header_params["Content-Type"]?) if !watchlist_screening_entity_create_request.nil?

      # auth_names
      auth_names = ["clientId", "plaidVersion", "secret"]

      @api_client.build_api_request(
        http_method: :"POST",
        path: local_var_path,
        operation: "PlaidApi.watchlist_screening_entity_create",
        post_body: post_body,
        auth_names: auth_names,
        header_params: header_params,
        cookie_params: cookie_params,
        query_params: query_params,
        form_params: form_params
      )
    end

    # Get an entity screening
    # Retrieve an entity watchlist screening.
    # @required @param watchlist_screening_entity_get_request [Plaid::WatchlistScreeningEntityGetRequest?]
    # @return [WatchlistScreeningEntityGetResponse]
    def watchlist_screening_entity_get(
      *,
      watchlist_screening_entity_get_request : Plaid::WatchlistScreeningEntityGetRequest? = nil
    ) : WatchlistScreeningEntityGetResponse
      data, _status_code, _headers = watchlist_screening_entity_get_with_http_info(watchlist_screening_entity_get_request: watchlist_screening_entity_get_request)
      data
    end

    # Get an entity screening
    # Retrieve an entity watchlist screening.
    # @required @param watchlist_screening_entity_get_request [Plaid::WatchlistScreeningEntityGetRequest?]
    # @return [Tuple(WatchlistScreeningEntityGetResponse, Integer, Hash)] WatchlistScreeningEntityGetResponse, response status code and response headers
    def watchlist_screening_entity_get_with_http_info(
      *,
      watchlist_screening_entity_get_request : Plaid::WatchlistScreeningEntityGetRequest? = nil
    ) : Tuple(WatchlistScreeningEntityGetResponse, Int32, Hash(String, Array(String) | String))
      request = build_api_request_for_watchlist_screening_entity_get(watchlist_screening_entity_get_request: watchlist_screening_entity_get_request)

      body, status_code, headers = @api_client.execute_api_request(request)

      if debugging?
        Log.debug { "API called: PlaidApi#watchlist_screening_entity_get\nBody: #{body.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}" }
      end

      Tuple.new(WatchlistScreeningEntityGetResponse.from_json(body), status_code, headers)
    end

    # Get an entity screening
    # Retrieve an entity watchlist screening.
    # @required @param watchlist_screening_entity_get_request [Plaid::WatchlistScreeningEntityGetRequest?]
    # @return nil
    def watchlist_screening_entity_get(
      *,
      watchlist_screening_entity_get_request : Plaid::WatchlistScreeningEntityGetRequest? = nil,
      &block : Crest::Response ->
    ) : Nil
      build_api_request_for_watchlist_screening_entity_get(watchlist_screening_entity_get_request: watchlist_screening_entity_get_request).execute(&block)
    end

    # @return Crest::Request
    def build_api_request_for_watchlist_screening_entity_get(
      *,
      watchlist_screening_entity_get_request : Plaid::WatchlistScreeningEntityGetRequest? = nil
    ) : Crest::Request
      if debugging?
        Log.debug { "Calling API: PlaidApi.watchlist_screening_entity_get ..." }
      end

      if client_side_validation?
        raise ArgumentError.new("\"watchlist_screening_entity_get_request\" is required and cannot be null") if watchlist_screening_entity_get_request.nil?
        unless (_watchlist_screening_entity_get_request = watchlist_screening_entity_get_request).nil?
          _watchlist_screening_entity_get_request.validate if _watchlist_screening_entity_get_request.is_a?(OpenApi::Validatable)
        end
      end

      # resource path
      local_var_path = "/watchlist_screening/entity/get"

      # header parameters
      header_params : Hash(String, String) = Hash(String, String).new
      # HTTP header "Accept" (if needed)
      header_params["Accept"] = @api_client.select_header_accept(["application/json"])
      # HTTP header "Content-Type"
      header_params["Content-Type"] = @api_client.select_header_content_type(["application/json"])

      # cookie parameters
      cookie_params : Hash(String, String) = Hash(String, String).new

      # query parameters
      query_params : Hash(String, (String | Array(String) | JSON::Any)) = Hash(String, (String | Array(String) | JSON::Any)).new

      # form parameters
      form_params : Array(Tuple(String, Crest::ParamsValue)) | Nil = nil

      # http body (model)
      post_body : IO | String | Nil = @api_client.encode(body: watchlist_screening_entity_get_request, content_type: header_params["Content-Type"]?) if !watchlist_screening_entity_get_request.nil?

      # auth_names
      auth_names = ["clientId", "plaidVersion", "secret"]

      @api_client.build_api_request(
        http_method: :"POST",
        path: local_var_path,
        operation: "PlaidApi.watchlist_screening_entity_get",
        post_body: post_body,
        auth_names: auth_names,
        header_params: header_params,
        cookie_params: cookie_params,
        query_params: query_params,
        form_params: form_params
      )
    end

    # List history for entity watchlist screenings
    # List all changes to the entity watchlist screening in reverse-chronological order. If the watchlist screening has not been edited, no history will be returned.
    # @required @param watchlist_screening_entity_history_list_request [Plaid::WatchlistScreeningEntityHistoryListRequest?]
    # @return [WatchlistScreeningEntityHistoryListResponse]
    def watchlist_screening_entity_history_list(
      *,
      watchlist_screening_entity_history_list_request : Plaid::WatchlistScreeningEntityHistoryListRequest? = nil
    ) : WatchlistScreeningEntityHistoryListResponse
      data, _status_code, _headers = watchlist_screening_entity_history_list_with_http_info(watchlist_screening_entity_history_list_request: watchlist_screening_entity_history_list_request)
      data
    end

    # List history for entity watchlist screenings
    # List all changes to the entity watchlist screening in reverse-chronological order. If the watchlist screening has not been edited, no history will be returned.
    # @required @param watchlist_screening_entity_history_list_request [Plaid::WatchlistScreeningEntityHistoryListRequest?]
    # @return [Tuple(WatchlistScreeningEntityHistoryListResponse, Integer, Hash)] WatchlistScreeningEntityHistoryListResponse, response status code and response headers
    def watchlist_screening_entity_history_list_with_http_info(
      *,
      watchlist_screening_entity_history_list_request : Plaid::WatchlistScreeningEntityHistoryListRequest? = nil
    ) : Tuple(WatchlistScreeningEntityHistoryListResponse, Int32, Hash(String, Array(String) | String))
      request = build_api_request_for_watchlist_screening_entity_history_list(watchlist_screening_entity_history_list_request: watchlist_screening_entity_history_list_request)

      body, status_code, headers = @api_client.execute_api_request(request)

      if debugging?
        Log.debug { "API called: PlaidApi#watchlist_screening_entity_history_list\nBody: #{body.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}" }
      end

      Tuple.new(WatchlistScreeningEntityHistoryListResponse.from_json(body), status_code, headers)
    end

    # List history for entity watchlist screenings
    # List all changes to the entity watchlist screening in reverse-chronological order. If the watchlist screening has not been edited, no history will be returned.
    # @required @param watchlist_screening_entity_history_list_request [Plaid::WatchlistScreeningEntityHistoryListRequest?]
    # @return nil
    def watchlist_screening_entity_history_list(
      *,
      watchlist_screening_entity_history_list_request : Plaid::WatchlistScreeningEntityHistoryListRequest? = nil,
      &block : Crest::Response ->
    ) : Nil
      build_api_request_for_watchlist_screening_entity_history_list(watchlist_screening_entity_history_list_request: watchlist_screening_entity_history_list_request).execute(&block)
    end

    # @return Crest::Request
    def build_api_request_for_watchlist_screening_entity_history_list(
      *,
      watchlist_screening_entity_history_list_request : Plaid::WatchlistScreeningEntityHistoryListRequest? = nil
    ) : Crest::Request
      if debugging?
        Log.debug { "Calling API: PlaidApi.watchlist_screening_entity_history_list ..." }
      end

      if client_side_validation?
        raise ArgumentError.new("\"watchlist_screening_entity_history_list_request\" is required and cannot be null") if watchlist_screening_entity_history_list_request.nil?
        unless (_watchlist_screening_entity_history_list_request = watchlist_screening_entity_history_list_request).nil?
          _watchlist_screening_entity_history_list_request.validate if _watchlist_screening_entity_history_list_request.is_a?(OpenApi::Validatable)
        end
      end

      # resource path
      local_var_path = "/watchlist_screening/entity/history/list"

      # header parameters
      header_params : Hash(String, String) = Hash(String, String).new
      # HTTP header "Accept" (if needed)
      header_params["Accept"] = @api_client.select_header_accept(["application/json"])
      # HTTP header "Content-Type"
      header_params["Content-Type"] = @api_client.select_header_content_type(["application/json"])

      # cookie parameters
      cookie_params : Hash(String, String) = Hash(String, String).new

      # query parameters
      query_params : Hash(String, (String | Array(String) | JSON::Any)) = Hash(String, (String | Array(String) | JSON::Any)).new

      # form parameters
      form_params : Array(Tuple(String, Crest::ParamsValue)) | Nil = nil

      # http body (model)
      post_body : IO | String | Nil = @api_client.encode(body: watchlist_screening_entity_history_list_request, content_type: header_params["Content-Type"]?) if !watchlist_screening_entity_history_list_request.nil?

      # auth_names
      auth_names = ["clientId", "plaidVersion", "secret"]

      @api_client.build_api_request(
        http_method: :"POST",
        path: local_var_path,
        operation: "PlaidApi.watchlist_screening_entity_history_list",
        post_body: post_body,
        auth_names: auth_names,
        header_params: header_params,
        cookie_params: cookie_params,
        query_params: query_params,
        form_params: form_params
      )
    end

    # List hits for entity watchlist screenings
    # List all hits for the entity watchlist screening.
    # @required @param watchlist_screening_entity_hit_list_request [Plaid::WatchlistScreeningEntityHitListRequest?]
    # @return [WatchlistScreeningEntityHitListResponse]
    def watchlist_screening_entity_hit_list(
      *,
      watchlist_screening_entity_hit_list_request : Plaid::WatchlistScreeningEntityHitListRequest? = nil
    ) : WatchlistScreeningEntityHitListResponse
      data, _status_code, _headers = watchlist_screening_entity_hit_list_with_http_info(watchlist_screening_entity_hit_list_request: watchlist_screening_entity_hit_list_request)
      data
    end

    # List hits for entity watchlist screenings
    # List all hits for the entity watchlist screening.
    # @required @param watchlist_screening_entity_hit_list_request [Plaid::WatchlistScreeningEntityHitListRequest?]
    # @return [Tuple(WatchlistScreeningEntityHitListResponse, Integer, Hash)] WatchlistScreeningEntityHitListResponse, response status code and response headers
    def watchlist_screening_entity_hit_list_with_http_info(
      *,
      watchlist_screening_entity_hit_list_request : Plaid::WatchlistScreeningEntityHitListRequest? = nil
    ) : Tuple(WatchlistScreeningEntityHitListResponse, Int32, Hash(String, Array(String) | String))
      request = build_api_request_for_watchlist_screening_entity_hit_list(watchlist_screening_entity_hit_list_request: watchlist_screening_entity_hit_list_request)

      body, status_code, headers = @api_client.execute_api_request(request)

      if debugging?
        Log.debug { "API called: PlaidApi#watchlist_screening_entity_hit_list\nBody: #{body.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}" }
      end

      Tuple.new(WatchlistScreeningEntityHitListResponse.from_json(body), status_code, headers)
    end

    # List hits for entity watchlist screenings
    # List all hits for the entity watchlist screening.
    # @required @param watchlist_screening_entity_hit_list_request [Plaid::WatchlistScreeningEntityHitListRequest?]
    # @return nil
    def watchlist_screening_entity_hit_list(
      *,
      watchlist_screening_entity_hit_list_request : Plaid::WatchlistScreeningEntityHitListRequest? = nil,
      &block : Crest::Response ->
    ) : Nil
      build_api_request_for_watchlist_screening_entity_hit_list(watchlist_screening_entity_hit_list_request: watchlist_screening_entity_hit_list_request).execute(&block)
    end

    # @return Crest::Request
    def build_api_request_for_watchlist_screening_entity_hit_list(
      *,
      watchlist_screening_entity_hit_list_request : Plaid::WatchlistScreeningEntityHitListRequest? = nil
    ) : Crest::Request
      if debugging?
        Log.debug { "Calling API: PlaidApi.watchlist_screening_entity_hit_list ..." }
      end

      if client_side_validation?
        raise ArgumentError.new("\"watchlist_screening_entity_hit_list_request\" is required and cannot be null") if watchlist_screening_entity_hit_list_request.nil?
        unless (_watchlist_screening_entity_hit_list_request = watchlist_screening_entity_hit_list_request).nil?
          _watchlist_screening_entity_hit_list_request.validate if _watchlist_screening_entity_hit_list_request.is_a?(OpenApi::Validatable)
        end
      end

      # resource path
      local_var_path = "/watchlist_screening/entity/hit/list"

      # header parameters
      header_params : Hash(String, String) = Hash(String, String).new
      # HTTP header "Accept" (if needed)
      header_params["Accept"] = @api_client.select_header_accept(["application/json"])
      # HTTP header "Content-Type"
      header_params["Content-Type"] = @api_client.select_header_content_type(["application/json"])

      # cookie parameters
      cookie_params : Hash(String, String) = Hash(String, String).new

      # query parameters
      query_params : Hash(String, (String | Array(String) | JSON::Any)) = Hash(String, (String | Array(String) | JSON::Any)).new

      # form parameters
      form_params : Array(Tuple(String, Crest::ParamsValue)) | Nil = nil

      # http body (model)
      post_body : IO | String | Nil = @api_client.encode(body: watchlist_screening_entity_hit_list_request, content_type: header_params["Content-Type"]?) if !watchlist_screening_entity_hit_list_request.nil?

      # auth_names
      auth_names = ["clientId", "plaidVersion", "secret"]

      @api_client.build_api_request(
        http_method: :"POST",
        path: local_var_path,
        operation: "PlaidApi.watchlist_screening_entity_hit_list",
        post_body: post_body,
        auth_names: auth_names,
        header_params: header_params,
        cookie_params: cookie_params,
        query_params: query_params,
        form_params: form_params
      )
    end

    # List entity watchlist screenings
    # List all entity screenings.
    # @required @param watchlist_screening_entity_list_request [Plaid::WatchlistScreeningEntityListRequest?]
    # @return [WatchlistScreeningEntityListResponse]
    def watchlist_screening_entity_list(
      *,
      watchlist_screening_entity_list_request : Plaid::WatchlistScreeningEntityListRequest? = nil
    ) : WatchlistScreeningEntityListResponse
      data, _status_code, _headers = watchlist_screening_entity_list_with_http_info(watchlist_screening_entity_list_request: watchlist_screening_entity_list_request)
      data
    end

    # List entity watchlist screenings
    # List all entity screenings.
    # @required @param watchlist_screening_entity_list_request [Plaid::WatchlistScreeningEntityListRequest?]
    # @return [Tuple(WatchlistScreeningEntityListResponse, Integer, Hash)] WatchlistScreeningEntityListResponse, response status code and response headers
    def watchlist_screening_entity_list_with_http_info(
      *,
      watchlist_screening_entity_list_request : Plaid::WatchlistScreeningEntityListRequest? = nil
    ) : Tuple(WatchlistScreeningEntityListResponse, Int32, Hash(String, Array(String) | String))
      request = build_api_request_for_watchlist_screening_entity_list(watchlist_screening_entity_list_request: watchlist_screening_entity_list_request)

      body, status_code, headers = @api_client.execute_api_request(request)

      if debugging?
        Log.debug { "API called: PlaidApi#watchlist_screening_entity_list\nBody: #{body.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}" }
      end

      Tuple.new(WatchlistScreeningEntityListResponse.from_json(body), status_code, headers)
    end

    # List entity watchlist screenings
    # List all entity screenings.
    # @required @param watchlist_screening_entity_list_request [Plaid::WatchlistScreeningEntityListRequest?]
    # @return nil
    def watchlist_screening_entity_list(
      *,
      watchlist_screening_entity_list_request : Plaid::WatchlistScreeningEntityListRequest? = nil,
      &block : Crest::Response ->
    ) : Nil
      build_api_request_for_watchlist_screening_entity_list(watchlist_screening_entity_list_request: watchlist_screening_entity_list_request).execute(&block)
    end

    # @return Crest::Request
    def build_api_request_for_watchlist_screening_entity_list(
      *,
      watchlist_screening_entity_list_request : Plaid::WatchlistScreeningEntityListRequest? = nil
    ) : Crest::Request
      if debugging?
        Log.debug { "Calling API: PlaidApi.watchlist_screening_entity_list ..." }
      end

      if client_side_validation?
        raise ArgumentError.new("\"watchlist_screening_entity_list_request\" is required and cannot be null") if watchlist_screening_entity_list_request.nil?
        unless (_watchlist_screening_entity_list_request = watchlist_screening_entity_list_request).nil?
          _watchlist_screening_entity_list_request.validate if _watchlist_screening_entity_list_request.is_a?(OpenApi::Validatable)
        end
      end

      # resource path
      local_var_path = "/watchlist_screening/entity/list"

      # header parameters
      header_params : Hash(String, String) = Hash(String, String).new
      # HTTP header "Accept" (if needed)
      header_params["Accept"] = @api_client.select_header_accept(["application/json"])
      # HTTP header "Content-Type"
      header_params["Content-Type"] = @api_client.select_header_content_type(["application/json"])

      # cookie parameters
      cookie_params : Hash(String, String) = Hash(String, String).new

      # query parameters
      query_params : Hash(String, (String | Array(String) | JSON::Any)) = Hash(String, (String | Array(String) | JSON::Any)).new

      # form parameters
      form_params : Array(Tuple(String, Crest::ParamsValue)) | Nil = nil

      # http body (model)
      post_body : IO | String | Nil = @api_client.encode(body: watchlist_screening_entity_list_request, content_type: header_params["Content-Type"]?) if !watchlist_screening_entity_list_request.nil?

      # auth_names
      auth_names = ["clientId", "plaidVersion", "secret"]

      @api_client.build_api_request(
        http_method: :"POST",
        path: local_var_path,
        operation: "PlaidApi.watchlist_screening_entity_list",
        post_body: post_body,
        auth_names: auth_names,
        header_params: header_params,
        cookie_params: cookie_params,
        query_params: query_params,
        form_params: form_params
      )
    end

    # Get entity watchlist screening program
    # Get an entity watchlist screening program
    # @required @param watchlist_screening_entity_program_get_request [Plaid::WatchlistScreeningEntityProgramGetRequest?]
    # @return [WatchlistScreeningEntityProgramGetResponse]
    def watchlist_screening_entity_program_get(
      *,
      watchlist_screening_entity_program_get_request : Plaid::WatchlistScreeningEntityProgramGetRequest? = nil
    ) : WatchlistScreeningEntityProgramGetResponse
      data, _status_code, _headers = watchlist_screening_entity_program_get_with_http_info(watchlist_screening_entity_program_get_request: watchlist_screening_entity_program_get_request)
      data
    end

    # Get entity watchlist screening program
    # Get an entity watchlist screening program
    # @required @param watchlist_screening_entity_program_get_request [Plaid::WatchlistScreeningEntityProgramGetRequest?]
    # @return [Tuple(WatchlistScreeningEntityProgramGetResponse, Integer, Hash)] WatchlistScreeningEntityProgramGetResponse, response status code and response headers
    def watchlist_screening_entity_program_get_with_http_info(
      *,
      watchlist_screening_entity_program_get_request : Plaid::WatchlistScreeningEntityProgramGetRequest? = nil
    ) : Tuple(WatchlistScreeningEntityProgramGetResponse, Int32, Hash(String, Array(String) | String))
      request = build_api_request_for_watchlist_screening_entity_program_get(watchlist_screening_entity_program_get_request: watchlist_screening_entity_program_get_request)

      body, status_code, headers = @api_client.execute_api_request(request)

      if debugging?
        Log.debug { "API called: PlaidApi#watchlist_screening_entity_program_get\nBody: #{body.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}" }
      end

      Tuple.new(WatchlistScreeningEntityProgramGetResponse.from_json(body), status_code, headers)
    end

    # Get entity watchlist screening program
    # Get an entity watchlist screening program
    # @required @param watchlist_screening_entity_program_get_request [Plaid::WatchlistScreeningEntityProgramGetRequest?]
    # @return nil
    def watchlist_screening_entity_program_get(
      *,
      watchlist_screening_entity_program_get_request : Plaid::WatchlistScreeningEntityProgramGetRequest? = nil,
      &block : Crest::Response ->
    ) : Nil
      build_api_request_for_watchlist_screening_entity_program_get(watchlist_screening_entity_program_get_request: watchlist_screening_entity_program_get_request).execute(&block)
    end

    # @return Crest::Request
    def build_api_request_for_watchlist_screening_entity_program_get(
      *,
      watchlist_screening_entity_program_get_request : Plaid::WatchlistScreeningEntityProgramGetRequest? = nil
    ) : Crest::Request
      if debugging?
        Log.debug { "Calling API: PlaidApi.watchlist_screening_entity_program_get ..." }
      end

      if client_side_validation?
        raise ArgumentError.new("\"watchlist_screening_entity_program_get_request\" is required and cannot be null") if watchlist_screening_entity_program_get_request.nil?
        unless (_watchlist_screening_entity_program_get_request = watchlist_screening_entity_program_get_request).nil?
          _watchlist_screening_entity_program_get_request.validate if _watchlist_screening_entity_program_get_request.is_a?(OpenApi::Validatable)
        end
      end

      # resource path
      local_var_path = "/watchlist_screening/entity/program/get"

      # header parameters
      header_params : Hash(String, String) = Hash(String, String).new
      # HTTP header "Accept" (if needed)
      header_params["Accept"] = @api_client.select_header_accept(["application/json"])
      # HTTP header "Content-Type"
      header_params["Content-Type"] = @api_client.select_header_content_type(["application/json"])

      # cookie parameters
      cookie_params : Hash(String, String) = Hash(String, String).new

      # query parameters
      query_params : Hash(String, (String | Array(String) | JSON::Any)) = Hash(String, (String | Array(String) | JSON::Any)).new

      # form parameters
      form_params : Array(Tuple(String, Crest::ParamsValue)) | Nil = nil

      # http body (model)
      post_body : IO | String | Nil = @api_client.encode(body: watchlist_screening_entity_program_get_request, content_type: header_params["Content-Type"]?) if !watchlist_screening_entity_program_get_request.nil?

      # auth_names
      auth_names = ["clientId", "plaidVersion", "secret"]

      @api_client.build_api_request(
        http_method: :"POST",
        path: local_var_path,
        operation: "PlaidApi.watchlist_screening_entity_program_get",
        post_body: post_body,
        auth_names: auth_names,
        header_params: header_params,
        cookie_params: cookie_params,
        query_params: query_params,
        form_params: form_params
      )
    end

    # List entity watchlist screening programs
    # List all entity watchlist screening programs
    # @required @param watchlist_screening_entity_program_list_request [Plaid::WatchlistScreeningEntityProgramListRequest?]
    # @return [WatchlistScreeningEntityProgramListResponse]
    def watchlist_screening_entity_program_list(
      *,
      watchlist_screening_entity_program_list_request : Plaid::WatchlistScreeningEntityProgramListRequest? = nil
    ) : WatchlistScreeningEntityProgramListResponse
      data, _status_code, _headers = watchlist_screening_entity_program_list_with_http_info(watchlist_screening_entity_program_list_request: watchlist_screening_entity_program_list_request)
      data
    end

    # List entity watchlist screening programs
    # List all entity watchlist screening programs
    # @required @param watchlist_screening_entity_program_list_request [Plaid::WatchlistScreeningEntityProgramListRequest?]
    # @return [Tuple(WatchlistScreeningEntityProgramListResponse, Integer, Hash)] WatchlistScreeningEntityProgramListResponse, response status code and response headers
    def watchlist_screening_entity_program_list_with_http_info(
      *,
      watchlist_screening_entity_program_list_request : Plaid::WatchlistScreeningEntityProgramListRequest? = nil
    ) : Tuple(WatchlistScreeningEntityProgramListResponse, Int32, Hash(String, Array(String) | String))
      request = build_api_request_for_watchlist_screening_entity_program_list(watchlist_screening_entity_program_list_request: watchlist_screening_entity_program_list_request)

      body, status_code, headers = @api_client.execute_api_request(request)

      if debugging?
        Log.debug { "API called: PlaidApi#watchlist_screening_entity_program_list\nBody: #{body.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}" }
      end

      Tuple.new(WatchlistScreeningEntityProgramListResponse.from_json(body), status_code, headers)
    end

    # List entity watchlist screening programs
    # List all entity watchlist screening programs
    # @required @param watchlist_screening_entity_program_list_request [Plaid::WatchlistScreeningEntityProgramListRequest?]
    # @return nil
    def watchlist_screening_entity_program_list(
      *,
      watchlist_screening_entity_program_list_request : Plaid::WatchlistScreeningEntityProgramListRequest? = nil,
      &block : Crest::Response ->
    ) : Nil
      build_api_request_for_watchlist_screening_entity_program_list(watchlist_screening_entity_program_list_request: watchlist_screening_entity_program_list_request).execute(&block)
    end

    # @return Crest::Request
    def build_api_request_for_watchlist_screening_entity_program_list(
      *,
      watchlist_screening_entity_program_list_request : Plaid::WatchlistScreeningEntityProgramListRequest? = nil
    ) : Crest::Request
      if debugging?
        Log.debug { "Calling API: PlaidApi.watchlist_screening_entity_program_list ..." }
      end

      if client_side_validation?
        raise ArgumentError.new("\"watchlist_screening_entity_program_list_request\" is required and cannot be null") if watchlist_screening_entity_program_list_request.nil?
        unless (_watchlist_screening_entity_program_list_request = watchlist_screening_entity_program_list_request).nil?
          _watchlist_screening_entity_program_list_request.validate if _watchlist_screening_entity_program_list_request.is_a?(OpenApi::Validatable)
        end
      end

      # resource path
      local_var_path = "/watchlist_screening/entity/program/list"

      # header parameters
      header_params : Hash(String, String) = Hash(String, String).new
      # HTTP header "Accept" (if needed)
      header_params["Accept"] = @api_client.select_header_accept(["application/json"])
      # HTTP header "Content-Type"
      header_params["Content-Type"] = @api_client.select_header_content_type(["application/json"])

      # cookie parameters
      cookie_params : Hash(String, String) = Hash(String, String).new

      # query parameters
      query_params : Hash(String, (String | Array(String) | JSON::Any)) = Hash(String, (String | Array(String) | JSON::Any)).new

      # form parameters
      form_params : Array(Tuple(String, Crest::ParamsValue)) | Nil = nil

      # http body (model)
      post_body : IO | String | Nil = @api_client.encode(body: watchlist_screening_entity_program_list_request, content_type: header_params["Content-Type"]?) if !watchlist_screening_entity_program_list_request.nil?

      # auth_names
      auth_names = ["clientId", "plaidVersion", "secret"]

      @api_client.build_api_request(
        http_method: :"POST",
        path: local_var_path,
        operation: "PlaidApi.watchlist_screening_entity_program_list",
        post_body: post_body,
        auth_names: auth_names,
        header_params: header_params,
        cookie_params: cookie_params,
        query_params: query_params,
        form_params: form_params
      )
    end

    # Create a review for an entity watchlist screening
    # Create a review for an entity watchlist screening. Reviews are compliance reports created by users in your organization regarding the relevance of potential hits found by Plaid.
    # @required @param watchlist_screening_entity_review_create_request [Plaid::WatchlistScreeningEntityReviewCreateRequest?]
    # @return [WatchlistScreeningEntityReviewCreateResponse]
    def watchlist_screening_entity_review_create(
      *,
      watchlist_screening_entity_review_create_request : Plaid::WatchlistScreeningEntityReviewCreateRequest? = nil
    ) : WatchlistScreeningEntityReviewCreateResponse
      data, _status_code, _headers = watchlist_screening_entity_review_create_with_http_info(watchlist_screening_entity_review_create_request: watchlist_screening_entity_review_create_request)
      data
    end

    # Create a review for an entity watchlist screening
    # Create a review for an entity watchlist screening. Reviews are compliance reports created by users in your organization regarding the relevance of potential hits found by Plaid.
    # @required @param watchlist_screening_entity_review_create_request [Plaid::WatchlistScreeningEntityReviewCreateRequest?]
    # @return [Tuple(WatchlistScreeningEntityReviewCreateResponse, Integer, Hash)] WatchlistScreeningEntityReviewCreateResponse, response status code and response headers
    def watchlist_screening_entity_review_create_with_http_info(
      *,
      watchlist_screening_entity_review_create_request : Plaid::WatchlistScreeningEntityReviewCreateRequest? = nil
    ) : Tuple(WatchlistScreeningEntityReviewCreateResponse, Int32, Hash(String, Array(String) | String))
      request = build_api_request_for_watchlist_screening_entity_review_create(watchlist_screening_entity_review_create_request: watchlist_screening_entity_review_create_request)

      body, status_code, headers = @api_client.execute_api_request(request)

      if debugging?
        Log.debug { "API called: PlaidApi#watchlist_screening_entity_review_create\nBody: #{body.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}" }
      end

      Tuple.new(WatchlistScreeningEntityReviewCreateResponse.from_json(body), status_code, headers)
    end

    # Create a review for an entity watchlist screening
    # Create a review for an entity watchlist screening. Reviews are compliance reports created by users in your organization regarding the relevance of potential hits found by Plaid.
    # @required @param watchlist_screening_entity_review_create_request [Plaid::WatchlistScreeningEntityReviewCreateRequest?]
    # @return nil
    def watchlist_screening_entity_review_create(
      *,
      watchlist_screening_entity_review_create_request : Plaid::WatchlistScreeningEntityReviewCreateRequest? = nil,
      &block : Crest::Response ->
    ) : Nil
      build_api_request_for_watchlist_screening_entity_review_create(watchlist_screening_entity_review_create_request: watchlist_screening_entity_review_create_request).execute(&block)
    end

    # @return Crest::Request
    def build_api_request_for_watchlist_screening_entity_review_create(
      *,
      watchlist_screening_entity_review_create_request : Plaid::WatchlistScreeningEntityReviewCreateRequest? = nil
    ) : Crest::Request
      if debugging?
        Log.debug { "Calling API: PlaidApi.watchlist_screening_entity_review_create ..." }
      end

      if client_side_validation?
        raise ArgumentError.new("\"watchlist_screening_entity_review_create_request\" is required and cannot be null") if watchlist_screening_entity_review_create_request.nil?
        unless (_watchlist_screening_entity_review_create_request = watchlist_screening_entity_review_create_request).nil?
          _watchlist_screening_entity_review_create_request.validate if _watchlist_screening_entity_review_create_request.is_a?(OpenApi::Validatable)
        end
      end

      # resource path
      local_var_path = "/watchlist_screening/entity/review/create"

      # header parameters
      header_params : Hash(String, String) = Hash(String, String).new
      # HTTP header "Accept" (if needed)
      header_params["Accept"] = @api_client.select_header_accept(["application/json"])
      # HTTP header "Content-Type"
      header_params["Content-Type"] = @api_client.select_header_content_type(["application/json"])

      # cookie parameters
      cookie_params : Hash(String, String) = Hash(String, String).new

      # query parameters
      query_params : Hash(String, (String | Array(String) | JSON::Any)) = Hash(String, (String | Array(String) | JSON::Any)).new

      # form parameters
      form_params : Array(Tuple(String, Crest::ParamsValue)) | Nil = nil

      # http body (model)
      post_body : IO | String | Nil = @api_client.encode(body: watchlist_screening_entity_review_create_request, content_type: header_params["Content-Type"]?) if !watchlist_screening_entity_review_create_request.nil?

      # auth_names
      auth_names = ["clientId", "plaidVersion", "secret"]

      @api_client.build_api_request(
        http_method: :"POST",
        path: local_var_path,
        operation: "PlaidApi.watchlist_screening_entity_review_create",
        post_body: post_body,
        auth_names: auth_names,
        header_params: header_params,
        cookie_params: cookie_params,
        query_params: query_params,
        form_params: form_params
      )
    end

    # List reviews for entity watchlist screenings
    # List all reviews for a particular entity watchlist screening. Reviews are compliance reports created by users in your organization regarding the relevance of potential hits found by Plaid.
    # @required @param watchlist_screening_entity_review_list_request [Plaid::WatchlistScreeningEntityReviewListRequest?]
    # @return [WatchlistScreeningEntityReviewListResponse]
    def watchlist_screening_entity_review_list(
      *,
      watchlist_screening_entity_review_list_request : Plaid::WatchlistScreeningEntityReviewListRequest? = nil
    ) : WatchlistScreeningEntityReviewListResponse
      data, _status_code, _headers = watchlist_screening_entity_review_list_with_http_info(watchlist_screening_entity_review_list_request: watchlist_screening_entity_review_list_request)
      data
    end

    # List reviews for entity watchlist screenings
    # List all reviews for a particular entity watchlist screening. Reviews are compliance reports created by users in your organization regarding the relevance of potential hits found by Plaid.
    # @required @param watchlist_screening_entity_review_list_request [Plaid::WatchlistScreeningEntityReviewListRequest?]
    # @return [Tuple(WatchlistScreeningEntityReviewListResponse, Integer, Hash)] WatchlistScreeningEntityReviewListResponse, response status code and response headers
    def watchlist_screening_entity_review_list_with_http_info(
      *,
      watchlist_screening_entity_review_list_request : Plaid::WatchlistScreeningEntityReviewListRequest? = nil
    ) : Tuple(WatchlistScreeningEntityReviewListResponse, Int32, Hash(String, Array(String) | String))
      request = build_api_request_for_watchlist_screening_entity_review_list(watchlist_screening_entity_review_list_request: watchlist_screening_entity_review_list_request)

      body, status_code, headers = @api_client.execute_api_request(request)

      if debugging?
        Log.debug { "API called: PlaidApi#watchlist_screening_entity_review_list\nBody: #{body.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}" }
      end

      Tuple.new(WatchlistScreeningEntityReviewListResponse.from_json(body), status_code, headers)
    end

    # List reviews for entity watchlist screenings
    # List all reviews for a particular entity watchlist screening. Reviews are compliance reports created by users in your organization regarding the relevance of potential hits found by Plaid.
    # @required @param watchlist_screening_entity_review_list_request [Plaid::WatchlistScreeningEntityReviewListRequest?]
    # @return nil
    def watchlist_screening_entity_review_list(
      *,
      watchlist_screening_entity_review_list_request : Plaid::WatchlistScreeningEntityReviewListRequest? = nil,
      &block : Crest::Response ->
    ) : Nil
      build_api_request_for_watchlist_screening_entity_review_list(watchlist_screening_entity_review_list_request: watchlist_screening_entity_review_list_request).execute(&block)
    end

    # @return Crest::Request
    def build_api_request_for_watchlist_screening_entity_review_list(
      *,
      watchlist_screening_entity_review_list_request : Plaid::WatchlistScreeningEntityReviewListRequest? = nil
    ) : Crest::Request
      if debugging?
        Log.debug { "Calling API: PlaidApi.watchlist_screening_entity_review_list ..." }
      end

      if client_side_validation?
        raise ArgumentError.new("\"watchlist_screening_entity_review_list_request\" is required and cannot be null") if watchlist_screening_entity_review_list_request.nil?
        unless (_watchlist_screening_entity_review_list_request = watchlist_screening_entity_review_list_request).nil?
          _watchlist_screening_entity_review_list_request.validate if _watchlist_screening_entity_review_list_request.is_a?(OpenApi::Validatable)
        end
      end

      # resource path
      local_var_path = "/watchlist_screening/entity/review/list"

      # header parameters
      header_params : Hash(String, String) = Hash(String, String).new
      # HTTP header "Accept" (if needed)
      header_params["Accept"] = @api_client.select_header_accept(["application/json"])
      # HTTP header "Content-Type"
      header_params["Content-Type"] = @api_client.select_header_content_type(["application/json"])

      # cookie parameters
      cookie_params : Hash(String, String) = Hash(String, String).new

      # query parameters
      query_params : Hash(String, (String | Array(String) | JSON::Any)) = Hash(String, (String | Array(String) | JSON::Any)).new

      # form parameters
      form_params : Array(Tuple(String, Crest::ParamsValue)) | Nil = nil

      # http body (model)
      post_body : IO | String | Nil = @api_client.encode(body: watchlist_screening_entity_review_list_request, content_type: header_params["Content-Type"]?) if !watchlist_screening_entity_review_list_request.nil?

      # auth_names
      auth_names = ["clientId", "plaidVersion", "secret"]

      @api_client.build_api_request(
        http_method: :"POST",
        path: local_var_path,
        operation: "PlaidApi.watchlist_screening_entity_review_list",
        post_body: post_body,
        auth_names: auth_names,
        header_params: header_params,
        cookie_params: cookie_params,
        query_params: query_params,
        form_params: form_params
      )
    end

    # Update an entity screening
    # Update an entity watchlist screening.
    # @required @param watchlist_screening_entity_update_request [Plaid::WatchlistScreeningEntityUpdateRequest?] The entity screening was successfully updated.
    # @return [WatchlistScreeningEntityUpdateResponse]
    def watchlist_screening_entity_update(
      *,
      watchlist_screening_entity_update_request : Plaid::WatchlistScreeningEntityUpdateRequest? = nil
    ) : WatchlistScreeningEntityUpdateResponse
      data, _status_code, _headers = watchlist_screening_entity_update_with_http_info(watchlist_screening_entity_update_request: watchlist_screening_entity_update_request)
      data
    end

    # Update an entity screening
    # Update an entity watchlist screening.
    # @required @param watchlist_screening_entity_update_request [Plaid::WatchlistScreeningEntityUpdateRequest?] The entity screening was successfully updated.
    # @return [Tuple(WatchlistScreeningEntityUpdateResponse, Integer, Hash)] WatchlistScreeningEntityUpdateResponse, response status code and response headers
    def watchlist_screening_entity_update_with_http_info(
      *,
      watchlist_screening_entity_update_request : Plaid::WatchlistScreeningEntityUpdateRequest? = nil
    ) : Tuple(WatchlistScreeningEntityUpdateResponse, Int32, Hash(String, Array(String) | String))
      request = build_api_request_for_watchlist_screening_entity_update(watchlist_screening_entity_update_request: watchlist_screening_entity_update_request)

      body, status_code, headers = @api_client.execute_api_request(request)

      if debugging?
        Log.debug { "API called: PlaidApi#watchlist_screening_entity_update\nBody: #{body.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}" }
      end

      Tuple.new(WatchlistScreeningEntityUpdateResponse.from_json(body), status_code, headers)
    end

    # Update an entity screening
    # Update an entity watchlist screening.
    # @required @param watchlist_screening_entity_update_request [Plaid::WatchlistScreeningEntityUpdateRequest?] The entity screening was successfully updated.
    # @return nil
    def watchlist_screening_entity_update(
      *,
      watchlist_screening_entity_update_request : Plaid::WatchlistScreeningEntityUpdateRequest? = nil,
      &block : Crest::Response ->
    ) : Nil
      build_api_request_for_watchlist_screening_entity_update(watchlist_screening_entity_update_request: watchlist_screening_entity_update_request).execute(&block)
    end

    # @return Crest::Request
    def build_api_request_for_watchlist_screening_entity_update(
      *,
      watchlist_screening_entity_update_request : Plaid::WatchlistScreeningEntityUpdateRequest? = nil
    ) : Crest::Request
      if debugging?
        Log.debug { "Calling API: PlaidApi.watchlist_screening_entity_update ..." }
      end

      if client_side_validation?
        raise ArgumentError.new("\"watchlist_screening_entity_update_request\" is required and cannot be null") if watchlist_screening_entity_update_request.nil?
        unless (_watchlist_screening_entity_update_request = watchlist_screening_entity_update_request).nil?
          _watchlist_screening_entity_update_request.validate if _watchlist_screening_entity_update_request.is_a?(OpenApi::Validatable)
        end
      end

      # resource path
      local_var_path = "/watchlist_screening/entity/update"

      # header parameters
      header_params : Hash(String, String) = Hash(String, String).new
      # HTTP header "Accept" (if needed)
      header_params["Accept"] = @api_client.select_header_accept(["application/json"])
      # HTTP header "Content-Type"
      header_params["Content-Type"] = @api_client.select_header_content_type(["application/json"])

      # cookie parameters
      cookie_params : Hash(String, String) = Hash(String, String).new

      # query parameters
      query_params : Hash(String, (String | Array(String) | JSON::Any)) = Hash(String, (String | Array(String) | JSON::Any)).new

      # form parameters
      form_params : Array(Tuple(String, Crest::ParamsValue)) | Nil = nil

      # http body (model)
      post_body : IO | String | Nil = @api_client.encode(body: watchlist_screening_entity_update_request, content_type: header_params["Content-Type"]?) if !watchlist_screening_entity_update_request.nil?

      # auth_names
      auth_names = ["clientId", "plaidVersion", "secret"]

      @api_client.build_api_request(
        http_method: :"POST",
        path: local_var_path,
        operation: "PlaidApi.watchlist_screening_entity_update",
        post_body: post_body,
        auth_names: auth_names,
        header_params: header_params,
        cookie_params: cookie_params,
        query_params: query_params,
        form_params: form_params
      )
    end

    # Create a watchlist screening for a person
    # Create a new Watchlist Screening to check your customer against watchlists defined in the associated Watchlist Program. If your associated program has ongoing screening enabled, this is the profile information that will be used to monitor your customer over time.
    # @required @param watchlist_screening_individual_create_request [Plaid::WatchlistScreeningIndividualCreateRequest?]
    # @return [WatchlistScreeningIndividualCreateResponse]
    def watchlist_screening_individual_create(
      *,
      watchlist_screening_individual_create_request : Plaid::WatchlistScreeningIndividualCreateRequest? = nil
    ) : WatchlistScreeningIndividualCreateResponse
      data, _status_code, _headers = watchlist_screening_individual_create_with_http_info(watchlist_screening_individual_create_request: watchlist_screening_individual_create_request)
      data
    end

    # Create a watchlist screening for a person
    # Create a new Watchlist Screening to check your customer against watchlists defined in the associated Watchlist Program. If your associated program has ongoing screening enabled, this is the profile information that will be used to monitor your customer over time.
    # @required @param watchlist_screening_individual_create_request [Plaid::WatchlistScreeningIndividualCreateRequest?]
    # @return [Tuple(WatchlistScreeningIndividualCreateResponse, Integer, Hash)] WatchlistScreeningIndividualCreateResponse, response status code and response headers
    def watchlist_screening_individual_create_with_http_info(
      *,
      watchlist_screening_individual_create_request : Plaid::WatchlistScreeningIndividualCreateRequest? = nil
    ) : Tuple(WatchlistScreeningIndividualCreateResponse, Int32, Hash(String, Array(String) | String))
      request = build_api_request_for_watchlist_screening_individual_create(watchlist_screening_individual_create_request: watchlist_screening_individual_create_request)

      body, status_code, headers = @api_client.execute_api_request(request)

      if debugging?
        Log.debug { "API called: PlaidApi#watchlist_screening_individual_create\nBody: #{body.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}" }
      end

      Tuple.new(WatchlistScreeningIndividualCreateResponse.from_json(body), status_code, headers)
    end

    # Create a watchlist screening for a person
    # Create a new Watchlist Screening to check your customer against watchlists defined in the associated Watchlist Program. If your associated program has ongoing screening enabled, this is the profile information that will be used to monitor your customer over time.
    # @required @param watchlist_screening_individual_create_request [Plaid::WatchlistScreeningIndividualCreateRequest?]
    # @return nil
    def watchlist_screening_individual_create(
      *,
      watchlist_screening_individual_create_request : Plaid::WatchlistScreeningIndividualCreateRequest? = nil,
      &block : Crest::Response ->
    ) : Nil
      build_api_request_for_watchlist_screening_individual_create(watchlist_screening_individual_create_request: watchlist_screening_individual_create_request).execute(&block)
    end

    # @return Crest::Request
    def build_api_request_for_watchlist_screening_individual_create(
      *,
      watchlist_screening_individual_create_request : Plaid::WatchlistScreeningIndividualCreateRequest? = nil
    ) : Crest::Request
      if debugging?
        Log.debug { "Calling API: PlaidApi.watchlist_screening_individual_create ..." }
      end

      if client_side_validation?
        raise ArgumentError.new("\"watchlist_screening_individual_create_request\" is required and cannot be null") if watchlist_screening_individual_create_request.nil?
        unless (_watchlist_screening_individual_create_request = watchlist_screening_individual_create_request).nil?
          _watchlist_screening_individual_create_request.validate if _watchlist_screening_individual_create_request.is_a?(OpenApi::Validatable)
        end
      end

      # resource path
      local_var_path = "/watchlist_screening/individual/create"

      # header parameters
      header_params : Hash(String, String) = Hash(String, String).new
      # HTTP header "Accept" (if needed)
      header_params["Accept"] = @api_client.select_header_accept(["application/json"])
      # HTTP header "Content-Type"
      header_params["Content-Type"] = @api_client.select_header_content_type(["application/json"])

      # cookie parameters
      cookie_params : Hash(String, String) = Hash(String, String).new

      # query parameters
      query_params : Hash(String, (String | Array(String) | JSON::Any)) = Hash(String, (String | Array(String) | JSON::Any)).new

      # form parameters
      form_params : Array(Tuple(String, Crest::ParamsValue)) | Nil = nil

      # http body (model)
      post_body : IO | String | Nil = @api_client.encode(body: watchlist_screening_individual_create_request, content_type: header_params["Content-Type"]?) if !watchlist_screening_individual_create_request.nil?

      # auth_names
      auth_names = ["clientId", "plaidVersion", "secret"]

      @api_client.build_api_request(
        http_method: :"POST",
        path: local_var_path,
        operation: "PlaidApi.watchlist_screening_individual_create",
        post_body: post_body,
        auth_names: auth_names,
        header_params: header_params,
        cookie_params: cookie_params,
        query_params: query_params,
        form_params: form_params
      )
    end

    # Retrieve an individual watchlist screening
    # Retrieve a previously created individual watchlist screening
    # @required @param watchlist_screening_individual_get_request [Plaid::WatchlistScreeningIndividualGetRequest?]
    # @return [WatchlistScreeningIndividualGetResponse]
    def watchlist_screening_individual_get(
      *,
      watchlist_screening_individual_get_request : Plaid::WatchlistScreeningIndividualGetRequest? = nil
    ) : WatchlistScreeningIndividualGetResponse
      data, _status_code, _headers = watchlist_screening_individual_get_with_http_info(watchlist_screening_individual_get_request: watchlist_screening_individual_get_request)
      data
    end

    # Retrieve an individual watchlist screening
    # Retrieve a previously created individual watchlist screening
    # @required @param watchlist_screening_individual_get_request [Plaid::WatchlistScreeningIndividualGetRequest?]
    # @return [Tuple(WatchlistScreeningIndividualGetResponse, Integer, Hash)] WatchlistScreeningIndividualGetResponse, response status code and response headers
    def watchlist_screening_individual_get_with_http_info(
      *,
      watchlist_screening_individual_get_request : Plaid::WatchlistScreeningIndividualGetRequest? = nil
    ) : Tuple(WatchlistScreeningIndividualGetResponse, Int32, Hash(String, Array(String) | String))
      request = build_api_request_for_watchlist_screening_individual_get(watchlist_screening_individual_get_request: watchlist_screening_individual_get_request)

      body, status_code, headers = @api_client.execute_api_request(request)

      if debugging?
        Log.debug { "API called: PlaidApi#watchlist_screening_individual_get\nBody: #{body.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}" }
      end

      Tuple.new(WatchlistScreeningIndividualGetResponse.from_json(body), status_code, headers)
    end

    # Retrieve an individual watchlist screening
    # Retrieve a previously created individual watchlist screening
    # @required @param watchlist_screening_individual_get_request [Plaid::WatchlistScreeningIndividualGetRequest?]
    # @return nil
    def watchlist_screening_individual_get(
      *,
      watchlist_screening_individual_get_request : Plaid::WatchlistScreeningIndividualGetRequest? = nil,
      &block : Crest::Response ->
    ) : Nil
      build_api_request_for_watchlist_screening_individual_get(watchlist_screening_individual_get_request: watchlist_screening_individual_get_request).execute(&block)
    end

    # @return Crest::Request
    def build_api_request_for_watchlist_screening_individual_get(
      *,
      watchlist_screening_individual_get_request : Plaid::WatchlistScreeningIndividualGetRequest? = nil
    ) : Crest::Request
      if debugging?
        Log.debug { "Calling API: PlaidApi.watchlist_screening_individual_get ..." }
      end

      if client_side_validation?
        raise ArgumentError.new("\"watchlist_screening_individual_get_request\" is required and cannot be null") if watchlist_screening_individual_get_request.nil?
        unless (_watchlist_screening_individual_get_request = watchlist_screening_individual_get_request).nil?
          _watchlist_screening_individual_get_request.validate if _watchlist_screening_individual_get_request.is_a?(OpenApi::Validatable)
        end
      end

      # resource path
      local_var_path = "/watchlist_screening/individual/get"

      # header parameters
      header_params : Hash(String, String) = Hash(String, String).new
      # HTTP header "Accept" (if needed)
      header_params["Accept"] = @api_client.select_header_accept(["application/json"])
      # HTTP header "Content-Type"
      header_params["Content-Type"] = @api_client.select_header_content_type(["application/json"])

      # cookie parameters
      cookie_params : Hash(String, String) = Hash(String, String).new

      # query parameters
      query_params : Hash(String, (String | Array(String) | JSON::Any)) = Hash(String, (String | Array(String) | JSON::Any)).new

      # form parameters
      form_params : Array(Tuple(String, Crest::ParamsValue)) | Nil = nil

      # http body (model)
      post_body : IO | String | Nil = @api_client.encode(body: watchlist_screening_individual_get_request, content_type: header_params["Content-Type"]?) if !watchlist_screening_individual_get_request.nil?

      # auth_names
      auth_names = ["clientId", "plaidVersion", "secret"]

      @api_client.build_api_request(
        http_method: :"POST",
        path: local_var_path,
        operation: "PlaidApi.watchlist_screening_individual_get",
        post_body: post_body,
        auth_names: auth_names,
        header_params: header_params,
        cookie_params: cookie_params,
        query_params: query_params,
        form_params: form_params
      )
    end

    # List history for individual watchlist screenings
    # List all changes to the individual watchlist screening in reverse-chronological order. If the watchlist screening has not been edited, no history will be returned.
    # @required @param watchlist_screening_individual_history_list_request [Plaid::WatchlistScreeningIndividualHistoryListRequest?]
    # @return [WatchlistScreeningIndividualHistoryListResponse]
    def watchlist_screening_individual_history_list(
      *,
      watchlist_screening_individual_history_list_request : Plaid::WatchlistScreeningIndividualHistoryListRequest? = nil
    ) : WatchlistScreeningIndividualHistoryListResponse
      data, _status_code, _headers = watchlist_screening_individual_history_list_with_http_info(watchlist_screening_individual_history_list_request: watchlist_screening_individual_history_list_request)
      data
    end

    # List history for individual watchlist screenings
    # List all changes to the individual watchlist screening in reverse-chronological order. If the watchlist screening has not been edited, no history will be returned.
    # @required @param watchlist_screening_individual_history_list_request [Plaid::WatchlistScreeningIndividualHistoryListRequest?]
    # @return [Tuple(WatchlistScreeningIndividualHistoryListResponse, Integer, Hash)] WatchlistScreeningIndividualHistoryListResponse, response status code and response headers
    def watchlist_screening_individual_history_list_with_http_info(
      *,
      watchlist_screening_individual_history_list_request : Plaid::WatchlistScreeningIndividualHistoryListRequest? = nil
    ) : Tuple(WatchlistScreeningIndividualHistoryListResponse, Int32, Hash(String, Array(String) | String))
      request = build_api_request_for_watchlist_screening_individual_history_list(watchlist_screening_individual_history_list_request: watchlist_screening_individual_history_list_request)

      body, status_code, headers = @api_client.execute_api_request(request)

      if debugging?
        Log.debug { "API called: PlaidApi#watchlist_screening_individual_history_list\nBody: #{body.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}" }
      end

      Tuple.new(WatchlistScreeningIndividualHistoryListResponse.from_json(body), status_code, headers)
    end

    # List history for individual watchlist screenings
    # List all changes to the individual watchlist screening in reverse-chronological order. If the watchlist screening has not been edited, no history will be returned.
    # @required @param watchlist_screening_individual_history_list_request [Plaid::WatchlistScreeningIndividualHistoryListRequest?]
    # @return nil
    def watchlist_screening_individual_history_list(
      *,
      watchlist_screening_individual_history_list_request : Plaid::WatchlistScreeningIndividualHistoryListRequest? = nil,
      &block : Crest::Response ->
    ) : Nil
      build_api_request_for_watchlist_screening_individual_history_list(watchlist_screening_individual_history_list_request: watchlist_screening_individual_history_list_request).execute(&block)
    end

    # @return Crest::Request
    def build_api_request_for_watchlist_screening_individual_history_list(
      *,
      watchlist_screening_individual_history_list_request : Plaid::WatchlistScreeningIndividualHistoryListRequest? = nil
    ) : Crest::Request
      if debugging?
        Log.debug { "Calling API: PlaidApi.watchlist_screening_individual_history_list ..." }
      end

      if client_side_validation?
        raise ArgumentError.new("\"watchlist_screening_individual_history_list_request\" is required and cannot be null") if watchlist_screening_individual_history_list_request.nil?
        unless (_watchlist_screening_individual_history_list_request = watchlist_screening_individual_history_list_request).nil?
          _watchlist_screening_individual_history_list_request.validate if _watchlist_screening_individual_history_list_request.is_a?(OpenApi::Validatable)
        end
      end

      # resource path
      local_var_path = "/watchlist_screening/individual/history/list"

      # header parameters
      header_params : Hash(String, String) = Hash(String, String).new
      # HTTP header "Accept" (if needed)
      header_params["Accept"] = @api_client.select_header_accept(["application/json"])
      # HTTP header "Content-Type"
      header_params["Content-Type"] = @api_client.select_header_content_type(["application/json"])

      # cookie parameters
      cookie_params : Hash(String, String) = Hash(String, String).new

      # query parameters
      query_params : Hash(String, (String | Array(String) | JSON::Any)) = Hash(String, (String | Array(String) | JSON::Any)).new

      # form parameters
      form_params : Array(Tuple(String, Crest::ParamsValue)) | Nil = nil

      # http body (model)
      post_body : IO | String | Nil = @api_client.encode(body: watchlist_screening_individual_history_list_request, content_type: header_params["Content-Type"]?) if !watchlist_screening_individual_history_list_request.nil?

      # auth_names
      auth_names = ["clientId", "plaidVersion", "secret"]

      @api_client.build_api_request(
        http_method: :"POST",
        path: local_var_path,
        operation: "PlaidApi.watchlist_screening_individual_history_list",
        post_body: post_body,
        auth_names: auth_names,
        header_params: header_params,
        cookie_params: cookie_params,
        query_params: query_params,
        form_params: form_params
      )
    end

    # List hits for individual watchlist screening
    # List all hits found by Plaid for a particular individual watchlist screening.
    # @required @param watchlist_screening_individual_hit_list_request [Plaid::WatchlistScreeningIndividualHitListRequest?]
    # @return [WatchlistScreeningIndividualHitListResponse]
    def watchlist_screening_individual_hit_list(
      *,
      watchlist_screening_individual_hit_list_request : Plaid::WatchlistScreeningIndividualHitListRequest? = nil
    ) : WatchlistScreeningIndividualHitListResponse
      data, _status_code, _headers = watchlist_screening_individual_hit_list_with_http_info(watchlist_screening_individual_hit_list_request: watchlist_screening_individual_hit_list_request)
      data
    end

    # List hits for individual watchlist screening
    # List all hits found by Plaid for a particular individual watchlist screening.
    # @required @param watchlist_screening_individual_hit_list_request [Plaid::WatchlistScreeningIndividualHitListRequest?]
    # @return [Tuple(WatchlistScreeningIndividualHitListResponse, Integer, Hash)] WatchlistScreeningIndividualHitListResponse, response status code and response headers
    def watchlist_screening_individual_hit_list_with_http_info(
      *,
      watchlist_screening_individual_hit_list_request : Plaid::WatchlistScreeningIndividualHitListRequest? = nil
    ) : Tuple(WatchlistScreeningIndividualHitListResponse, Int32, Hash(String, Array(String) | String))
      request = build_api_request_for_watchlist_screening_individual_hit_list(watchlist_screening_individual_hit_list_request: watchlist_screening_individual_hit_list_request)

      body, status_code, headers = @api_client.execute_api_request(request)

      if debugging?
        Log.debug { "API called: PlaidApi#watchlist_screening_individual_hit_list\nBody: #{body.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}" }
      end

      Tuple.new(WatchlistScreeningIndividualHitListResponse.from_json(body), status_code, headers)
    end

    # List hits for individual watchlist screening
    # List all hits found by Plaid for a particular individual watchlist screening.
    # @required @param watchlist_screening_individual_hit_list_request [Plaid::WatchlistScreeningIndividualHitListRequest?]
    # @return nil
    def watchlist_screening_individual_hit_list(
      *,
      watchlist_screening_individual_hit_list_request : Plaid::WatchlistScreeningIndividualHitListRequest? = nil,
      &block : Crest::Response ->
    ) : Nil
      build_api_request_for_watchlist_screening_individual_hit_list(watchlist_screening_individual_hit_list_request: watchlist_screening_individual_hit_list_request).execute(&block)
    end

    # @return Crest::Request
    def build_api_request_for_watchlist_screening_individual_hit_list(
      *,
      watchlist_screening_individual_hit_list_request : Plaid::WatchlistScreeningIndividualHitListRequest? = nil
    ) : Crest::Request
      if debugging?
        Log.debug { "Calling API: PlaidApi.watchlist_screening_individual_hit_list ..." }
      end

      if client_side_validation?
        raise ArgumentError.new("\"watchlist_screening_individual_hit_list_request\" is required and cannot be null") if watchlist_screening_individual_hit_list_request.nil?
        unless (_watchlist_screening_individual_hit_list_request = watchlist_screening_individual_hit_list_request).nil?
          _watchlist_screening_individual_hit_list_request.validate if _watchlist_screening_individual_hit_list_request.is_a?(OpenApi::Validatable)
        end
      end

      # resource path
      local_var_path = "/watchlist_screening/individual/hit/list"

      # header parameters
      header_params : Hash(String, String) = Hash(String, String).new
      # HTTP header "Accept" (if needed)
      header_params["Accept"] = @api_client.select_header_accept(["application/json"])
      # HTTP header "Content-Type"
      header_params["Content-Type"] = @api_client.select_header_content_type(["application/json"])

      # cookie parameters
      cookie_params : Hash(String, String) = Hash(String, String).new

      # query parameters
      query_params : Hash(String, (String | Array(String) | JSON::Any)) = Hash(String, (String | Array(String) | JSON::Any)).new

      # form parameters
      form_params : Array(Tuple(String, Crest::ParamsValue)) | Nil = nil

      # http body (model)
      post_body : IO | String | Nil = @api_client.encode(body: watchlist_screening_individual_hit_list_request, content_type: header_params["Content-Type"]?) if !watchlist_screening_individual_hit_list_request.nil?

      # auth_names
      auth_names = ["clientId", "plaidVersion", "secret"]

      @api_client.build_api_request(
        http_method: :"POST",
        path: local_var_path,
        operation: "PlaidApi.watchlist_screening_individual_hit_list",
        post_body: post_body,
        auth_names: auth_names,
        header_params: header_params,
        cookie_params: cookie_params,
        query_params: query_params,
        form_params: form_params
      )
    end

    # List Individual Watchlist Screenings
    # List previously created watchlist screenings for individuals
    # @required @param watchlist_screening_individual_list_request [Plaid::WatchlistScreeningIndividualListRequest?]
    # @return [WatchlistScreeningIndividualListResponse]
    def watchlist_screening_individual_list(
      *,
      watchlist_screening_individual_list_request : Plaid::WatchlistScreeningIndividualListRequest? = nil
    ) : WatchlistScreeningIndividualListResponse
      data, _status_code, _headers = watchlist_screening_individual_list_with_http_info(watchlist_screening_individual_list_request: watchlist_screening_individual_list_request)
      data
    end

    # List Individual Watchlist Screenings
    # List previously created watchlist screenings for individuals
    # @required @param watchlist_screening_individual_list_request [Plaid::WatchlistScreeningIndividualListRequest?]
    # @return [Tuple(WatchlistScreeningIndividualListResponse, Integer, Hash)] WatchlistScreeningIndividualListResponse, response status code and response headers
    def watchlist_screening_individual_list_with_http_info(
      *,
      watchlist_screening_individual_list_request : Plaid::WatchlistScreeningIndividualListRequest? = nil
    ) : Tuple(WatchlistScreeningIndividualListResponse, Int32, Hash(String, Array(String) | String))
      request = build_api_request_for_watchlist_screening_individual_list(watchlist_screening_individual_list_request: watchlist_screening_individual_list_request)

      body, status_code, headers = @api_client.execute_api_request(request)

      if debugging?
        Log.debug { "API called: PlaidApi#watchlist_screening_individual_list\nBody: #{body.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}" }
      end

      Tuple.new(WatchlistScreeningIndividualListResponse.from_json(body), status_code, headers)
    end

    # List Individual Watchlist Screenings
    # List previously created watchlist screenings for individuals
    # @required @param watchlist_screening_individual_list_request [Plaid::WatchlistScreeningIndividualListRequest?]
    # @return nil
    def watchlist_screening_individual_list(
      *,
      watchlist_screening_individual_list_request : Plaid::WatchlistScreeningIndividualListRequest? = nil,
      &block : Crest::Response ->
    ) : Nil
      build_api_request_for_watchlist_screening_individual_list(watchlist_screening_individual_list_request: watchlist_screening_individual_list_request).execute(&block)
    end

    # @return Crest::Request
    def build_api_request_for_watchlist_screening_individual_list(
      *,
      watchlist_screening_individual_list_request : Plaid::WatchlistScreeningIndividualListRequest? = nil
    ) : Crest::Request
      if debugging?
        Log.debug { "Calling API: PlaidApi.watchlist_screening_individual_list ..." }
      end

      if client_side_validation?
        raise ArgumentError.new("\"watchlist_screening_individual_list_request\" is required and cannot be null") if watchlist_screening_individual_list_request.nil?
        unless (_watchlist_screening_individual_list_request = watchlist_screening_individual_list_request).nil?
          _watchlist_screening_individual_list_request.validate if _watchlist_screening_individual_list_request.is_a?(OpenApi::Validatable)
        end
      end

      # resource path
      local_var_path = "/watchlist_screening/individual/list"

      # header parameters
      header_params : Hash(String, String) = Hash(String, String).new
      # HTTP header "Accept" (if needed)
      header_params["Accept"] = @api_client.select_header_accept(["application/json"])
      # HTTP header "Content-Type"
      header_params["Content-Type"] = @api_client.select_header_content_type(["application/json"])

      # cookie parameters
      cookie_params : Hash(String, String) = Hash(String, String).new

      # query parameters
      query_params : Hash(String, (String | Array(String) | JSON::Any)) = Hash(String, (String | Array(String) | JSON::Any)).new

      # form parameters
      form_params : Array(Tuple(String, Crest::ParamsValue)) | Nil = nil

      # http body (model)
      post_body : IO | String | Nil = @api_client.encode(body: watchlist_screening_individual_list_request, content_type: header_params["Content-Type"]?) if !watchlist_screening_individual_list_request.nil?

      # auth_names
      auth_names = ["clientId", "plaidVersion", "secret"]

      @api_client.build_api_request(
        http_method: :"POST",
        path: local_var_path,
        operation: "PlaidApi.watchlist_screening_individual_list",
        post_body: post_body,
        auth_names: auth_names,
        header_params: header_params,
        cookie_params: cookie_params,
        query_params: query_params,
        form_params: form_params
      )
    end

    # Get individual watchlist screening program
    # Get an individual watchlist screening program
    # @required @param watchlist_screening_individual_program_get_request [Plaid::WatchlistScreeningIndividualProgramGetRequest?]
    # @return [WatchlistScreeningIndividualProgramGetResponse]
    def watchlist_screening_individual_program_get(
      *,
      watchlist_screening_individual_program_get_request : Plaid::WatchlistScreeningIndividualProgramGetRequest? = nil
    ) : WatchlistScreeningIndividualProgramGetResponse
      data, _status_code, _headers = watchlist_screening_individual_program_get_with_http_info(watchlist_screening_individual_program_get_request: watchlist_screening_individual_program_get_request)
      data
    end

    # Get individual watchlist screening program
    # Get an individual watchlist screening program
    # @required @param watchlist_screening_individual_program_get_request [Plaid::WatchlistScreeningIndividualProgramGetRequest?]
    # @return [Tuple(WatchlistScreeningIndividualProgramGetResponse, Integer, Hash)] WatchlistScreeningIndividualProgramGetResponse, response status code and response headers
    def watchlist_screening_individual_program_get_with_http_info(
      *,
      watchlist_screening_individual_program_get_request : Plaid::WatchlistScreeningIndividualProgramGetRequest? = nil
    ) : Tuple(WatchlistScreeningIndividualProgramGetResponse, Int32, Hash(String, Array(String) | String))
      request = build_api_request_for_watchlist_screening_individual_program_get(watchlist_screening_individual_program_get_request: watchlist_screening_individual_program_get_request)

      body, status_code, headers = @api_client.execute_api_request(request)

      if debugging?
        Log.debug { "API called: PlaidApi#watchlist_screening_individual_program_get\nBody: #{body.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}" }
      end

      Tuple.new(WatchlistScreeningIndividualProgramGetResponse.from_json(body), status_code, headers)
    end

    # Get individual watchlist screening program
    # Get an individual watchlist screening program
    # @required @param watchlist_screening_individual_program_get_request [Plaid::WatchlistScreeningIndividualProgramGetRequest?]
    # @return nil
    def watchlist_screening_individual_program_get(
      *,
      watchlist_screening_individual_program_get_request : Plaid::WatchlistScreeningIndividualProgramGetRequest? = nil,
      &block : Crest::Response ->
    ) : Nil
      build_api_request_for_watchlist_screening_individual_program_get(watchlist_screening_individual_program_get_request: watchlist_screening_individual_program_get_request).execute(&block)
    end

    # @return Crest::Request
    def build_api_request_for_watchlist_screening_individual_program_get(
      *,
      watchlist_screening_individual_program_get_request : Plaid::WatchlistScreeningIndividualProgramGetRequest? = nil
    ) : Crest::Request
      if debugging?
        Log.debug { "Calling API: PlaidApi.watchlist_screening_individual_program_get ..." }
      end

      if client_side_validation?
        raise ArgumentError.new("\"watchlist_screening_individual_program_get_request\" is required and cannot be null") if watchlist_screening_individual_program_get_request.nil?
        unless (_watchlist_screening_individual_program_get_request = watchlist_screening_individual_program_get_request).nil?
          _watchlist_screening_individual_program_get_request.validate if _watchlist_screening_individual_program_get_request.is_a?(OpenApi::Validatable)
        end
      end

      # resource path
      local_var_path = "/watchlist_screening/individual/program/get"

      # header parameters
      header_params : Hash(String, String) = Hash(String, String).new
      # HTTP header "Accept" (if needed)
      header_params["Accept"] = @api_client.select_header_accept(["application/json"])
      # HTTP header "Content-Type"
      header_params["Content-Type"] = @api_client.select_header_content_type(["application/json"])

      # cookie parameters
      cookie_params : Hash(String, String) = Hash(String, String).new

      # query parameters
      query_params : Hash(String, (String | Array(String) | JSON::Any)) = Hash(String, (String | Array(String) | JSON::Any)).new

      # form parameters
      form_params : Array(Tuple(String, Crest::ParamsValue)) | Nil = nil

      # http body (model)
      post_body : IO | String | Nil = @api_client.encode(body: watchlist_screening_individual_program_get_request, content_type: header_params["Content-Type"]?) if !watchlist_screening_individual_program_get_request.nil?

      # auth_names
      auth_names = ["clientId", "plaidVersion", "secret"]

      @api_client.build_api_request(
        http_method: :"POST",
        path: local_var_path,
        operation: "PlaidApi.watchlist_screening_individual_program_get",
        post_body: post_body,
        auth_names: auth_names,
        header_params: header_params,
        cookie_params: cookie_params,
        query_params: query_params,
        form_params: form_params
      )
    end

    # List individual watchlist screening programs
    # List all individual watchlist screening programs
    # @required @param watchlist_screening_individual_program_list_request [Plaid::WatchlistScreeningIndividualProgramListRequest?]
    # @return [WatchlistScreeningIndividualProgramListResponse]
    def watchlist_screening_individual_program_list(
      *,
      watchlist_screening_individual_program_list_request : Plaid::WatchlistScreeningIndividualProgramListRequest? = nil
    ) : WatchlistScreeningIndividualProgramListResponse
      data, _status_code, _headers = watchlist_screening_individual_program_list_with_http_info(watchlist_screening_individual_program_list_request: watchlist_screening_individual_program_list_request)
      data
    end

    # List individual watchlist screening programs
    # List all individual watchlist screening programs
    # @required @param watchlist_screening_individual_program_list_request [Plaid::WatchlistScreeningIndividualProgramListRequest?]
    # @return [Tuple(WatchlistScreeningIndividualProgramListResponse, Integer, Hash)] WatchlistScreeningIndividualProgramListResponse, response status code and response headers
    def watchlist_screening_individual_program_list_with_http_info(
      *,
      watchlist_screening_individual_program_list_request : Plaid::WatchlistScreeningIndividualProgramListRequest? = nil
    ) : Tuple(WatchlistScreeningIndividualProgramListResponse, Int32, Hash(String, Array(String) | String))
      request = build_api_request_for_watchlist_screening_individual_program_list(watchlist_screening_individual_program_list_request: watchlist_screening_individual_program_list_request)

      body, status_code, headers = @api_client.execute_api_request(request)

      if debugging?
        Log.debug { "API called: PlaidApi#watchlist_screening_individual_program_list\nBody: #{body.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}" }
      end

      Tuple.new(WatchlistScreeningIndividualProgramListResponse.from_json(body), status_code, headers)
    end

    # List individual watchlist screening programs
    # List all individual watchlist screening programs
    # @required @param watchlist_screening_individual_program_list_request [Plaid::WatchlistScreeningIndividualProgramListRequest?]
    # @return nil
    def watchlist_screening_individual_program_list(
      *,
      watchlist_screening_individual_program_list_request : Plaid::WatchlistScreeningIndividualProgramListRequest? = nil,
      &block : Crest::Response ->
    ) : Nil
      build_api_request_for_watchlist_screening_individual_program_list(watchlist_screening_individual_program_list_request: watchlist_screening_individual_program_list_request).execute(&block)
    end

    # @return Crest::Request
    def build_api_request_for_watchlist_screening_individual_program_list(
      *,
      watchlist_screening_individual_program_list_request : Plaid::WatchlistScreeningIndividualProgramListRequest? = nil
    ) : Crest::Request
      if debugging?
        Log.debug { "Calling API: PlaidApi.watchlist_screening_individual_program_list ..." }
      end

      if client_side_validation?
        raise ArgumentError.new("\"watchlist_screening_individual_program_list_request\" is required and cannot be null") if watchlist_screening_individual_program_list_request.nil?
        unless (_watchlist_screening_individual_program_list_request = watchlist_screening_individual_program_list_request).nil?
          _watchlist_screening_individual_program_list_request.validate if _watchlist_screening_individual_program_list_request.is_a?(OpenApi::Validatable)
        end
      end

      # resource path
      local_var_path = "/watchlist_screening/individual/program/list"

      # header parameters
      header_params : Hash(String, String) = Hash(String, String).new
      # HTTP header "Accept" (if needed)
      header_params["Accept"] = @api_client.select_header_accept(["application/json"])
      # HTTP header "Content-Type"
      header_params["Content-Type"] = @api_client.select_header_content_type(["application/json"])

      # cookie parameters
      cookie_params : Hash(String, String) = Hash(String, String).new

      # query parameters
      query_params : Hash(String, (String | Array(String) | JSON::Any)) = Hash(String, (String | Array(String) | JSON::Any)).new

      # form parameters
      form_params : Array(Tuple(String, Crest::ParamsValue)) | Nil = nil

      # http body (model)
      post_body : IO | String | Nil = @api_client.encode(body: watchlist_screening_individual_program_list_request, content_type: header_params["Content-Type"]?) if !watchlist_screening_individual_program_list_request.nil?

      # auth_names
      auth_names = ["clientId", "plaidVersion", "secret"]

      @api_client.build_api_request(
        http_method: :"POST",
        path: local_var_path,
        operation: "PlaidApi.watchlist_screening_individual_program_list",
        post_body: post_body,
        auth_names: auth_names,
        header_params: header_params,
        cookie_params: cookie_params,
        query_params: query_params,
        form_params: form_params
      )
    end

    # Create a review for an individual watchlist screening
    # Create a review for the individual watchlist screening. Reviews are compliance reports created by users in your organization regarding the relevance of potential hits found by Plaid.
    # @required @param watchlist_screening_individual_review_create_request [Plaid::WatchlistScreeningIndividualReviewCreateRequest?]
    # @return [WatchlistScreeningIndividualReviewCreateResponse]
    def watchlist_screening_individual_review_create(
      *,
      watchlist_screening_individual_review_create_request : Plaid::WatchlistScreeningIndividualReviewCreateRequest? = nil
    ) : WatchlistScreeningIndividualReviewCreateResponse
      data, _status_code, _headers = watchlist_screening_individual_review_create_with_http_info(watchlist_screening_individual_review_create_request: watchlist_screening_individual_review_create_request)
      data
    end

    # Create a review for an individual watchlist screening
    # Create a review for the individual watchlist screening. Reviews are compliance reports created by users in your organization regarding the relevance of potential hits found by Plaid.
    # @required @param watchlist_screening_individual_review_create_request [Plaid::WatchlistScreeningIndividualReviewCreateRequest?]
    # @return [Tuple(WatchlistScreeningIndividualReviewCreateResponse, Integer, Hash)] WatchlistScreeningIndividualReviewCreateResponse, response status code and response headers
    def watchlist_screening_individual_review_create_with_http_info(
      *,
      watchlist_screening_individual_review_create_request : Plaid::WatchlistScreeningIndividualReviewCreateRequest? = nil
    ) : Tuple(WatchlistScreeningIndividualReviewCreateResponse, Int32, Hash(String, Array(String) | String))
      request = build_api_request_for_watchlist_screening_individual_review_create(watchlist_screening_individual_review_create_request: watchlist_screening_individual_review_create_request)

      body, status_code, headers = @api_client.execute_api_request(request)

      if debugging?
        Log.debug { "API called: PlaidApi#watchlist_screening_individual_review_create\nBody: #{body.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}" }
      end

      Tuple.new(WatchlistScreeningIndividualReviewCreateResponse.from_json(body), status_code, headers)
    end

    # Create a review for an individual watchlist screening
    # Create a review for the individual watchlist screening. Reviews are compliance reports created by users in your organization regarding the relevance of potential hits found by Plaid.
    # @required @param watchlist_screening_individual_review_create_request [Plaid::WatchlistScreeningIndividualReviewCreateRequest?]
    # @return nil
    def watchlist_screening_individual_review_create(
      *,
      watchlist_screening_individual_review_create_request : Plaid::WatchlistScreeningIndividualReviewCreateRequest? = nil,
      &block : Crest::Response ->
    ) : Nil
      build_api_request_for_watchlist_screening_individual_review_create(watchlist_screening_individual_review_create_request: watchlist_screening_individual_review_create_request).execute(&block)
    end

    # @return Crest::Request
    def build_api_request_for_watchlist_screening_individual_review_create(
      *,
      watchlist_screening_individual_review_create_request : Plaid::WatchlistScreeningIndividualReviewCreateRequest? = nil
    ) : Crest::Request
      if debugging?
        Log.debug { "Calling API: PlaidApi.watchlist_screening_individual_review_create ..." }
      end

      if client_side_validation?
        raise ArgumentError.new("\"watchlist_screening_individual_review_create_request\" is required and cannot be null") if watchlist_screening_individual_review_create_request.nil?
        unless (_watchlist_screening_individual_review_create_request = watchlist_screening_individual_review_create_request).nil?
          _watchlist_screening_individual_review_create_request.validate if _watchlist_screening_individual_review_create_request.is_a?(OpenApi::Validatable)
        end
      end

      # resource path
      local_var_path = "/watchlist_screening/individual/review/create"

      # header parameters
      header_params : Hash(String, String) = Hash(String, String).new
      # HTTP header "Accept" (if needed)
      header_params["Accept"] = @api_client.select_header_accept(["application/json"])
      # HTTP header "Content-Type"
      header_params["Content-Type"] = @api_client.select_header_content_type(["application/json"])

      # cookie parameters
      cookie_params : Hash(String, String) = Hash(String, String).new

      # query parameters
      query_params : Hash(String, (String | Array(String) | JSON::Any)) = Hash(String, (String | Array(String) | JSON::Any)).new

      # form parameters
      form_params : Array(Tuple(String, Crest::ParamsValue)) | Nil = nil

      # http body (model)
      post_body : IO | String | Nil = @api_client.encode(body: watchlist_screening_individual_review_create_request, content_type: header_params["Content-Type"]?) if !watchlist_screening_individual_review_create_request.nil?

      # auth_names
      auth_names = ["clientId", "plaidVersion", "secret"]

      @api_client.build_api_request(
        http_method: :"POST",
        path: local_var_path,
        operation: "PlaidApi.watchlist_screening_individual_review_create",
        post_body: post_body,
        auth_names: auth_names,
        header_params: header_params,
        cookie_params: cookie_params,
        query_params: query_params,
        form_params: form_params
      )
    end

    # List reviews for individual watchlist screenings
    # List all reviews for the individual watchlist screening.
    # @required @param watchlist_screening_individual_review_list_request [Plaid::WatchlistScreeningIndividualReviewListRequest?]
    # @return [WatchlistScreeningIndividualReviewListResponse]
    def watchlist_screening_individual_review_list(
      *,
      watchlist_screening_individual_review_list_request : Plaid::WatchlistScreeningIndividualReviewListRequest? = nil
    ) : WatchlistScreeningIndividualReviewListResponse
      data, _status_code, _headers = watchlist_screening_individual_review_list_with_http_info(watchlist_screening_individual_review_list_request: watchlist_screening_individual_review_list_request)
      data
    end

    # List reviews for individual watchlist screenings
    # List all reviews for the individual watchlist screening.
    # @required @param watchlist_screening_individual_review_list_request [Plaid::WatchlistScreeningIndividualReviewListRequest?]
    # @return [Tuple(WatchlistScreeningIndividualReviewListResponse, Integer, Hash)] WatchlistScreeningIndividualReviewListResponse, response status code and response headers
    def watchlist_screening_individual_review_list_with_http_info(
      *,
      watchlist_screening_individual_review_list_request : Plaid::WatchlistScreeningIndividualReviewListRequest? = nil
    ) : Tuple(WatchlistScreeningIndividualReviewListResponse, Int32, Hash(String, Array(String) | String))
      request = build_api_request_for_watchlist_screening_individual_review_list(watchlist_screening_individual_review_list_request: watchlist_screening_individual_review_list_request)

      body, status_code, headers = @api_client.execute_api_request(request)

      if debugging?
        Log.debug { "API called: PlaidApi#watchlist_screening_individual_review_list\nBody: #{body.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}" }
      end

      Tuple.new(WatchlistScreeningIndividualReviewListResponse.from_json(body), status_code, headers)
    end

    # List reviews for individual watchlist screenings
    # List all reviews for the individual watchlist screening.
    # @required @param watchlist_screening_individual_review_list_request [Plaid::WatchlistScreeningIndividualReviewListRequest?]
    # @return nil
    def watchlist_screening_individual_review_list(
      *,
      watchlist_screening_individual_review_list_request : Plaid::WatchlistScreeningIndividualReviewListRequest? = nil,
      &block : Crest::Response ->
    ) : Nil
      build_api_request_for_watchlist_screening_individual_review_list(watchlist_screening_individual_review_list_request: watchlist_screening_individual_review_list_request).execute(&block)
    end

    # @return Crest::Request
    def build_api_request_for_watchlist_screening_individual_review_list(
      *,
      watchlist_screening_individual_review_list_request : Plaid::WatchlistScreeningIndividualReviewListRequest? = nil
    ) : Crest::Request
      if debugging?
        Log.debug { "Calling API: PlaidApi.watchlist_screening_individual_review_list ..." }
      end

      if client_side_validation?
        raise ArgumentError.new("\"watchlist_screening_individual_review_list_request\" is required and cannot be null") if watchlist_screening_individual_review_list_request.nil?
        unless (_watchlist_screening_individual_review_list_request = watchlist_screening_individual_review_list_request).nil?
          _watchlist_screening_individual_review_list_request.validate if _watchlist_screening_individual_review_list_request.is_a?(OpenApi::Validatable)
        end
      end

      # resource path
      local_var_path = "/watchlist_screening/individual/review/list"

      # header parameters
      header_params : Hash(String, String) = Hash(String, String).new
      # HTTP header "Accept" (if needed)
      header_params["Accept"] = @api_client.select_header_accept(["application/json"])
      # HTTP header "Content-Type"
      header_params["Content-Type"] = @api_client.select_header_content_type(["application/json"])

      # cookie parameters
      cookie_params : Hash(String, String) = Hash(String, String).new

      # query parameters
      query_params : Hash(String, (String | Array(String) | JSON::Any)) = Hash(String, (String | Array(String) | JSON::Any)).new

      # form parameters
      form_params : Array(Tuple(String, Crest::ParamsValue)) | Nil = nil

      # http body (model)
      post_body : IO | String | Nil = @api_client.encode(body: watchlist_screening_individual_review_list_request, content_type: header_params["Content-Type"]?) if !watchlist_screening_individual_review_list_request.nil?

      # auth_names
      auth_names = ["clientId", "plaidVersion", "secret"]

      @api_client.build_api_request(
        http_method: :"POST",
        path: local_var_path,
        operation: "PlaidApi.watchlist_screening_individual_review_list",
        post_body: post_body,
        auth_names: auth_names,
        header_params: header_params,
        cookie_params: cookie_params,
        query_params: query_params,
        form_params: form_params
      )
    end

    # Update individual watchlist screening
    # Update a specific individual watchlist screening. This endpoint can be used to add additional customer information, correct outdated information, add a reference id, assign the individual to a reviewer, and update which program it is associated with. Please note that you may not update `search_terms` and `status` at the same time since editing `search_terms` may trigger an automatic `status` change.
    # @required @param watchlist_screening_individual_update_request [Plaid::WatchlistScreeningIndividualUpdateRequest?]
    # @return [WatchlistScreeningIndividualUpdateResponse]
    def watchlist_screening_individual_update(
      *,
      watchlist_screening_individual_update_request : Plaid::WatchlistScreeningIndividualUpdateRequest? = nil
    ) : WatchlistScreeningIndividualUpdateResponse
      data, _status_code, _headers = watchlist_screening_individual_update_with_http_info(watchlist_screening_individual_update_request: watchlist_screening_individual_update_request)
      data
    end

    # Update individual watchlist screening
    # Update a specific individual watchlist screening. This endpoint can be used to add additional customer information, correct outdated information, add a reference id, assign the individual to a reviewer, and update which program it is associated with. Please note that you may not update &#x60;search_terms&#x60; and &#x60;status&#x60; at the same time since editing &#x60;search_terms&#x60; may trigger an automatic &#x60;status&#x60; change.
    # @required @param watchlist_screening_individual_update_request [Plaid::WatchlistScreeningIndividualUpdateRequest?]
    # @return [Tuple(WatchlistScreeningIndividualUpdateResponse, Integer, Hash)] WatchlistScreeningIndividualUpdateResponse, response status code and response headers
    def watchlist_screening_individual_update_with_http_info(
      *,
      watchlist_screening_individual_update_request : Plaid::WatchlistScreeningIndividualUpdateRequest? = nil
    ) : Tuple(WatchlistScreeningIndividualUpdateResponse, Int32, Hash(String, Array(String) | String))
      request = build_api_request_for_watchlist_screening_individual_update(watchlist_screening_individual_update_request: watchlist_screening_individual_update_request)

      body, status_code, headers = @api_client.execute_api_request(request)

      if debugging?
        Log.debug { "API called: PlaidApi#watchlist_screening_individual_update\nBody: #{body.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}" }
      end

      Tuple.new(WatchlistScreeningIndividualUpdateResponse.from_json(body), status_code, headers)
    end

    # Update individual watchlist screening
    # Update a specific individual watchlist screening. This endpoint can be used to add additional customer information, correct outdated information, add a reference id, assign the individual to a reviewer, and update which program it is associated with. Please note that you may not update &#x60;search_terms&#x60; and &#x60;status&#x60; at the same time since editing &#x60;search_terms&#x60; may trigger an automatic &#x60;status&#x60; change.
    # @required @param watchlist_screening_individual_update_request [Plaid::WatchlistScreeningIndividualUpdateRequest?]
    # @return nil
    def watchlist_screening_individual_update(
      *,
      watchlist_screening_individual_update_request : Plaid::WatchlistScreeningIndividualUpdateRequest? = nil,
      &block : Crest::Response ->
    ) : Nil
      build_api_request_for_watchlist_screening_individual_update(watchlist_screening_individual_update_request: watchlist_screening_individual_update_request).execute(&block)
    end

    # @return Crest::Request
    def build_api_request_for_watchlist_screening_individual_update(
      *,
      watchlist_screening_individual_update_request : Plaid::WatchlistScreeningIndividualUpdateRequest? = nil
    ) : Crest::Request
      if debugging?
        Log.debug { "Calling API: PlaidApi.watchlist_screening_individual_update ..." }
      end

      if client_side_validation?
        raise ArgumentError.new("\"watchlist_screening_individual_update_request\" is required and cannot be null") if watchlist_screening_individual_update_request.nil?
        unless (_watchlist_screening_individual_update_request = watchlist_screening_individual_update_request).nil?
          _watchlist_screening_individual_update_request.validate if _watchlist_screening_individual_update_request.is_a?(OpenApi::Validatable)
        end
      end

      # resource path
      local_var_path = "/watchlist_screening/individual/update"

      # header parameters
      header_params : Hash(String, String) = Hash(String, String).new
      # HTTP header "Accept" (if needed)
      header_params["Accept"] = @api_client.select_header_accept(["application/json"])
      # HTTP header "Content-Type"
      header_params["Content-Type"] = @api_client.select_header_content_type(["application/json"])

      # cookie parameters
      cookie_params : Hash(String, String) = Hash(String, String).new

      # query parameters
      query_params : Hash(String, (String | Array(String) | JSON::Any)) = Hash(String, (String | Array(String) | JSON::Any)).new

      # form parameters
      form_params : Array(Tuple(String, Crest::ParamsValue)) | Nil = nil

      # http body (model)
      post_body : IO | String | Nil = @api_client.encode(body: watchlist_screening_individual_update_request, content_type: header_params["Content-Type"]?) if !watchlist_screening_individual_update_request.nil?

      # auth_names
      auth_names = ["clientId", "plaidVersion", "secret"]

      @api_client.build_api_request(
        http_method: :"POST",
        path: local_var_path,
        operation: "PlaidApi.watchlist_screening_individual_update",
        post_body: post_body,
        auth_names: auth_names,
        header_params: header_params,
        cookie_params: cookie_params,
        query_params: query_params,
        form_params: form_params
      )
    end

    # Get webhook verification key
    # Plaid signs all outgoing webhooks and provides JSON Web Tokens (JWTs) so that you can verify the authenticity of any incoming webhooks to your application. A message signature is included in the `Plaid-Verification` header.  The `/webhook_verification_key/get` endpoint provides a JSON Web Key (JWK) that can be used to verify a JWT.
    # @required @param webhook_verification_key_get_request [Plaid::WebhookVerificationKeyGetRequest?]
    # @return [WebhookVerificationKeyGetResponse]
    def webhook_verification_key_get(
      *,
      webhook_verification_key_get_request : Plaid::WebhookVerificationKeyGetRequest? = nil
    ) : WebhookVerificationKeyGetResponse
      data, _status_code, _headers = webhook_verification_key_get_with_http_info(webhook_verification_key_get_request: webhook_verification_key_get_request)
      data
    end

    # Get webhook verification key
    # Plaid signs all outgoing webhooks and provides JSON Web Tokens (JWTs) so that you can verify the authenticity of any incoming webhooks to your application. A message signature is included in the &#x60;Plaid-Verification&#x60; header.  The &#x60;/webhook_verification_key/get&#x60; endpoint provides a JSON Web Key (JWK) that can be used to verify a JWT.
    # @required @param webhook_verification_key_get_request [Plaid::WebhookVerificationKeyGetRequest?]
    # @return [Tuple(WebhookVerificationKeyGetResponse, Integer, Hash)] WebhookVerificationKeyGetResponse, response status code and response headers
    def webhook_verification_key_get_with_http_info(
      *,
      webhook_verification_key_get_request : Plaid::WebhookVerificationKeyGetRequest? = nil
    ) : Tuple(WebhookVerificationKeyGetResponse, Int32, Hash(String, Array(String) | String))
      request = build_api_request_for_webhook_verification_key_get(webhook_verification_key_get_request: webhook_verification_key_get_request)

      body, status_code, headers = @api_client.execute_api_request(request)

      if debugging?
        Log.debug { "API called: PlaidApi#webhook_verification_key_get\nBody: #{body.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}" }
      end

      Tuple.new(WebhookVerificationKeyGetResponse.from_json(body), status_code, headers)
    end

    # Get webhook verification key
    # Plaid signs all outgoing webhooks and provides JSON Web Tokens (JWTs) so that you can verify the authenticity of any incoming webhooks to your application. A message signature is included in the &#x60;Plaid-Verification&#x60; header.  The &#x60;/webhook_verification_key/get&#x60; endpoint provides a JSON Web Key (JWK) that can be used to verify a JWT.
    # @required @param webhook_verification_key_get_request [Plaid::WebhookVerificationKeyGetRequest?]
    # @return nil
    def webhook_verification_key_get(
      *,
      webhook_verification_key_get_request : Plaid::WebhookVerificationKeyGetRequest? = nil,
      &block : Crest::Response ->
    ) : Nil
      build_api_request_for_webhook_verification_key_get(webhook_verification_key_get_request: webhook_verification_key_get_request).execute(&block)
    end

    # @return Crest::Request
    def build_api_request_for_webhook_verification_key_get(
      *,
      webhook_verification_key_get_request : Plaid::WebhookVerificationKeyGetRequest? = nil
    ) : Crest::Request
      if debugging?
        Log.debug { "Calling API: PlaidApi.webhook_verification_key_get ..." }
      end

      if client_side_validation?
        raise ArgumentError.new("\"webhook_verification_key_get_request\" is required and cannot be null") if webhook_verification_key_get_request.nil?
        unless (_webhook_verification_key_get_request = webhook_verification_key_get_request).nil?
          _webhook_verification_key_get_request.validate if _webhook_verification_key_get_request.is_a?(OpenApi::Validatable)
        end
      end

      # resource path
      local_var_path = "/webhook_verification_key/get"

      # header parameters
      header_params : Hash(String, String) = Hash(String, String).new
      # HTTP header "Accept" (if needed)
      header_params["Accept"] = @api_client.select_header_accept(["application/json"])
      # HTTP header "Content-Type"
      header_params["Content-Type"] = @api_client.select_header_content_type(["application/json"])

      # cookie parameters
      cookie_params : Hash(String, String) = Hash(String, String).new

      # query parameters
      query_params : Hash(String, (String | Array(String) | JSON::Any)) = Hash(String, (String | Array(String) | JSON::Any)).new

      # form parameters
      form_params : Array(Tuple(String, Crest::ParamsValue)) | Nil = nil

      # http body (model)
      post_body : IO | String | Nil = @api_client.encode(body: webhook_verification_key_get_request, content_type: header_params["Content-Type"]?) if !webhook_verification_key_get_request.nil?

      # auth_names
      auth_names = ["clientId", "plaidVersion", "secret"]

      @api_client.build_api_request(
        http_method: :"POST",
        path: local_var_path,
        operation: "PlaidApi.webhook_verification_key_get",
        post_body: post_body,
        auth_names: auth_names,
        header_params: header_params,
        cookie_params: cookie_params,
        query_params: query_params,
        form_params: form_params
      )
    end
  end
end
