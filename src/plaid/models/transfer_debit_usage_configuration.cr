#  The Plaid API
#
# The Plaid REST API. Please see https://plaid.com/docs/api for more details.
#
# The version of the OpenAPI document: 2020-09-14_1.474.3
#
# Generated by: https://openapi-generator.tech
#

require "../../core"

require "./ach_class"
require "./originator_expected_transfer_frequency"

module Plaid
  # Specifies the originator's expected usage of debits. For all dollar amounts, use a decimal string with two digits of precision e.g. \"10.00\". This field is required if the originator is expected to process debit transfers.
  class TransferDebitUsageConfiguration
    include JSON::Serializable
    include JSON::Serializable::Unmapped
    include OpenApi::Validatable
    include OpenApi::Json

    # Required Properties

    @[JSON::Field(key: "expected_frequency", type: Plaid::OriginatorExpectedTransferFrequency?, default: nil, required: true, nullable: false, emit_null: false)]
    getter expected_frequency : Plaid::OriginatorExpectedTransferFrequency? = nil

    # The originator’s expected highest amount for a single debit transfer.
    @[JSON::Field(key: "expected_highest_amount", type: String?, default: nil, required: true, nullable: false, emit_null: false)]
    getter expected_highest_amount : String? = nil

    # The originator’s expected average amount per debit.
    @[JSON::Field(key: "expected_average_amount", type: String?, default: nil, required: true, nullable: false, emit_null: false)]
    getter expected_average_amount : String? = nil

    # The originator’s monthly expected ACH debit processing amount for the next 6-12 months.
    @[JSON::Field(key: "expected_monthly_amount", type: String?, default: nil, required: true, nullable: false, emit_null: false)]
    getter expected_monthly_amount : String? = nil

    # Specifies the expected use cases for the originator’s debit transfers. This should be a list that contains one or more of the following codes:  `\"ccd\"` - Corporate Credit or Debit - fund transfer between two corporate bank accounts  `\"ppd\"` - Prearranged Payment or Deposit - the transfer is part of a pre-existing relationship with a consumer, eg. bill payment  `\"tel\"` - Telephone-Initiated Entry  `\"web\"` - Internet-Initiated Entry - debits from a consumer’s account where their authorization is obtained over the Internet
    @[JSON::Field(key: "sec_codes", type: Array(ACHClass)?, default: nil, required: true, nullable: false, emit_null: false)]
    getter sec_codes : Array(ACHClass)? = nil

    # End of Required Properties

    # Initializes the object
    # @param [Hash] attributes Model attributes in the form of hash
    def initialize(
      *,
      # Required properties
      @expected_frequency : Plaid::OriginatorExpectedTransferFrequency? = nil,
      @expected_highest_amount : String? = nil,
      @expected_average_amount : String? = nil,
      @expected_monthly_amount : String? = nil,
      @sec_codes : Array(ACHClass)? = nil
    )
    end

    # Show invalid properties with the reasons. Usually used together with valid?
    # @return Array for valid properties with the reasons
    def list_invalid_properties : Array(String)
      invalid_properties = Array(String).new

      invalid_properties.push("\"expected_frequency\" is required and cannot be null") if @expected_frequency.nil?

      unless (_expected_frequency = @expected_frequency).nil?
        invalid_properties.push(_expected_frequency.error_message) if !_expected_frequency.valid?
      end
      invalid_properties.push("\"expected_highest_amount\" is required and cannot be null") if @expected_highest_amount.nil?

      unless (_expected_highest_amount = @expected_highest_amount).nil?
      end
      invalid_properties.push("\"expected_average_amount\" is required and cannot be null") if @expected_average_amount.nil?

      unless (_expected_average_amount = @expected_average_amount).nil?
      end
      invalid_properties.push("\"expected_monthly_amount\" is required and cannot be null") if @expected_monthly_amount.nil?

      unless (_expected_monthly_amount = @expected_monthly_amount).nil?
      end
      invalid_properties.push("\"sec_codes\" is required and cannot be null") if @sec_codes.nil?

      unless (_sec_codes = @sec_codes).nil?
      end
      invalid_properties
    end

    # Check to see if the all the properties in the model are valid
    # @return true if the model is valid
    def valid? : Bool
      return false if @expected_frequency.nil?
      unless (_expected_frequency = @expected_frequency).nil?
        return false if !_expected_frequency.valid?
      end

      return false if @expected_highest_amount.nil?
      unless (_expected_highest_amount = @expected_highest_amount).nil?
      end

      return false if @expected_average_amount.nil?
      unless (_expected_average_amount = @expected_average_amount).nil?
      end

      return false if @expected_monthly_amount.nil?
      unless (_expected_monthly_amount = @expected_monthly_amount).nil?
      end

      return false if @sec_codes.nil?
      unless (_sec_codes = @sec_codes).nil?
      end

      true
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] expected_frequency Object to be assigned
    def expected_frequency=(new_value : Plaid::OriginatorExpectedTransferFrequency?)
      raise ArgumentError.new("\"expected_frequency\" is required and cannot be null") if new_value.nil?
      unless new_value.nil?
        new_value.validate
      end

      @expected_frequency = new_value
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] expected_highest_amount Object to be assigned
    def expected_highest_amount=(new_value : String?)
      raise ArgumentError.new("\"expected_highest_amount\" is required and cannot be null") if new_value.nil?
      unless new_value.nil?
      end

      @expected_highest_amount = new_value
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] expected_average_amount Object to be assigned
    def expected_average_amount=(new_value : String?)
      raise ArgumentError.new("\"expected_average_amount\" is required and cannot be null") if new_value.nil?
      unless new_value.nil?
      end

      @expected_average_amount = new_value
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] expected_monthly_amount Object to be assigned
    def expected_monthly_amount=(new_value : String?)
      raise ArgumentError.new("\"expected_monthly_amount\" is required and cannot be null") if new_value.nil?
      unless new_value.nil?
      end

      @expected_monthly_amount = new_value
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] sec_codes Object to be assigned
    def sec_codes=(new_value : Array(ACHClass)?)
      raise ArgumentError.new("\"sec_codes\" is required and cannot be null") if new_value.nil?
      unless new_value.nil?
      end

      @sec_codes = new_value
    end

    # Generates #hash and #== methods from all fields
    # #== @return [Bool]
    # #hash calculates hash code according to all attributes.
    # #hash @return [UInt64] Hash code
    def_equals_and_hash(@expected_frequency, @expected_highest_amount, @expected_average_amount, @expected_monthly_amount, @sec_codes)
  end
end
