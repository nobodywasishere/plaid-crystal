#  The Plaid API
#
# The Plaid REST API. Please see https://plaid.com/docs/api for more details.
#
# The version of the OpenAPI document: 2020-09-14_1.474.3
#
# Generated by: https://openapi-generator.tech
#

require "../../core"

module Plaid
  # Address on the paystub
  class PaystubAddress
    include JSON::Serializable
    include JSON::Serializable::Unmapped
    include OpenApi::Validatable
    include OpenApi::Json

    # Optional Properties

    # The full city name.
    @[JSON::Field(key: "city", type: String?, default: nil, required: false, nullable: true, emit_null: true, presence: true, ignore_serialize: city.nil? && !city_present?)]
    getter city : String? = nil

    @[JSON::Field(ignore: true)]
    property? city_present : Bool = false

    # The ISO 3166-1 alpha-2 country code.
    @[JSON::Field(key: "country", type: String?, default: nil, required: false, nullable: true, emit_null: true, presence: true, ignore_serialize: country.nil? && !country_present?)]
    getter country : String? = nil

    @[JSON::Field(ignore: true)]
    property? country_present : Bool = false

    # The postal code of the address.
    @[JSON::Field(key: "postal_code", type: String?, default: nil, required: false, nullable: true, emit_null: true, presence: true, ignore_serialize: postal_code.nil? && !postal_code_present?)]
    getter postal_code : String? = nil

    @[JSON::Field(ignore: true)]
    property? postal_code_present : Bool = false

    # The region or state Example: `\"NC\"`
    @[JSON::Field(key: "region", type: String?, default: nil, required: false, nullable: true, emit_null: true, presence: true, ignore_serialize: region.nil? && !region_present?)]
    getter region : String? = nil

    @[JSON::Field(ignore: true)]
    property? region_present : Bool = false

    # The full street address.
    @[JSON::Field(key: "street", type: String?, default: nil, required: false, nullable: true, emit_null: true, presence: true, ignore_serialize: street.nil? && !street_present?)]
    getter street : String? = nil

    @[JSON::Field(ignore: true)]
    property? street_present : Bool = false

    # Street address line 1.
    @[JSON::Field(key: "line1", type: String?, default: nil, required: false, nullable: true, emit_null: true, presence: true, ignore_serialize: line1.nil? && !line1_present?)]
    getter line1 : String? = nil

    @[JSON::Field(ignore: true)]
    property? line1_present : Bool = false

    # Street address line 2.
    @[JSON::Field(key: "line2", type: String?, default: nil, required: false, nullable: true, emit_null: true, presence: true, ignore_serialize: line2.nil? && !line2_present?)]
    getter line2 : String? = nil

    @[JSON::Field(ignore: true)]
    property? line2_present : Bool = false

    # The region or state Example: `\"NC\"`
    @[JSON::Field(key: "state_code", type: String?, default: nil, required: false, nullable: true, emit_null: true, presence: true, ignore_serialize: state_code.nil? && !state_code_present?)]
    getter state_code : String? = nil

    @[JSON::Field(ignore: true)]
    property? state_code_present : Bool = false

    # Initializes the object
    # @param [Hash] attributes Model attributes in the form of hash
    def initialize(
      *,
      # Optional properties
      @city : String? = nil,
      @country : String? = nil,
      @postal_code : String? = nil,
      @region : String? = nil,
      @street : String? = nil,
      @line1 : String? = nil,
      @line2 : String? = nil,
      @state_code : String? = nil
    )
    end

    # Show invalid properties with the reasons. Usually used together with valid?
    # @return Array for valid properties with the reasons
    def list_invalid_properties : Array(String)
      invalid_properties = Array(String).new

      unless (_city = @city).nil?
      end
      unless (_country = @country).nil?
      end
      unless (_postal_code = @postal_code).nil?
      end
      unless (_region = @region).nil?
      end
      unless (_street = @street).nil?
      end
      unless (_line1 = @line1).nil?
      end
      unless (_line2 = @line2).nil?
      end
      unless (_state_code = @state_code).nil?
      end
      invalid_properties
    end

    # Check to see if the all the properties in the model are valid
    # @return true if the model is valid
    def valid? : Bool
      unless (_city = @city).nil?
      end

      unless (_country = @country).nil?
      end

      unless (_postal_code = @postal_code).nil?
      end

      unless (_region = @region).nil?
      end

      unless (_street = @street).nil?
      end

      unless (_line1 = @line1).nil?
      end

      unless (_line2 = @line2).nil?
      end

      unless (_state_code = @state_code).nil?
      end

      true
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] city Object to be assigned
    def city=(new_value : String?)
      unless new_value.nil?
      end

      @city = new_value
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] country Object to be assigned
    def country=(new_value : String?)
      unless new_value.nil?
      end

      @country = new_value
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] postal_code Object to be assigned
    def postal_code=(new_value : String?)
      unless new_value.nil?
      end

      @postal_code = new_value
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] region Object to be assigned
    def region=(new_value : String?)
      unless new_value.nil?
      end

      @region = new_value
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] street Object to be assigned
    def street=(new_value : String?)
      unless new_value.nil?
      end

      @street = new_value
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] line1 Object to be assigned
    def line1=(new_value : String?)
      unless new_value.nil?
      end

      @line1 = new_value
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] line2 Object to be assigned
    def line2=(new_value : String?)
      unless new_value.nil?
      end

      @line2 = new_value
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] state_code Object to be assigned
    def state_code=(new_value : String?)
      unless new_value.nil?
      end

      @state_code = new_value
    end

    # Generates #hash and #== methods from all fields
    # #== @return [Bool]
    # #hash calculates hash code according to all attributes.
    # #hash @return [UInt64] Hash code
    def_equals_and_hash(@city, @city_present, @country, @country_present, @postal_code, @postal_code_present, @region, @region_present, @street, @street_present, @line1, @line1_present, @line2, @line2_present, @state_code, @state_code_present)
  end
end
