#  The Plaid API
#
# The Plaid REST API. Please see https://plaid.com/docs/api for more details.
#
# The version of the OpenAPI document: 2020-09-14_1.474.3
#
# Generated by: https://openapi-generator.tech
#

require "../../core"

module Plaid
  # A representation of where a transaction took place
  class Location
    include JSON::Serializable
    include JSON::Serializable::Unmapped
    include OpenApi::Validatable
    include OpenApi::Json

    # Required Properties

    # The street address where the transaction occurred.
    @[JSON::Field(key: "address", type: String?, default: nil, required: true, nullable: true, emit_null: true)]
    getter address : String? = nil

    # The city where the transaction occurred.
    @[JSON::Field(key: "city", type: String?, default: nil, required: true, nullable: true, emit_null: true)]
    getter city : String? = nil

    # The region or state where the transaction occurred. In API versions 2018-05-22 and earlier, this field is called `state`.
    @[JSON::Field(key: "region", type: String?, default: nil, required: true, nullable: true, emit_null: true)]
    getter region : String? = nil

    # The postal code where the transaction occurred. In API versions 2018-05-22 and earlier, this field is called `zip`.
    @[JSON::Field(key: "postal_code", type: String?, default: nil, required: true, nullable: true, emit_null: true)]
    getter postal_code : String? = nil

    # The ISO 3166-1 alpha-2 country code where the transaction occurred.
    @[JSON::Field(key: "country", type: String?, default: nil, required: true, nullable: true, emit_null: true)]
    getter country : String? = nil

    # The latitude where the transaction occurred.
    @[JSON::Field(key: "lat", type: Float64?, default: nil, required: true, nullable: true, emit_null: true)]
    getter lat : Float64? = nil

    # The longitude where the transaction occurred.
    @[JSON::Field(key: "lon", type: Float64?, default: nil, required: true, nullable: true, emit_null: true)]
    getter lon : Float64? = nil

    # The merchant defined store number where the transaction occurred.
    @[JSON::Field(key: "store_number", type: String?, default: nil, required: true, nullable: true, emit_null: true)]
    getter store_number : String? = nil

    # End of Required Properties

    # Initializes the object
    # @param [Hash] attributes Model attributes in the form of hash
    def initialize(
      *,
      # Required properties
      @address : String? = nil,
      @city : String? = nil,
      @region : String? = nil,
      @postal_code : String? = nil,
      @country : String? = nil,
      @lat : Float64? = nil,
      @lon : Float64? = nil,
      @store_number : String? = nil
    )
    end

    # Show invalid properties with the reasons. Usually used together with valid?
    # @return Array for valid properties with the reasons
    def list_invalid_properties : Array(String)
      invalid_properties = Array(String).new

      unless (_address = @address).nil?
      end
      unless (_city = @city).nil?
      end
      unless (_region = @region).nil?
      end
      unless (_postal_code = @postal_code).nil?
      end
      unless (_country = @country).nil?
      end
      unless (_lat = @lat).nil?
      end
      unless (_lon = @lon).nil?
      end
      unless (_store_number = @store_number).nil?
      end
      invalid_properties
    end

    # Check to see if the all the properties in the model are valid
    # @return true if the model is valid
    def valid? : Bool
      unless (_address = @address).nil?
      end

      unless (_city = @city).nil?
      end

      unless (_region = @region).nil?
      end

      unless (_postal_code = @postal_code).nil?
      end

      unless (_country = @country).nil?
      end

      unless (_lat = @lat).nil?
      end

      unless (_lon = @lon).nil?
      end

      unless (_store_number = @store_number).nil?
      end

      true
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] address Object to be assigned
    def address=(new_value : String?)
      unless new_value.nil?
      end

      @address = new_value
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] city Object to be assigned
    def city=(new_value : String?)
      unless new_value.nil?
      end

      @city = new_value
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] region Object to be assigned
    def region=(new_value : String?)
      unless new_value.nil?
      end

      @region = new_value
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] postal_code Object to be assigned
    def postal_code=(new_value : String?)
      unless new_value.nil?
      end

      @postal_code = new_value
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] country Object to be assigned
    def country=(new_value : String?)
      unless new_value.nil?
      end

      @country = new_value
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] lat Object to be assigned
    def lat=(new_value : Float64?)
      unless new_value.nil?
      end

      @lat = new_value
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] lon Object to be assigned
    def lon=(new_value : Float64?)
      unless new_value.nil?
      end

      @lon = new_value
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] store_number Object to be assigned
    def store_number=(new_value : String?)
      unless new_value.nil?
      end

      @store_number = new_value
    end

    # Generates #hash and #== methods from all fields
    # #== @return [Bool]
    # #hash calculates hash code according to all attributes.
    # #hash @return [UInt64] Hash code
    def_equals_and_hash(@address, @city, @region, @postal_code, @country, @lat, @lon, @store_number)
  end
end
