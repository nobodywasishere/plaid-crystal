#  The Plaid API
#
# The Plaid REST API. Please see https://plaid.com/docs/api for more details.
#
# The version of the OpenAPI document: 2020-09-14_1.474.3
#
# Generated by: https://openapi-generator.tech
#

require "../../core"

require "./mortgage_interest_rate"
require "./mortgage_property_address"

module Plaid
  # Contains details about a mortgage account.
  class MortgageLiability
    include JSON::Serializable
    include JSON::Serializable::Unmapped
    include OpenApi::Validatable
    include OpenApi::Json

    # Required Properties

    # The ID of the account that this liability belongs to.
    @[JSON::Field(key: "account_id", type: String?, default: nil, required: true, nullable: false, emit_null: false)]
    getter account_id : String? = nil

    # The account number of the loan.
    @[JSON::Field(key: "account_number", type: String?, default: nil, required: true, nullable: false, emit_null: false)]
    getter account_number : String? = nil

    # The current outstanding amount charged for late payment.
    @[JSON::Field(key: "current_late_fee", type: Float64?, default: nil, required: true, nullable: true, emit_null: true)]
    getter current_late_fee : Float64? = nil

    # Total amount held in escrow to pay taxes and insurance on behalf of the borrower.
    @[JSON::Field(key: "escrow_balance", type: Float64?, default: nil, required: true, nullable: true, emit_null: true)]
    getter escrow_balance : Float64? = nil

    # Indicates whether the borrower has private mortgage insurance in effect.
    @[JSON::Field(key: "has_pmi", type: Bool?, default: nil, required: true, nullable: true, emit_null: true)]
    getter has_pmi : Bool? = nil

    # Indicates whether the borrower will pay a penalty for early payoff of mortgage.
    @[JSON::Field(key: "has_prepayment_penalty", type: Bool?, default: nil, required: true, nullable: true, emit_null: true)]
    getter has_prepayment_penalty : Bool? = nil

    @[JSON::Field(key: "interest_rate", type: MortgageInterestRate?, default: nil, required: true, nullable: false, emit_null: false)]
    getter interest_rate : MortgageInterestRate? = nil

    # The amount of the last payment.
    @[JSON::Field(key: "last_payment_amount", type: Float64?, default: nil, required: true, nullable: true, emit_null: true)]
    getter last_payment_amount : Float64? = nil

    # The date of the last payment. Dates are returned in an [ISO 8601](https://wikipedia.org/wiki/ISO_8601) format (YYYY-MM-DD).
    @[JSON::Field(key: "last_payment_date", type: Time?, default: nil, required: true, nullable: true, emit_null: true, converter: Time::ISO8601DateConverter)]
    getter last_payment_date : Time? = nil

    # Description of the type of loan, for example `conventional`, `fixed`, or `variable`. This field is provided directly from the loan servicer and does not have an enumerated set of possible values.
    @[JSON::Field(key: "loan_type_description", type: String?, default: nil, required: true, nullable: true, emit_null: true)]
    getter loan_type_description : String? = nil

    # Full duration of mortgage as at origination (e.g. `10 year`).
    @[JSON::Field(key: "loan_term", type: String?, default: nil, required: true, nullable: true, emit_null: true)]
    getter loan_term : String? = nil

    # Original date on which mortgage is due in full. Dates are returned in an [ISO 8601](https://wikipedia.org/wiki/ISO_8601) format (YYYY-MM-DD).
    @[JSON::Field(key: "maturity_date", type: Time?, default: nil, required: true, nullable: true, emit_null: true, converter: Time::ISO8601DateConverter)]
    getter maturity_date : Time? = nil

    # The amount of the next payment.
    @[JSON::Field(key: "next_monthly_payment", type: Float64?, default: nil, required: true, nullable: true, emit_null: true)]
    getter next_monthly_payment : Float64? = nil

    # The due date for the next payment. Dates are returned in an [ISO 8601](https://wikipedia.org/wiki/ISO_8601) format (YYYY-MM-DD).
    @[JSON::Field(key: "next_payment_due_date", type: Time?, default: nil, required: true, nullable: true, emit_null: true, converter: Time::ISO8601DateConverter)]
    getter next_payment_due_date : Time? = nil

    # The date on which the loan was initially lent. Dates are returned in an [ISO 8601](https://wikipedia.org/wiki/ISO_8601) format (YYYY-MM-DD).
    @[JSON::Field(key: "origination_date", type: Time?, default: nil, required: true, nullable: true, emit_null: true, converter: Time::ISO8601DateConverter)]
    getter origination_date : Time? = nil

    # The original principal balance of the mortgage.
    @[JSON::Field(key: "origination_principal_amount", type: Float64?, default: nil, required: true, nullable: true, emit_null: true)]
    getter origination_principal_amount : Float64? = nil

    # Amount of loan (principal + interest) past due for payment.
    @[JSON::Field(key: "past_due_amount", type: Float64?, default: nil, required: true, nullable: true, emit_null: true)]
    getter past_due_amount : Float64? = nil

    @[JSON::Field(key: "property_address", type: MortgagePropertyAddress?, default: nil, required: true, nullable: false, emit_null: false)]
    getter property_address : MortgagePropertyAddress? = nil

    # The year to date (YTD) interest paid.
    @[JSON::Field(key: "ytd_interest_paid", type: Float64?, default: nil, required: true, nullable: true, emit_null: true)]
    getter ytd_interest_paid : Float64? = nil

    # The YTD principal paid.
    @[JSON::Field(key: "ytd_principal_paid", type: Float64?, default: nil, required: true, nullable: true, emit_null: true)]
    getter ytd_principal_paid : Float64? = nil

    # End of Required Properties

    # Initializes the object
    # @param [Hash] attributes Model attributes in the form of hash
    def initialize(
      *,
      # Required properties
      @account_id : String? = nil,
      @account_number : String? = nil,
      @current_late_fee : Float64? = nil,
      @escrow_balance : Float64? = nil,
      @has_pmi : Bool? = nil,
      @has_prepayment_penalty : Bool? = nil,
      @interest_rate : MortgageInterestRate? = nil,
      @last_payment_amount : Float64? = nil,
      @last_payment_date : Time? = nil,
      @loan_type_description : String? = nil,
      @loan_term : String? = nil,
      @maturity_date : Time? = nil,
      @next_monthly_payment : Float64? = nil,
      @next_payment_due_date : Time? = nil,
      @origination_date : Time? = nil,
      @origination_principal_amount : Float64? = nil,
      @past_due_amount : Float64? = nil,
      @property_address : MortgagePropertyAddress? = nil,
      @ytd_interest_paid : Float64? = nil,
      @ytd_principal_paid : Float64? = nil
    )
    end

    # Show invalid properties with the reasons. Usually used together with valid?
    # @return Array for valid properties with the reasons
    def list_invalid_properties : Array(String)
      invalid_properties = Array(String).new

      invalid_properties.push("\"account_id\" is required and cannot be null") if @account_id.nil?

      unless (_account_id = @account_id).nil?
      end
      invalid_properties.push("\"account_number\" is required and cannot be null") if @account_number.nil?

      unless (_account_number = @account_number).nil?
      end
      unless (_current_late_fee = @current_late_fee).nil?
      end
      unless (_escrow_balance = @escrow_balance).nil?
      end
      unless (_has_pmi = @has_pmi).nil?
      end
      unless (_has_prepayment_penalty = @has_prepayment_penalty).nil?
      end
      invalid_properties.push("\"interest_rate\" is required and cannot be null") if @interest_rate.nil?

      unless (_interest_rate = @interest_rate).nil?
      end
      unless (_last_payment_amount = @last_payment_amount).nil?
      end
      unless (_last_payment_date = @last_payment_date).nil?
      end
      unless (_loan_type_description = @loan_type_description).nil?
      end
      unless (_loan_term = @loan_term).nil?
      end
      unless (_maturity_date = @maturity_date).nil?
      end
      unless (_next_monthly_payment = @next_monthly_payment).nil?
      end
      unless (_next_payment_due_date = @next_payment_due_date).nil?
      end
      unless (_origination_date = @origination_date).nil?
      end
      unless (_origination_principal_amount = @origination_principal_amount).nil?
      end
      unless (_past_due_amount = @past_due_amount).nil?
      end
      invalid_properties.push("\"property_address\" is required and cannot be null") if @property_address.nil?

      unless (_property_address = @property_address).nil?
      end
      unless (_ytd_interest_paid = @ytd_interest_paid).nil?
      end
      unless (_ytd_principal_paid = @ytd_principal_paid).nil?
      end
      invalid_properties
    end

    # Check to see if the all the properties in the model are valid
    # @return true if the model is valid
    def valid? : Bool
      return false if @account_id.nil?
      unless (_account_id = @account_id).nil?
      end

      return false if @account_number.nil?
      unless (_account_number = @account_number).nil?
      end

      unless (_current_late_fee = @current_late_fee).nil?
      end

      unless (_escrow_balance = @escrow_balance).nil?
      end

      unless (_has_pmi = @has_pmi).nil?
      end

      unless (_has_prepayment_penalty = @has_prepayment_penalty).nil?
      end

      return false if @interest_rate.nil?
      unless (_interest_rate = @interest_rate).nil?
      end

      unless (_last_payment_amount = @last_payment_amount).nil?
      end

      unless (_last_payment_date = @last_payment_date).nil?
      end

      unless (_loan_type_description = @loan_type_description).nil?
      end

      unless (_loan_term = @loan_term).nil?
      end

      unless (_maturity_date = @maturity_date).nil?
      end

      unless (_next_monthly_payment = @next_monthly_payment).nil?
      end

      unless (_next_payment_due_date = @next_payment_due_date).nil?
      end

      unless (_origination_date = @origination_date).nil?
      end

      unless (_origination_principal_amount = @origination_principal_amount).nil?
      end

      unless (_past_due_amount = @past_due_amount).nil?
      end

      return false if @property_address.nil?
      unless (_property_address = @property_address).nil?
      end

      unless (_ytd_interest_paid = @ytd_interest_paid).nil?
      end

      unless (_ytd_principal_paid = @ytd_principal_paid).nil?
      end

      true
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] account_id Object to be assigned
    def account_id=(new_value : String?)
      raise ArgumentError.new("\"account_id\" is required and cannot be null") if new_value.nil?
      unless new_value.nil?
      end

      @account_id = new_value
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] account_number Object to be assigned
    def account_number=(new_value : String?)
      raise ArgumentError.new("\"account_number\" is required and cannot be null") if new_value.nil?
      unless new_value.nil?
      end

      @account_number = new_value
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] current_late_fee Object to be assigned
    def current_late_fee=(new_value : Float64?)
      unless new_value.nil?
      end

      @current_late_fee = new_value
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] escrow_balance Object to be assigned
    def escrow_balance=(new_value : Float64?)
      unless new_value.nil?
      end

      @escrow_balance = new_value
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] has_pmi Object to be assigned
    def has_pmi=(new_value : Bool?)
      unless new_value.nil?
      end

      @has_pmi = new_value
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] has_prepayment_penalty Object to be assigned
    def has_prepayment_penalty=(new_value : Bool?)
      unless new_value.nil?
      end

      @has_prepayment_penalty = new_value
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] interest_rate Object to be assigned
    def interest_rate=(new_value : MortgageInterestRate?)
      raise ArgumentError.new("\"interest_rate\" is required and cannot be null") if new_value.nil?
      unless new_value.nil?
      end

      @interest_rate = new_value
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] last_payment_amount Object to be assigned
    def last_payment_amount=(new_value : Float64?)
      unless new_value.nil?
      end

      @last_payment_amount = new_value
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] last_payment_date Object to be assigned
    def last_payment_date=(new_value : Time?)
      unless new_value.nil?
      end

      @last_payment_date = new_value
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] loan_type_description Object to be assigned
    def loan_type_description=(new_value : String?)
      unless new_value.nil?
      end

      @loan_type_description = new_value
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] loan_term Object to be assigned
    def loan_term=(new_value : String?)
      unless new_value.nil?
      end

      @loan_term = new_value
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] maturity_date Object to be assigned
    def maturity_date=(new_value : Time?)
      unless new_value.nil?
      end

      @maturity_date = new_value
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] next_monthly_payment Object to be assigned
    def next_monthly_payment=(new_value : Float64?)
      unless new_value.nil?
      end

      @next_monthly_payment = new_value
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] next_payment_due_date Object to be assigned
    def next_payment_due_date=(new_value : Time?)
      unless new_value.nil?
      end

      @next_payment_due_date = new_value
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] origination_date Object to be assigned
    def origination_date=(new_value : Time?)
      unless new_value.nil?
      end

      @origination_date = new_value
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] origination_principal_amount Object to be assigned
    def origination_principal_amount=(new_value : Float64?)
      unless new_value.nil?
      end

      @origination_principal_amount = new_value
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] past_due_amount Object to be assigned
    def past_due_amount=(new_value : Float64?)
      unless new_value.nil?
      end

      @past_due_amount = new_value
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] property_address Object to be assigned
    def property_address=(new_value : MortgagePropertyAddress?)
      raise ArgumentError.new("\"property_address\" is required and cannot be null") if new_value.nil?
      unless new_value.nil?
      end

      @property_address = new_value
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] ytd_interest_paid Object to be assigned
    def ytd_interest_paid=(new_value : Float64?)
      unless new_value.nil?
      end

      @ytd_interest_paid = new_value
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] ytd_principal_paid Object to be assigned
    def ytd_principal_paid=(new_value : Float64?)
      unless new_value.nil?
      end

      @ytd_principal_paid = new_value
    end

    # Generates #hash and #== methods from all fields
    # #== @return [Bool]
    # #hash calculates hash code according to all attributes.
    # #hash @return [UInt64] Hash code
    def_equals_and_hash(@account_id, @account_number, @current_late_fee, @escrow_balance, @has_pmi, @has_prepayment_penalty, @interest_rate, @last_payment_amount, @last_payment_date, @loan_type_description, @loan_term, @maturity_date, @next_monthly_payment, @next_payment_due_date, @origination_date, @origination_principal_amount, @past_due_amount, @property_address, @ytd_interest_paid, @ytd_principal_paid)
  end
end
