#  The Plaid API
#
# The Plaid REST API. Please see https://plaid.com/docs/api for more details.
#
# The version of the OpenAPI document: 2020-09-14_1.474.3
#
# Generated by: https://openapi-generator.tech
#

require "../../core"

require "./counterparty_type"

module Plaid
  # The counterparty, such as the merchant or financial institution, is extracted by Plaid from the raw description.
  class TransactionCounterparty
    include JSON::Serializable
    include JSON::Serializable::Unmapped
    include OpenApi::Validatable
    include OpenApi::Json

    # Required Properties

    # The name of the counterparty, such as the merchant or the financial institution, as extracted by Plaid from the raw description.
    @[JSON::Field(key: "name", type: String?, default: nil, required: true, nullable: false, emit_null: false)]
    getter name : String? = nil

    @[JSON::Field(key: "type", type: Plaid::CounterpartyType?, default: nil, required: true, nullable: false, emit_null: false)]
    getter _type : Plaid::CounterpartyType? = nil

    # The website associated with the counterparty.
    @[JSON::Field(key: "website", type: String?, default: nil, required: true, nullable: true, emit_null: true)]
    getter website : String? = nil

    # The URL of a logo associated with the counterparty, if available. The logo will always be 100×100 pixel PNG file.
    @[JSON::Field(key: "logo_url", type: String?, default: nil, required: true, nullable: true, emit_null: true)]
    getter logo_url : String? = nil

    # End of Required Properties

    # Optional Properties

    # A unique, stable, Plaid-generated ID that maps to the counterparty.
    @[JSON::Field(key: "entity_id", type: String?, default: nil, required: false, nullable: true, emit_null: true, presence: true, ignore_serialize: entity_id.nil? && !entity_id_present?)]
    getter entity_id : String? = nil

    @[JSON::Field(ignore: true)]
    property? entity_id_present : Bool = false

    # A description of how confident we are that the provided counterparty is involved in the transaction.  `VERY_HIGH`: We recognize this counterparty and we are more than 98% confident that it is involved in this transaction. `HIGH`: We recognize this counterparty and we are more than 90% confident that it is involved in this transaction. `MEDIUM`: We are moderately confident that this counterparty was involved in this transaction, but some details may differ from our records. `LOW`: We didn’t find a matching counterparty in our records, so we are returning a cleansed name parsed out of the request description. `UNKNOWN`: We don’t know the confidence level for this counterparty.
    @[JSON::Field(key: "confidence_level", type: String?, default: nil, required: false, nullable: true, emit_null: true, presence: true, ignore_serialize: confidence_level.nil? && !confidence_level_present?)]
    getter confidence_level : String? = nil

    @[JSON::Field(ignore: true)]
    property? confidence_level_present : Bool = false

    # Initializes the object
    # @param [Hash] attributes Model attributes in the form of hash
    def initialize(
      *,
      # Required properties
      @name : String? = nil,
      @_type : Plaid::CounterpartyType? = nil,
      @website : String? = nil,
      @logo_url : String? = nil,
      # Optional properties
      @entity_id : String? = nil,
      @confidence_level : String? = nil
    )
    end

    # Show invalid properties with the reasons. Usually used together with valid?
    # @return Array for valid properties with the reasons
    def list_invalid_properties : Array(String)
      invalid_properties = Array(String).new

      invalid_properties.push("\"name\" is required and cannot be null") if @name.nil?

      unless (_name = @name).nil?
      end
      invalid_properties.push("\"_type\" is required and cannot be null") if @_type.nil?

      unless (__type = @_type).nil?
        invalid_properties.push(__type.error_message) if !__type.valid?
      end
      unless (_website = @website).nil?
      end
      unless (_logo_url = @logo_url).nil?
      end
      unless (_entity_id = @entity_id).nil?
      end
      unless (_confidence_level = @confidence_level).nil?
      end
      invalid_properties
    end

    # Check to see if the all the properties in the model are valid
    # @return true if the model is valid
    def valid? : Bool
      return false if @name.nil?
      unless (_name = @name).nil?
      end

      return false if @_type.nil?
      unless (__type = @_type).nil?
        return false if !__type.valid?
      end

      unless (_website = @website).nil?
      end

      unless (_logo_url = @logo_url).nil?
      end

      unless (_entity_id = @entity_id).nil?
      end

      unless (_confidence_level = @confidence_level).nil?
      end

      true
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] name Object to be assigned
    def name=(new_value : String?)
      raise ArgumentError.new("\"name\" is required and cannot be null") if new_value.nil?
      unless new_value.nil?
      end

      @name = new_value
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] _type Object to be assigned
    def _type=(new_value : Plaid::CounterpartyType?)
      raise ArgumentError.new("\"_type\" is required and cannot be null") if new_value.nil?
      unless new_value.nil?
        new_value.validate
      end

      @_type = new_value
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] website Object to be assigned
    def website=(new_value : String?)
      unless new_value.nil?
      end

      @website = new_value
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] logo_url Object to be assigned
    def logo_url=(new_value : String?)
      unless new_value.nil?
      end

      @logo_url = new_value
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] entity_id Object to be assigned
    def entity_id=(new_value : String?)
      unless new_value.nil?
      end

      @entity_id = new_value
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] confidence_level Object to be assigned
    def confidence_level=(new_value : String?)
      unless new_value.nil?
      end

      @confidence_level = new_value
    end

    # Generates #hash and #== methods from all fields
    # #== @return [Bool]
    # #hash calculates hash code according to all attributes.
    # #hash @return [UInt64] Hash code
    def_equals_and_hash(@name, @_type, @website, @logo_url, @entity_id, @entity_id_present, @confidence_level, @confidence_level_present)
  end
end
