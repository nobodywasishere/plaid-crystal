#  The Plaid API
#
# The Plaid REST API. Please see https://plaid.com/docs/api for more details.
#
# The version of the OpenAPI document: 2020-09-14_1.474.3
#
# Generated by: https://openapi-generator.tech
#

require "../../core"

require "./recurring_frequency"

module Plaid
  # Insights relating to expenses and deposits that are predicted to occur on a scheduled basis, such as biweekly, monthly, or annually.  Common examples include loan payments, bill payments, subscriptions, and payroll income.  This is a beta field, available to all users.
  class Recurrence
    include JSON::Serializable
    include JSON::Serializable::Unmapped
    include OpenApi::Validatable
    include OpenApi::Json

    # Optional Properties

    # Whether or not the transaction is periodically recurring.
    @[JSON::Field(key: "is_recurring", type: Bool?, default: nil, required: false, nullable: true, emit_null: true, presence: true, ignore_serialize: is_recurring.nil? && !is_recurring_present?)]
    getter is_recurring : Bool? = nil

    @[JSON::Field(ignore: true)]
    property? is_recurring_present : Bool = false

    @[JSON::Field(key: "frequency", type: Plaid::RecurringFrequency?, default: nil, required: false, nullable: true, emit_null: true, presence: true, ignore_serialize: frequency.nil? && !frequency_present?)]
    getter frequency : Plaid::RecurringFrequency? = nil

    @[JSON::Field(ignore: true)]
    property? frequency_present : Bool = false

    # Initializes the object
    # @param [Hash] attributes Model attributes in the form of hash
    def initialize(
      *,
      # Optional properties
      @is_recurring : Bool? = nil,
      @frequency : Plaid::RecurringFrequency? = nil
    )
    end

    # Show invalid properties with the reasons. Usually used together with valid?
    # @return Array for valid properties with the reasons
    def list_invalid_properties : Array(String)
      invalid_properties = Array(String).new

      unless (_is_recurring = @is_recurring).nil?
      end
      unless (_frequency = @frequency).nil?
        invalid_properties.push(_frequency.error_message) if !_frequency.valid?
      end
      invalid_properties
    end

    # Check to see if the all the properties in the model are valid
    # @return true if the model is valid
    def valid? : Bool
      unless (_is_recurring = @is_recurring).nil?
      end

      unless (_frequency = @frequency).nil?
        return false if !_frequency.valid?
      end

      true
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] is_recurring Object to be assigned
    def is_recurring=(new_value : Bool?)
      unless new_value.nil?
      end

      @is_recurring = new_value
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] frequency Object to be assigned
    def frequency=(new_value : Plaid::RecurringFrequency?)
      unless new_value.nil?
        new_value.validate
      end

      @frequency = new_value
    end

    # Generates #hash and #== methods from all fields
    # #== @return [Bool]
    # #hash calculates hash code according to all attributes.
    # #hash @return [UInt64] Hash code
    def_equals_and_hash(@is_recurring, @is_recurring_present, @frequency, @frequency_present)
  end
end
