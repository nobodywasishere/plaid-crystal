#  The Plaid API
#
# The Plaid REST API. Please see https://plaid.com/docs/api for more details.
#
# The version of the OpenAPI document: 2020-09-14_1.474.3
#
# Generated by: https://openapi-generator.tech
#

require "../../core"

require "./identity_verification_request_user_name"
require "./user_address"
require "./user_id_number"

module Plaid
  # User information collected outside of Link, most likely via your own onboarding process.  Each of the following identity fields are optional:  `email_address`  `phone_number`  `date_of_birth`  `name`  `address`  `id_number`  Specifically, these fields are optional in that they can either be fully provided (satisfying every required field in their subschema) or omitted from the request entirely by not providing the key or value. Providing these fields via the API will result in Link skipping the data collection process for the associated user. All verification steps enabled in the associated Identity Verification Template will still be run. Verification steps will either be run immediately, or once the user completes the `accept_tos` step, depending on the value provided to the `gave_consent` field.
  class IdentityVerificationRequestUser
    include JSON::Serializable
    include JSON::Serializable::Unmapped
    include OpenApi::Validatable
    include OpenApi::Json

    # Optional Properties

    # A valid email address.
    @[JSON::Field(key: "email_address", type: String?, default: nil, required: false, nullable: false, emit_null: false)]
    getter email_address : String? = nil

    # A phone number in E.164 format.
    @[JSON::Field(key: "phone_number", type: String?, default: nil, required: false, nullable: true, emit_null: true, presence: true, ignore_serialize: phone_number.nil? && !phone_number_present?)]
    getter phone_number : String? = nil

    @[JSON::Field(ignore: true)]
    property? phone_number_present : Bool = false

    # A date in the format YYYY-MM-DD (RFC 3339 Section 5.6).
    @[JSON::Field(key: "date_of_birth", type: Time?, default: nil, required: false, nullable: false, emit_null: false, converter: Time::ISO8601DateConverter)]
    getter date_of_birth : Time? = nil

    @[JSON::Field(key: "name", type: Plaid::IdentityVerificationRequestUserName?, default: nil, required: false, nullable: true, emit_null: true, presence: true, ignore_serialize: name.nil? && !name_present?)]
    getter name : Plaid::IdentityVerificationRequestUserName? = nil

    @[JSON::Field(ignore: true)]
    property? name_present : Bool = false

    @[JSON::Field(key: "address", type: UserAddress?, default: nil, required: false, nullable: true, emit_null: true, presence: true, ignore_serialize: address.nil? && !address_present?)]
    getter address : UserAddress? = nil

    @[JSON::Field(ignore: true)]
    property? address_present : Bool = false

    @[JSON::Field(key: "id_number", type: UserIDNumber?, default: nil, required: false, nullable: true, emit_null: true, presence: true, ignore_serialize: id_number.nil? && !id_number_present?)]
    getter id_number : UserIDNumber? = nil

    @[JSON::Field(ignore: true)]
    property? id_number_present : Bool = false

    # Initializes the object
    # @param [Hash] attributes Model attributes in the form of hash
    def initialize(
      *,
      # Optional properties
      @email_address : String? = nil,
      @phone_number : String? = nil,
      @date_of_birth : Time? = nil,
      @name : Plaid::IdentityVerificationRequestUserName? = nil,
      @address : UserAddress? = nil,
      @id_number : UserIDNumber? = nil
    )
    end

    # Show invalid properties with the reasons. Usually used together with valid?
    # @return Array for valid properties with the reasons
    def list_invalid_properties : Array(String)
      invalid_properties = Array(String).new

      unless (_email_address = @email_address).nil?
      end
      unless (_phone_number = @phone_number).nil?
      end
      unless (_date_of_birth = @date_of_birth).nil?
      end
      unless (_name = @name).nil?
        invalid_properties.concat(_name.list_invalid_properties_for("name")) if _name.is_a?(OpenApi::Validatable)
      end
      unless (_address = @address).nil?
      end
      unless (_id_number = @id_number).nil?
      end
      invalid_properties
    end

    # Check to see if the all the properties in the model are valid
    # @return true if the model is valid
    def valid? : Bool
      unless (_email_address = @email_address).nil?
      end

      unless (_phone_number = @phone_number).nil?
      end

      unless (_date_of_birth = @date_of_birth).nil?
      end

      unless (_name = @name).nil?
        return false if _name.is_a?(OpenApi::Validatable) && !_name.valid?
      end

      unless (_address = @address).nil?
      end

      unless (_id_number = @id_number).nil?
      end

      true
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] email_address Object to be assigned
    def email_address=(new_value : String?)
      unless new_value.nil?
      end

      @email_address = new_value
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] phone_number Object to be assigned
    def phone_number=(new_value : String?)
      unless new_value.nil?
      end

      @phone_number = new_value
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] date_of_birth Object to be assigned
    def date_of_birth=(new_value : Time?)
      unless new_value.nil?
      end

      @date_of_birth = new_value
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] name Object to be assigned
    def name=(new_value : Plaid::IdentityVerificationRequestUserName?)
      unless new_value.nil?
        new_value.validate if new_value.is_a?(OpenApi::Validatable)
      end

      @name = new_value
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] address Object to be assigned
    def address=(new_value : UserAddress?)
      unless new_value.nil?
      end

      @address = new_value
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] id_number Object to be assigned
    def id_number=(new_value : UserIDNumber?)
      unless new_value.nil?
      end

      @id_number = new_value
    end

    # Generates #hash and #== methods from all fields
    # #== @return [Bool]
    # #hash calculates hash code according to all attributes.
    # #hash @return [UInt64] Hash code
    def_equals_and_hash(@email_address, @phone_number, @phone_number_present, @date_of_birth, @name, @name_present, @address, @address_present, @id_number, @id_number_present)
  end
end
