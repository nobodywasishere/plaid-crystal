#  The Plaid API
#
# The Plaid REST API. Please see https://plaid.com/docs/api for more details.
#
# The version of the OpenAPI document: 2020-09-14_1.474.3
#
# Generated by: https://openapi-generator.tech
#

require "../../core"

require "./product_status_breakdown"

module Plaid
  # A representation of the status health of a request type. Auth requests, Balance requests, Identity requests, Investments requests, Liabilities requests, Transactions updates, Investments updates, Liabilities updates, and Item logins each have their own status object.
  class ProductStatus
    include JSON::Serializable
    include JSON::Serializable::Unmapped
    include OpenApi::Validatable
    include OpenApi::Json

    # Required Properties

    # This field is deprecated in favor of the `breakdown` object, which provides more granular institution health data.  `HEALTHY`: the majority of requests are successful `DEGRADED`: only some requests are successful `DOWN`: all requests are failing
    @[JSON::Field(key: "status", type: String?, default: nil, required: true, nullable: false, emit_null: false)]
    getter status : String? = nil
    ERROR_MESSAGE_FOR_STATUS = "invalid value for \"status\", must be one of [HEALTHY, DEGRADED, DOWN]."
    VALID_VALUES_FOR_STATUS  = String.static_array("HEALTHY", "DEGRADED", "DOWN")

    # [ISO 8601](https://wikipedia.org/wiki/ISO_8601) formatted timestamp of the last status change for the institution.
    @[JSON::Field(key: "last_status_change", type: Time?, default: nil, required: true, nullable: false, emit_null: false, converter: Time::RFC3339Converter)]
    getter last_status_change : Time? = nil

    @[JSON::Field(key: "breakdown", type: ProductStatusBreakdown?, default: nil, required: true, nullable: false, emit_null: false)]
    getter breakdown : ProductStatusBreakdown? = nil

    # End of Required Properties

    # Initializes the object
    # @param [Hash] attributes Model attributes in the form of hash
    def initialize(
      *,
      # Required properties
      @status : String? = nil,
      @last_status_change : Time? = nil,
      @breakdown : ProductStatusBreakdown? = nil
    )
    end

    # Show invalid properties with the reasons. Usually used together with valid?
    # @return Array for valid properties with the reasons
    def list_invalid_properties : Array(String)
      invalid_properties = Array(String).new

      invalid_properties.push("\"status\" is required and cannot be null") if @status.nil?

      unless (_status = @status).nil?
        invalid_properties.push(ERROR_MESSAGE_FOR_STATUS) unless OpenApi::EnumValidator.valid?(_status, VALID_VALUES_FOR_STATUS)
      end
      invalid_properties.push("\"last_status_change\" is required and cannot be null") if @last_status_change.nil?

      unless (_last_status_change = @last_status_change).nil?
      end
      invalid_properties.push("\"breakdown\" is required and cannot be null") if @breakdown.nil?

      unless (_breakdown = @breakdown).nil?
      end
      invalid_properties
    end

    # Check to see if the all the properties in the model are valid
    # @return true if the model is valid
    def valid? : Bool
      return false if @status.nil?
      unless (_status = @status).nil?
        return false unless OpenApi::EnumValidator.valid?(_status, VALID_VALUES_FOR_STATUS)
      end

      return false if @last_status_change.nil?
      unless (_last_status_change = @last_status_change).nil?
      end

      return false if @breakdown.nil?
      unless (_breakdown = @breakdown).nil?
      end

      true
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] status Object to be assigned
    def status=(new_value : String?)
      raise ArgumentError.new("\"status\" is required and cannot be null") if new_value.nil?
      unless new_value.nil?
        OpenApi::EnumValidator.validate("status", new_value, VALID_VALUES_FOR_STATUS)
      end

      @status = new_value
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] last_status_change Object to be assigned
    def last_status_change=(new_value : Time?)
      raise ArgumentError.new("\"last_status_change\" is required and cannot be null") if new_value.nil?
      unless new_value.nil?
      end

      @last_status_change = new_value
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] breakdown Object to be assigned
    def breakdown=(new_value : ProductStatusBreakdown?)
      raise ArgumentError.new("\"breakdown\" is required and cannot be null") if new_value.nil?
      unless new_value.nil?
      end

      @breakdown = new_value
    end

    # Generates #hash and #== methods from all fields
    # #== @return [Bool]
    # #hash calculates hash code according to all attributes.
    # #hash @return [UInt64] Hash code
    def_equals_and_hash(@status, @last_status_change, @breakdown)
  end
end
