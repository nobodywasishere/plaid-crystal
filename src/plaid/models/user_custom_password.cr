#  The Plaid API
#
# The Plaid REST API. Please see https://plaid.com/docs/api for more details.
#
# The version of the OpenAPI document: 2020-09-14_1.474.3
#
# Generated by: https://openapi-generator.tech
#

require "../../core"

require "./mfa"
require "./override_accounts"

module Plaid
  # Custom test accounts are configured with a JSON configuration object formulated according to the schema below. All top level fields are optional. Sending an empty object as a configuration will result in an account configured with random balances and transaction history.
  class UserCustomPassword
    include JSON::Serializable
    include JSON::Serializable::Unmapped
    include OpenApi::Validatable
    include OpenApi::Json

    # Required Properties

    # A seed, in the form of a string, that will be used to randomly generate account and transaction data, if this data is not specified using the `override_accounts` argument. If no seed is specified, the randomly generated data will be different each time.  Note that transactions data is generated relative to the Item's creation date. Different Items created on different dates with the same seed for transactions data will have different dates for the transactions. The number of days between each transaction and the Item creation will remain constant. For example, an Item created on December 15 might show a transaction on December 14. An Item created on December 20, using the same seed, would show that same transaction occurring on December 19.
    @[JSON::Field(key: "seed", type: String?, default: nil, required: true, nullable: false, emit_null: false)]
    getter seed : String? = nil

    # An array of account overrides to configure the accounts for the Item. By default, if no override is specified, transactions and account data will be randomly generated based on the account type and subtype, and other products will have fixed or empty data.
    @[JSON::Field(key: "override_accounts", type: Array(OverrideAccounts)?, default: nil, required: true, nullable: false, emit_null: false)]
    getter override_accounts : Array(OverrideAccounts)? = nil

    @[JSON::Field(key: "mfa", type: MFA?, default: nil, required: true, nullable: false, emit_null: false)]
    getter mfa : MFA? = nil

    # You may trigger a reCAPTCHA in Plaid Link in the Sandbox environment by using the recaptcha field. Possible values are `good` or `bad`. A value of `good` will result in successful Item creation and `bad` will result in a `RECAPTCHA_BAD` error to simulate a failed reCAPTCHA. Both values require the reCAPTCHA to be manually solved within Plaid Link.
    @[JSON::Field(key: "recaptcha", type: String?, default: nil, required: true, nullable: false, emit_null: false)]
    getter recaptcha : String? = nil

    # An error code to force on Item creation. Possible values are:  `\"INSTITUTION_NOT_RESPONDING\"` `\"INSTITUTION_NO_LONGER_SUPPORTED\"` `\"INVALID_CREDENTIALS\"` `\"INVALID_MFA\"` `\"ITEM_LOCKED\"` `\"ITEM_LOGIN_REQUIRED\"` `\"ITEM_NOT_SUPPORTED\"` `\"INVALID_LINK_TOKEN\"` `\"MFA_NOT_SUPPORTED\"` `\"NO_ACCOUNTS\"` `\"PLAID_ERROR\"` `\"USER_INPUT_TIMEOUT\"` `\"USER_SETUP_REQUIRED\"`
    @[JSON::Field(key: "force_error", type: String?, default: nil, required: true, nullable: false, emit_null: false)]
    getter force_error : String? = nil

    # End of Required Properties

    # Optional Properties

    # The version of the password schema to use, possible values are 1 or 2. The default value is 2. You should only specify 1 if you know it is necessary for your test suite.
    @[JSON::Field(key: "version", type: String?, default: nil, required: false, nullable: true, emit_null: true, presence: true, ignore_serialize: version.nil? && !version_present?)]
    getter version : String? = nil

    @[JSON::Field(ignore: true)]
    property? version_present : Bool = false

    # Initializes the object
    # @param [Hash] attributes Model attributes in the form of hash
    def initialize(
      *,
      # Required properties
      @seed : String? = nil,
      @override_accounts : Array(OverrideAccounts)? = nil,
      @mfa : MFA? = nil,
      @recaptcha : String? = nil,
      @force_error : String? = nil,
      # Optional properties
      @version : String? = nil
    )
    end

    # Show invalid properties with the reasons. Usually used together with valid?
    # @return Array for valid properties with the reasons
    def list_invalid_properties : Array(String)
      invalid_properties = Array(String).new

      invalid_properties.push("\"seed\" is required and cannot be null") if @seed.nil?

      unless (_seed = @seed).nil?
      end
      invalid_properties.push("\"override_accounts\" is required and cannot be null") if @override_accounts.nil?

      unless (_override_accounts = @override_accounts).nil?
      end
      invalid_properties.push("\"mfa\" is required and cannot be null") if @mfa.nil?

      unless (_mfa = @mfa).nil?
      end
      invalid_properties.push("\"recaptcha\" is required and cannot be null") if @recaptcha.nil?

      unless (_recaptcha = @recaptcha).nil?
      end
      invalid_properties.push("\"force_error\" is required and cannot be null") if @force_error.nil?

      unless (_force_error = @force_error).nil?
      end
      unless (_version = @version).nil?
      end
      invalid_properties
    end

    # Check to see if the all the properties in the model are valid
    # @return true if the model is valid
    def valid? : Bool
      return false if @seed.nil?
      unless (_seed = @seed).nil?
      end

      return false if @override_accounts.nil?
      unless (_override_accounts = @override_accounts).nil?
      end

      return false if @mfa.nil?
      unless (_mfa = @mfa).nil?
      end

      return false if @recaptcha.nil?
      unless (_recaptcha = @recaptcha).nil?
      end

      return false if @force_error.nil?
      unless (_force_error = @force_error).nil?
      end

      unless (_version = @version).nil?
      end

      true
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] seed Object to be assigned
    def seed=(new_value : String?)
      raise ArgumentError.new("\"seed\" is required and cannot be null") if new_value.nil?
      unless new_value.nil?
      end

      @seed = new_value
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] override_accounts Object to be assigned
    def override_accounts=(new_value : Array(OverrideAccounts)?)
      raise ArgumentError.new("\"override_accounts\" is required and cannot be null") if new_value.nil?
      unless new_value.nil?
      end

      @override_accounts = new_value
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] mfa Object to be assigned
    def mfa=(new_value : MFA?)
      raise ArgumentError.new("\"mfa\" is required and cannot be null") if new_value.nil?
      unless new_value.nil?
      end

      @mfa = new_value
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] recaptcha Object to be assigned
    def recaptcha=(new_value : String?)
      raise ArgumentError.new("\"recaptcha\" is required and cannot be null") if new_value.nil?
      unless new_value.nil?
      end

      @recaptcha = new_value
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] force_error Object to be assigned
    def force_error=(new_value : String?)
      raise ArgumentError.new("\"force_error\" is required and cannot be null") if new_value.nil?
      unless new_value.nil?
      end

      @force_error = new_value
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] version Object to be assigned
    def version=(new_value : String?)
      unless new_value.nil?
      end

      @version = new_value
    end

    # Generates #hash and #== methods from all fields
    # #== @return [Bool]
    # #hash calculates hash code according to all attributes.
    # #hash @return [UInt64] Hash code
    def_equals_and_hash(@seed, @override_accounts, @mfa, @recaptcha, @force_error, @version, @version_present)
  end
end
