#  The Plaid API
#
# The Plaid REST API. Please see https://plaid.com/docs/api for more details.
#
# The version of the OpenAPI document: 2020-09-14_1.474.3
#
# Generated by: https://openapi-generator.tech
#

require "../../core"

require "./wallet_transaction_status"
require "./webhook_environment_values"

module Plaid
  # Fired when the status of a wallet transaction has changed.
  class WalletTransactionStatusUpdateWebhook
    include JSON::Serializable
    include JSON::Serializable::Unmapped
    include OpenApi::Validatable
    include OpenApi::Json

    # Required Properties

    # `WALLET`
    @[JSON::Field(key: "webhook_type", type: String?, default: nil, required: true, nullable: false, emit_null: false)]
    getter webhook_type : String? = nil

    # `WALLET_TRANSACTION_STATUS_UPDATE`
    @[JSON::Field(key: "webhook_code", type: String?, default: nil, required: true, nullable: false, emit_null: false)]
    getter webhook_code : String? = nil

    # The `transaction_id` for the wallet transaction being updated
    @[JSON::Field(key: "transaction_id", type: String?, default: nil, required: true, nullable: false, emit_null: false)]
    getter transaction_id : String? = nil

    @[JSON::Field(key: "new_status", type: Plaid::WalletTransactionStatus?, default: nil, required: true, nullable: false, emit_null: false)]
    getter new_status : Plaid::WalletTransactionStatus? = nil

    @[JSON::Field(key: "old_status", type: Plaid::WalletTransactionStatus?, default: nil, required: true, nullable: false, emit_null: false)]
    getter old_status : Plaid::WalletTransactionStatus? = nil

    # The timestamp of the update, in [ISO 8601](https://wikipedia.org/wiki/ISO_8601) format, e.g. `\"2017-09-14T14:42:19.350Z\"`
    @[JSON::Field(key: "timestamp", type: Time?, default: nil, required: true, nullable: false, emit_null: false, converter: Time::RFC3339Converter)]
    getter timestamp : Time? = nil

    @[JSON::Field(key: "environment", type: Plaid::WebhookEnvironmentValues?, default: nil, required: true, nullable: false, emit_null: false)]
    getter environment : Plaid::WebhookEnvironmentValues? = nil

    # End of Required Properties

    # Optional Properties

    # The `payment_id` associated with the transaction. This will be present in case of `REFUND` and `PIS_PAY_IN`.
    @[JSON::Field(key: "payment_id", type: String?, default: nil, required: false, nullable: true, emit_null: true, presence: true, ignore_serialize: payment_id.nil? && !payment_id_present?)]
    getter payment_id : String? = nil

    @[JSON::Field(ignore: true)]
    property? payment_id_present : Bool = false

    # The EMI (E-Money Institution) wallet that this payment is associated with. This wallet is used as an intermediary account to enable Plaid to reconcile the settlement of funds for Payment Initiation requests.
    @[JSON::Field(key: "wallet_id", type: String?, default: nil, required: false, nullable: false, emit_null: false)]
    getter wallet_id : String? = nil

    # Initializes the object
    # @param [Hash] attributes Model attributes in the form of hash
    def initialize(
      *,
      # Required properties
      @webhook_type : String? = nil,
      @webhook_code : String? = nil,
      @transaction_id : String? = nil,
      @new_status : Plaid::WalletTransactionStatus? = nil,
      @old_status : Plaid::WalletTransactionStatus? = nil,
      @timestamp : Time? = nil,
      @environment : Plaid::WebhookEnvironmentValues? = nil,
      # Optional properties
      @payment_id : String? = nil,
      @wallet_id : String? = nil
    )
    end

    # Show invalid properties with the reasons. Usually used together with valid?
    # @return Array for valid properties with the reasons
    def list_invalid_properties : Array(String)
      invalid_properties = Array(String).new

      invalid_properties.push("\"webhook_type\" is required and cannot be null") if @webhook_type.nil?

      unless (_webhook_type = @webhook_type).nil?
      end
      invalid_properties.push("\"webhook_code\" is required and cannot be null") if @webhook_code.nil?

      unless (_webhook_code = @webhook_code).nil?
      end
      invalid_properties.push("\"transaction_id\" is required and cannot be null") if @transaction_id.nil?

      unless (_transaction_id = @transaction_id).nil?
      end
      invalid_properties.push("\"new_status\" is required and cannot be null") if @new_status.nil?

      unless (_new_status = @new_status).nil?
        invalid_properties.push(_new_status.error_message) if !_new_status.valid?
      end
      invalid_properties.push("\"old_status\" is required and cannot be null") if @old_status.nil?

      unless (_old_status = @old_status).nil?
        invalid_properties.push(_old_status.error_message) if !_old_status.valid?
      end
      invalid_properties.push("\"timestamp\" is required and cannot be null") if @timestamp.nil?

      unless (_timestamp = @timestamp).nil?
      end
      invalid_properties.push("\"environment\" is required and cannot be null") if @environment.nil?

      unless (_environment = @environment).nil?
        invalid_properties.push(_environment.error_message) if !_environment.valid?
      end
      unless (_payment_id = @payment_id).nil?
      end
      unless (_wallet_id = @wallet_id).nil?
      end
      invalid_properties
    end

    # Check to see if the all the properties in the model are valid
    # @return true if the model is valid
    def valid? : Bool
      return false if @webhook_type.nil?
      unless (_webhook_type = @webhook_type).nil?
      end

      return false if @webhook_code.nil?
      unless (_webhook_code = @webhook_code).nil?
      end

      return false if @transaction_id.nil?
      unless (_transaction_id = @transaction_id).nil?
      end

      return false if @new_status.nil?
      unless (_new_status = @new_status).nil?
        return false if !_new_status.valid?
      end

      return false if @old_status.nil?
      unless (_old_status = @old_status).nil?
        return false if !_old_status.valid?
      end

      return false if @timestamp.nil?
      unless (_timestamp = @timestamp).nil?
      end

      return false if @environment.nil?
      unless (_environment = @environment).nil?
        return false if !_environment.valid?
      end

      unless (_payment_id = @payment_id).nil?
      end

      unless (_wallet_id = @wallet_id).nil?
      end

      true
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] webhook_type Object to be assigned
    def webhook_type=(new_value : String?)
      raise ArgumentError.new("\"webhook_type\" is required and cannot be null") if new_value.nil?
      unless new_value.nil?
      end

      @webhook_type = new_value
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] webhook_code Object to be assigned
    def webhook_code=(new_value : String?)
      raise ArgumentError.new("\"webhook_code\" is required and cannot be null") if new_value.nil?
      unless new_value.nil?
      end

      @webhook_code = new_value
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] transaction_id Object to be assigned
    def transaction_id=(new_value : String?)
      raise ArgumentError.new("\"transaction_id\" is required and cannot be null") if new_value.nil?
      unless new_value.nil?
      end

      @transaction_id = new_value
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] new_status Object to be assigned
    def new_status=(new_value : Plaid::WalletTransactionStatus?)
      raise ArgumentError.new("\"new_status\" is required and cannot be null") if new_value.nil?
      unless new_value.nil?
        new_value.validate
      end

      @new_status = new_value
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] old_status Object to be assigned
    def old_status=(new_value : Plaid::WalletTransactionStatus?)
      raise ArgumentError.new("\"old_status\" is required and cannot be null") if new_value.nil?
      unless new_value.nil?
        new_value.validate
      end

      @old_status = new_value
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] timestamp Object to be assigned
    def timestamp=(new_value : Time?)
      raise ArgumentError.new("\"timestamp\" is required and cannot be null") if new_value.nil?
      unless new_value.nil?
      end

      @timestamp = new_value
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] environment Object to be assigned
    def environment=(new_value : Plaid::WebhookEnvironmentValues?)
      raise ArgumentError.new("\"environment\" is required and cannot be null") if new_value.nil?
      unless new_value.nil?
        new_value.validate
      end

      @environment = new_value
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] payment_id Object to be assigned
    def payment_id=(new_value : String?)
      unless new_value.nil?
      end

      @payment_id = new_value
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] wallet_id Object to be assigned
    def wallet_id=(new_value : String?)
      unless new_value.nil?
      end

      @wallet_id = new_value
    end

    # Generates #hash and #== methods from all fields
    # #== @return [Bool]
    # #hash calculates hash code according to all attributes.
    # #hash @return [UInt64] Hash code
    def_equals_and_hash(@webhook_type, @webhook_code, @transaction_id, @new_status, @old_status, @timestamp, @environment, @payment_id, @payment_id_present, @wallet_id)
  end
end
