#  The Plaid API
#
# The Plaid REST API. Please see https://plaid.com/docs/api for more details.
#
# The version of the OpenAPI document: 2020-09-14_1.474.3
#
# Generated by: https://openapi-generator.tech
#

require "../../core"

require "./employee_income_summary_field_string"
require "./employer_income_summary_field_string"
require "./pay_frequency"
require "./projected_income_summary_field_number"
require "./transaction_data"
require "./ytd_gross_income_summary_field_number"
require "./ytd_net_income_summary_field_number"

module Plaid
  # The verified fields from a paystub verification. All fields are provided as reported on the paystub.
  class IncomeSummary
    include JSON::Serializable
    include JSON::Serializable::Unmapped
    include OpenApi::Validatable
    include OpenApi::Json

    # Required Properties

    @[JSON::Field(key: "employer_name", type: Plaid::EmployerIncomeSummaryFieldString?, default: nil, required: true, nullable: false, emit_null: false)]
    getter employer_name : Plaid::EmployerIncomeSummaryFieldString? = nil

    @[JSON::Field(key: "employee_name", type: Plaid::EmployeeIncomeSummaryFieldString?, default: nil, required: true, nullable: false, emit_null: false)]
    getter employee_name : Plaid::EmployeeIncomeSummaryFieldString? = nil

    @[JSON::Field(key: "ytd_gross_income", type: Plaid::YTDGrossIncomeSummaryFieldNumber?, default: nil, required: true, nullable: false, emit_null: false)]
    getter ytd_gross_income : Plaid::YTDGrossIncomeSummaryFieldNumber? = nil

    @[JSON::Field(key: "ytd_net_income", type: Plaid::YTDNetIncomeSummaryFieldNumber?, default: nil, required: true, nullable: false, emit_null: false)]
    getter ytd_net_income : Plaid::YTDNetIncomeSummaryFieldNumber? = nil

    @[JSON::Field(key: "pay_frequency", type: PayFrequency?, default: nil, required: true, nullable: true, emit_null: true)]
    getter pay_frequency : PayFrequency? = nil

    @[JSON::Field(key: "projected_wage", type: Plaid::ProjectedIncomeSummaryFieldNumber?, default: nil, required: true, nullable: false, emit_null: false)]
    getter projected_wage : Plaid::ProjectedIncomeSummaryFieldNumber? = nil

    @[JSON::Field(key: "verified_transaction", type: TransactionData?, default: nil, required: true, nullable: true, emit_null: true)]
    getter verified_transaction : TransactionData? = nil

    # End of Required Properties

    # Initializes the object
    # @param [Hash] attributes Model attributes in the form of hash
    def initialize(
      *,
      # Required properties
      @employer_name : Plaid::EmployerIncomeSummaryFieldString? = nil,
      @employee_name : Plaid::EmployeeIncomeSummaryFieldString? = nil,
      @ytd_gross_income : Plaid::YTDGrossIncomeSummaryFieldNumber? = nil,
      @ytd_net_income : Plaid::YTDNetIncomeSummaryFieldNumber? = nil,
      @pay_frequency : PayFrequency? = nil,
      @projected_wage : Plaid::ProjectedIncomeSummaryFieldNumber? = nil,
      @verified_transaction : TransactionData? = nil
    )
    end

    # Show invalid properties with the reasons. Usually used together with valid?
    # @return Array for valid properties with the reasons
    def list_invalid_properties : Array(String)
      invalid_properties = Array(String).new

      invalid_properties.push("\"employer_name\" is required and cannot be null") if @employer_name.nil?

      unless (_employer_name = @employer_name).nil?
        invalid_properties.concat(_employer_name.list_invalid_properties_for("employer_name")) if _employer_name.is_a?(OpenApi::Validatable)
      end
      invalid_properties.push("\"employee_name\" is required and cannot be null") if @employee_name.nil?

      unless (_employee_name = @employee_name).nil?
        invalid_properties.concat(_employee_name.list_invalid_properties_for("employee_name")) if _employee_name.is_a?(OpenApi::Validatable)
      end
      invalid_properties.push("\"ytd_gross_income\" is required and cannot be null") if @ytd_gross_income.nil?

      unless (_ytd_gross_income = @ytd_gross_income).nil?
        invalid_properties.concat(_ytd_gross_income.list_invalid_properties_for("ytd_gross_income")) if _ytd_gross_income.is_a?(OpenApi::Validatable)
      end
      invalid_properties.push("\"ytd_net_income\" is required and cannot be null") if @ytd_net_income.nil?

      unless (_ytd_net_income = @ytd_net_income).nil?
        invalid_properties.concat(_ytd_net_income.list_invalid_properties_for("ytd_net_income")) if _ytd_net_income.is_a?(OpenApi::Validatable)
      end
      unless (_pay_frequency = @pay_frequency).nil?
      end
      invalid_properties.push("\"projected_wage\" is required and cannot be null") if @projected_wage.nil?

      unless (_projected_wage = @projected_wage).nil?
        invalid_properties.concat(_projected_wage.list_invalid_properties_for("projected_wage")) if _projected_wage.is_a?(OpenApi::Validatable)
      end
      unless (_verified_transaction = @verified_transaction).nil?
      end
      invalid_properties
    end

    # Check to see if the all the properties in the model are valid
    # @return true if the model is valid
    def valid? : Bool
      return false if @employer_name.nil?
      unless (_employer_name = @employer_name).nil?
        return false if _employer_name.is_a?(OpenApi::Validatable) && !_employer_name.valid?
      end

      return false if @employee_name.nil?
      unless (_employee_name = @employee_name).nil?
        return false if _employee_name.is_a?(OpenApi::Validatable) && !_employee_name.valid?
      end

      return false if @ytd_gross_income.nil?
      unless (_ytd_gross_income = @ytd_gross_income).nil?
        return false if _ytd_gross_income.is_a?(OpenApi::Validatable) && !_ytd_gross_income.valid?
      end

      return false if @ytd_net_income.nil?
      unless (_ytd_net_income = @ytd_net_income).nil?
        return false if _ytd_net_income.is_a?(OpenApi::Validatable) && !_ytd_net_income.valid?
      end

      unless (_pay_frequency = @pay_frequency).nil?
      end

      return false if @projected_wage.nil?
      unless (_projected_wage = @projected_wage).nil?
        return false if _projected_wage.is_a?(OpenApi::Validatable) && !_projected_wage.valid?
      end

      unless (_verified_transaction = @verified_transaction).nil?
      end

      true
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] employer_name Object to be assigned
    def employer_name=(new_value : Plaid::EmployerIncomeSummaryFieldString?)
      raise ArgumentError.new("\"employer_name\" is required and cannot be null") if new_value.nil?
      unless new_value.nil?
        new_value.validate if new_value.is_a?(OpenApi::Validatable)
      end

      @employer_name = new_value
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] employee_name Object to be assigned
    def employee_name=(new_value : Plaid::EmployeeIncomeSummaryFieldString?)
      raise ArgumentError.new("\"employee_name\" is required and cannot be null") if new_value.nil?
      unless new_value.nil?
        new_value.validate if new_value.is_a?(OpenApi::Validatable)
      end

      @employee_name = new_value
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] ytd_gross_income Object to be assigned
    def ytd_gross_income=(new_value : Plaid::YTDGrossIncomeSummaryFieldNumber?)
      raise ArgumentError.new("\"ytd_gross_income\" is required and cannot be null") if new_value.nil?
      unless new_value.nil?
        new_value.validate if new_value.is_a?(OpenApi::Validatable)
      end

      @ytd_gross_income = new_value
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] ytd_net_income Object to be assigned
    def ytd_net_income=(new_value : Plaid::YTDNetIncomeSummaryFieldNumber?)
      raise ArgumentError.new("\"ytd_net_income\" is required and cannot be null") if new_value.nil?
      unless new_value.nil?
        new_value.validate if new_value.is_a?(OpenApi::Validatable)
      end

      @ytd_net_income = new_value
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] pay_frequency Object to be assigned
    def pay_frequency=(new_value : PayFrequency?)
      unless new_value.nil?
      end

      @pay_frequency = new_value
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] projected_wage Object to be assigned
    def projected_wage=(new_value : Plaid::ProjectedIncomeSummaryFieldNumber?)
      raise ArgumentError.new("\"projected_wage\" is required and cannot be null") if new_value.nil?
      unless new_value.nil?
        new_value.validate if new_value.is_a?(OpenApi::Validatable)
      end

      @projected_wage = new_value
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] verified_transaction Object to be assigned
    def verified_transaction=(new_value : TransactionData?)
      unless new_value.nil?
      end

      @verified_transaction = new_value
    end

    # Generates #hash and #== methods from all fields
    # #== @return [Bool]
    # #hash calculates hash code according to all attributes.
    # #hash @return [UInt64] Hash code
    def_equals_and_hash(@employer_name, @employee_name, @ytd_gross_income, @ytd_net_income, @pay_frequency, @projected_wage, @verified_transaction)
  end
end
