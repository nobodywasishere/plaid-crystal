#  The Plaid API
#
# The Plaid REST API. Please see https://plaid.com/docs/api for more details.
#
# The version of the OpenAPI document: 2020-09-14_1.474.3
#
# Generated by: https://openapi-generator.tech
#

require "../../core"

module Plaid
  # Student loan repayment information used to configure Sandbox test data for the Liabilities product
  class StudentLoanRepaymentModel
    include JSON::Serializable
    include JSON::Serializable::Unmapped
    include OpenApi::Validatable
    include OpenApi::Json

    # Required Properties

    # The only currently supported value for this field is `standard`.
    @[JSON::Field(key: "type", type: String?, default: nil, required: true, nullable: false, emit_null: false)]
    getter _type : String? = nil

    # Configures the number of months before repayment starts.
    @[JSON::Field(key: "non_repayment_months", type: Float64?, default: nil, required: true, nullable: false, emit_null: false)]
    getter non_repayment_months : Float64? = nil

    # Configures the number of months of repayments before the loan is paid off.
    @[JSON::Field(key: "repayment_months", type: Float64?, default: nil, required: true, nullable: false, emit_null: false)]
    getter repayment_months : Float64? = nil

    # End of Required Properties

    # Initializes the object
    # @param [Hash] attributes Model attributes in the form of hash
    def initialize(
      *,
      # Required properties
      @_type : String? = nil,
      @non_repayment_months : Float64? = nil,
      @repayment_months : Float64? = nil
    )
    end

    # Show invalid properties with the reasons. Usually used together with valid?
    # @return Array for valid properties with the reasons
    def list_invalid_properties : Array(String)
      invalid_properties = Array(String).new

      invalid_properties.push("\"_type\" is required and cannot be null") if @_type.nil?

      unless (__type = @_type).nil?
      end
      invalid_properties.push("\"non_repayment_months\" is required and cannot be null") if @non_repayment_months.nil?

      unless (_non_repayment_months = @non_repayment_months).nil?
      end
      invalid_properties.push("\"repayment_months\" is required and cannot be null") if @repayment_months.nil?

      unless (_repayment_months = @repayment_months).nil?
      end
      invalid_properties
    end

    # Check to see if the all the properties in the model are valid
    # @return true if the model is valid
    def valid? : Bool
      return false if @_type.nil?
      unless (__type = @_type).nil?
      end

      return false if @non_repayment_months.nil?
      unless (_non_repayment_months = @non_repayment_months).nil?
      end

      return false if @repayment_months.nil?
      unless (_repayment_months = @repayment_months).nil?
      end

      true
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] _type Object to be assigned
    def _type=(new_value : String?)
      raise ArgumentError.new("\"_type\" is required and cannot be null") if new_value.nil?
      unless new_value.nil?
      end

      @_type = new_value
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] non_repayment_months Object to be assigned
    def non_repayment_months=(new_value : Float64?)
      raise ArgumentError.new("\"non_repayment_months\" is required and cannot be null") if new_value.nil?
      unless new_value.nil?
      end

      @non_repayment_months = new_value
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] repayment_months Object to be assigned
    def repayment_months=(new_value : Float64?)
      raise ArgumentError.new("\"repayment_months\" is required and cannot be null") if new_value.nil?
      unless new_value.nil?
      end

      @repayment_months = new_value
    end

    # Generates #hash and #== methods from all fields
    # #== @return [Bool]
    # #hash calculates hash code according to all attributes.
    # #hash @return [UInt64] Hash code
    def_equals_and_hash(@_type, @non_repayment_months, @repayment_months)
  end
end
