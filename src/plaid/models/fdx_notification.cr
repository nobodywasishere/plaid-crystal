#  The Plaid API
#
# The Plaid REST API. Please see https://plaid.com/docs/api for more details.
#
# The version of the OpenAPI document: 2020-09-14_1.474.3
#
# Generated by: https://openapi-generator.tech
#

require "../../core"

require "./fdx_hateoas_link"
require "./fdx_notification_category"
require "./fdx_notification_payload"
require "./fdx_notification_priority"
require "./fdx_notification_severity"
require "./fdx_notification_type"
require "./fdx_party"

module Plaid
  # Provides the base fields of a notification. Clients will read the `type` property to determine the expected notification payload
  class FDXNotification
    include JSON::Serializable
    include JSON::Serializable::Unmapped
    include OpenApi::Validatable
    include OpenApi::Json

    # Required Properties

    # Id of notification
    @[JSON::Field(key: "notificationId", type: String?, default: nil, required: true, nullable: false, emit_null: false)]
    getter notification_id : String? = nil

    @[JSON::Field(key: "type", type: Plaid::FDXNotificationType?, default: nil, required: true, nullable: false, emit_null: false)]
    getter _type : Plaid::FDXNotificationType? = nil

    # ISO 8601 date-time in format 'YYYY-MM-DDThh:mm:ss.nnn[Z|[+|-]hh:mm]' according to [IETF RFC3339](https://xml2rfc.tools.ietf.org/public/rfc/html/rfc3339.html#anchor14)
    @[JSON::Field(key: "sentOn", type: Time?, default: nil, required: true, nullable: false, emit_null: false, converter: Time::RFC3339Converter)]
    getter sent_on : Time? = nil

    @[JSON::Field(key: "category", type: Plaid::FDXNotificationCategory?, default: nil, required: true, nullable: false, emit_null: false)]
    getter category : Plaid::FDXNotificationCategory? = nil

    @[JSON::Field(key: "notificationPayload", type: Plaid::FDXNotificationPayload?, default: nil, required: true, nullable: false, emit_null: false)]
    getter notification_payload : Plaid::FDXNotificationPayload? = nil

    # End of Required Properties

    # Optional Properties

    @[JSON::Field(key: "severity", type: Plaid::FDXNotificationSeverity?, default: nil, required: false, nullable: false, emit_null: false)]
    getter severity : Plaid::FDXNotificationSeverity? = nil

    @[JSON::Field(key: "priority", type: Plaid::FDXNotificationPriority?, default: nil, required: false, nullable: false, emit_null: false)]
    getter priority : Plaid::FDXNotificationPriority? = nil

    @[JSON::Field(key: "publisher", type: Plaid::FDXParty?, default: nil, required: false, nullable: false, emit_null: false)]
    getter publisher : Plaid::FDXParty? = nil

    @[JSON::Field(key: "subscriber", type: Plaid::FDXParty?, default: nil, required: false, nullable: false, emit_null: false)]
    getter subscriber : Plaid::FDXParty? = nil

    @[JSON::Field(key: "url", type: Plaid::FDXHateoasLink?, default: nil, required: false, nullable: false, emit_null: false)]
    getter url : Plaid::FDXHateoasLink? = nil

    # Initializes the object
    # @param [Hash] attributes Model attributes in the form of hash
    def initialize(
      *,
      # Required properties
      @notification_id : String? = nil,
      @_type : Plaid::FDXNotificationType? = nil,
      @sent_on : Time? = nil,
      @category : Plaid::FDXNotificationCategory? = nil,
      @notification_payload : Plaid::FDXNotificationPayload? = nil,
      # Optional properties
      @severity : Plaid::FDXNotificationSeverity? = nil,
      @priority : Plaid::FDXNotificationPriority? = nil,
      @publisher : Plaid::FDXParty? = nil,
      @subscriber : Plaid::FDXParty? = nil,
      @url : Plaid::FDXHateoasLink? = nil
    )
    end

    # Show invalid properties with the reasons. Usually used together with valid?
    # @return Array for valid properties with the reasons
    def list_invalid_properties : Array(String)
      invalid_properties = Array(String).new

      invalid_properties.push("\"notification_id\" is required and cannot be null") if @notification_id.nil?

      unless (_notification_id = @notification_id).nil?
      end
      invalid_properties.push("\"_type\" is required and cannot be null") if @_type.nil?

      unless (__type = @_type).nil?
        invalid_properties.push(__type.error_message) if !__type.valid?
      end
      invalid_properties.push("\"sent_on\" is required and cannot be null") if @sent_on.nil?

      unless (_sent_on = @sent_on).nil?
      end
      invalid_properties.push("\"category\" is required and cannot be null") if @category.nil?

      unless (_category = @category).nil?
        invalid_properties.push(_category.error_message) if !_category.valid?
      end
      invalid_properties.push("\"notification_payload\" is required and cannot be null") if @notification_payload.nil?

      unless (_notification_payload = @notification_payload).nil?
        invalid_properties.concat(_notification_payload.list_invalid_properties_for("notification_payload")) if _notification_payload.is_a?(OpenApi::Validatable)
      end
      unless (_severity = @severity).nil?
        invalid_properties.push(_severity.error_message) if !_severity.valid?
      end
      unless (_priority = @priority).nil?
        invalid_properties.push(_priority.error_message) if !_priority.valid?
      end
      unless (_publisher = @publisher).nil?
        invalid_properties.concat(_publisher.list_invalid_properties_for("publisher")) if _publisher.is_a?(OpenApi::Validatable)
      end
      unless (_subscriber = @subscriber).nil?
        invalid_properties.concat(_subscriber.list_invalid_properties_for("subscriber")) if _subscriber.is_a?(OpenApi::Validatable)
      end
      unless (_url = @url).nil?
        invalid_properties.concat(_url.list_invalid_properties_for("url")) if _url.is_a?(OpenApi::Validatable)
      end
      invalid_properties
    end

    # Check to see if the all the properties in the model are valid
    # @return true if the model is valid
    def valid? : Bool
      return false if @notification_id.nil?
      unless (_notification_id = @notification_id).nil?
      end

      return false if @_type.nil?
      unless (__type = @_type).nil?
        return false if !__type.valid?
      end

      return false if @sent_on.nil?
      unless (_sent_on = @sent_on).nil?
      end

      return false if @category.nil?
      unless (_category = @category).nil?
        return false if !_category.valid?
      end

      return false if @notification_payload.nil?
      unless (_notification_payload = @notification_payload).nil?
        return false if _notification_payload.is_a?(OpenApi::Validatable) && !_notification_payload.valid?
      end

      unless (_severity = @severity).nil?
        return false if !_severity.valid?
      end

      unless (_priority = @priority).nil?
        return false if !_priority.valid?
      end

      unless (_publisher = @publisher).nil?
        return false if _publisher.is_a?(OpenApi::Validatable) && !_publisher.valid?
      end

      unless (_subscriber = @subscriber).nil?
        return false if _subscriber.is_a?(OpenApi::Validatable) && !_subscriber.valid?
      end

      unless (_url = @url).nil?
        return false if _url.is_a?(OpenApi::Validatable) && !_url.valid?
      end

      true
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] notification_id Object to be assigned
    def notification_id=(new_value : String?)
      raise ArgumentError.new("\"notification_id\" is required and cannot be null") if new_value.nil?
      unless new_value.nil?
      end

      @notification_id = new_value
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] _type Object to be assigned
    def _type=(new_value : Plaid::FDXNotificationType?)
      raise ArgumentError.new("\"_type\" is required and cannot be null") if new_value.nil?
      unless new_value.nil?
        new_value.validate
      end

      @_type = new_value
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] sent_on Object to be assigned
    def sent_on=(new_value : Time?)
      raise ArgumentError.new("\"sent_on\" is required and cannot be null") if new_value.nil?
      unless new_value.nil?
      end

      @sent_on = new_value
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] category Object to be assigned
    def category=(new_value : Plaid::FDXNotificationCategory?)
      raise ArgumentError.new("\"category\" is required and cannot be null") if new_value.nil?
      unless new_value.nil?
        new_value.validate
      end

      @category = new_value
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] notification_payload Object to be assigned
    def notification_payload=(new_value : Plaid::FDXNotificationPayload?)
      raise ArgumentError.new("\"notification_payload\" is required and cannot be null") if new_value.nil?
      unless new_value.nil?
        new_value.validate if new_value.is_a?(OpenApi::Validatable)
      end

      @notification_payload = new_value
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] severity Object to be assigned
    def severity=(new_value : Plaid::FDXNotificationSeverity?)
      unless new_value.nil?
        new_value.validate
      end

      @severity = new_value
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] priority Object to be assigned
    def priority=(new_value : Plaid::FDXNotificationPriority?)
      unless new_value.nil?
        new_value.validate
      end

      @priority = new_value
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] publisher Object to be assigned
    def publisher=(new_value : Plaid::FDXParty?)
      unless new_value.nil?
        new_value.validate if new_value.is_a?(OpenApi::Validatable)
      end

      @publisher = new_value
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] subscriber Object to be assigned
    def subscriber=(new_value : Plaid::FDXParty?)
      unless new_value.nil?
        new_value.validate if new_value.is_a?(OpenApi::Validatable)
      end

      @subscriber = new_value
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] url Object to be assigned
    def url=(new_value : Plaid::FDXHateoasLink?)
      unless new_value.nil?
        new_value.validate if new_value.is_a?(OpenApi::Validatable)
      end

      @url = new_value
    end

    # Generates #hash and #== methods from all fields
    # #== @return [Bool]
    # #hash calculates hash code according to all attributes.
    # #hash @return [UInt64] Hash code
    def_equals_and_hash(@notification_id, @_type, @sent_on, @category, @notification_payload, @severity, @priority, @publisher, @subscriber, @url)
  end
end
