#  The Plaid API
#
# The Plaid REST API. Please see https://plaid.com/docs/api for more details.
#
# The version of the OpenAPI document: 2020-09-14_1.474.3
#
# Generated by: https://openapi-generator.tech
#

require "../../core"

module Plaid
  # A statement's metadata associated with an account
  class StatementsStatement
    include JSON::Serializable
    include JSON::Serializable::Unmapped
    include OpenApi::Validatable
    include OpenApi::Json

    # Required Properties

    # Plaid's unique identifier for the statement.
    @[JSON::Field(key: "statement_id", type: String?, default: nil, required: true, nullable: false, emit_null: false)]
    getter statement_id : String? = nil

    # Month of the year. Possible values: 1 through 12 (January through December).
    @[JSON::Field(key: "month", type: Int32?, default: nil, required: true, nullable: false, emit_null: false)]
    getter month : Int32? = nil

    # The year of statement.
    @[JSON::Field(key: "year", type: Int32?, default: nil, required: true, nullable: false, emit_null: false)]
    getter year : Int32? = nil
    MIN_FOR_YEAR = Int32.new("2010")

    # End of Required Properties

    # Initializes the object
    # @param [Hash] attributes Model attributes in the form of hash
    def initialize(
      *,
      # Required properties
      @statement_id : String? = nil,
      @month : Int32? = nil,
      @year : Int32? = nil
    )
    end

    # Show invalid properties with the reasons. Usually used together with valid?
    # @return Array for valid properties with the reasons
    def list_invalid_properties : Array(String)
      invalid_properties = Array(String).new

      invalid_properties.push("\"statement_id\" is required and cannot be null") if @statement_id.nil?

      unless (_statement_id = @statement_id).nil?
      end
      invalid_properties.push("\"month\" is required and cannot be null") if @month.nil?

      unless (_month = @month).nil?
      end
      invalid_properties.push("\"year\" is required and cannot be null") if @year.nil?

      unless (_year = @year).nil?
        if min_number_error = OpenApi::PrimitiveValidator.min_number_error("year", _year, MIN_FOR_YEAR)
          invalid_properties.push(min_number_error)
        end
      end
      invalid_properties
    end

    # Check to see if the all the properties in the model are valid
    # @return true if the model is valid
    def valid? : Bool
      return false if @statement_id.nil?
      unless (_statement_id = @statement_id).nil?
      end

      return false if @month.nil?
      unless (_month = @month).nil?
      end

      return false if @year.nil?
      unless (_year = @year).nil?
        return false if _year < MIN_FOR_YEAR
      end

      true
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] statement_id Object to be assigned
    def statement_id=(new_value : String?)
      raise ArgumentError.new("\"statement_id\" is required and cannot be null") if new_value.nil?
      unless new_value.nil?
      end

      @statement_id = new_value
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] month Object to be assigned
    def month=(new_value : Int32?)
      raise ArgumentError.new("\"month\" is required and cannot be null") if new_value.nil?
      unless new_value.nil?
      end

      @month = new_value
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] year Object to be assigned
    def year=(new_value : Int32?)
      raise ArgumentError.new("\"year\" is required and cannot be null") if new_value.nil?
      unless new_value.nil?
        OpenApi::PrimitiveValidator.validate_min_number("year", new_value, MIN_FOR_YEAR)
      end

      @year = new_value
    end

    # Generates #hash and #== methods from all fields
    # #== @return [Bool]
    # #hash calculates hash code according to all attributes.
    # #hash @return [UInt64] Hash code
    def_equals_and_hash(@statement_id, @month, @year)
  end
end
