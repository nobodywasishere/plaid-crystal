#  The Plaid API
#
# The Plaid REST API. Please see https://plaid.com/docs/api for more details.
#
# The version of the OpenAPI document: 2020-09-14_1.474.3
#
# Generated by: https://openapi-generator.tech
#

require "../../core"

require "./asset_transaction_category_type"
require "./asset_transaction_type"

module Plaid
  # Documentation not found in the MISMO model viewer and not provided by Freddie Mac.
  class AssetTransactionDetail
    include JSON::Serializable
    include JSON::Serializable::Unmapped
    include OpenApi::Validatable
    include OpenApi::Json

    # Required Properties

    # A vendor created unique Identifier.
    @[JSON::Field(key: "AssetTransactionUniqueIdentifier", type: String?, default: nil, required: true, nullable: false, emit_null: false)]
    getter asset_transaction_unique_identifier : String? = nil

    # Asset Transaction Amount.
    @[JSON::Field(key: "AssetTransactionAmount", type: Float64?, default: nil, required: true, nullable: false, emit_null: false)]
    getter asset_transaction_amount : Float64? = nil

    # Asset Transaction Date.
    @[JSON::Field(key: "AssetTransactionDate", type: Time?, default: nil, required: true, nullable: false, emit_null: false, converter: Time::ISO8601DateConverter)]
    getter asset_transaction_date : Time? = nil

    # Asset Transaction Post Date.
    @[JSON::Field(key: "AssetTransactionPostDate", type: Time?, default: nil, required: true, nullable: false, emit_null: false, converter: Time::ISO8601DateConverter)]
    getter asset_transaction_post_date : Time? = nil

    @[JSON::Field(key: "AssetTransactionType", type: Plaid::AssetTransactionType?, default: nil, required: true, nullable: false, emit_null: false)]
    getter asset_transaction_type : Plaid::AssetTransactionType? = nil

    # Populate with who did the transaction.
    @[JSON::Field(key: "AssetTransactionPaidByName", type: String?, default: nil, required: true, nullable: true, emit_null: true)]
    getter asset_transaction_paid_by_name : String? = nil

    # FI Provided - examples are atm, cash, check, credit, debit, deposit, directDebit, directDeposit, dividend, fee, interest, other, payment, pointOfSale, repeatPayment, serviceCharge, transfer.
    @[JSON::Field(key: "AssetTransactionTypeAdditionalDescription", type: String?, default: nil, required: true, nullable: true, emit_null: true)]
    getter asset_transaction_type_additional_description : String? = nil

    @[JSON::Field(key: "AssetTransactionCategoryType", type: Plaid::AssetTransactionCategoryType?, default: nil, required: true, nullable: true, emit_null: true)]
    getter asset_transaction_category_type : Plaid::AssetTransactionCategoryType? = nil

    # FI provided Transaction Identifier.
    @[JSON::Field(key: "FinancialInstitutionTransactionIdentifier", type: String?, default: nil, required: true, nullable: true, emit_null: true)]
    getter financial_institution_transaction_identifier : String? = nil

    # End of Required Properties

    # Initializes the object
    # @param [Hash] attributes Model attributes in the form of hash
    def initialize(
      *,
      # Required properties
      @asset_transaction_unique_identifier : String? = nil,
      @asset_transaction_amount : Float64? = nil,
      @asset_transaction_date : Time? = nil,
      @asset_transaction_post_date : Time? = nil,
      @asset_transaction_type : Plaid::AssetTransactionType? = nil,
      @asset_transaction_paid_by_name : String? = nil,
      @asset_transaction_type_additional_description : String? = nil,
      @asset_transaction_category_type : Plaid::AssetTransactionCategoryType? = nil,
      @financial_institution_transaction_identifier : String? = nil
    )
    end

    # Show invalid properties with the reasons. Usually used together with valid?
    # @return Array for valid properties with the reasons
    def list_invalid_properties : Array(String)
      invalid_properties = Array(String).new

      invalid_properties.push("\"asset_transaction_unique_identifier\" is required and cannot be null") if @asset_transaction_unique_identifier.nil?

      unless (_asset_transaction_unique_identifier = @asset_transaction_unique_identifier).nil?
      end
      invalid_properties.push("\"asset_transaction_amount\" is required and cannot be null") if @asset_transaction_amount.nil?

      unless (_asset_transaction_amount = @asset_transaction_amount).nil?
      end
      invalid_properties.push("\"asset_transaction_date\" is required and cannot be null") if @asset_transaction_date.nil?

      unless (_asset_transaction_date = @asset_transaction_date).nil?
      end
      invalid_properties.push("\"asset_transaction_post_date\" is required and cannot be null") if @asset_transaction_post_date.nil?

      unless (_asset_transaction_post_date = @asset_transaction_post_date).nil?
      end
      invalid_properties.push("\"asset_transaction_type\" is required and cannot be null") if @asset_transaction_type.nil?

      unless (_asset_transaction_type = @asset_transaction_type).nil?
        invalid_properties.push(_asset_transaction_type.error_message) if !_asset_transaction_type.valid?
      end
      unless (_asset_transaction_paid_by_name = @asset_transaction_paid_by_name).nil?
      end
      unless (_asset_transaction_type_additional_description = @asset_transaction_type_additional_description).nil?
      end
      unless (_asset_transaction_category_type = @asset_transaction_category_type).nil?
        invalid_properties.push(_asset_transaction_category_type.error_message) if !_asset_transaction_category_type.valid?
      end
      unless (_financial_institution_transaction_identifier = @financial_institution_transaction_identifier).nil?
      end
      invalid_properties
    end

    # Check to see if the all the properties in the model are valid
    # @return true if the model is valid
    def valid? : Bool
      return false if @asset_transaction_unique_identifier.nil?
      unless (_asset_transaction_unique_identifier = @asset_transaction_unique_identifier).nil?
      end

      return false if @asset_transaction_amount.nil?
      unless (_asset_transaction_amount = @asset_transaction_amount).nil?
      end

      return false if @asset_transaction_date.nil?
      unless (_asset_transaction_date = @asset_transaction_date).nil?
      end

      return false if @asset_transaction_post_date.nil?
      unless (_asset_transaction_post_date = @asset_transaction_post_date).nil?
      end

      return false if @asset_transaction_type.nil?
      unless (_asset_transaction_type = @asset_transaction_type).nil?
        return false if !_asset_transaction_type.valid?
      end

      unless (_asset_transaction_paid_by_name = @asset_transaction_paid_by_name).nil?
      end

      unless (_asset_transaction_type_additional_description = @asset_transaction_type_additional_description).nil?
      end

      unless (_asset_transaction_category_type = @asset_transaction_category_type).nil?
        return false if !_asset_transaction_category_type.valid?
      end

      unless (_financial_institution_transaction_identifier = @financial_institution_transaction_identifier).nil?
      end

      true
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] asset_transaction_unique_identifier Object to be assigned
    def asset_transaction_unique_identifier=(new_value : String?)
      raise ArgumentError.new("\"asset_transaction_unique_identifier\" is required and cannot be null") if new_value.nil?
      unless new_value.nil?
      end

      @asset_transaction_unique_identifier = new_value
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] asset_transaction_amount Object to be assigned
    def asset_transaction_amount=(new_value : Float64?)
      raise ArgumentError.new("\"asset_transaction_amount\" is required and cannot be null") if new_value.nil?
      unless new_value.nil?
      end

      @asset_transaction_amount = new_value
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] asset_transaction_date Object to be assigned
    def asset_transaction_date=(new_value : Time?)
      raise ArgumentError.new("\"asset_transaction_date\" is required and cannot be null") if new_value.nil?
      unless new_value.nil?
      end

      @asset_transaction_date = new_value
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] asset_transaction_post_date Object to be assigned
    def asset_transaction_post_date=(new_value : Time?)
      raise ArgumentError.new("\"asset_transaction_post_date\" is required and cannot be null") if new_value.nil?
      unless new_value.nil?
      end

      @asset_transaction_post_date = new_value
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] asset_transaction_type Object to be assigned
    def asset_transaction_type=(new_value : Plaid::AssetTransactionType?)
      raise ArgumentError.new("\"asset_transaction_type\" is required and cannot be null") if new_value.nil?
      unless new_value.nil?
        new_value.validate
      end

      @asset_transaction_type = new_value
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] asset_transaction_paid_by_name Object to be assigned
    def asset_transaction_paid_by_name=(new_value : String?)
      unless new_value.nil?
      end

      @asset_transaction_paid_by_name = new_value
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] asset_transaction_type_additional_description Object to be assigned
    def asset_transaction_type_additional_description=(new_value : String?)
      unless new_value.nil?
      end

      @asset_transaction_type_additional_description = new_value
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] asset_transaction_category_type Object to be assigned
    def asset_transaction_category_type=(new_value : Plaid::AssetTransactionCategoryType?)
      unless new_value.nil?
        new_value.validate
      end

      @asset_transaction_category_type = new_value
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] financial_institution_transaction_identifier Object to be assigned
    def financial_institution_transaction_identifier=(new_value : String?)
      unless new_value.nil?
      end

      @financial_institution_transaction_identifier = new_value
    end

    # Generates #hash and #== methods from all fields
    # #== @return [Bool]
    # #hash calculates hash code according to all attributes.
    # #hash @return [UInt64] Hash code
    def_equals_and_hash(@asset_transaction_unique_identifier, @asset_transaction_amount, @asset_transaction_date, @asset_transaction_post_date, @asset_transaction_type, @asset_transaction_paid_by_name, @asset_transaction_type_additional_description, @asset_transaction_category_type, @financial_institution_transaction_identifier)
  end
end
