#  The Plaid API
#
# The Plaid REST API. Please see https://plaid.com/docs/api for more details.
#
# The version of the OpenAPI document: 2020-09-14_1.474.3
#
# Generated by: https://openapi-generator.tech
#

require "../../core"

require "./paystub_pay_frequency"

module Plaid
  # An object representing details that can be found on the paystub.
  class PaystubDetails
    include JSON::Serializable
    include JSON::Serializable::Unmapped
    include OpenApi::Validatable
    include OpenApi::Json

    # Optional Properties

    # Beginning date of the pay period on the paystub in the 'YYYY-MM-DD' format.
    @[JSON::Field(key: "pay_period_start_date", type: Time?, default: nil, required: false, nullable: true, emit_null: true, presence: true, ignore_serialize: pay_period_start_date.nil? && !pay_period_start_date_present?, converter: Time::ISO8601DateConverter)]
    getter pay_period_start_date : Time? = nil

    @[JSON::Field(ignore: true)]
    property? pay_period_start_date_present : Bool = false

    # Ending date of the pay period on the paystub in the 'YYYY-MM-DD' format.
    @[JSON::Field(key: "pay_period_end_date", type: Time?, default: nil, required: false, nullable: true, emit_null: true, presence: true, ignore_serialize: pay_period_end_date.nil? && !pay_period_end_date_present?, converter: Time::ISO8601DateConverter)]
    getter pay_period_end_date : Time? = nil

    @[JSON::Field(ignore: true)]
    property? pay_period_end_date_present : Bool = false

    # Pay date on the paystub in the 'YYYY-MM-DD' format.
    @[JSON::Field(key: "pay_date", type: Time?, default: nil, required: false, nullable: true, emit_null: true, presence: true, ignore_serialize: pay_date.nil? && !pay_date_present?, converter: Time::ISO8601DateConverter)]
    getter pay_date : Time? = nil

    @[JSON::Field(ignore: true)]
    property? pay_date_present : Bool = false

    # The name of the payroll provider that generated the paystub, e.g. ADP
    @[JSON::Field(key: "paystub_provider", type: String?, default: nil, required: false, nullable: true, emit_null: true, presence: true, ignore_serialize: paystub_provider.nil? && !paystub_provider_present?)]
    getter paystub_provider : String? = nil

    @[JSON::Field(ignore: true)]
    property? paystub_provider_present : Bool = false

    @[JSON::Field(key: "pay_frequency", type: Plaid::PaystubPayFrequency?, default: nil, required: false, nullable: true, emit_null: true, presence: true, ignore_serialize: pay_frequency.nil? && !pay_frequency_present?)]
    getter pay_frequency : Plaid::PaystubPayFrequency? = nil

    @[JSON::Field(ignore: true)]
    property? pay_frequency_present : Bool = false

    # Initializes the object
    # @param [Hash] attributes Model attributes in the form of hash
    def initialize(
      *,
      # Optional properties
      @pay_period_start_date : Time? = nil,
      @pay_period_end_date : Time? = nil,
      @pay_date : Time? = nil,
      @paystub_provider : String? = nil,
      @pay_frequency : Plaid::PaystubPayFrequency? = nil
    )
    end

    # Show invalid properties with the reasons. Usually used together with valid?
    # @return Array for valid properties with the reasons
    def list_invalid_properties : Array(String)
      invalid_properties = Array(String).new

      unless (_pay_period_start_date = @pay_period_start_date).nil?
      end
      unless (_pay_period_end_date = @pay_period_end_date).nil?
      end
      unless (_pay_date = @pay_date).nil?
      end
      unless (_paystub_provider = @paystub_provider).nil?
      end
      unless (_pay_frequency = @pay_frequency).nil?
        invalid_properties.push(_pay_frequency.error_message) if !_pay_frequency.valid?
      end
      invalid_properties
    end

    # Check to see if the all the properties in the model are valid
    # @return true if the model is valid
    def valid? : Bool
      unless (_pay_period_start_date = @pay_period_start_date).nil?
      end

      unless (_pay_period_end_date = @pay_period_end_date).nil?
      end

      unless (_pay_date = @pay_date).nil?
      end

      unless (_paystub_provider = @paystub_provider).nil?
      end

      unless (_pay_frequency = @pay_frequency).nil?
        return false if !_pay_frequency.valid?
      end

      true
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] pay_period_start_date Object to be assigned
    def pay_period_start_date=(new_value : Time?)
      unless new_value.nil?
      end

      @pay_period_start_date = new_value
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] pay_period_end_date Object to be assigned
    def pay_period_end_date=(new_value : Time?)
      unless new_value.nil?
      end

      @pay_period_end_date = new_value
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] pay_date Object to be assigned
    def pay_date=(new_value : Time?)
      unless new_value.nil?
      end

      @pay_date = new_value
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] paystub_provider Object to be assigned
    def paystub_provider=(new_value : String?)
      unless new_value.nil?
      end

      @paystub_provider = new_value
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] pay_frequency Object to be assigned
    def pay_frequency=(new_value : Plaid::PaystubPayFrequency?)
      unless new_value.nil?
        new_value.validate
      end

      @pay_frequency = new_value
    end

    # Generates #hash and #== methods from all fields
    # #== @return [Bool]
    # #hash calculates hash code according to all attributes.
    # #hash @return [UInt64] Hash code
    def_equals_and_hash(@pay_period_start_date, @pay_period_start_date_present, @pay_period_end_date, @pay_period_end_date_present, @pay_date, @pay_date_present, @paystub_provider, @paystub_provider_present, @pay_frequency, @pay_frequency_present)
  end
end
