#  The Plaid API
#
# The Plaid REST API. Please see https://plaid.com/docs/api for more details.
#
# The version of the OpenAPI document: 2020-09-14_1.474.3
#
# Generated by: https://openapi-generator.tech
#

require "../../core"

module Plaid
  # The transactions data for the end user's income source(s).
  class CreditBankIncomeTransaction
    include JSON::Serializable
    include JSON::Serializable::Unmapped
    include OpenApi::Validatable
    include OpenApi::Json

    # Optional Properties

    # The settled value of the transaction, denominated in the transactions's currency as stated in `iso_currency_code` or `unofficial_currency_code`. Positive values when money moves out of the account; negative values when money moves in. For example, credit card purchases are positive; credit card payment, direct deposits, and refunds are negative.
    @[JSON::Field(key: "amount", type: Float64?, default: nil, required: false, nullable: false, emit_null: false)]
    getter amount : Float64? = nil

    # For pending transactions, the date that the transaction occurred; for posted transactions, the date that the transaction posted. Both dates are returned in an ISO 8601 format (YYYY-MM-DD).
    @[JSON::Field(key: "date", type: Time?, default: nil, required: false, nullable: false, emit_null: false, converter: Time::ISO8601DateConverter)]
    getter date : Time? = nil

    # The merchant name or transaction description.
    @[JSON::Field(key: "name", type: String?, default: nil, required: false, nullable: false, emit_null: false)]
    getter name : String? = nil

    # The string returned by the financial institution to describe the transaction.
    @[JSON::Field(key: "original_description", type: String?, default: nil, required: false, nullable: true, emit_null: true, presence: true, ignore_serialize: original_description.nil? && !original_description_present?)]
    getter original_description : String? = nil

    @[JSON::Field(ignore: true)]
    property? original_description_present : Bool = false

    # When true, identifies the transaction as pending or unsettled. Pending transaction details (name, type, amount, category ID) may change before they are settled.
    @[JSON::Field(key: "pending", type: Bool?, default: nil, required: false, nullable: false, emit_null: false)]
    getter pending : Bool? = nil

    # The unique ID of the transaction. Like all Plaid identifiers, the `transaction_id` is case sensitive.
    @[JSON::Field(key: "transaction_id", type: String?, default: nil, required: false, nullable: false, emit_null: false)]
    getter transaction_id : String? = nil

    # The check number of the transaction. This field is only populated for check transactions.
    @[JSON::Field(key: "check_number", type: String?, default: nil, required: false, nullable: true, emit_null: true, presence: true, ignore_serialize: check_number.nil? && !check_number_present?)]
    getter check_number : String? = nil

    @[JSON::Field(ignore: true)]
    property? check_number_present : Bool = false

    # The ISO 4217 currency code of the amount or balance.
    @[JSON::Field(key: "iso_currency_code", type: String?, default: nil, required: false, nullable: true, emit_null: true, presence: true, ignore_serialize: iso_currency_code.nil? && !iso_currency_code_present?)]
    getter iso_currency_code : String? = nil

    @[JSON::Field(ignore: true)]
    property? iso_currency_code_present : Bool = false

    # The unofficial currency code associated with the amount or balance. Always `null` if `iso_currency_code` is non-null. Unofficial currency codes are used for currencies that do not have official ISO currency codes, such as cryptocurrencies and the currencies of certain countries.
    @[JSON::Field(key: "unofficial_currency_code", type: String?, default: nil, required: false, nullable: true, emit_null: true, presence: true, ignore_serialize: unofficial_currency_code.nil? && !unofficial_currency_code_present?)]
    getter unofficial_currency_code : String? = nil

    @[JSON::Field(ignore: true)]
    property? unofficial_currency_code_present : Bool = false

    # Initializes the object
    # @param [Hash] attributes Model attributes in the form of hash
    def initialize(
      *,
      # Optional properties
      @amount : Float64? = nil,
      @date : Time? = nil,
      @name : String? = nil,
      @original_description : String? = nil,
      @pending : Bool? = nil,
      @transaction_id : String? = nil,
      @check_number : String? = nil,
      @iso_currency_code : String? = nil,
      @unofficial_currency_code : String? = nil
    )
    end

    # Show invalid properties with the reasons. Usually used together with valid?
    # @return Array for valid properties with the reasons
    def list_invalid_properties : Array(String)
      invalid_properties = Array(String).new

      unless (_amount = @amount).nil?
      end
      unless (_date = @date).nil?
      end
      unless (_name = @name).nil?
      end
      unless (_original_description = @original_description).nil?
      end
      unless (_pending = @pending).nil?
      end
      unless (_transaction_id = @transaction_id).nil?
      end
      unless (_check_number = @check_number).nil?
      end
      unless (_iso_currency_code = @iso_currency_code).nil?
      end
      unless (_unofficial_currency_code = @unofficial_currency_code).nil?
      end
      invalid_properties
    end

    # Check to see if the all the properties in the model are valid
    # @return true if the model is valid
    def valid? : Bool
      unless (_amount = @amount).nil?
      end

      unless (_date = @date).nil?
      end

      unless (_name = @name).nil?
      end

      unless (_original_description = @original_description).nil?
      end

      unless (_pending = @pending).nil?
      end

      unless (_transaction_id = @transaction_id).nil?
      end

      unless (_check_number = @check_number).nil?
      end

      unless (_iso_currency_code = @iso_currency_code).nil?
      end

      unless (_unofficial_currency_code = @unofficial_currency_code).nil?
      end

      true
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] amount Object to be assigned
    def amount=(new_value : Float64?)
      unless new_value.nil?
      end

      @amount = new_value
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] date Object to be assigned
    def date=(new_value : Time?)
      unless new_value.nil?
      end

      @date = new_value
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] name Object to be assigned
    def name=(new_value : String?)
      unless new_value.nil?
      end

      @name = new_value
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] original_description Object to be assigned
    def original_description=(new_value : String?)
      unless new_value.nil?
      end

      @original_description = new_value
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] pending Object to be assigned
    def pending=(new_value : Bool?)
      unless new_value.nil?
      end

      @pending = new_value
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] transaction_id Object to be assigned
    def transaction_id=(new_value : String?)
      unless new_value.nil?
      end

      @transaction_id = new_value
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] check_number Object to be assigned
    def check_number=(new_value : String?)
      unless new_value.nil?
      end

      @check_number = new_value
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] iso_currency_code Object to be assigned
    def iso_currency_code=(new_value : String?)
      unless new_value.nil?
      end

      @iso_currency_code = new_value
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] unofficial_currency_code Object to be assigned
    def unofficial_currency_code=(new_value : String?)
      unless new_value.nil?
      end

      @unofficial_currency_code = new_value
    end

    # Generates #hash and #== methods from all fields
    # #== @return [Bool]
    # #hash calculates hash code according to all attributes.
    # #hash @return [UInt64] Hash code
    def_equals_and_hash(@amount, @date, @name, @original_description, @original_description_present, @pending, @transaction_id, @check_number, @check_number_present, @iso_currency_code, @iso_currency_code_present, @unofficial_currency_code, @unofficial_currency_code_present)
  end
end
