#  The Plaid API
#
# The Plaid REST API. Please see https://plaid.com/docs/api for more details.
#
# The version of the OpenAPI document: 2020-09-14_1.474.3
#
# Generated by: https://openapi-generator.tech
#

require "../../core"

require "./document_authenticity_match_code"
require "./image_quality"
require "./physical_document_extracted_data_analysis"

module Plaid
  # High level descriptions of how the associated document was processed. If a document fails verification, the details in the `analysis` object should help clarify why the document was rejected.
  class DocumentAnalysis
    include JSON::Serializable
    include JSON::Serializable::Unmapped
    include OpenApi::Validatable
    include OpenApi::Json

    # Required Properties

    @[JSON::Field(key: "authenticity", type: Plaid::DocumentAuthenticityMatchCode?, default: nil, required: true, nullable: false, emit_null: false)]
    getter authenticity : Plaid::DocumentAuthenticityMatchCode? = nil

    @[JSON::Field(key: "image_quality", type: Plaid::ImageQuality?, default: nil, required: true, nullable: false, emit_null: false)]
    getter image_quality : Plaid::ImageQuality? = nil

    @[JSON::Field(key: "extracted_data", type: PhysicalDocumentExtractedDataAnalysis?, default: nil, required: true, nullable: true, emit_null: true)]
    getter extracted_data : PhysicalDocumentExtractedDataAnalysis? = nil

    # End of Required Properties

    # Initializes the object
    # @param [Hash] attributes Model attributes in the form of hash
    def initialize(
      *,
      # Required properties
      @authenticity : Plaid::DocumentAuthenticityMatchCode? = nil,
      @image_quality : Plaid::ImageQuality? = nil,
      @extracted_data : PhysicalDocumentExtractedDataAnalysis? = nil
    )
    end

    # Show invalid properties with the reasons. Usually used together with valid?
    # @return Array for valid properties with the reasons
    def list_invalid_properties : Array(String)
      invalid_properties = Array(String).new

      invalid_properties.push("\"authenticity\" is required and cannot be null") if @authenticity.nil?

      unless (_authenticity = @authenticity).nil?
        invalid_properties.push(_authenticity.error_message) if !_authenticity.valid?
      end
      invalid_properties.push("\"image_quality\" is required and cannot be null") if @image_quality.nil?

      unless (_image_quality = @image_quality).nil?
        invalid_properties.push(_image_quality.error_message) if !_image_quality.valid?
      end
      unless (_extracted_data = @extracted_data).nil?
      end
      invalid_properties
    end

    # Check to see if the all the properties in the model are valid
    # @return true if the model is valid
    def valid? : Bool
      return false if @authenticity.nil?
      unless (_authenticity = @authenticity).nil?
        return false if !_authenticity.valid?
      end

      return false if @image_quality.nil?
      unless (_image_quality = @image_quality).nil?
        return false if !_image_quality.valid?
      end

      unless (_extracted_data = @extracted_data).nil?
      end

      true
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] authenticity Object to be assigned
    def authenticity=(new_value : Plaid::DocumentAuthenticityMatchCode?)
      raise ArgumentError.new("\"authenticity\" is required and cannot be null") if new_value.nil?
      unless new_value.nil?
        new_value.validate
      end

      @authenticity = new_value
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] image_quality Object to be assigned
    def image_quality=(new_value : Plaid::ImageQuality?)
      raise ArgumentError.new("\"image_quality\" is required and cannot be null") if new_value.nil?
      unless new_value.nil?
        new_value.validate
      end

      @image_quality = new_value
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] extracted_data Object to be assigned
    def extracted_data=(new_value : PhysicalDocumentExtractedDataAnalysis?)
      unless new_value.nil?
      end

      @extracted_data = new_value
    end

    # Generates #hash and #== methods from all fields
    # #== @return [Bool]
    # #hash calculates hash code according to all attributes.
    # #hash @return [UInt64] Hash code
    def_equals_and_hash(@authenticity, @image_quality, @extracted_data)
  end
end
