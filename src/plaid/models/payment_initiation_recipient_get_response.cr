#  The Plaid API
#
# The Plaid REST API. Please see https://plaid.com/docs/api for more details.
#
# The version of the OpenAPI document: 2020-09-14_1.474.3
#
# Generated by: https://openapi-generator.tech
#

require "../../core"

require "./payment_initiation_address"
require "./recipient_bacs_nullable"

module Plaid
  # PaymentInitiationRecipientGetResponse defines the response schema for `/payment_initiation/recipient/get`
  class PaymentInitiationRecipientGetResponse
    include JSON::Serializable
    include JSON::Serializable::Unmapped
    include OpenApi::Validatable
    include OpenApi::Json

    # Required Properties

    # The ID of the recipient.
    @[JSON::Field(key: "recipient_id", type: String?, default: nil, required: true, nullable: false, emit_null: false)]
    getter recipient_id : String? = nil

    # The name of the recipient.
    @[JSON::Field(key: "name", type: String?, default: nil, required: true, nullable: false, emit_null: false)]
    getter name : String? = nil

    # A unique identifier for the request, which can be used for troubleshooting. This identifier, like all Plaid identifiers, is case sensitive.
    @[JSON::Field(key: "request_id", type: String?, default: nil, required: true, nullable: false, emit_null: false)]
    getter request_id : String? = nil

    # End of Required Properties

    # Optional Properties

    @[JSON::Field(key: "address", type: PaymentInitiationAddress?, default: nil, required: false, nullable: true, emit_null: true, presence: true, ignore_serialize: address.nil? && !address_present?)]
    getter address : PaymentInitiationAddress? = nil

    @[JSON::Field(ignore: true)]
    property? address_present : Bool = false

    # The International Bank Account Number (IBAN) for the recipient.
    @[JSON::Field(key: "iban", type: String?, default: nil, required: false, nullable: true, emit_null: true, presence: true, ignore_serialize: iban.nil? && !iban_present?)]
    getter iban : String? = nil

    @[JSON::Field(ignore: true)]
    property? iban_present : Bool = false

    @[JSON::Field(key: "bacs", type: Plaid::RecipientBACSNullable?, default: nil, required: false, nullable: true, emit_null: true, presence: true, ignore_serialize: bacs.nil? && !bacs_present?)]
    getter bacs : Plaid::RecipientBACSNullable? = nil

    @[JSON::Field(ignore: true)]
    property? bacs_present : Bool = false

    # Initializes the object
    # @param [Hash] attributes Model attributes in the form of hash
    def initialize(
      *,
      # Required properties
      @recipient_id : String? = nil,
      @name : String? = nil,
      @request_id : String? = nil,
      # Optional properties
      @address : PaymentInitiationAddress? = nil,
      @iban : String? = nil,
      @bacs : Plaid::RecipientBACSNullable? = nil
    )
    end

    # Show invalid properties with the reasons. Usually used together with valid?
    # @return Array for valid properties with the reasons
    def list_invalid_properties : Array(String)
      invalid_properties = Array(String).new

      invalid_properties.push("\"recipient_id\" is required and cannot be null") if @recipient_id.nil?

      unless (_recipient_id = @recipient_id).nil?
      end
      invalid_properties.push("\"name\" is required and cannot be null") if @name.nil?

      unless (_name = @name).nil?
      end
      invalid_properties.push("\"request_id\" is required and cannot be null") if @request_id.nil?

      unless (_request_id = @request_id).nil?
      end
      unless (_address = @address).nil?
      end
      unless (_iban = @iban).nil?
      end
      unless (_bacs = @bacs).nil?
        invalid_properties.concat(_bacs.list_invalid_properties_for("bacs")) if _bacs.is_a?(OpenApi::Validatable)
      end
      invalid_properties
    end

    # Check to see if the all the properties in the model are valid
    # @return true if the model is valid
    def valid? : Bool
      return false if @recipient_id.nil?
      unless (_recipient_id = @recipient_id).nil?
      end

      return false if @name.nil?
      unless (_name = @name).nil?
      end

      return false if @request_id.nil?
      unless (_request_id = @request_id).nil?
      end

      unless (_address = @address).nil?
      end

      unless (_iban = @iban).nil?
      end

      unless (_bacs = @bacs).nil?
        return false if _bacs.is_a?(OpenApi::Validatable) && !_bacs.valid?
      end

      true
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] recipient_id Object to be assigned
    def recipient_id=(new_value : String?)
      raise ArgumentError.new("\"recipient_id\" is required and cannot be null") if new_value.nil?
      unless new_value.nil?
      end

      @recipient_id = new_value
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] name Object to be assigned
    def name=(new_value : String?)
      raise ArgumentError.new("\"name\" is required and cannot be null") if new_value.nil?
      unless new_value.nil?
      end

      @name = new_value
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] request_id Object to be assigned
    def request_id=(new_value : String?)
      raise ArgumentError.new("\"request_id\" is required and cannot be null") if new_value.nil?
      unless new_value.nil?
      end

      @request_id = new_value
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] address Object to be assigned
    def address=(new_value : PaymentInitiationAddress?)
      unless new_value.nil?
      end

      @address = new_value
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] iban Object to be assigned
    def iban=(new_value : String?)
      unless new_value.nil?
      end

      @iban = new_value
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] bacs Object to be assigned
    def bacs=(new_value : Plaid::RecipientBACSNullable?)
      unless new_value.nil?
        new_value.validate if new_value.is_a?(OpenApi::Validatable)
      end

      @bacs = new_value
    end

    # Generates #hash and #== methods from all fields
    # #== @return [Bool]
    # #hash calculates hash code according to all attributes.
    # #hash @return [UInt64] Hash code
    def_equals_and_hash(@recipient_id, @name, @request_id, @address, @address_present, @iban, @iban_present, @bacs, @bacs_present)
  end
end
