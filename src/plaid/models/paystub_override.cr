#  The Plaid API
#
# The Plaid REST API. Please see https://plaid.com/docs/api for more details.
#
# The version of the OpenAPI document: 2020-09-14_1.474.3
#
# Generated by: https://openapi-generator.tech
#

require "../../core"

require "./income_breakdown"
require "./pay_period_details"
require "./paystub_override_employee"
require "./paystub_override_employer"

module Plaid
  # An object representing data from a paystub.
  class PaystubOverride
    include JSON::Serializable
    include JSON::Serializable::Unmapped
    include OpenApi::Validatable
    include OpenApi::Json

    # Optional Properties

    @[JSON::Field(key: "employer", type: Plaid::PaystubOverrideEmployer?, default: nil, required: false, nullable: false, emit_null: false)]
    getter employer : Plaid::PaystubOverrideEmployer? = nil

    @[JSON::Field(key: "employee", type: Plaid::PaystubOverrideEmployee?, default: nil, required: false, nullable: false, emit_null: false)]
    getter employee : Plaid::PaystubOverrideEmployee? = nil

    @[JSON::Field(key: "income_breakdown", type: Array(IncomeBreakdown)?, default: nil, required: false, nullable: false, emit_null: false)]
    getter income_breakdown : Array(IncomeBreakdown)? = nil

    @[JSON::Field(key: "pay_period_details", type: PayPeriodDetails?, default: nil, required: false, nullable: false, emit_null: false)]
    getter pay_period_details : PayPeriodDetails? = nil

    # Initializes the object
    # @param [Hash] attributes Model attributes in the form of hash
    def initialize(
      *,
      # Optional properties
      @employer : Plaid::PaystubOverrideEmployer? = nil,
      @employee : Plaid::PaystubOverrideEmployee? = nil,
      @income_breakdown : Array(IncomeBreakdown)? = nil,
      @pay_period_details : PayPeriodDetails? = nil
    )
    end

    # Show invalid properties with the reasons. Usually used together with valid?
    # @return Array for valid properties with the reasons
    def list_invalid_properties : Array(String)
      invalid_properties = Array(String).new

      unless (_employer = @employer).nil?
        invalid_properties.concat(_employer.list_invalid_properties_for("employer")) if _employer.is_a?(OpenApi::Validatable)
      end
      unless (_employee = @employee).nil?
        invalid_properties.concat(_employee.list_invalid_properties_for("employee")) if _employee.is_a?(OpenApi::Validatable)
      end
      unless (_income_breakdown = @income_breakdown).nil?
      end
      unless (_pay_period_details = @pay_period_details).nil?
      end
      invalid_properties
    end

    # Check to see if the all the properties in the model are valid
    # @return true if the model is valid
    def valid? : Bool
      unless (_employer = @employer).nil?
        return false if _employer.is_a?(OpenApi::Validatable) && !_employer.valid?
      end

      unless (_employee = @employee).nil?
        return false if _employee.is_a?(OpenApi::Validatable) && !_employee.valid?
      end

      unless (_income_breakdown = @income_breakdown).nil?
      end

      unless (_pay_period_details = @pay_period_details).nil?
      end

      true
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] employer Object to be assigned
    def employer=(new_value : Plaid::PaystubOverrideEmployer?)
      unless new_value.nil?
        new_value.validate if new_value.is_a?(OpenApi::Validatable)
      end

      @employer = new_value
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] employee Object to be assigned
    def employee=(new_value : Plaid::PaystubOverrideEmployee?)
      unless new_value.nil?
        new_value.validate if new_value.is_a?(OpenApi::Validatable)
      end

      @employee = new_value
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] income_breakdown Object to be assigned
    def income_breakdown=(new_value : Array(IncomeBreakdown)?)
      unless new_value.nil?
      end

      @income_breakdown = new_value
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] pay_period_details Object to be assigned
    def pay_period_details=(new_value : PayPeriodDetails?)
      unless new_value.nil?
      end

      @pay_period_details = new_value
    end

    # Generates #hash and #== methods from all fields
    # #== @return [Bool]
    # #hash calculates hash code according to all attributes.
    # #hash @return [UInt64] Hash code
    def_equals_and_hash(@employer, @employee, @income_breakdown, @pay_period_details)
  end
end
