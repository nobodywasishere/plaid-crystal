#  The Plaid API
#
# The Plaid REST API. Please see https://plaid.com/docs/api for more details.
#
# The version of the OpenAPI document: 2020-09-14_1.474.3
#
# Generated by: https://openapi-generator.tech
#

require "../../core"

require "./signal_address_data"

module Plaid
  # Information about the user whose eligibility is being evaluated.
  class IncomeVerificationPrecheckUser
    include JSON::Serializable
    include JSON::Serializable::Unmapped
    include OpenApi::Validatable
    include OpenApi::Json

    # Optional Properties

    # The user's first name
    @[JSON::Field(key: "first_name", type: String?, default: nil, required: false, nullable: true, emit_null: true, presence: true, ignore_serialize: first_name.nil? && !first_name_present?)]
    getter first_name : String? = nil

    @[JSON::Field(ignore: true)]
    property? first_name_present : Bool = false

    # The user's last name
    @[JSON::Field(key: "last_name", type: String?, default: nil, required: false, nullable: true, emit_null: true, presence: true, ignore_serialize: last_name.nil? && !last_name_present?)]
    getter last_name : String? = nil

    @[JSON::Field(ignore: true)]
    property? last_name_present : Bool = false

    # The user's email address
    @[JSON::Field(key: "email_address", type: String?, default: nil, required: false, nullable: true, emit_null: true, presence: true, ignore_serialize: email_address.nil? && !email_address_present?)]
    getter email_address : String? = nil

    @[JSON::Field(ignore: true)]
    property? email_address_present : Bool = false

    @[JSON::Field(key: "home_address", type: SignalAddressData?, default: nil, required: false, nullable: true, emit_null: true, presence: true, ignore_serialize: home_address.nil? && !home_address_present?)]
    getter home_address : SignalAddressData? = nil

    @[JSON::Field(ignore: true)]
    property? home_address_present : Bool = false

    # Initializes the object
    # @param [Hash] attributes Model attributes in the form of hash
    def initialize(
      *,
      # Optional properties
      @first_name : String? = nil,
      @last_name : String? = nil,
      @email_address : String? = nil,
      @home_address : SignalAddressData? = nil
    )
    end

    # Show invalid properties with the reasons. Usually used together with valid?
    # @return Array for valid properties with the reasons
    def list_invalid_properties : Array(String)
      invalid_properties = Array(String).new

      unless (_first_name = @first_name).nil?
      end
      unless (_last_name = @last_name).nil?
      end
      unless (_email_address = @email_address).nil?
      end
      unless (_home_address = @home_address).nil?
      end
      invalid_properties
    end

    # Check to see if the all the properties in the model are valid
    # @return true if the model is valid
    def valid? : Bool
      unless (_first_name = @first_name).nil?
      end

      unless (_last_name = @last_name).nil?
      end

      unless (_email_address = @email_address).nil?
      end

      unless (_home_address = @home_address).nil?
      end

      true
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] first_name Object to be assigned
    def first_name=(new_value : String?)
      unless new_value.nil?
      end

      @first_name = new_value
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] last_name Object to be assigned
    def last_name=(new_value : String?)
      unless new_value.nil?
      end

      @last_name = new_value
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] email_address Object to be assigned
    def email_address=(new_value : String?)
      unless new_value.nil?
      end

      @email_address = new_value
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] home_address Object to be assigned
    def home_address=(new_value : SignalAddressData?)
      unless new_value.nil?
      end

      @home_address = new_value
    end

    # Generates #hash and #== methods from all fields
    # #== @return [Bool]
    # #hash calculates hash code according to all attributes.
    # #hash @return [UInt64] Hash code
    def_equals_and_hash(@first_name, @first_name_present, @last_name, @last_name_present, @email_address, @email_address_present, @home_address, @home_address_present)
  end
end
