#  The Plaid API
#
# The Plaid REST API. Please see https://plaid.com/docs/api for more details.
#
# The version of the OpenAPI document: 2020-09-14_1.474.3
#
# Generated by: https://openapi-generator.tech
#

require "../../core"

require "./payment_amount"

module Plaid
  # PaymentInitiationConsentPaymentExecuteRequest defines the request schema for `/payment_initiation/consent/payment/execute`
  class PaymentInitiationConsentPaymentExecuteRequest
    include JSON::Serializable
    include JSON::Serializable::Unmapped
    include OpenApi::Validatable
    include OpenApi::Json

    # Required Properties

    # The consent ID.
    @[JSON::Field(key: "consent_id", type: String?, default: nil, required: true, nullable: false, emit_null: false)]
    getter consent_id : String? = nil

    @[JSON::Field(key: "amount", type: Plaid::PaymentAmount?, default: nil, required: true, nullable: false, emit_null: false)]
    getter amount : Plaid::PaymentAmount? = nil

    # A random key provided by the client, per unique consent payment. Maximum of 128 characters.  The API supports idempotency for safely retrying requests without accidentally performing the same operation twice. If a request to execute a consent payment fails due to a network connection error, you can retry the request with the same idempotency key to guarantee that only a single payment is created. If the request was successfully processed, it will prevent any payment that uses the same idempotency key, and was received within 24 hours of the first request, from being processed.
    @[JSON::Field(key: "idempotency_key", type: String?, default: nil, required: true, nullable: false, emit_null: false)]
    getter idempotency_key : String? = nil
    MAX_LENGTH_FOR_IDEMPOTENCY_KEY = 128
    MIN_LENGTH_FOR_IDEMPOTENCY_KEY =   1

    # End of Required Properties

    # Optional Properties

    # Your Plaid API `client_id`. The `client_id` is required and may be provided either in the `PLAID-CLIENT-ID` header or as part of a request body.
    @[JSON::Field(key: "client_id", type: String?, default: nil, required: false, nullable: false, emit_null: false)]
    getter client_id : String? = nil

    # Your Plaid API `secret`. The `secret` is required and may be provided either in the `PLAID-SECRET` header or as part of a request body.
    @[JSON::Field(key: "secret", type: String?, default: nil, required: false, nullable: false, emit_null: false)]
    getter secret : String? = nil

    # Initializes the object
    # @param [Hash] attributes Model attributes in the form of hash
    def initialize(
      *,
      # Required properties
      @consent_id : String? = nil,
      @amount : Plaid::PaymentAmount? = nil,
      @idempotency_key : String? = nil,
      # Optional properties
      @client_id : String? = nil,
      @secret : String? = nil
    )
    end

    # Show invalid properties with the reasons. Usually used together with valid?
    # @return Array for valid properties with the reasons
    def list_invalid_properties : Array(String)
      invalid_properties = Array(String).new

      invalid_properties.push("\"consent_id\" is required and cannot be null") if @consent_id.nil?

      unless (_consent_id = @consent_id).nil?
      end
      invalid_properties.push("\"amount\" is required and cannot be null") if @amount.nil?

      unless (_amount = @amount).nil?
        invalid_properties.concat(_amount.list_invalid_properties_for("amount")) if _amount.is_a?(OpenApi::Validatable)
      end
      invalid_properties.push("\"idempotency_key\" is required and cannot be null") if @idempotency_key.nil?

      unless (_idempotency_key = @idempotency_key).nil?
        if max_length_error = OpenApi::PrimitiveValidator.max_length_error("idempotency_key", _idempotency_key.to_s.size, MAX_LENGTH_FOR_IDEMPOTENCY_KEY)
          invalid_properties.push(max_length_error)
        end

        if min_length_error = OpenApi::PrimitiveValidator.min_length_error("idempotency_key", _idempotency_key.to_s.size, MIN_LENGTH_FOR_IDEMPOTENCY_KEY)
          invalid_properties.push(min_length_error)
        end
      end
      unless (_client_id = @client_id).nil?
      end
      unless (_secret = @secret).nil?
      end
      invalid_properties
    end

    # Check to see if the all the properties in the model are valid
    # @return true if the model is valid
    def valid? : Bool
      return false if @consent_id.nil?
      unless (_consent_id = @consent_id).nil?
      end

      return false if @amount.nil?
      unless (_amount = @amount).nil?
        return false if _amount.is_a?(OpenApi::Validatable) && !_amount.valid?
      end

      return false if @idempotency_key.nil?
      unless (_idempotency_key = @idempotency_key).nil?
        return false if _idempotency_key.to_s.size > MAX_LENGTH_FOR_IDEMPOTENCY_KEY
        return false if _idempotency_key.to_s.size < MIN_LENGTH_FOR_IDEMPOTENCY_KEY
      end

      unless (_client_id = @client_id).nil?
      end

      unless (_secret = @secret).nil?
      end

      true
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] consent_id Object to be assigned
    def consent_id=(new_value : String?)
      raise ArgumentError.new("\"consent_id\" is required and cannot be null") if new_value.nil?
      unless new_value.nil?
      end

      @consent_id = new_value
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] amount Object to be assigned
    def amount=(new_value : Plaid::PaymentAmount?)
      raise ArgumentError.new("\"amount\" is required and cannot be null") if new_value.nil?
      unless new_value.nil?
        new_value.validate if new_value.is_a?(OpenApi::Validatable)
      end

      @amount = new_value
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] idempotency_key Object to be assigned
    def idempotency_key=(new_value : String?)
      raise ArgumentError.new("\"idempotency_key\" is required and cannot be null") if new_value.nil?
      unless new_value.nil?
        OpenApi::PrimitiveValidator.validate_max_length("idempotency_key", new_value.to_s.size, MAX_LENGTH_FOR_IDEMPOTENCY_KEY)
        OpenApi::PrimitiveValidator.validate_min_length("idempotency_key", new_value.to_s.size, MIN_LENGTH_FOR_IDEMPOTENCY_KEY)
      end

      @idempotency_key = new_value
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] client_id Object to be assigned
    def client_id=(new_value : String?)
      unless new_value.nil?
      end

      @client_id = new_value
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] secret Object to be assigned
    def secret=(new_value : String?)
      unless new_value.nil?
      end

      @secret = new_value
    end

    # Generates #hash and #== methods from all fields
    # #== @return [Bool]
    # #hash calculates hash code according to all attributes.
    # #hash @return [UInt64] Hash code
    def_equals_and_hash(@consent_id, @amount, @idempotency_key, @client_id, @secret)
  end
end
