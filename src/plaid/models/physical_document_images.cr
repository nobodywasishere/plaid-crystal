#  The Plaid API
#
# The Plaid REST API. Please see https://plaid.com/docs/api for more details.
#
# The version of the OpenAPI document: 2020-09-14_1.474.3
#
# Generated by: https://openapi-generator.tech
#

require "../../core"

module Plaid
  # URLs for downloading original and cropped images for this document submission. The URLs are designed to only allow downloading, not hot linking, so the URL will only serve the document image for 60 seconds before expiring. The expiration time is 60 seconds after the `GET` request for the associated Identity Verification attempt. A new expiring URL is generated with each request, so you can always rerequest the Identity Verification attempt if one of your URLs expires.
  class PhysicalDocumentImages
    include JSON::Serializable
    include JSON::Serializable::Unmapped
    include OpenApi::Validatable
    include OpenApi::Json

    # Required Properties

    # Temporary URL that expires after 60 seconds for downloading the uncropped original image of the front of the document.
    @[JSON::Field(key: "original_front", type: String?, default: nil, required: true, nullable: true, emit_null: true)]
    getter original_front : String? = nil

    # Temporary URL that expires after 60 seconds for downloading the original image of the back of the document. Might be null if the back of the document was not collected.
    @[JSON::Field(key: "original_back", type: String?, default: nil, required: true, nullable: true, emit_null: true)]
    getter original_back : String? = nil

    # Temporary URL that expires after 60 seconds for downloading a cropped image containing just the front of the document.
    @[JSON::Field(key: "cropped_front", type: String?, default: nil, required: true, nullable: true, emit_null: true)]
    getter cropped_front : String? = nil

    # Temporary URL that expires after 60 seconds for downloading a cropped image containing just the back of the document. Might be null if the back of the document was not collected.
    @[JSON::Field(key: "cropped_back", type: String?, default: nil, required: true, nullable: true, emit_null: true)]
    getter cropped_back : String? = nil

    # Temporary URL that expires after 60 seconds for downloading a crop of just the user's face from the document image. Might be null if the document does not contain a face photo.
    @[JSON::Field(key: "face", type: String?, default: nil, required: true, nullable: true, emit_null: true)]
    getter face : String? = nil

    # End of Required Properties

    # Initializes the object
    # @param [Hash] attributes Model attributes in the form of hash
    def initialize(
      *,
      # Required properties
      @original_front : String? = nil,
      @original_back : String? = nil,
      @cropped_front : String? = nil,
      @cropped_back : String? = nil,
      @face : String? = nil
    )
    end

    # Show invalid properties with the reasons. Usually used together with valid?
    # @return Array for valid properties with the reasons
    def list_invalid_properties : Array(String)
      invalid_properties = Array(String).new

      unless (_original_front = @original_front).nil?
      end
      unless (_original_back = @original_back).nil?
      end
      unless (_cropped_front = @cropped_front).nil?
      end
      unless (_cropped_back = @cropped_back).nil?
      end
      unless (_face = @face).nil?
      end
      invalid_properties
    end

    # Check to see if the all the properties in the model are valid
    # @return true if the model is valid
    def valid? : Bool
      unless (_original_front = @original_front).nil?
      end

      unless (_original_back = @original_back).nil?
      end

      unless (_cropped_front = @cropped_front).nil?
      end

      unless (_cropped_back = @cropped_back).nil?
      end

      unless (_face = @face).nil?
      end

      true
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] original_front Object to be assigned
    def original_front=(new_value : String?)
      unless new_value.nil?
      end

      @original_front = new_value
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] original_back Object to be assigned
    def original_back=(new_value : String?)
      unless new_value.nil?
      end

      @original_back = new_value
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] cropped_front Object to be assigned
    def cropped_front=(new_value : String?)
      unless new_value.nil?
      end

      @cropped_front = new_value
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] cropped_back Object to be assigned
    def cropped_back=(new_value : String?)
      unless new_value.nil?
      end

      @cropped_back = new_value
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] face Object to be assigned
    def face=(new_value : String?)
      unless new_value.nil?
      end

      @face = new_value
    end

    # Generates #hash and #== methods from all fields
    # #== @return [Bool]
    # #hash calculates hash code according to all attributes.
    # #hash @return [UInt64] Hash code
    def_equals_and_hash(@original_front, @original_back, @cropped_front, @cropped_back, @face)
  end
end
