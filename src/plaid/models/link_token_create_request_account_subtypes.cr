#  The Plaid API
#
# The Plaid REST API. Please see https://plaid.com/docs/api for more details.
#
# The version of the OpenAPI document: 2020-09-14_1.474.3
#
# Generated by: https://openapi-generator.tech
#

require "../../core"

require "./link_token_create_credit_filter"
require "./link_token_create_depository_filter"
require "./link_token_create_investment_filter"
require "./link_token_create_loan_filter"

module Plaid
  # By default, Link will only display account types that are compatible with all products supplied in the `products` parameter of `/link/token/create`. You can further limit the accounts shown in Link by using `account_filters` to specify the account subtypes to be shown in Link. Only the specified subtypes will be shown. This filtering applies to both the Account Select view (if enabled) and the Institution Select view. Institutions that do not support the selected subtypes will be omitted from Link. To indicate that all subtypes should be shown, use the value `\"all\"`. If the `account_filters` filter is used, any account type for which a filter is not specified will be entirely omitted from Link.  For a full list of valid types and subtypes, see the [Account schema](https://plaid.com/docs/api/accounts#account-type-schema).  For institutions using OAuth, the filter will not affect the list of institutions or accounts shown by the bank in the OAuth window.
  class LinkTokenCreateRequestAccountSubtypes
    include JSON::Serializable
    include JSON::Serializable::Unmapped
    include OpenApi::Validatable
    include OpenApi::Json

    # Optional Properties

    @[JSON::Field(key: "depository", type: Plaid::LinkTokenCreateDepositoryFilter?, default: nil, required: false, nullable: false, emit_null: false)]
    getter depository : Plaid::LinkTokenCreateDepositoryFilter? = nil

    @[JSON::Field(key: "credit", type: Plaid::LinkTokenCreateCreditFilter?, default: nil, required: false, nullable: false, emit_null: false)]
    getter credit : Plaid::LinkTokenCreateCreditFilter? = nil

    @[JSON::Field(key: "loan", type: Plaid::LinkTokenCreateLoanFilter?, default: nil, required: false, nullable: false, emit_null: false)]
    getter loan : Plaid::LinkTokenCreateLoanFilter? = nil

    @[JSON::Field(key: "investment", type: Plaid::LinkTokenCreateInvestmentFilter?, default: nil, required: false, nullable: false, emit_null: false)]
    getter investment : Plaid::LinkTokenCreateInvestmentFilter? = nil

    # Initializes the object
    # @param [Hash] attributes Model attributes in the form of hash
    def initialize(
      *,
      # Optional properties
      @depository : Plaid::LinkTokenCreateDepositoryFilter? = nil,
      @credit : Plaid::LinkTokenCreateCreditFilter? = nil,
      @loan : Plaid::LinkTokenCreateLoanFilter? = nil,
      @investment : Plaid::LinkTokenCreateInvestmentFilter? = nil
    )
    end

    # Show invalid properties with the reasons. Usually used together with valid?
    # @return Array for valid properties with the reasons
    def list_invalid_properties : Array(String)
      invalid_properties = Array(String).new

      unless (_depository = @depository).nil?
        invalid_properties.concat(_depository.list_invalid_properties_for("depository")) if _depository.is_a?(OpenApi::Validatable)
      end
      unless (_credit = @credit).nil?
        invalid_properties.concat(_credit.list_invalid_properties_for("credit")) if _credit.is_a?(OpenApi::Validatable)
      end
      unless (_loan = @loan).nil?
        invalid_properties.concat(_loan.list_invalid_properties_for("loan")) if _loan.is_a?(OpenApi::Validatable)
      end
      unless (_investment = @investment).nil?
        invalid_properties.concat(_investment.list_invalid_properties_for("investment")) if _investment.is_a?(OpenApi::Validatable)
      end
      invalid_properties
    end

    # Check to see if the all the properties in the model are valid
    # @return true if the model is valid
    def valid? : Bool
      unless (_depository = @depository).nil?
        return false if _depository.is_a?(OpenApi::Validatable) && !_depository.valid?
      end

      unless (_credit = @credit).nil?
        return false if _credit.is_a?(OpenApi::Validatable) && !_credit.valid?
      end

      unless (_loan = @loan).nil?
        return false if _loan.is_a?(OpenApi::Validatable) && !_loan.valid?
      end

      unless (_investment = @investment).nil?
        return false if _investment.is_a?(OpenApi::Validatable) && !_investment.valid?
      end

      true
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] depository Object to be assigned
    def depository=(new_value : Plaid::LinkTokenCreateDepositoryFilter?)
      unless new_value.nil?
        new_value.validate if new_value.is_a?(OpenApi::Validatable)
      end

      @depository = new_value
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] credit Object to be assigned
    def credit=(new_value : Plaid::LinkTokenCreateCreditFilter?)
      unless new_value.nil?
        new_value.validate if new_value.is_a?(OpenApi::Validatable)
      end

      @credit = new_value
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] loan Object to be assigned
    def loan=(new_value : Plaid::LinkTokenCreateLoanFilter?)
      unless new_value.nil?
        new_value.validate if new_value.is_a?(OpenApi::Validatable)
      end

      @loan = new_value
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] investment Object to be assigned
    def investment=(new_value : Plaid::LinkTokenCreateInvestmentFilter?)
      unless new_value.nil?
        new_value.validate if new_value.is_a?(OpenApi::Validatable)
      end

      @investment = new_value
    end

    # Generates #hash and #== methods from all fields
    # #== @return [Bool]
    # #hash calculates hash code according to all attributes.
    # #hash @return [UInt64] Hash code
    def_equals_and_hash(@depository, @credit, @loan, @investment)
  end
end
