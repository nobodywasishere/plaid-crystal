#  The Plaid API
#
# The Plaid REST API. Please see https://plaid.com/docs/api for more details.
#
# The version of the OpenAPI document: 2020-09-14_1.474.3
#
# Generated by: https://openapi-generator.tech
#

require "../../core"

module Plaid
  # The `inflow_model` allows you to model a test account that receives regular income or make regular payments on a loan. Any transactions generated by the `inflow_model` will appear in addition to randomly generated test data or transactions specified by `override_accounts`.
  class InflowModel
    include JSON::Serializable
    include JSON::Serializable::Unmapped
    include OpenApi::Validatable
    include OpenApi::Json

    # Required Properties

    # Inflow model. One of the following:  `none`: No income  `monthly-income`: Income occurs once per month `monthly-balance-payment`: Pays off the balance on a liability account at the given statement day of month.  `monthly-interest-only-payment`: Makes an interest-only payment on a liability account at the given statement day of month.  Note that account types supported by Liabilities will accrue interest in the Sandbox. The types impacted are account type `credit` with subtype `credit` or `paypal`, and account type `loan` with subtype `student` or `mortgage`.
    @[JSON::Field(key: "type", type: String?, default: nil, required: true, nullable: false, emit_null: false)]
    getter _type : String? = nil

    # Amount of income per month. This value is required if `type` is `monthly-income`.
    @[JSON::Field(key: "income_amount", type: Float64?, default: nil, required: true, nullable: false, emit_null: false)]
    getter income_amount : Float64? = nil

    # Number between 1 and 28, or `last` meaning the last day of the month. The day of the month on which the income transaction will appear. The name of the income transaction. This field is required if `type` is `monthly-income`, `monthly-balance-payment` or `monthly-interest-only-payment`.
    @[JSON::Field(key: "payment_day_of_month", type: Float64?, default: nil, required: true, nullable: false, emit_null: false)]
    getter payment_day_of_month : Float64? = nil

    # The name of the income transaction. This field is required if `type` is `monthly-income`, `monthly-balance-payment` or `monthly-interest-only-payment`.
    @[JSON::Field(key: "transaction_name", type: String?, default: nil, required: true, nullable: false, emit_null: false)]
    getter transaction_name : String? = nil

    # Number between 1 and 28, or `last` meaning the last day of the month. The day of the month on which the balance is calculated for the next payment. The name of the income transaction. This field is required if `type` is `monthly-balance-payment` or `monthly-interest-only-payment`.
    @[JSON::Field(key: "statement_day_of_month", type: String?, default: nil, required: true, nullable: false, emit_null: false)]
    getter statement_day_of_month : String? = nil

    # End of Required Properties

    # Initializes the object
    # @param [Hash] attributes Model attributes in the form of hash
    def initialize(
      *,
      # Required properties
      @_type : String? = nil,
      @income_amount : Float64? = nil,
      @payment_day_of_month : Float64? = nil,
      @transaction_name : String? = nil,
      @statement_day_of_month : String? = nil
    )
    end

    # Show invalid properties with the reasons. Usually used together with valid?
    # @return Array for valid properties with the reasons
    def list_invalid_properties : Array(String)
      invalid_properties = Array(String).new

      invalid_properties.push("\"_type\" is required and cannot be null") if @_type.nil?

      unless (__type = @_type).nil?
      end
      invalid_properties.push("\"income_amount\" is required and cannot be null") if @income_amount.nil?

      unless (_income_amount = @income_amount).nil?
      end
      invalid_properties.push("\"payment_day_of_month\" is required and cannot be null") if @payment_day_of_month.nil?

      unless (_payment_day_of_month = @payment_day_of_month).nil?
      end
      invalid_properties.push("\"transaction_name\" is required and cannot be null") if @transaction_name.nil?

      unless (_transaction_name = @transaction_name).nil?
      end
      invalid_properties.push("\"statement_day_of_month\" is required and cannot be null") if @statement_day_of_month.nil?

      unless (_statement_day_of_month = @statement_day_of_month).nil?
      end
      invalid_properties
    end

    # Check to see if the all the properties in the model are valid
    # @return true if the model is valid
    def valid? : Bool
      return false if @_type.nil?
      unless (__type = @_type).nil?
      end

      return false if @income_amount.nil?
      unless (_income_amount = @income_amount).nil?
      end

      return false if @payment_day_of_month.nil?
      unless (_payment_day_of_month = @payment_day_of_month).nil?
      end

      return false if @transaction_name.nil?
      unless (_transaction_name = @transaction_name).nil?
      end

      return false if @statement_day_of_month.nil?
      unless (_statement_day_of_month = @statement_day_of_month).nil?
      end

      true
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] _type Object to be assigned
    def _type=(new_value : String?)
      raise ArgumentError.new("\"_type\" is required and cannot be null") if new_value.nil?
      unless new_value.nil?
      end

      @_type = new_value
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] income_amount Object to be assigned
    def income_amount=(new_value : Float64?)
      raise ArgumentError.new("\"income_amount\" is required and cannot be null") if new_value.nil?
      unless new_value.nil?
      end

      @income_amount = new_value
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] payment_day_of_month Object to be assigned
    def payment_day_of_month=(new_value : Float64?)
      raise ArgumentError.new("\"payment_day_of_month\" is required and cannot be null") if new_value.nil?
      unless new_value.nil?
      end

      @payment_day_of_month = new_value
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] transaction_name Object to be assigned
    def transaction_name=(new_value : String?)
      raise ArgumentError.new("\"transaction_name\" is required and cannot be null") if new_value.nil?
      unless new_value.nil?
      end

      @transaction_name = new_value
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] statement_day_of_month Object to be assigned
    def statement_day_of_month=(new_value : String?)
      raise ArgumentError.new("\"statement_day_of_month\" is required and cannot be null") if new_value.nil?
      unless new_value.nil?
      end

      @statement_day_of_month = new_value
    end

    # Generates #hash and #== methods from all fields
    # #== @return [Bool]
    # #hash calculates hash code according to all attributes.
    # #hash @return [UInt64] Hash code
    def_equals_and_hash(@_type, @income_amount, @payment_day_of_month, @transaction_name, @statement_day_of_month)
  end
end
