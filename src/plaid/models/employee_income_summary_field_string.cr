#  The Plaid API
#
# The Plaid REST API. Please see https://plaid.com/docs/api for more details.
#
# The version of the OpenAPI document: 2020-09-14_1.474.3
#
# Generated by: https://openapi-generator.tech
#

require "../../core"

require "./verification_status"

module Plaid
  # The name of the employee, as reported on the paystub.
  class EmployeeIncomeSummaryFieldString
    include JSON::Serializable
    include JSON::Serializable::Unmapped
    include OpenApi::Validatable
    include OpenApi::Json

    # Required Properties

    # The value of the field.
    @[JSON::Field(key: "value", type: String?, default: nil, required: true, nullable: false, emit_null: false)]
    getter value : String? = nil

    @[JSON::Field(key: "verification_status", type: Plaid::VerificationStatus?, default: nil, required: true, nullable: false, emit_null: false)]
    getter verification_status : Plaid::VerificationStatus? = nil

    # End of Required Properties

    # Initializes the object
    # @param [Hash] attributes Model attributes in the form of hash
    def initialize(
      *,
      # Required properties
      @value : String? = nil,
      @verification_status : Plaid::VerificationStatus? = nil
    )
    end

    # Show invalid properties with the reasons. Usually used together with valid?
    # @return Array for valid properties with the reasons
    def list_invalid_properties : Array(String)
      invalid_properties = Array(String).new

      invalid_properties.push("\"value\" is required and cannot be null") if @value.nil?

      unless (_value = @value).nil?
      end
      invalid_properties.push("\"verification_status\" is required and cannot be null") if @verification_status.nil?

      unless (_verification_status = @verification_status).nil?
        invalid_properties.push(_verification_status.error_message) if !_verification_status.valid?
      end
      invalid_properties
    end

    # Check to see if the all the properties in the model are valid
    # @return true if the model is valid
    def valid? : Bool
      return false if @value.nil?
      unless (_value = @value).nil?
      end

      return false if @verification_status.nil?
      unless (_verification_status = @verification_status).nil?
        return false if !_verification_status.valid?
      end

      true
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] value Object to be assigned
    def value=(new_value : String?)
      raise ArgumentError.new("\"value\" is required and cannot be null") if new_value.nil?
      unless new_value.nil?
      end

      @value = new_value
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] verification_status Object to be assigned
    def verification_status=(new_value : Plaid::VerificationStatus?)
      raise ArgumentError.new("\"verification_status\" is required and cannot be null") if new_value.nil?
      unless new_value.nil?
        new_value.validate
      end

      @verification_status = new_value
    end

    # Generates #hash and #== methods from all fields
    # #== @return [Bool]
    # #hash calculates hash code according to all attributes.
    # #hash @return [UInt64] Hash code
    def_equals_and_hash(@value, @verification_status)
  end
end
