#  The Plaid API
#
# The Plaid REST API. Please see https://plaid.com/docs/api for more details.
#
# The version of the OpenAPI document: 2020-09-14_1.474.3
#
# Generated by: https://openapi-generator.tech
#

require "../../core"

require "./cra_bank_income_cause"
require "./cra_bank_income_warning_code"
require "./credit_bank_income_warning_type"

module Plaid
  # The warning associated with the data that was unavailable for the Bank Income Report.
  class CraBankIncomeWarning
    include JSON::Serializable
    include JSON::Serializable::Unmapped
    include OpenApi::Validatable
    include OpenApi::Json

    # Optional Properties

    @[JSON::Field(key: "warning_type", type: Plaid::CreditBankIncomeWarningType?, default: nil, required: false, nullable: false, emit_null: false)]
    getter warning_type : Plaid::CreditBankIncomeWarningType? = nil

    @[JSON::Field(key: "warning_code", type: Plaid::CraBankIncomeWarningCode?, default: nil, required: false, nullable: false, emit_null: false)]
    getter warning_code : Plaid::CraBankIncomeWarningCode? = nil

    @[JSON::Field(key: "cause", type: Plaid::CraBankIncomeCause?, default: nil, required: false, nullable: false, emit_null: false)]
    getter cause : Plaid::CraBankIncomeCause? = nil

    # Initializes the object
    # @param [Hash] attributes Model attributes in the form of hash
    def initialize(
      *,
      # Optional properties
      @warning_type : Plaid::CreditBankIncomeWarningType? = nil,
      @warning_code : Plaid::CraBankIncomeWarningCode? = nil,
      @cause : Plaid::CraBankIncomeCause? = nil
    )
    end

    # Show invalid properties with the reasons. Usually used together with valid?
    # @return Array for valid properties with the reasons
    def list_invalid_properties : Array(String)
      invalid_properties = Array(String).new

      unless (_warning_type = @warning_type).nil?
        invalid_properties.push(_warning_type.error_message) if !_warning_type.valid?
      end
      unless (_warning_code = @warning_code).nil?
        invalid_properties.push(_warning_code.error_message) if !_warning_code.valid?
      end
      unless (_cause = @cause).nil?
        invalid_properties.concat(_cause.list_invalid_properties_for("cause")) if _cause.is_a?(OpenApi::Validatable)
      end
      invalid_properties
    end

    # Check to see if the all the properties in the model are valid
    # @return true if the model is valid
    def valid? : Bool
      unless (_warning_type = @warning_type).nil?
        return false if !_warning_type.valid?
      end

      unless (_warning_code = @warning_code).nil?
        return false if !_warning_code.valid?
      end

      unless (_cause = @cause).nil?
        return false if _cause.is_a?(OpenApi::Validatable) && !_cause.valid?
      end

      true
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] warning_type Object to be assigned
    def warning_type=(new_value : Plaid::CreditBankIncomeWarningType?)
      unless new_value.nil?
        new_value.validate
      end

      @warning_type = new_value
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] warning_code Object to be assigned
    def warning_code=(new_value : Plaid::CraBankIncomeWarningCode?)
      unless new_value.nil?
        new_value.validate
      end

      @warning_code = new_value
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] cause Object to be assigned
    def cause=(new_value : Plaid::CraBankIncomeCause?)
      unless new_value.nil?
        new_value.validate if new_value.is_a?(OpenApi::Validatable)
      end

      @cause = new_value
    end

    # Generates #hash and #== methods from all fields
    # #== @return [Bool]
    # #hash calculates hash code according to all attributes.
    # #hash @return [UInt64] Hash code
    def_equals_and_hash(@warning_type, @warning_code, @cause)
  end
end
