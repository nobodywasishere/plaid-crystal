#  The Plaid API
#
# The Plaid REST API. Please see https://plaid.com/docs/api for more details.
#
# The version of the OpenAPI document: 2020-09-14_1.474.3
#
# Generated by: https://openapi-generator.tech
#

require "../../core"

require "./statements_statement"

module Plaid
  # Account associated with the Item.
  class StatementsAccount
    include JSON::Serializable
    include JSON::Serializable::Unmapped
    include OpenApi::Validatable
    include OpenApi::Json

    # Required Properties

    # Plaid's unique identifier for the account.
    @[JSON::Field(key: "account_id", type: String?, default: nil, required: true, nullable: false, emit_null: false)]
    getter account_id : String? = nil

    # The name of the account, either assigned by the user or by the financial institution itself.
    @[JSON::Field(key: "account_name", type: String?, default: nil, required: true, nullable: false, emit_null: false)]
    getter account_name : String? = nil

    # The type of account. Possible values are investment, credit, depository, loan, brokerage, other.
    @[JSON::Field(key: "account_type", type: String?, default: nil, required: true, nullable: false, emit_null: false)]
    getter account_type : String? = nil

    # The list of statements' metadata associated with this account.
    @[JSON::Field(key: "statements", type: Array(StatementsStatement)?, default: nil, required: true, nullable: false, emit_null: false)]
    getter statements : Array(StatementsStatement)? = nil

    # End of Required Properties

    # Initializes the object
    # @param [Hash] attributes Model attributes in the form of hash
    def initialize(
      *,
      # Required properties
      @account_id : String? = nil,
      @account_name : String? = nil,
      @account_type : String? = nil,
      @statements : Array(StatementsStatement)? = nil
    )
    end

    # Show invalid properties with the reasons. Usually used together with valid?
    # @return Array for valid properties with the reasons
    def list_invalid_properties : Array(String)
      invalid_properties = Array(String).new

      invalid_properties.push("\"account_id\" is required and cannot be null") if @account_id.nil?

      unless (_account_id = @account_id).nil?
      end
      invalid_properties.push("\"account_name\" is required and cannot be null") if @account_name.nil?

      unless (_account_name = @account_name).nil?
      end
      invalid_properties.push("\"account_type\" is required and cannot be null") if @account_type.nil?

      unless (_account_type = @account_type).nil?
      end
      invalid_properties.push("\"statements\" is required and cannot be null") if @statements.nil?

      unless (_statements = @statements).nil?
      end
      invalid_properties
    end

    # Check to see if the all the properties in the model are valid
    # @return true if the model is valid
    def valid? : Bool
      return false if @account_id.nil?
      unless (_account_id = @account_id).nil?
      end

      return false if @account_name.nil?
      unless (_account_name = @account_name).nil?
      end

      return false if @account_type.nil?
      unless (_account_type = @account_type).nil?
      end

      return false if @statements.nil?
      unless (_statements = @statements).nil?
      end

      true
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] account_id Object to be assigned
    def account_id=(new_value : String?)
      raise ArgumentError.new("\"account_id\" is required and cannot be null") if new_value.nil?
      unless new_value.nil?
      end

      @account_id = new_value
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] account_name Object to be assigned
    def account_name=(new_value : String?)
      raise ArgumentError.new("\"account_name\" is required and cannot be null") if new_value.nil?
      unless new_value.nil?
      end

      @account_name = new_value
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] account_type Object to be assigned
    def account_type=(new_value : String?)
      raise ArgumentError.new("\"account_type\" is required and cannot be null") if new_value.nil?
      unless new_value.nil?
      end

      @account_type = new_value
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] statements Object to be assigned
    def statements=(new_value : Array(StatementsStatement)?)
      raise ArgumentError.new("\"statements\" is required and cannot be null") if new_value.nil?
      unless new_value.nil?
      end

      @statements = new_value
    end

    # Generates #hash and #== methods from all fields
    # #== @return [Bool]
    # #hash calculates hash code according to all attributes.
    # #hash @return [UInt64] Hash code
    def_equals_and_hash(@account_id, @account_name, @account_type, @statements)
  end
end
