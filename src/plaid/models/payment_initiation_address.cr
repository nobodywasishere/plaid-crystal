#  The Plaid API
#
# The Plaid REST API. Please see https://plaid.com/docs/api for more details.
#
# The version of the OpenAPI document: 2020-09-14_1.474.3
#
# Generated by: https://openapi-generator.tech
#

require "../../core"

module Plaid
  # The optional address of the payment recipient's bank account. Required by most institutions outside of the UK.
  class PaymentInitiationAddress
    include JSON::Serializable
    include JSON::Serializable::Unmapped
    include OpenApi::Validatable
    include OpenApi::Json

    # Required Properties

    # An array of length 1-2 representing the street address where the recipient is located. Maximum of 70 characters.
    @[JSON::Field(key: "street", type: Array(String)?, default: nil, required: true, nullable: false, emit_null: false)]
    getter street : Array(String)? = nil
    MIN_ITEMS_FOR_STREET = 1

    # The city where the recipient is located. Maximum of 35 characters.
    @[JSON::Field(key: "city", type: String?, default: nil, required: true, nullable: false, emit_null: false)]
    getter city : String? = nil
    MAX_LENGTH_FOR_CITY = 35
    MIN_LENGTH_FOR_CITY =  1

    # The postal code where the recipient is located. Maximum of 16 characters.
    @[JSON::Field(key: "postal_code", type: String?, default: nil, required: true, nullable: false, emit_null: false)]
    getter postal_code : String? = nil
    MAX_LENGTH_FOR_POSTAL_CODE = 16
    MIN_LENGTH_FOR_POSTAL_CODE =  1

    # The ISO 3166-1 alpha-2 country code where the recipient is located.
    @[JSON::Field(key: "country", type: String?, default: nil, required: true, nullable: false, emit_null: false)]
    getter country : String? = nil
    MAX_LENGTH_FOR_COUNTRY = 2
    MIN_LENGTH_FOR_COUNTRY = 2

    # End of Required Properties

    # Initializes the object
    # @param [Hash] attributes Model attributes in the form of hash
    def initialize(
      *,
      # Required properties
      @street : Array(String)? = nil,
      @city : String? = nil,
      @postal_code : String? = nil,
      @country : String? = nil
    )
    end

    # Show invalid properties with the reasons. Usually used together with valid?
    # @return Array for valid properties with the reasons
    def list_invalid_properties : Array(String)
      invalid_properties = Array(String).new

      invalid_properties.push("\"street\" is required and cannot be null") if @street.nil?

      unless (_street = @street).nil?
        if min_items_error = OpenApi::PrimitiveValidator.min_items_error("street", _street.size, MIN_ITEMS_FOR_STREET)
          invalid_properties.push(min_items_error)
        end
      end
      invalid_properties.push("\"city\" is required and cannot be null") if @city.nil?

      unless (_city = @city).nil?
        if max_length_error = OpenApi::PrimitiveValidator.max_length_error("city", _city.to_s.size, MAX_LENGTH_FOR_CITY)
          invalid_properties.push(max_length_error)
        end

        if min_length_error = OpenApi::PrimitiveValidator.min_length_error("city", _city.to_s.size, MIN_LENGTH_FOR_CITY)
          invalid_properties.push(min_length_error)
        end
      end
      invalid_properties.push("\"postal_code\" is required and cannot be null") if @postal_code.nil?

      unless (_postal_code = @postal_code).nil?
        if max_length_error = OpenApi::PrimitiveValidator.max_length_error("postal_code", _postal_code.to_s.size, MAX_LENGTH_FOR_POSTAL_CODE)
          invalid_properties.push(max_length_error)
        end

        if min_length_error = OpenApi::PrimitiveValidator.min_length_error("postal_code", _postal_code.to_s.size, MIN_LENGTH_FOR_POSTAL_CODE)
          invalid_properties.push(min_length_error)
        end
      end
      invalid_properties.push("\"country\" is required and cannot be null") if @country.nil?

      unless (_country = @country).nil?
        if max_length_error = OpenApi::PrimitiveValidator.max_length_error("country", _country.to_s.size, MAX_LENGTH_FOR_COUNTRY)
          invalid_properties.push(max_length_error)
        end

        if min_length_error = OpenApi::PrimitiveValidator.min_length_error("country", _country.to_s.size, MIN_LENGTH_FOR_COUNTRY)
          invalid_properties.push(min_length_error)
        end
      end
      invalid_properties
    end

    # Check to see if the all the properties in the model are valid
    # @return true if the model is valid
    def valid? : Bool
      return false if @street.nil?
      unless (_street = @street).nil?
        return false if _street.size < MIN_ITEMS_FOR_STREET
      end

      return false if @city.nil?
      unless (_city = @city).nil?
        return false if _city.to_s.size > MAX_LENGTH_FOR_CITY
        return false if _city.to_s.size < MIN_LENGTH_FOR_CITY
      end

      return false if @postal_code.nil?
      unless (_postal_code = @postal_code).nil?
        return false if _postal_code.to_s.size > MAX_LENGTH_FOR_POSTAL_CODE
        return false if _postal_code.to_s.size < MIN_LENGTH_FOR_POSTAL_CODE
      end

      return false if @country.nil?
      unless (_country = @country).nil?
        return false if _country.to_s.size > MAX_LENGTH_FOR_COUNTRY
        return false if _country.to_s.size < MIN_LENGTH_FOR_COUNTRY
      end

      true
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] street Object to be assigned
    def street=(new_value : Array(String)?)
      raise ArgumentError.new("\"street\" is required and cannot be null") if new_value.nil?
      unless new_value.nil?
        OpenApi::PrimitiveValidator.validate_min_items("street", new_value.size, MIN_ITEMS_FOR_STREET)
      end

      @street = new_value
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] city Object to be assigned
    def city=(new_value : String?)
      raise ArgumentError.new("\"city\" is required and cannot be null") if new_value.nil?
      unless new_value.nil?
        OpenApi::PrimitiveValidator.validate_max_length("city", new_value.to_s.size, MAX_LENGTH_FOR_CITY)
        OpenApi::PrimitiveValidator.validate_min_length("city", new_value.to_s.size, MIN_LENGTH_FOR_CITY)
      end

      @city = new_value
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] postal_code Object to be assigned
    def postal_code=(new_value : String?)
      raise ArgumentError.new("\"postal_code\" is required and cannot be null") if new_value.nil?
      unless new_value.nil?
        OpenApi::PrimitiveValidator.validate_max_length("postal_code", new_value.to_s.size, MAX_LENGTH_FOR_POSTAL_CODE)
        OpenApi::PrimitiveValidator.validate_min_length("postal_code", new_value.to_s.size, MIN_LENGTH_FOR_POSTAL_CODE)
      end

      @postal_code = new_value
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] country Object to be assigned
    def country=(new_value : String?)
      raise ArgumentError.new("\"country\" is required and cannot be null") if new_value.nil?
      unless new_value.nil?
        OpenApi::PrimitiveValidator.validate_max_length("country", new_value.to_s.size, MAX_LENGTH_FOR_COUNTRY)
        OpenApi::PrimitiveValidator.validate_min_length("country", new_value.to_s.size, MIN_LENGTH_FOR_COUNTRY)
      end

      @country = new_value
    end

    # Generates #hash and #== methods from all fields
    # #== @return [Bool]
    # #hash calculates hash code according to all attributes.
    # #hash @return [UInt64] Hash code
    def_equals_and_hash(@street, @city, @postal_code, @country)
  end
end
