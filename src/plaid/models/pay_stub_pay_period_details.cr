#  The Plaid API
#
# The Plaid REST API. Please see https://plaid.com/docs/api for more details.
#
# The version of the OpenAPI document: 2020-09-14_1.474.3
#
# Generated by: https://openapi-generator.tech
#

require "../../core"

require "./credit_pay_stub_pay_basis_type"
require "./pay_stub_distribution_breakdown"

module Plaid
  # Details about the pay period.
  class PayStubPayPeriodDetails
    include JSON::Serializable
    include JSON::Serializable::Unmapped
    include OpenApi::Validatable
    include OpenApi::Json

    # Required Properties

    # The amount of the paycheck.
    @[JSON::Field(key: "pay_amount", type: Float64?, default: nil, required: true, nullable: true, emit_null: true)]
    getter pay_amount : Float64? = nil

    @[JSON::Field(key: "distribution_breakdown", type: Array(PayStubDistributionBreakdown)?, default: nil, required: true, nullable: false, emit_null: false)]
    getter distribution_breakdown : Array(PayStubDistributionBreakdown)? = nil

    # The date on which the pay period ended, in [ISO 8601](https://wikipedia.org/wiki/ISO_8601) format (\"yyyy-mm-dd\").
    @[JSON::Field(key: "end_date", type: Time?, default: nil, required: true, nullable: true, emit_null: true, converter: Time::ISO8601DateConverter)]
    getter end_date : Time? = nil

    # Total earnings before tax/deductions.
    @[JSON::Field(key: "gross_earnings", type: Float64?, default: nil, required: true, nullable: true, emit_null: true)]
    getter gross_earnings : Float64? = nil

    # The ISO-4217 currency code of the net pay. Always `null` if `unofficial_currency_code` is non-null.
    @[JSON::Field(key: "iso_currency_code", type: String?, default: nil, required: true, nullable: true, emit_null: true)]
    getter iso_currency_code : String? = nil

    # The date on which the pay stub was issued, in [ISO 8601](https://wikipedia.org/wiki/ISO_8601) format (\"yyyy-mm-dd\").
    @[JSON::Field(key: "pay_date", type: Time?, default: nil, required: true, nullable: true, emit_null: true, converter: Time::ISO8601DateConverter)]
    getter pay_date : Time? = nil

    # The frequency at which an individual is paid.
    @[JSON::Field(key: "pay_frequency", type: String?, default: nil, required: true, nullable: true, emit_null: true)]
    getter pay_frequency : String? = nil

    # The date on which the pay period started, in [ISO 8601](https://wikipedia.org/wiki/ISO_8601) format (\"yyyy-mm-dd\").
    @[JSON::Field(key: "start_date", type: Time?, default: nil, required: true, nullable: true, emit_null: true, converter: Time::ISO8601DateConverter)]
    getter start_date : Time? = nil

    # The unofficial currency code associated with the net pay. Always `null` if `iso_currency_code` is non-`null`. Unofficial currency codes are used for currencies that do not have official ISO currency codes, such as cryptocurrencies and the currencies of certain countries.  See the [currency code schema](https://plaid.com/docs/api/accounts#currency-code-schema) for a full listing of supported `iso_currency_code`s.
    @[JSON::Field(key: "unofficial_currency_code", type: String?, default: nil, required: true, nullable: true, emit_null: true)]
    getter unofficial_currency_code : String? = nil

    # End of Required Properties

    # Optional Properties

    @[JSON::Field(key: "pay_basis", type: Plaid::CreditPayStubPayBasisType?, default: nil, required: false, nullable: false, emit_null: false)]
    getter pay_basis : Plaid::CreditPayStubPayBasisType? = nil

    # Initializes the object
    # @param [Hash] attributes Model attributes in the form of hash
    def initialize(
      *,
      # Required properties
      @pay_amount : Float64? = nil,
      @distribution_breakdown : Array(PayStubDistributionBreakdown)? = nil,
      @end_date : Time? = nil,
      @gross_earnings : Float64? = nil,
      @iso_currency_code : String? = nil,
      @pay_date : Time? = nil,
      @pay_frequency : String? = nil,
      @start_date : Time? = nil,
      @unofficial_currency_code : String? = nil,
      # Optional properties
      @pay_basis : Plaid::CreditPayStubPayBasisType? = nil
    )
    end

    # Show invalid properties with the reasons. Usually used together with valid?
    # @return Array for valid properties with the reasons
    def list_invalid_properties : Array(String)
      invalid_properties = Array(String).new

      unless (_pay_amount = @pay_amount).nil?
      end
      invalid_properties.push("\"distribution_breakdown\" is required and cannot be null") if @distribution_breakdown.nil?

      unless (_distribution_breakdown = @distribution_breakdown).nil?
      end
      unless (_end_date = @end_date).nil?
      end
      unless (_gross_earnings = @gross_earnings).nil?
      end
      unless (_iso_currency_code = @iso_currency_code).nil?
      end
      unless (_pay_date = @pay_date).nil?
      end
      unless (_pay_frequency = @pay_frequency).nil?
      end
      unless (_start_date = @start_date).nil?
      end
      unless (_unofficial_currency_code = @unofficial_currency_code).nil?
      end
      unless (_pay_basis = @pay_basis).nil?
        invalid_properties.push(_pay_basis.error_message) if !_pay_basis.valid?
      end
      invalid_properties
    end

    # Check to see if the all the properties in the model are valid
    # @return true if the model is valid
    def valid? : Bool
      unless (_pay_amount = @pay_amount).nil?
      end

      return false if @distribution_breakdown.nil?
      unless (_distribution_breakdown = @distribution_breakdown).nil?
      end

      unless (_end_date = @end_date).nil?
      end

      unless (_gross_earnings = @gross_earnings).nil?
      end

      unless (_iso_currency_code = @iso_currency_code).nil?
      end

      unless (_pay_date = @pay_date).nil?
      end

      unless (_pay_frequency = @pay_frequency).nil?
      end

      unless (_start_date = @start_date).nil?
      end

      unless (_unofficial_currency_code = @unofficial_currency_code).nil?
      end

      unless (_pay_basis = @pay_basis).nil?
        return false if !_pay_basis.valid?
      end

      true
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] pay_amount Object to be assigned
    def pay_amount=(new_value : Float64?)
      unless new_value.nil?
      end

      @pay_amount = new_value
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] distribution_breakdown Object to be assigned
    def distribution_breakdown=(new_value : Array(PayStubDistributionBreakdown)?)
      raise ArgumentError.new("\"distribution_breakdown\" is required and cannot be null") if new_value.nil?
      unless new_value.nil?
      end

      @distribution_breakdown = new_value
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] end_date Object to be assigned
    def end_date=(new_value : Time?)
      unless new_value.nil?
      end

      @end_date = new_value
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] gross_earnings Object to be assigned
    def gross_earnings=(new_value : Float64?)
      unless new_value.nil?
      end

      @gross_earnings = new_value
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] iso_currency_code Object to be assigned
    def iso_currency_code=(new_value : String?)
      unless new_value.nil?
      end

      @iso_currency_code = new_value
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] pay_date Object to be assigned
    def pay_date=(new_value : Time?)
      unless new_value.nil?
      end

      @pay_date = new_value
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] pay_frequency Object to be assigned
    def pay_frequency=(new_value : String?)
      unless new_value.nil?
      end

      @pay_frequency = new_value
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] start_date Object to be assigned
    def start_date=(new_value : Time?)
      unless new_value.nil?
      end

      @start_date = new_value
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] unofficial_currency_code Object to be assigned
    def unofficial_currency_code=(new_value : String?)
      unless new_value.nil?
      end

      @unofficial_currency_code = new_value
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] pay_basis Object to be assigned
    def pay_basis=(new_value : Plaid::CreditPayStubPayBasisType?)
      unless new_value.nil?
        new_value.validate
      end

      @pay_basis = new_value
    end

    # Generates #hash and #== methods from all fields
    # #== @return [Bool]
    # #hash calculates hash code according to all attributes.
    # #hash @return [UInt64] Hash code
    def_equals_and_hash(@pay_amount, @distribution_breakdown, @end_date, @gross_earnings, @iso_currency_code, @pay_date, @pay_frequency, @start_date, @unofficial_currency_code, @pay_basis)
  end
end
