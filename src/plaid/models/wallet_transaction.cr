#  The Plaid API
#
# The Plaid REST API. Please see https://plaid.com/docs/api for more details.
#
# The version of the OpenAPI document: 2020-09-14_1.474.3
#
# Generated by: https://openapi-generator.tech
#

require "../../core"

require "./wallet_payment_scheme"
require "./wallet_transaction_amount"
require "./wallet_transaction_counterparty"
require "./wallet_transaction_failure_reason"
require "./wallet_transaction_status"

module Plaid
  # The transaction details
  class WalletTransaction
    include JSON::Serializable
    include JSON::Serializable::Unmapped
    include OpenApi::Validatable
    include OpenApi::Json

    # Required Properties

    # A unique ID identifying the transaction
    @[JSON::Field(key: "transaction_id", type: String?, default: nil, required: true, nullable: false, emit_null: false)]
    getter transaction_id : String? = nil

    # The EMI (E-Money Institution) wallet that this payment is associated with, if any. This wallet is used as an intermediary account to enable Plaid to reconcile the settlement of funds for Payment Initiation requests.
    @[JSON::Field(key: "wallet_id", type: String?, default: nil, required: true, nullable: false, emit_null: false)]
    getter wallet_id : String? = nil

    # A reference for the transaction
    @[JSON::Field(key: "reference", type: String?, default: nil, required: true, nullable: false, emit_null: false)]
    getter reference : String? = nil

    # The type of the transaction. The supported transaction types that are returned are: `BANK_TRANSFER:` a transaction which credits an e-wallet through an external bank transfer.  `PAYOUT:` a transaction which debits an e-wallet by disbursing funds to a counterparty.  `PIS_PAY_IN:` a payment which credits an e-wallet through Plaid's Payment Initiation Services (PIS) APIs. For more information see the [Payment Initiation endpoints](https://plaid.com/docs/api/products/payment-initiation/).  `REFUND:` a transaction which debits an e-wallet by refunding a previously initiated payment made through Plaid's [PIS APIs](https://plaid.com/docs/api/products/payment-initiation/).  `FUNDS_SWEEP`: an automated transaction which debits funds from an e-wallet to a designated client-owned account.  `RETURN`: an automated transaction where a debit transaction was reversed and money moved back to originating account.
    @[JSON::Field(key: "type", type: String?, default: nil, required: true, nullable: false, emit_null: false)]
    getter _type : String? = nil
    ERROR_MESSAGE_FOR__TYPE = "invalid value for \"_type\", must be one of [BANK_TRANSFER, PAYOUT, PIS_PAY_IN, REFUND, FUNDS_SWEEP, RETURN]."
    VALID_VALUES_FOR__TYPE  = String.static_array("BANK_TRANSFER", "PAYOUT", "PIS_PAY_IN", "REFUND", "FUNDS_SWEEP", "RETURN")

    @[JSON::Field(key: "amount", type: WalletTransactionAmount?, default: nil, required: true, nullable: false, emit_null: false)]
    getter amount : WalletTransactionAmount? = nil

    @[JSON::Field(key: "counterparty", type: WalletTransactionCounterparty?, default: nil, required: true, nullable: false, emit_null: false)]
    getter counterparty : WalletTransactionCounterparty? = nil

    @[JSON::Field(key: "status", type: Plaid::WalletTransactionStatus?, default: nil, required: true, nullable: false, emit_null: false)]
    getter status : Plaid::WalletTransactionStatus? = nil

    # Timestamp when the transaction was created, in [ISO 8601](https://wikipedia.org/wiki/ISO_8601) format.
    @[JSON::Field(key: "created_at", type: Time?, default: nil, required: true, nullable: false, emit_null: false, converter: Time::RFC3339Converter)]
    getter created_at : Time? = nil

    # The date and time of the last time the `status` was updated, in IS0 8601 format
    @[JSON::Field(key: "last_status_update", type: Time?, default: nil, required: true, nullable: false, emit_null: false, converter: Time::RFC3339Converter)]
    getter last_status_update : Time? = nil

    # End of Required Properties

    # Optional Properties

    @[JSON::Field(key: "scheme", type: Plaid::WalletPaymentScheme?, default: nil, required: false, nullable: true, emit_null: true, presence: true, ignore_serialize: scheme.nil? && !scheme_present?)]
    getter scheme : Plaid::WalletPaymentScheme? = nil

    @[JSON::Field(ignore: true)]
    property? scheme_present : Bool = false

    # The payment id that this transaction is associated with, if any. This is present only for transaction types `PIS_PAY_IN` and `REFUND`.
    @[JSON::Field(key: "payment_id", type: String?, default: nil, required: false, nullable: true, emit_null: true, presence: true, ignore_serialize: payment_id.nil? && !payment_id_present?)]
    getter payment_id : String? = nil

    @[JSON::Field(ignore: true)]
    property? payment_id_present : Bool = false

    @[JSON::Field(key: "failure_reason", type: Plaid::WalletTransactionFailureReason?, default: nil, required: false, nullable: true, emit_null: true, presence: true, ignore_serialize: failure_reason.nil? && !failure_reason_present?)]
    getter failure_reason : Plaid::WalletTransactionFailureReason? = nil

    @[JSON::Field(ignore: true)]
    property? failure_reason_present : Bool = false

    # Initializes the object
    # @param [Hash] attributes Model attributes in the form of hash
    def initialize(
      *,
      # Required properties
      @transaction_id : String? = nil,
      @wallet_id : String? = nil,
      @reference : String? = nil,
      @_type : String? = nil,
      @amount : WalletTransactionAmount? = nil,
      @counterparty : WalletTransactionCounterparty? = nil,
      @status : Plaid::WalletTransactionStatus? = nil,
      @created_at : Time? = nil,
      @last_status_update : Time? = nil,
      # Optional properties
      @scheme : Plaid::WalletPaymentScheme? = nil,
      @payment_id : String? = nil,
      @failure_reason : Plaid::WalletTransactionFailureReason? = nil
    )
    end

    # Show invalid properties with the reasons. Usually used together with valid?
    # @return Array for valid properties with the reasons
    def list_invalid_properties : Array(String)
      invalid_properties = Array(String).new

      invalid_properties.push("\"transaction_id\" is required and cannot be null") if @transaction_id.nil?

      unless (_transaction_id = @transaction_id).nil?
      end
      invalid_properties.push("\"wallet_id\" is required and cannot be null") if @wallet_id.nil?

      unless (_wallet_id = @wallet_id).nil?
      end
      invalid_properties.push("\"reference\" is required and cannot be null") if @reference.nil?

      unless (_reference = @reference).nil?
      end
      invalid_properties.push("\"_type\" is required and cannot be null") if @_type.nil?

      unless (__type = @_type).nil?
        invalid_properties.push(ERROR_MESSAGE_FOR__TYPE) unless OpenApi::EnumValidator.valid?(__type, VALID_VALUES_FOR__TYPE)
      end
      invalid_properties.push("\"amount\" is required and cannot be null") if @amount.nil?

      unless (_amount = @amount).nil?
      end
      invalid_properties.push("\"counterparty\" is required and cannot be null") if @counterparty.nil?

      unless (_counterparty = @counterparty).nil?
      end
      invalid_properties.push("\"status\" is required and cannot be null") if @status.nil?

      unless (_status = @status).nil?
        invalid_properties.push(_status.error_message) if !_status.valid?
      end
      invalid_properties.push("\"created_at\" is required and cannot be null") if @created_at.nil?

      unless (_created_at = @created_at).nil?
      end
      invalid_properties.push("\"last_status_update\" is required and cannot be null") if @last_status_update.nil?

      unless (_last_status_update = @last_status_update).nil?
      end
      unless (_scheme = @scheme).nil?
        invalid_properties.push(_scheme.error_message) if !_scheme.valid?
      end
      unless (_payment_id = @payment_id).nil?
      end
      unless (_failure_reason = @failure_reason).nil?
        invalid_properties.push(_failure_reason.error_message) if !_failure_reason.valid?
      end
      invalid_properties
    end

    # Check to see if the all the properties in the model are valid
    # @return true if the model is valid
    def valid? : Bool
      return false if @transaction_id.nil?
      unless (_transaction_id = @transaction_id).nil?
      end

      return false if @wallet_id.nil?
      unless (_wallet_id = @wallet_id).nil?
      end

      return false if @reference.nil?
      unless (_reference = @reference).nil?
      end

      return false if @_type.nil?
      unless (__type = @_type).nil?
        return false unless OpenApi::EnumValidator.valid?(__type, VALID_VALUES_FOR__TYPE)
      end

      return false if @amount.nil?
      unless (_amount = @amount).nil?
      end

      return false if @counterparty.nil?
      unless (_counterparty = @counterparty).nil?
      end

      return false if @status.nil?
      unless (_status = @status).nil?
        return false if !_status.valid?
      end

      return false if @created_at.nil?
      unless (_created_at = @created_at).nil?
      end

      return false if @last_status_update.nil?
      unless (_last_status_update = @last_status_update).nil?
      end

      unless (_scheme = @scheme).nil?
        return false if !_scheme.valid?
      end

      unless (_payment_id = @payment_id).nil?
      end

      unless (_failure_reason = @failure_reason).nil?
        return false if !_failure_reason.valid?
      end

      true
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] transaction_id Object to be assigned
    def transaction_id=(new_value : String?)
      raise ArgumentError.new("\"transaction_id\" is required and cannot be null") if new_value.nil?
      unless new_value.nil?
      end

      @transaction_id = new_value
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] wallet_id Object to be assigned
    def wallet_id=(new_value : String?)
      raise ArgumentError.new("\"wallet_id\" is required and cannot be null") if new_value.nil?
      unless new_value.nil?
      end

      @wallet_id = new_value
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] reference Object to be assigned
    def reference=(new_value : String?)
      raise ArgumentError.new("\"reference\" is required and cannot be null") if new_value.nil?
      unless new_value.nil?
      end

      @reference = new_value
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] _type Object to be assigned
    def _type=(new_value : String?)
      raise ArgumentError.new("\"_type\" is required and cannot be null") if new_value.nil?
      unless new_value.nil?
        OpenApi::EnumValidator.validate("_type", new_value, VALID_VALUES_FOR__TYPE)
      end

      @_type = new_value
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] amount Object to be assigned
    def amount=(new_value : WalletTransactionAmount?)
      raise ArgumentError.new("\"amount\" is required and cannot be null") if new_value.nil?
      unless new_value.nil?
      end

      @amount = new_value
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] counterparty Object to be assigned
    def counterparty=(new_value : WalletTransactionCounterparty?)
      raise ArgumentError.new("\"counterparty\" is required and cannot be null") if new_value.nil?
      unless new_value.nil?
      end

      @counterparty = new_value
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] status Object to be assigned
    def status=(new_value : Plaid::WalletTransactionStatus?)
      raise ArgumentError.new("\"status\" is required and cannot be null") if new_value.nil?
      unless new_value.nil?
        new_value.validate
      end

      @status = new_value
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] created_at Object to be assigned
    def created_at=(new_value : Time?)
      raise ArgumentError.new("\"created_at\" is required and cannot be null") if new_value.nil?
      unless new_value.nil?
      end

      @created_at = new_value
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] last_status_update Object to be assigned
    def last_status_update=(new_value : Time?)
      raise ArgumentError.new("\"last_status_update\" is required and cannot be null") if new_value.nil?
      unless new_value.nil?
      end

      @last_status_update = new_value
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] scheme Object to be assigned
    def scheme=(new_value : Plaid::WalletPaymentScheme?)
      unless new_value.nil?
        new_value.validate
      end

      @scheme = new_value
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] payment_id Object to be assigned
    def payment_id=(new_value : String?)
      unless new_value.nil?
      end

      @payment_id = new_value
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] failure_reason Object to be assigned
    def failure_reason=(new_value : Plaid::WalletTransactionFailureReason?)
      unless new_value.nil?
        new_value.validate
      end

      @failure_reason = new_value
    end

    # Generates #hash and #== methods from all fields
    # #== @return [Bool]
    # #hash calculates hash code according to all attributes.
    # #hash @return [UInt64] Hash code
    def_equals_and_hash(@transaction_id, @wallet_id, @reference, @_type, @amount, @counterparty, @status, @created_at, @last_status_update, @scheme, @scheme_present, @payment_id, @payment_id_present, @failure_reason, @failure_reason_present)
  end
end
