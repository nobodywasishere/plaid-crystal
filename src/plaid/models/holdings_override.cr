#  The Plaid API
#
# The Plaid REST API. Please see https://plaid.com/docs/api for more details.
#
# The version of the OpenAPI document: 2020-09-14_1.474.3
#
# Generated by: https://openapi-generator.tech
#

require "../../core"

require "./security_override"

module Plaid
  # Specify the holdings on the account.
  class HoldingsOverride
    include JSON::Serializable
    include JSON::Serializable::Unmapped
    include OpenApi::Validatable
    include OpenApi::Json

    # Required Properties

    # The last price given by the institution for this security
    @[JSON::Field(key: "institution_price", type: Float64?, default: nil, required: true, nullable: false, emit_null: false)]
    getter institution_price : Float64? = nil

    # The total quantity of the asset held, as reported by the financial institution.
    @[JSON::Field(key: "quantity", type: Float64?, default: nil, required: true, nullable: false, emit_null: false)]
    getter quantity : Float64? = nil

    # Either a valid `iso_currency_code` or `unofficial_currency_code`
    @[JSON::Field(key: "currency", type: String?, default: nil, required: true, nullable: false, emit_null: false)]
    getter currency : String? = nil

    @[JSON::Field(key: "security", type: Plaid::SecurityOverride?, default: nil, required: true, nullable: false, emit_null: false)]
    getter security : Plaid::SecurityOverride? = nil

    # End of Required Properties

    # Optional Properties

    # The date at which `institution_price` was current. Must be formatted as an [ISO 8601](https://wikipedia.org/wiki/ISO_8601) date.
    @[JSON::Field(key: "institution_price_as_of", type: Time?, default: nil, required: false, nullable: false, emit_null: false, converter: Time::ISO8601DateConverter)]
    getter institution_price_as_of : Time? = nil

    # The average original value of the holding. Multiple cost basis values for the same security purchased at different prices are not supported.
    @[JSON::Field(key: "cost_basis", type: Float64?, default: nil, required: false, nullable: false, emit_null: false)]
    getter cost_basis : Float64? = nil

    # Initializes the object
    # @param [Hash] attributes Model attributes in the form of hash
    def initialize(
      *,
      # Required properties
      @institution_price : Float64? = nil,
      @quantity : Float64? = nil,
      @currency : String? = nil,
      @security : Plaid::SecurityOverride? = nil,
      # Optional properties
      @institution_price_as_of : Time? = nil,
      @cost_basis : Float64? = nil
    )
    end

    # Show invalid properties with the reasons. Usually used together with valid?
    # @return Array for valid properties with the reasons
    def list_invalid_properties : Array(String)
      invalid_properties = Array(String).new

      invalid_properties.push("\"institution_price\" is required and cannot be null") if @institution_price.nil?

      unless (_institution_price = @institution_price).nil?
      end
      invalid_properties.push("\"quantity\" is required and cannot be null") if @quantity.nil?

      unless (_quantity = @quantity).nil?
      end
      invalid_properties.push("\"currency\" is required and cannot be null") if @currency.nil?

      unless (_currency = @currency).nil?
      end
      invalid_properties.push("\"security\" is required and cannot be null") if @security.nil?

      unless (_security = @security).nil?
        invalid_properties.concat(_security.list_invalid_properties_for("security")) if _security.is_a?(OpenApi::Validatable)
      end
      unless (_institution_price_as_of = @institution_price_as_of).nil?
      end
      unless (_cost_basis = @cost_basis).nil?
      end
      invalid_properties
    end

    # Check to see if the all the properties in the model are valid
    # @return true if the model is valid
    def valid? : Bool
      return false if @institution_price.nil?
      unless (_institution_price = @institution_price).nil?
      end

      return false if @quantity.nil?
      unless (_quantity = @quantity).nil?
      end

      return false if @currency.nil?
      unless (_currency = @currency).nil?
      end

      return false if @security.nil?
      unless (_security = @security).nil?
        return false if _security.is_a?(OpenApi::Validatable) && !_security.valid?
      end

      unless (_institution_price_as_of = @institution_price_as_of).nil?
      end

      unless (_cost_basis = @cost_basis).nil?
      end

      true
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] institution_price Object to be assigned
    def institution_price=(new_value : Float64?)
      raise ArgumentError.new("\"institution_price\" is required and cannot be null") if new_value.nil?
      unless new_value.nil?
      end

      @institution_price = new_value
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] quantity Object to be assigned
    def quantity=(new_value : Float64?)
      raise ArgumentError.new("\"quantity\" is required and cannot be null") if new_value.nil?
      unless new_value.nil?
      end

      @quantity = new_value
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] currency Object to be assigned
    def currency=(new_value : String?)
      raise ArgumentError.new("\"currency\" is required and cannot be null") if new_value.nil?
      unless new_value.nil?
      end

      @currency = new_value
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] security Object to be assigned
    def security=(new_value : Plaid::SecurityOverride?)
      raise ArgumentError.new("\"security\" is required and cannot be null") if new_value.nil?
      unless new_value.nil?
        new_value.validate if new_value.is_a?(OpenApi::Validatable)
      end

      @security = new_value
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] institution_price_as_of Object to be assigned
    def institution_price_as_of=(new_value : Time?)
      unless new_value.nil?
      end

      @institution_price_as_of = new_value
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] cost_basis Object to be assigned
    def cost_basis=(new_value : Float64?)
      unless new_value.nil?
      end

      @cost_basis = new_value
    end

    # Generates #hash and #== methods from all fields
    # #== @return [Bool]
    # #hash calculates hash code according to all attributes.
    # #hash @return [UInt64] Hash code
    def_equals_and_hash(@institution_price, @quantity, @currency, @security, @institution_price_as_of, @cost_basis)
  end
end
