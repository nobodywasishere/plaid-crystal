#  The Plaid API
#
# The Plaid REST API. Please see https://plaid.com/docs/api for more details.
#
# The version of the OpenAPI document: 2020-09-14_1.474.3
#
# Generated by: https://openapi-generator.tech
#

require "../../core"

require "./external_payment_refund_details"
require "./external_payment_schedule_get"
require "./payment_amount"
require "./payment_amount_refunded"
require "./payment_initiation_payment_status"
require "./payment_scheme"
require "./sender_bacs_nullable"

module Plaid
  # PaymentInitiationPaymentGetResponse defines the response schema for `/payment_initation/payment/get`
  class PaymentInitiationPaymentGetResponse
    include JSON::Serializable
    include JSON::Serializable::Unmapped
    include OpenApi::Validatable
    include OpenApi::Json

    # Required Properties

    # The ID of the payment. Like all Plaid identifiers, the `payment_id` is case sensitive.
    @[JSON::Field(key: "payment_id", type: String?, default: nil, required: true, nullable: false, emit_null: false)]
    getter payment_id : String? = nil

    @[JSON::Field(key: "amount", type: Plaid::PaymentAmount?, default: nil, required: true, nullable: false, emit_null: false)]
    getter amount : Plaid::PaymentAmount? = nil

    @[JSON::Field(key: "status", type: Plaid::PaymentInitiationPaymentStatus?, default: nil, required: true, nullable: false, emit_null: false)]
    getter status : Plaid::PaymentInitiationPaymentStatus? = nil

    # The ID of the recipient
    @[JSON::Field(key: "recipient_id", type: String?, default: nil, required: true, nullable: false, emit_null: false)]
    getter recipient_id : String? = nil

    # A reference for the payment.
    @[JSON::Field(key: "reference", type: String?, default: nil, required: true, nullable: false, emit_null: false)]
    getter reference : String? = nil

    # The date and time of the last time the `status` was updated, in IS0 8601 format
    @[JSON::Field(key: "last_status_update", type: Time?, default: nil, required: true, nullable: false, emit_null: false, converter: Time::RFC3339Converter)]
    getter last_status_update : Time? = nil

    @[JSON::Field(key: "bacs", type: Plaid::SenderBACSNullable?, default: nil, required: true, nullable: true, emit_null: true)]
    getter bacs : Plaid::SenderBACSNullable? = nil

    # The International Bank Account Number (IBAN) for the sender, if specified in the `/payment_initiation/payment/create` call.
    @[JSON::Field(key: "iban", type: String?, default: nil, required: true, nullable: true, emit_null: true)]
    getter iban : String? = nil

    # A unique identifier for the request, which can be used for troubleshooting. This identifier, like all Plaid identifiers, is case sensitive.
    @[JSON::Field(key: "request_id", type: String?, default: nil, required: true, nullable: false, emit_null: false)]
    getter request_id : String? = nil

    # End of Required Properties

    # Optional Properties

    # The value of the reference sent to the bank after adjustment to pass bank validation rules.
    @[JSON::Field(key: "adjusted_reference", type: String?, default: nil, required: false, nullable: true, emit_null: true, presence: true, ignore_serialize: adjusted_reference.nil? && !adjusted_reference_present?)]
    getter adjusted_reference : String? = nil

    @[JSON::Field(ignore: true)]
    property? adjusted_reference_present : Bool = false

    @[JSON::Field(key: "schedule", type: Plaid::ExternalPaymentScheduleGet?, default: nil, required: false, nullable: true, emit_null: true, presence: true, ignore_serialize: schedule.nil? && !schedule_present?)]
    getter schedule : Plaid::ExternalPaymentScheduleGet? = nil

    @[JSON::Field(ignore: true)]
    property? schedule_present : Bool = false

    @[JSON::Field(key: "refund_details", type: Plaid::ExternalPaymentRefundDetails?, default: nil, required: false, nullable: true, emit_null: true, presence: true, ignore_serialize: refund_details.nil? && !refund_details_present?)]
    getter refund_details : Plaid::ExternalPaymentRefundDetails? = nil

    @[JSON::Field(ignore: true)]
    property? refund_details_present : Bool = false

    # Refund IDs associated with the payment.
    @[JSON::Field(key: "refund_ids", type: Array(String)?, default: nil, required: false, nullable: true, emit_null: true, presence: true, ignore_serialize: refund_ids.nil? && !refund_ids_present?)]
    getter refund_ids : Array(String)? = nil

    @[JSON::Field(ignore: true)]
    property? refund_ids_present : Bool = false

    @[JSON::Field(key: "amount_refunded", type: Plaid::PaymentAmountRefunded?, default: nil, required: false, nullable: false, emit_null: false)]
    getter amount_refunded : Plaid::PaymentAmountRefunded? = nil

    # The EMI (E-Money Institution) wallet that this payment is associated with, if any. This wallet is used as an intermediary account to enable Plaid to reconcile the settlement of funds for Payment Initiation requests.
    @[JSON::Field(key: "wallet_id", type: String?, default: nil, required: false, nullable: true, emit_null: true, presence: true, ignore_serialize: wallet_id.nil? && !wallet_id_present?)]
    getter wallet_id : String? = nil

    @[JSON::Field(ignore: true)]
    property? wallet_id_present : Bool = false

    @[JSON::Field(key: "scheme", type: Plaid::PaymentScheme?, default: nil, required: false, nullable: true, emit_null: true, presence: true, ignore_serialize: scheme.nil? && !scheme_present?)]
    getter scheme : Plaid::PaymentScheme? = nil

    @[JSON::Field(ignore: true)]
    property? scheme_present : Bool = false

    @[JSON::Field(key: "adjusted_scheme", type: Plaid::PaymentScheme?, default: nil, required: false, nullable: true, emit_null: true, presence: true, ignore_serialize: adjusted_scheme.nil? && !adjusted_scheme_present?)]
    getter adjusted_scheme : Plaid::PaymentScheme? = nil

    @[JSON::Field(ignore: true)]
    property? adjusted_scheme_present : Bool = false

    # The payment consent ID that this payment was initiated with. Is present only when payment was initiated using the payment consent.
    @[JSON::Field(key: "consent_id", type: String?, default: nil, required: false, nullable: true, emit_null: true, presence: true, ignore_serialize: consent_id.nil? && !consent_id_present?)]
    getter consent_id : String? = nil

    @[JSON::Field(ignore: true)]
    property? consent_id_present : Bool = false

    # The transaction ID that this payment is associated with, if any. This is present only when a payment was initiated using virtual accounts.
    @[JSON::Field(key: "transaction_id", type: String?, default: nil, required: false, nullable: true, emit_null: true, presence: true, ignore_serialize: transaction_id.nil? && !transaction_id_present?)]
    getter transaction_id : String? = nil

    @[JSON::Field(ignore: true)]
    property? transaction_id_present : Bool = false

    # Initializes the object
    # @param [Hash] attributes Model attributes in the form of hash
    def initialize(
      *,
      # Required properties
      @payment_id : String? = nil,
      @amount : Plaid::PaymentAmount? = nil,
      @status : Plaid::PaymentInitiationPaymentStatus? = nil,
      @recipient_id : String? = nil,
      @reference : String? = nil,
      @last_status_update : Time? = nil,
      @bacs : Plaid::SenderBACSNullable? = nil,
      @iban : String? = nil,
      @request_id : String? = nil,
      # Optional properties
      @adjusted_reference : String? = nil,
      @schedule : Plaid::ExternalPaymentScheduleGet? = nil,
      @refund_details : Plaid::ExternalPaymentRefundDetails? = nil,
      @refund_ids : Array(String)? = nil,
      @amount_refunded : Plaid::PaymentAmountRefunded? = nil,
      @wallet_id : String? = nil,
      @scheme : Plaid::PaymentScheme? = nil,
      @adjusted_scheme : Plaid::PaymentScheme? = nil,
      @consent_id : String? = nil,
      @transaction_id : String? = nil
    )
    end

    # Show invalid properties with the reasons. Usually used together with valid?
    # @return Array for valid properties with the reasons
    def list_invalid_properties : Array(String)
      invalid_properties = Array(String).new

      invalid_properties.push("\"payment_id\" is required and cannot be null") if @payment_id.nil?

      unless (_payment_id = @payment_id).nil?
      end
      invalid_properties.push("\"amount\" is required and cannot be null") if @amount.nil?

      unless (_amount = @amount).nil?
        invalid_properties.concat(_amount.list_invalid_properties_for("amount")) if _amount.is_a?(OpenApi::Validatable)
      end
      invalid_properties.push("\"status\" is required and cannot be null") if @status.nil?

      unless (_status = @status).nil?
        invalid_properties.push(_status.error_message) if !_status.valid?
      end
      invalid_properties.push("\"recipient_id\" is required and cannot be null") if @recipient_id.nil?

      unless (_recipient_id = @recipient_id).nil?
      end
      invalid_properties.push("\"reference\" is required and cannot be null") if @reference.nil?

      unless (_reference = @reference).nil?
      end
      invalid_properties.push("\"last_status_update\" is required and cannot be null") if @last_status_update.nil?

      unless (_last_status_update = @last_status_update).nil?
      end
      unless (_bacs = @bacs).nil?
        invalid_properties.concat(_bacs.list_invalid_properties_for("bacs")) if _bacs.is_a?(OpenApi::Validatable)
      end
      unless (_iban = @iban).nil?
      end
      invalid_properties.push("\"request_id\" is required and cannot be null") if @request_id.nil?

      unless (_request_id = @request_id).nil?
      end
      unless (_adjusted_reference = @adjusted_reference).nil?
      end
      unless (_schedule = @schedule).nil?
        invalid_properties.concat(_schedule.list_invalid_properties_for("schedule")) if _schedule.is_a?(OpenApi::Validatable)
      end
      unless (_refund_details = @refund_details).nil?
        invalid_properties.concat(_refund_details.list_invalid_properties_for("refund_details")) if _refund_details.is_a?(OpenApi::Validatable)
      end
      unless (_refund_ids = @refund_ids).nil?
      end
      unless (_amount_refunded = @amount_refunded).nil?
        invalid_properties.concat(_amount_refunded.list_invalid_properties_for("amount_refunded")) if _amount_refunded.is_a?(OpenApi::Validatable)
      end
      unless (_wallet_id = @wallet_id).nil?
      end
      unless (_scheme = @scheme).nil?
        invalid_properties.push(_scheme.error_message) if !_scheme.valid?
      end
      unless (_adjusted_scheme = @adjusted_scheme).nil?
        invalid_properties.push(_adjusted_scheme.error_message) if !_adjusted_scheme.valid?
      end
      unless (_consent_id = @consent_id).nil?
      end
      unless (_transaction_id = @transaction_id).nil?
      end
      invalid_properties
    end

    # Check to see if the all the properties in the model are valid
    # @return true if the model is valid
    def valid? : Bool
      return false if @payment_id.nil?
      unless (_payment_id = @payment_id).nil?
      end

      return false if @amount.nil?
      unless (_amount = @amount).nil?
        return false if _amount.is_a?(OpenApi::Validatable) && !_amount.valid?
      end

      return false if @status.nil?
      unless (_status = @status).nil?
        return false if !_status.valid?
      end

      return false if @recipient_id.nil?
      unless (_recipient_id = @recipient_id).nil?
      end

      return false if @reference.nil?
      unless (_reference = @reference).nil?
      end

      return false if @last_status_update.nil?
      unless (_last_status_update = @last_status_update).nil?
      end

      unless (_bacs = @bacs).nil?
        return false if _bacs.is_a?(OpenApi::Validatable) && !_bacs.valid?
      end

      unless (_iban = @iban).nil?
      end

      return false if @request_id.nil?
      unless (_request_id = @request_id).nil?
      end

      unless (_adjusted_reference = @adjusted_reference).nil?
      end

      unless (_schedule = @schedule).nil?
        return false if _schedule.is_a?(OpenApi::Validatable) && !_schedule.valid?
      end

      unless (_refund_details = @refund_details).nil?
        return false if _refund_details.is_a?(OpenApi::Validatable) && !_refund_details.valid?
      end

      unless (_refund_ids = @refund_ids).nil?
      end

      unless (_amount_refunded = @amount_refunded).nil?
        return false if _amount_refunded.is_a?(OpenApi::Validatable) && !_amount_refunded.valid?
      end

      unless (_wallet_id = @wallet_id).nil?
      end

      unless (_scheme = @scheme).nil?
        return false if !_scheme.valid?
      end

      unless (_adjusted_scheme = @adjusted_scheme).nil?
        return false if !_adjusted_scheme.valid?
      end

      unless (_consent_id = @consent_id).nil?
      end

      unless (_transaction_id = @transaction_id).nil?
      end

      true
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] payment_id Object to be assigned
    def payment_id=(new_value : String?)
      raise ArgumentError.new("\"payment_id\" is required and cannot be null") if new_value.nil?
      unless new_value.nil?
      end

      @payment_id = new_value
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] amount Object to be assigned
    def amount=(new_value : Plaid::PaymentAmount?)
      raise ArgumentError.new("\"amount\" is required and cannot be null") if new_value.nil?
      unless new_value.nil?
        new_value.validate if new_value.is_a?(OpenApi::Validatable)
      end

      @amount = new_value
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] status Object to be assigned
    def status=(new_value : Plaid::PaymentInitiationPaymentStatus?)
      raise ArgumentError.new("\"status\" is required and cannot be null") if new_value.nil?
      unless new_value.nil?
        new_value.validate
      end

      @status = new_value
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] recipient_id Object to be assigned
    def recipient_id=(new_value : String?)
      raise ArgumentError.new("\"recipient_id\" is required and cannot be null") if new_value.nil?
      unless new_value.nil?
      end

      @recipient_id = new_value
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] reference Object to be assigned
    def reference=(new_value : String?)
      raise ArgumentError.new("\"reference\" is required and cannot be null") if new_value.nil?
      unless new_value.nil?
      end

      @reference = new_value
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] last_status_update Object to be assigned
    def last_status_update=(new_value : Time?)
      raise ArgumentError.new("\"last_status_update\" is required and cannot be null") if new_value.nil?
      unless new_value.nil?
      end

      @last_status_update = new_value
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] bacs Object to be assigned
    def bacs=(new_value : Plaid::SenderBACSNullable?)
      unless new_value.nil?
        new_value.validate if new_value.is_a?(OpenApi::Validatable)
      end

      @bacs = new_value
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] iban Object to be assigned
    def iban=(new_value : String?)
      unless new_value.nil?
      end

      @iban = new_value
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] request_id Object to be assigned
    def request_id=(new_value : String?)
      raise ArgumentError.new("\"request_id\" is required and cannot be null") if new_value.nil?
      unless new_value.nil?
      end

      @request_id = new_value
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] adjusted_reference Object to be assigned
    def adjusted_reference=(new_value : String?)
      unless new_value.nil?
      end

      @adjusted_reference = new_value
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] schedule Object to be assigned
    def schedule=(new_value : Plaid::ExternalPaymentScheduleGet?)
      unless new_value.nil?
        new_value.validate if new_value.is_a?(OpenApi::Validatable)
      end

      @schedule = new_value
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] refund_details Object to be assigned
    def refund_details=(new_value : Plaid::ExternalPaymentRefundDetails?)
      unless new_value.nil?
        new_value.validate if new_value.is_a?(OpenApi::Validatable)
      end

      @refund_details = new_value
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] refund_ids Object to be assigned
    def refund_ids=(new_value : Array(String)?)
      unless new_value.nil?
      end

      @refund_ids = new_value
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] amount_refunded Object to be assigned
    def amount_refunded=(new_value : Plaid::PaymentAmountRefunded?)
      unless new_value.nil?
        new_value.validate if new_value.is_a?(OpenApi::Validatable)
      end

      @amount_refunded = new_value
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] wallet_id Object to be assigned
    def wallet_id=(new_value : String?)
      unless new_value.nil?
      end

      @wallet_id = new_value
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] scheme Object to be assigned
    def scheme=(new_value : Plaid::PaymentScheme?)
      unless new_value.nil?
        new_value.validate
      end

      @scheme = new_value
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] adjusted_scheme Object to be assigned
    def adjusted_scheme=(new_value : Plaid::PaymentScheme?)
      unless new_value.nil?
        new_value.validate
      end

      @adjusted_scheme = new_value
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] consent_id Object to be assigned
    def consent_id=(new_value : String?)
      unless new_value.nil?
      end

      @consent_id = new_value
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] transaction_id Object to be assigned
    def transaction_id=(new_value : String?)
      unless new_value.nil?
      end

      @transaction_id = new_value
    end

    # Generates #hash and #== methods from all fields
    # #== @return [Bool]
    # #hash calculates hash code according to all attributes.
    # #hash @return [UInt64] Hash code
    def_equals_and_hash(@payment_id, @amount, @status, @recipient_id, @reference, @last_status_update, @bacs, @iban, @request_id, @adjusted_reference, @adjusted_reference_present, @schedule, @schedule_present, @refund_details, @refund_details_present, @refund_ids, @refund_ids_present, @amount_refunded, @wallet_id, @wallet_id_present, @scheme, @scheme_present, @adjusted_scheme, @adjusted_scheme_present, @consent_id, @consent_id_present, @transaction_id, @transaction_id_present)
  end
end
