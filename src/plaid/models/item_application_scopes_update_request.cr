#  The Plaid API
#
# The Plaid REST API. Please see https://plaid.com/docs/api for more details.
#
# The version of the OpenAPI document: 2020-09-14_1.474.3
#
# Generated by: https://openapi-generator.tech
#

require "../../core"

require "./scopes"
require "./scopes_context"

module Plaid
  # ItemApplicationScopesUpdateRequest defines the request schema for `/item/application/scopes/update`
  class ItemApplicationScopesUpdateRequest
    include JSON::Serializable
    include JSON::Serializable::Unmapped
    include OpenApi::Validatable
    include OpenApi::Json

    # Required Properties

    # The access token associated with the Item data is being requested for.
    @[JSON::Field(key: "access_token", type: String?, default: nil, required: true, nullable: false, emit_null: false)]
    getter access_token : String? = nil

    # This field will map to the application ID that is returned from /item/application/list, or provided to the institution in an oauth redirect.
    @[JSON::Field(key: "application_id", type: String?, default: nil, required: true, nullable: false, emit_null: false)]
    getter application_id : String? = nil

    @[JSON::Field(key: "scopes", type: Plaid::Scopes?, default: nil, required: true, nullable: false, emit_null: false)]
    getter scopes : Plaid::Scopes? = nil

    @[JSON::Field(key: "context", type: Plaid::ScopesContext?, default: nil, required: true, nullable: false, emit_null: false)]
    getter context : Plaid::ScopesContext? = nil

    # End of Required Properties

    # Optional Properties

    # Your Plaid API `client_id`. The `client_id` is required and may be provided either in the `PLAID-CLIENT-ID` header or as part of a request body.
    @[JSON::Field(key: "client_id", type: String?, default: nil, required: false, nullable: false, emit_null: false)]
    getter client_id : String? = nil

    # Your Plaid API `secret`. The `secret` is required and may be provided either in the `PLAID-SECRET` header or as part of a request body.
    @[JSON::Field(key: "secret", type: String?, default: nil, required: false, nullable: false, emit_null: false)]
    getter secret : String? = nil

    # When scopes are updated during enrollment, this field must be populated with the state sent to the partner in the OAuth Login URI. This field is required when the context is `ENROLLMENT`.
    @[JSON::Field(key: "state", type: String?, default: nil, required: false, nullable: false, emit_null: false)]
    getter state : String? = nil

    # Initializes the object
    # @param [Hash] attributes Model attributes in the form of hash
    def initialize(
      *,
      # Required properties
      @access_token : String? = nil,
      @application_id : String? = nil,
      @scopes : Plaid::Scopes? = nil,
      @context : Plaid::ScopesContext? = nil,
      # Optional properties
      @client_id : String? = nil,
      @secret : String? = nil,
      @state : String? = nil
    )
    end

    # Show invalid properties with the reasons. Usually used together with valid?
    # @return Array for valid properties with the reasons
    def list_invalid_properties : Array(String)
      invalid_properties = Array(String).new

      invalid_properties.push("\"access_token\" is required and cannot be null") if @access_token.nil?

      unless (_access_token = @access_token).nil?
      end
      invalid_properties.push("\"application_id\" is required and cannot be null") if @application_id.nil?

      unless (_application_id = @application_id).nil?
      end
      invalid_properties.push("\"scopes\" is required and cannot be null") if @scopes.nil?

      unless (_scopes = @scopes).nil?
        invalid_properties.concat(_scopes.list_invalid_properties_for("scopes")) if _scopes.is_a?(OpenApi::Validatable)
      end
      invalid_properties.push("\"context\" is required and cannot be null") if @context.nil?

      unless (_context = @context).nil?
        invalid_properties.push(_context.error_message) if !_context.valid?
      end
      unless (_client_id = @client_id).nil?
      end
      unless (_secret = @secret).nil?
      end
      unless (_state = @state).nil?
      end
      invalid_properties
    end

    # Check to see if the all the properties in the model are valid
    # @return true if the model is valid
    def valid? : Bool
      return false if @access_token.nil?
      unless (_access_token = @access_token).nil?
      end

      return false if @application_id.nil?
      unless (_application_id = @application_id).nil?
      end

      return false if @scopes.nil?
      unless (_scopes = @scopes).nil?
        return false if _scopes.is_a?(OpenApi::Validatable) && !_scopes.valid?
      end

      return false if @context.nil?
      unless (_context = @context).nil?
        return false if !_context.valid?
      end

      unless (_client_id = @client_id).nil?
      end

      unless (_secret = @secret).nil?
      end

      unless (_state = @state).nil?
      end

      true
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] access_token Object to be assigned
    def access_token=(new_value : String?)
      raise ArgumentError.new("\"access_token\" is required and cannot be null") if new_value.nil?
      unless new_value.nil?
      end

      @access_token = new_value
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] application_id Object to be assigned
    def application_id=(new_value : String?)
      raise ArgumentError.new("\"application_id\" is required and cannot be null") if new_value.nil?
      unless new_value.nil?
      end

      @application_id = new_value
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] scopes Object to be assigned
    def scopes=(new_value : Plaid::Scopes?)
      raise ArgumentError.new("\"scopes\" is required and cannot be null") if new_value.nil?
      unless new_value.nil?
        new_value.validate if new_value.is_a?(OpenApi::Validatable)
      end

      @scopes = new_value
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] context Object to be assigned
    def context=(new_value : Plaid::ScopesContext?)
      raise ArgumentError.new("\"context\" is required and cannot be null") if new_value.nil?
      unless new_value.nil?
        new_value.validate
      end

      @context = new_value
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] client_id Object to be assigned
    def client_id=(new_value : String?)
      unless new_value.nil?
      end

      @client_id = new_value
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] secret Object to be assigned
    def secret=(new_value : String?)
      unless new_value.nil?
      end

      @secret = new_value
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] state Object to be assigned
    def state=(new_value : String?)
      unless new_value.nil?
      end

      @state = new_value
    end

    # Generates #hash and #== methods from all fields
    # #== @return [Bool]
    # #hash calculates hash code according to all attributes.
    # #hash @return [UInt64] Hash code
    def_equals_and_hash(@access_token, @application_id, @scopes, @context, @client_id, @secret, @state)
  end
end
