#  The Plaid API
#
# The Plaid REST API. Please see https://plaid.com/docs/api for more details.
#
# The version of the OpenAPI document: 2020-09-14_1.474.3
#
# Generated by: https://openapi-generator.tech
#

require "../../core"

module Plaid
  # Life span for the payment consent. After the `to` date the payment consent expires and can no longer be used for payment initiation.
  class PaymentConsentValidDateTime
    include JSON::Serializable
    include JSON::Serializable::Unmapped
    include OpenApi::Validatable
    include OpenApi::Json

    # Optional Properties

    # The date and time from which the consent should be active, in [ISO 8601](https://wikipedia.org/wiki/ISO_8601) format.
    @[JSON::Field(key: "from", type: Time?, default: nil, required: false, nullable: true, emit_null: true, presence: true, ignore_serialize: from.nil? && !from_present?, converter: Time::RFC3339Converter)]
    getter from : Time? = nil

    @[JSON::Field(ignore: true)]
    property? from_present : Bool = false

    # The date and time at which the consent expires, in [ISO 8601](https://wikipedia.org/wiki/ISO_8601) format.
    @[JSON::Field(key: "to", type: Time?, default: nil, required: false, nullable: true, emit_null: true, presence: true, ignore_serialize: to.nil? && !to_present?, converter: Time::RFC3339Converter)]
    getter to : Time? = nil

    @[JSON::Field(ignore: true)]
    property? to_present : Bool = false

    # Initializes the object
    # @param [Hash] attributes Model attributes in the form of hash
    def initialize(
      *,
      # Optional properties
      @from : Time? = nil,
      @to : Time? = nil
    )
    end

    # Show invalid properties with the reasons. Usually used together with valid?
    # @return Array for valid properties with the reasons
    def list_invalid_properties : Array(String)
      invalid_properties = Array(String).new

      unless (_from = @from).nil?
      end
      unless (_to = @to).nil?
      end
      invalid_properties
    end

    # Check to see if the all the properties in the model are valid
    # @return true if the model is valid
    def valid? : Bool
      unless (_from = @from).nil?
      end

      unless (_to = @to).nil?
      end

      true
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] from Object to be assigned
    def from=(new_value : Time?)
      unless new_value.nil?
      end

      @from = new_value
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] to Object to be assigned
    def to=(new_value : Time?)
      unless new_value.nil?
      end

      @to = new_value
    end

    # Generates #hash and #== methods from all fields
    # #== @return [Bool]
    # #hash calculates hash code according to all attributes.
    # #hash @return [UInt64] Hash code
    def_equals_and_hash(@from, @from_present, @to, @to_present)
  end
end
