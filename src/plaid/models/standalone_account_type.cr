#  The Plaid API
#
# The Plaid REST API. Please see https://plaid.com/docs/api for more details.
#
# The version of the OpenAPI document: 2020-09-14_1.474.3
#
# Generated by: https://openapi-generator.tech
#

require "../../core"

module Plaid
  # The schema below describes the various `types` and corresponding `subtypes` that Plaid recognizes and reports for financial institution accounts.
  class StandaloneAccountType
    include JSON::Serializable
    include JSON::Serializable::Unmapped
    include OpenApi::Validatable
    include OpenApi::Json

    # Required Properties

    # An account type holding cash, in which funds are deposited. Supported products for `depository` accounts are: Auth (`checking` and `savings` types only), Balance, Transactions, Identity, Payment Initiation, Assets, and Investments (`cash management` type only).
    @[JSON::Field(key: "depository", type: String?, default: nil, required: true, nullable: false, emit_null: false)]
    getter depository : String? = nil

    # A credit card type account. Supported products for `credit` accounts are: Balance, Transactions, Identity, and Liabilities.
    @[JSON::Field(key: "credit", type: String?, default: nil, required: true, nullable: false, emit_null: false)]
    getter credit : String? = nil

    # A loan type account. Supported products for `loan` accounts are: Balance, Liabilities, and Transactions.
    @[JSON::Field(key: "loan", type: String?, default: nil, required: true, nullable: false, emit_null: false)]
    getter loan : String? = nil

    # An investment account. Supported products for `investment` accounts are: Balance and Investments. In API versions 2018-05-22 and earlier, this type is called `brokerage`.
    @[JSON::Field(key: "investment", type: String?, default: nil, required: true, nullable: false, emit_null: false)]
    getter investment : String? = nil

    # Other or unknown account type. Supported products for `other` accounts are: Balance, Transactions, Identity, and Assets.
    @[JSON::Field(key: "other", type: String?, default: nil, required: true, nullable: false, emit_null: false)]
    getter other : String? = nil

    # End of Required Properties

    # Initializes the object
    # @param [Hash] attributes Model attributes in the form of hash
    def initialize(
      *,
      # Required properties
      @depository : String? = nil,
      @credit : String? = nil,
      @loan : String? = nil,
      @investment : String? = nil,
      @other : String? = nil
    )
    end

    # Show invalid properties with the reasons. Usually used together with valid?
    # @return Array for valid properties with the reasons
    def list_invalid_properties : Array(String)
      invalid_properties = Array(String).new

      invalid_properties.push("\"depository\" is required and cannot be null") if @depository.nil?

      unless (_depository = @depository).nil?
      end
      invalid_properties.push("\"credit\" is required and cannot be null") if @credit.nil?

      unless (_credit = @credit).nil?
      end
      invalid_properties.push("\"loan\" is required and cannot be null") if @loan.nil?

      unless (_loan = @loan).nil?
      end
      invalid_properties.push("\"investment\" is required and cannot be null") if @investment.nil?

      unless (_investment = @investment).nil?
      end
      invalid_properties.push("\"other\" is required and cannot be null") if @other.nil?

      unless (_other = @other).nil?
      end
      invalid_properties
    end

    # Check to see if the all the properties in the model are valid
    # @return true if the model is valid
    def valid? : Bool
      return false if @depository.nil?
      unless (_depository = @depository).nil?
      end

      return false if @credit.nil?
      unless (_credit = @credit).nil?
      end

      return false if @loan.nil?
      unless (_loan = @loan).nil?
      end

      return false if @investment.nil?
      unless (_investment = @investment).nil?
      end

      return false if @other.nil?
      unless (_other = @other).nil?
      end

      true
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] depository Object to be assigned
    def depository=(new_value : String?)
      raise ArgumentError.new("\"depository\" is required and cannot be null") if new_value.nil?
      unless new_value.nil?
      end

      @depository = new_value
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] credit Object to be assigned
    def credit=(new_value : String?)
      raise ArgumentError.new("\"credit\" is required and cannot be null") if new_value.nil?
      unless new_value.nil?
      end

      @credit = new_value
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] loan Object to be assigned
    def loan=(new_value : String?)
      raise ArgumentError.new("\"loan\" is required and cannot be null") if new_value.nil?
      unless new_value.nil?
      end

      @loan = new_value
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] investment Object to be assigned
    def investment=(new_value : String?)
      raise ArgumentError.new("\"investment\" is required and cannot be null") if new_value.nil?
      unless new_value.nil?
      end

      @investment = new_value
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] other Object to be assigned
    def other=(new_value : String?)
      raise ArgumentError.new("\"other\" is required and cannot be null") if new_value.nil?
      unless new_value.nil?
      end

      @other = new_value
    end

    # Generates #hash and #== methods from all fields
    # #== @return [Bool]
    # #hash calculates hash code according to all attributes.
    # #hash @return [UInt64] Hash code
    def_equals_and_hash(@depository, @credit, @loan, @investment, @other)
  end
end
