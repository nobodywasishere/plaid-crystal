#  The Plaid API
#
# The Plaid REST API. Please see https://plaid.com/docs/api for more details.
#
# The version of the OpenAPI document: 2020-09-14_1.474.3
#
# Generated by: https://openapi-generator.tech
#

require "../../core"

module Plaid
  # A detailed breakdown of the institution's performance for a request type. The values for `success`, `error_plaid`, and `error_institution` sum to 1. The time range used for calculating the breakdown may range from the most recent few minutes to the past six hours. In general, smaller institutions will show status that was calculated over a longer period of time. For Investment updates, which are refreshed less frequently, the period assessed may be 24 hours or more. For more details, see [Institution status details](https://plaid.com/docs/account/activity/#institution-status-details).
  class ProductStatusBreakdown
    include JSON::Serializable
    include JSON::Serializable::Unmapped
    include OpenApi::Validatable
    include OpenApi::Json

    # Required Properties

    # The percentage of login attempts that are successful, expressed as a decimal.
    @[JSON::Field(key: "success", type: Float64?, default: nil, required: true, nullable: false, emit_null: false)]
    getter success : Float64? = nil

    # The percentage of logins that are failing due to an internal Plaid issue, expressed as a decimal.
    @[JSON::Field(key: "error_plaid", type: Float64?, default: nil, required: true, nullable: false, emit_null: false)]
    getter error_plaid : Float64? = nil

    # The percentage of logins that are failing due to an issue in the institution's system, expressed as a decimal.
    @[JSON::Field(key: "error_institution", type: Float64?, default: nil, required: true, nullable: false, emit_null: false)]
    getter error_institution : Float64? = nil

    # End of Required Properties

    # Optional Properties

    # The `refresh_interval` may be `DELAYED` or `STOPPED` even when the success rate is high. This value is only returned for Transactions status breakdowns.
    @[JSON::Field(key: "refresh_interval", type: String?, default: nil, required: false, nullable: false, emit_null: false)]
    getter refresh_interval : String? = nil
    ERROR_MESSAGE_FOR_REFRESH_INTERVAL = "invalid value for \"refresh_interval\", must be one of [NORMAL, DELAYED, STOPPED]."
    VALID_VALUES_FOR_REFRESH_INTERVAL  = String.static_array("NORMAL", "DELAYED", "STOPPED")

    # Initializes the object
    # @param [Hash] attributes Model attributes in the form of hash
    def initialize(
      *,
      # Required properties
      @success : Float64? = nil,
      @error_plaid : Float64? = nil,
      @error_institution : Float64? = nil,
      # Optional properties
      @refresh_interval : String? = nil
    )
    end

    # Show invalid properties with the reasons. Usually used together with valid?
    # @return Array for valid properties with the reasons
    def list_invalid_properties : Array(String)
      invalid_properties = Array(String).new

      invalid_properties.push("\"success\" is required and cannot be null") if @success.nil?

      unless (_success = @success).nil?
      end
      invalid_properties.push("\"error_plaid\" is required and cannot be null") if @error_plaid.nil?

      unless (_error_plaid = @error_plaid).nil?
      end
      invalid_properties.push("\"error_institution\" is required and cannot be null") if @error_institution.nil?

      unless (_error_institution = @error_institution).nil?
      end
      unless (_refresh_interval = @refresh_interval).nil?
        invalid_properties.push(ERROR_MESSAGE_FOR_REFRESH_INTERVAL) unless OpenApi::EnumValidator.valid?(_refresh_interval, VALID_VALUES_FOR_REFRESH_INTERVAL)
      end
      invalid_properties
    end

    # Check to see if the all the properties in the model are valid
    # @return true if the model is valid
    def valid? : Bool
      return false if @success.nil?
      unless (_success = @success).nil?
      end

      return false if @error_plaid.nil?
      unless (_error_plaid = @error_plaid).nil?
      end

      return false if @error_institution.nil?
      unless (_error_institution = @error_institution).nil?
      end

      unless (_refresh_interval = @refresh_interval).nil?
        return false unless OpenApi::EnumValidator.valid?(_refresh_interval, VALID_VALUES_FOR_REFRESH_INTERVAL)
      end

      true
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] success Object to be assigned
    def success=(new_value : Float64?)
      raise ArgumentError.new("\"success\" is required and cannot be null") if new_value.nil?
      unless new_value.nil?
      end

      @success = new_value
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] error_plaid Object to be assigned
    def error_plaid=(new_value : Float64?)
      raise ArgumentError.new("\"error_plaid\" is required and cannot be null") if new_value.nil?
      unless new_value.nil?
      end

      @error_plaid = new_value
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] error_institution Object to be assigned
    def error_institution=(new_value : Float64?)
      raise ArgumentError.new("\"error_institution\" is required and cannot be null") if new_value.nil?
      unless new_value.nil?
      end

      @error_institution = new_value
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] refresh_interval Object to be assigned
    def refresh_interval=(new_value : String?)
      unless new_value.nil?
        OpenApi::EnumValidator.validate("refresh_interval", new_value, VALID_VALUES_FOR_REFRESH_INTERVAL)
      end

      @refresh_interval = new_value
    end

    # Generates #hash and #== methods from all fields
    # #== @return [Bool]
    # #hash calculates hash code according to all attributes.
    # #hash @return [UInt64] Hash code
    def_equals_and_hash(@success, @error_plaid, @error_institution, @refresh_interval)
  end
end
