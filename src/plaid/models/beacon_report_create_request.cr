#  The Plaid API
#
# The Plaid REST API. Please see https://plaid.com/docs/api for more details.
#
# The version of the OpenAPI document: 2020-09-14_1.474.3
#
# Generated by: https://openapi-generator.tech
#

require "../../core"

require "./beacon_report_type"
require "./fraud_amount"

module Plaid
  # Request input for creating a Beacon Report
  class BeaconReportCreateRequest
    include JSON::Serializable
    include JSON::Serializable::Unmapped
    include OpenApi::Validatable
    include OpenApi::Json

    # Required Properties

    # ID of the associated Beacon User.
    @[JSON::Field(key: "beacon_user_id", type: String?, default: nil, required: true, nullable: false, emit_null: false)]
    getter beacon_user_id : String? = nil

    @[JSON::Field(key: "type", type: Plaid::BeaconReportType?, default: nil, required: true, nullable: false, emit_null: false)]
    getter _type : Plaid::BeaconReportType? = nil

    # A date in the format YYYY-MM-DD (RFC 3339 Section 5.6).
    @[JSON::Field(key: "fraud_date", type: Time?, default: nil, required: true, nullable: false, emit_null: false, converter: Time::ISO8601DateConverter)]
    getter fraud_date : Time? = nil

    # End of Required Properties

    # Optional Properties

    @[JSON::Field(key: "fraud_amount", type: FraudAmount?, default: nil, required: false, nullable: true, emit_null: true, presence: true, ignore_serialize: fraud_amount.nil? && !fraud_amount_present?)]
    getter fraud_amount : FraudAmount? = nil

    @[JSON::Field(ignore: true)]
    property? fraud_amount_present : Bool = false

    # Your Plaid API `client_id`. The `client_id` is required and may be provided either in the `PLAID-CLIENT-ID` header or as part of a request body.
    @[JSON::Field(key: "client_id", type: String?, default: nil, required: false, nullable: false, emit_null: false)]
    getter client_id : String? = nil

    # Your Plaid API `secret`. The `secret` is required and may be provided either in the `PLAID-SECRET` header or as part of a request body.
    @[JSON::Field(key: "secret", type: String?, default: nil, required: false, nullable: false, emit_null: false)]
    getter secret : String? = nil

    # Initializes the object
    # @param [Hash] attributes Model attributes in the form of hash
    def initialize(
      *,
      # Required properties
      @beacon_user_id : String? = nil,
      @_type : Plaid::BeaconReportType? = nil,
      @fraud_date : Time? = nil,
      # Optional properties
      @fraud_amount : FraudAmount? = nil,
      @client_id : String? = nil,
      @secret : String? = nil
    )
    end

    # Show invalid properties with the reasons. Usually used together with valid?
    # @return Array for valid properties with the reasons
    def list_invalid_properties : Array(String)
      invalid_properties = Array(String).new

      invalid_properties.push("\"beacon_user_id\" is required and cannot be null") if @beacon_user_id.nil?

      unless (_beacon_user_id = @beacon_user_id).nil?
      end
      invalid_properties.push("\"_type\" is required and cannot be null") if @_type.nil?

      unless (__type = @_type).nil?
        invalid_properties.push(__type.error_message) if !__type.valid?
      end
      invalid_properties.push("\"fraud_date\" is required and cannot be null") if @fraud_date.nil?

      unless (_fraud_date = @fraud_date).nil?
      end
      unless (_fraud_amount = @fraud_amount).nil?
      end
      unless (_client_id = @client_id).nil?
      end
      unless (_secret = @secret).nil?
      end
      invalid_properties
    end

    # Check to see if the all the properties in the model are valid
    # @return true if the model is valid
    def valid? : Bool
      return false if @beacon_user_id.nil?
      unless (_beacon_user_id = @beacon_user_id).nil?
      end

      return false if @_type.nil?
      unless (__type = @_type).nil?
        return false if !__type.valid?
      end

      return false if @fraud_date.nil?
      unless (_fraud_date = @fraud_date).nil?
      end

      unless (_fraud_amount = @fraud_amount).nil?
      end

      unless (_client_id = @client_id).nil?
      end

      unless (_secret = @secret).nil?
      end

      true
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] beacon_user_id Object to be assigned
    def beacon_user_id=(new_value : String?)
      raise ArgumentError.new("\"beacon_user_id\" is required and cannot be null") if new_value.nil?
      unless new_value.nil?
      end

      @beacon_user_id = new_value
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] _type Object to be assigned
    def _type=(new_value : Plaid::BeaconReportType?)
      raise ArgumentError.new("\"_type\" is required and cannot be null") if new_value.nil?
      unless new_value.nil?
        new_value.validate
      end

      @_type = new_value
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] fraud_date Object to be assigned
    def fraud_date=(new_value : Time?)
      raise ArgumentError.new("\"fraud_date\" is required and cannot be null") if new_value.nil?
      unless new_value.nil?
      end

      @fraud_date = new_value
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] fraud_amount Object to be assigned
    def fraud_amount=(new_value : FraudAmount?)
      unless new_value.nil?
      end

      @fraud_amount = new_value
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] client_id Object to be assigned
    def client_id=(new_value : String?)
      unless new_value.nil?
      end

      @client_id = new_value
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] secret Object to be assigned
    def secret=(new_value : String?)
      unless new_value.nil?
      end

      @secret = new_value
    end

    # Generates #hash and #== methods from all fields
    # #== @return [Bool]
    # #hash calculates hash code according to all attributes.
    # #hash @return [UInt64] Hash code
    def_equals_and_hash(@beacon_user_id, @_type, @fraud_date, @fraud_amount, @fraud_amount_present, @client_id, @secret)
  end
end
