#  The Plaid API
#
# The Plaid REST API. Please see https://plaid.com/docs/api for more details.
#
# The version of the OpenAPI document: 2020-09-14_1.474.3
#
# Generated by: https://openapi-generator.tech
#

require "../../core"

require "./credit_amount_with_currency"
require "./credit_bank_income_historical_summary"

module Plaid
  # Summary for bank income across all income sources and items (max history of 730 days).
  class CreditBankIncomeSummary
    include JSON::Serializable
    include JSON::Serializable::Unmapped
    include OpenApi::Validatable
    include OpenApi::Json

    # Optional Properties

    # Total amount of earnings across all the income sources in the end user's Items for the days requested by the client. This may return an incorrect value if the summary includes income sources in multiple currencies. Please use [`total_amounts`](https://plaid.com/docs/api/products/income/#credit-bank_income-get-response-bank-income-bank-income-summary-total-amounts) instead.
    @[JSON::Field(key: "total_amount", type: Float64?, default: nil, required: false, nullable: false, emit_null: false)]
    getter total_amount : Float64? = nil

    # The ISO 4217 currency code of the amount or balance. Please use [`total_amounts`](https://plaid.com/docs/api/products/income/#credit-bank_income-get-response-bank-income-bank-income-summary-total-amounts) instead.
    @[JSON::Field(key: "iso_currency_code", type: String?, default: nil, required: false, nullable: true, emit_null: true, presence: true, ignore_serialize: iso_currency_code.nil? && !iso_currency_code_present?)]
    getter iso_currency_code : String? = nil

    @[JSON::Field(ignore: true)]
    property? iso_currency_code_present : Bool = false

    # The unofficial currency code associated with the amount or balance. Always `null` if `iso_currency_code` is non-null. Unofficial currency codes are used for currencies that do not have official ISO currency codes, such as cryptocurrencies and the currencies of certain countries. Please use [`total_amounts`](https://plaid.com/docs/api/products/income/#credit-bank_income-get-response-bank-income-bank-income-summary-total-amounts) instead.
    @[JSON::Field(key: "unofficial_currency_code", type: String?, default: nil, required: false, nullable: true, emit_null: true, presence: true, ignore_serialize: unofficial_currency_code.nil? && !unofficial_currency_code_present?)]
    getter unofficial_currency_code : String? = nil

    @[JSON::Field(ignore: true)]
    property? unofficial_currency_code_present : Bool = false

    # Total amount of earnings across all the income sources in the end user's Items for the days requested by the client. This can contain multiple amounts, with each amount denominated in one unique currency.
    @[JSON::Field(key: "total_amounts", type: Array(CreditAmountWithCurrency)?, default: nil, required: false, nullable: false, emit_null: false)]
    getter total_amounts : Array(CreditAmountWithCurrency)? = nil

    # The earliest date within the days requested in which all income sources identified by Plaid appear in a user's account. The date will be returned in an ISO 8601 format (YYYY-MM-DD).
    @[JSON::Field(key: "start_date", type: Time?, default: nil, required: false, nullable: false, emit_null: false, converter: Time::ISO8601DateConverter)]
    getter start_date : Time? = nil

    # The latest date in which all income sources identified by Plaid appear in the user's account. The date will be returned in an ISO 8601 format (YYYY-MM-DD).
    @[JSON::Field(key: "end_date", type: Time?, default: nil, required: false, nullable: false, emit_null: false, converter: Time::ISO8601DateConverter)]
    getter end_date : Time? = nil

    # Number of income sources per end user.
    @[JSON::Field(key: "income_sources_count", type: Int32?, default: nil, required: false, nullable: false, emit_null: false)]
    getter income_sources_count : Int32? = nil

    # Number of income categories per end user.
    @[JSON::Field(key: "income_categories_count", type: Int32?, default: nil, required: false, nullable: false, emit_null: false)]
    getter income_categories_count : Int32? = nil

    # Number of income transactions per end user.
    @[JSON::Field(key: "income_transactions_count", type: Int32?, default: nil, required: false, nullable: false, emit_null: false)]
    getter income_transactions_count : Int32? = nil

    @[JSON::Field(key: "historical_summary", type: Array(CreditBankIncomeHistoricalSummary)?, default: nil, required: false, nullable: false, emit_null: false)]
    getter historical_summary : Array(CreditBankIncomeHistoricalSummary)? = nil

    # Initializes the object
    # @param [Hash] attributes Model attributes in the form of hash
    def initialize(
      *,
      # Optional properties
      @total_amount : Float64? = nil,
      @iso_currency_code : String? = nil,
      @unofficial_currency_code : String? = nil,
      @total_amounts : Array(CreditAmountWithCurrency)? = nil,
      @start_date : Time? = nil,
      @end_date : Time? = nil,
      @income_sources_count : Int32? = nil,
      @income_categories_count : Int32? = nil,
      @income_transactions_count : Int32? = nil,
      @historical_summary : Array(CreditBankIncomeHistoricalSummary)? = nil
    )
    end

    # Show invalid properties with the reasons. Usually used together with valid?
    # @return Array for valid properties with the reasons
    def list_invalid_properties : Array(String)
      invalid_properties = Array(String).new

      unless (_total_amount = @total_amount).nil?
      end
      unless (_iso_currency_code = @iso_currency_code).nil?
      end
      unless (_unofficial_currency_code = @unofficial_currency_code).nil?
      end
      unless (_total_amounts = @total_amounts).nil?
      end
      unless (_start_date = @start_date).nil?
      end
      unless (_end_date = @end_date).nil?
      end
      unless (_income_sources_count = @income_sources_count).nil?
      end
      unless (_income_categories_count = @income_categories_count).nil?
      end
      unless (_income_transactions_count = @income_transactions_count).nil?
      end
      unless (_historical_summary = @historical_summary).nil?
      end
      invalid_properties
    end

    # Check to see if the all the properties in the model are valid
    # @return true if the model is valid
    def valid? : Bool
      unless (_total_amount = @total_amount).nil?
      end

      unless (_iso_currency_code = @iso_currency_code).nil?
      end

      unless (_unofficial_currency_code = @unofficial_currency_code).nil?
      end

      unless (_total_amounts = @total_amounts).nil?
      end

      unless (_start_date = @start_date).nil?
      end

      unless (_end_date = @end_date).nil?
      end

      unless (_income_sources_count = @income_sources_count).nil?
      end

      unless (_income_categories_count = @income_categories_count).nil?
      end

      unless (_income_transactions_count = @income_transactions_count).nil?
      end

      unless (_historical_summary = @historical_summary).nil?
      end

      true
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] total_amount Object to be assigned
    def total_amount=(new_value : Float64?)
      unless new_value.nil?
      end

      @total_amount = new_value
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] iso_currency_code Object to be assigned
    def iso_currency_code=(new_value : String?)
      unless new_value.nil?
      end

      @iso_currency_code = new_value
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] unofficial_currency_code Object to be assigned
    def unofficial_currency_code=(new_value : String?)
      unless new_value.nil?
      end

      @unofficial_currency_code = new_value
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] total_amounts Object to be assigned
    def total_amounts=(new_value : Array(CreditAmountWithCurrency)?)
      unless new_value.nil?
      end

      @total_amounts = new_value
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] start_date Object to be assigned
    def start_date=(new_value : Time?)
      unless new_value.nil?
      end

      @start_date = new_value
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] end_date Object to be assigned
    def end_date=(new_value : Time?)
      unless new_value.nil?
      end

      @end_date = new_value
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] income_sources_count Object to be assigned
    def income_sources_count=(new_value : Int32?)
      unless new_value.nil?
      end

      @income_sources_count = new_value
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] income_categories_count Object to be assigned
    def income_categories_count=(new_value : Int32?)
      unless new_value.nil?
      end

      @income_categories_count = new_value
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] income_transactions_count Object to be assigned
    def income_transactions_count=(new_value : Int32?)
      unless new_value.nil?
      end

      @income_transactions_count = new_value
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] historical_summary Object to be assigned
    def historical_summary=(new_value : Array(CreditBankIncomeHistoricalSummary)?)
      unless new_value.nil?
      end

      @historical_summary = new_value
    end

    # Generates #hash and #== methods from all fields
    # #== @return [Bool]
    # #hash calculates hash code according to all attributes.
    # #hash @return [UInt64] Hash code
    def_equals_and_hash(@total_amount, @iso_currency_code, @iso_currency_code_present, @unofficial_currency_code, @unofficial_currency_code_present, @total_amounts, @start_date, @end_date, @income_sources_count, @income_categories_count, @income_transactions_count, @historical_summary)
  end
end
