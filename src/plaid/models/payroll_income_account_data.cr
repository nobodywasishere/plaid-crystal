#  The Plaid API
#
# The Plaid REST API. Please see https://plaid.com/docs/api for more details.
#
# The version of the OpenAPI document: 2020-09-14_1.474.3
#
# Generated by: https://openapi-generator.tech
#

require "../../core"

require "./payroll_income_rate_of_pay"

module Plaid
  # An object containing account level data.
  class PayrollIncomeAccountData
    include JSON::Serializable
    include JSON::Serializable::Unmapped
    include OpenApi::Validatable
    include OpenApi::Json

    # Required Properties

    # ID of the payroll provider account.
    @[JSON::Field(key: "account_id", type: String?, default: nil, required: true, nullable: true, emit_null: true)]
    getter account_id : String? = nil

    @[JSON::Field(key: "rate_of_pay", type: PayrollIncomeRateOfPay?, default: nil, required: true, nullable: false, emit_null: false)]
    getter rate_of_pay : PayrollIncomeRateOfPay? = nil

    # The frequency at which an individual is paid.
    @[JSON::Field(key: "pay_frequency", type: String?, default: nil, required: true, nullable: true, emit_null: true)]
    getter pay_frequency : String? = nil

    # End of Required Properties

    # Initializes the object
    # @param [Hash] attributes Model attributes in the form of hash
    def initialize(
      *,
      # Required properties
      @account_id : String? = nil,
      @rate_of_pay : PayrollIncomeRateOfPay? = nil,
      @pay_frequency : String? = nil
    )
    end

    # Show invalid properties with the reasons. Usually used together with valid?
    # @return Array for valid properties with the reasons
    def list_invalid_properties : Array(String)
      invalid_properties = Array(String).new

      unless (_account_id = @account_id).nil?
      end
      invalid_properties.push("\"rate_of_pay\" is required and cannot be null") if @rate_of_pay.nil?

      unless (_rate_of_pay = @rate_of_pay).nil?
      end
      unless (_pay_frequency = @pay_frequency).nil?
      end
      invalid_properties
    end

    # Check to see if the all the properties in the model are valid
    # @return true if the model is valid
    def valid? : Bool
      unless (_account_id = @account_id).nil?
      end

      return false if @rate_of_pay.nil?
      unless (_rate_of_pay = @rate_of_pay).nil?
      end

      unless (_pay_frequency = @pay_frequency).nil?
      end

      true
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] account_id Object to be assigned
    def account_id=(new_value : String?)
      unless new_value.nil?
      end

      @account_id = new_value
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] rate_of_pay Object to be assigned
    def rate_of_pay=(new_value : PayrollIncomeRateOfPay?)
      raise ArgumentError.new("\"rate_of_pay\" is required and cannot be null") if new_value.nil?
      unless new_value.nil?
      end

      @rate_of_pay = new_value
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] pay_frequency Object to be assigned
    def pay_frequency=(new_value : String?)
      unless new_value.nil?
      end

      @pay_frequency = new_value
    end

    # Generates #hash and #== methods from all fields
    # #== @return [Bool]
    # #hash calculates hash code according to all attributes.
    # #hash @return [UInt64] Hash code
    def_equals_and_hash(@account_id, @rate_of_pay, @pay_frequency)
  end
end
