#  The Plaid API
#
# The Plaid REST API. Please see https://plaid.com/docs/api for more details.
#
# The version of the OpenAPI document: 2020-09-14_1.474.3
#
# Generated by: https://openapi-generator.tech
#

require "../../core"

require "./credit_bank_income_account_type"
require "./depository_account_subtype"
require "./owner"

module Plaid
  # The Item's bank accounts that have the selected data.
  class CraBankIncomeAccount
    include JSON::Serializable
    include JSON::Serializable::Unmapped
    include OpenApi::Validatable
    include OpenApi::Json

    # Required Properties

    # The last 2-4 alphanumeric characters of an account's official account number. Note that the mask may be non-unique between an Item's accounts, and it may also not match the mask that the bank displays to the user.
    @[JSON::Field(key: "mask", type: String?, default: nil, required: true, nullable: true, emit_null: true)]
    getter mask : String? = nil

    # The name of the bank account.
    @[JSON::Field(key: "name", type: String?, default: nil, required: true, nullable: false, emit_null: false)]
    getter name : String? = nil

    # The official name of the bank account.
    @[JSON::Field(key: "official_name", type: String?, default: nil, required: true, nullable: true, emit_null: true)]
    getter official_name : String? = nil

    @[JSON::Field(key: "subtype", type: Plaid::DepositoryAccountSubtype?, default: nil, required: true, nullable: false, emit_null: false)]
    getter subtype : Plaid::DepositoryAccountSubtype? = nil

    @[JSON::Field(key: "type", type: Plaid::CreditBankIncomeAccountType?, default: nil, required: true, nullable: false, emit_null: false)]
    getter _type : Plaid::CreditBankIncomeAccountType? = nil

    # Data returned by the financial institution about the account owner or owners. Identity information is optional, so field may return an empty array.
    @[JSON::Field(key: "owners", type: Array(Owner)?, default: nil, required: true, nullable: false, emit_null: false)]
    getter owners : Array(Owner)? = nil

    # End of Required Properties

    # Initializes the object
    # @param [Hash] attributes Model attributes in the form of hash
    def initialize(
      *,
      # Required properties
      @mask : String? = nil,
      @name : String? = nil,
      @official_name : String? = nil,
      @subtype : Plaid::DepositoryAccountSubtype? = nil,
      @_type : Plaid::CreditBankIncomeAccountType? = nil,
      @owners : Array(Owner)? = nil
    )
    end

    # Show invalid properties with the reasons. Usually used together with valid?
    # @return Array for valid properties with the reasons
    def list_invalid_properties : Array(String)
      invalid_properties = Array(String).new

      unless (_mask = @mask).nil?
      end
      invalid_properties.push("\"name\" is required and cannot be null") if @name.nil?

      unless (_name = @name).nil?
      end
      unless (_official_name = @official_name).nil?
      end
      invalid_properties.push("\"subtype\" is required and cannot be null") if @subtype.nil?

      unless (_subtype = @subtype).nil?
        invalid_properties.push(_subtype.error_message) if !_subtype.valid?
      end
      invalid_properties.push("\"_type\" is required and cannot be null") if @_type.nil?

      unless (__type = @_type).nil?
        invalid_properties.push(__type.error_message) if !__type.valid?
      end
      invalid_properties.push("\"owners\" is required and cannot be null") if @owners.nil?

      unless (_owners = @owners).nil?
      end
      invalid_properties
    end

    # Check to see if the all the properties in the model are valid
    # @return true if the model is valid
    def valid? : Bool
      unless (_mask = @mask).nil?
      end

      return false if @name.nil?
      unless (_name = @name).nil?
      end

      unless (_official_name = @official_name).nil?
      end

      return false if @subtype.nil?
      unless (_subtype = @subtype).nil?
        return false if !_subtype.valid?
      end

      return false if @_type.nil?
      unless (__type = @_type).nil?
        return false if !__type.valid?
      end

      return false if @owners.nil?
      unless (_owners = @owners).nil?
      end

      true
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] mask Object to be assigned
    def mask=(new_value : String?)
      unless new_value.nil?
      end

      @mask = new_value
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] name Object to be assigned
    def name=(new_value : String?)
      raise ArgumentError.new("\"name\" is required and cannot be null") if new_value.nil?
      unless new_value.nil?
      end

      @name = new_value
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] official_name Object to be assigned
    def official_name=(new_value : String?)
      unless new_value.nil?
      end

      @official_name = new_value
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] subtype Object to be assigned
    def subtype=(new_value : Plaid::DepositoryAccountSubtype?)
      raise ArgumentError.new("\"subtype\" is required and cannot be null") if new_value.nil?
      unless new_value.nil?
        new_value.validate
      end

      @subtype = new_value
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] _type Object to be assigned
    def _type=(new_value : Plaid::CreditBankIncomeAccountType?)
      raise ArgumentError.new("\"_type\" is required and cannot be null") if new_value.nil?
      unless new_value.nil?
        new_value.validate
      end

      @_type = new_value
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] owners Object to be assigned
    def owners=(new_value : Array(Owner)?)
      raise ArgumentError.new("\"owners\" is required and cannot be null") if new_value.nil?
      unless new_value.nil?
      end

      @owners = new_value
    end

    # Generates #hash and #== methods from all fields
    # #== @return [Bool]
    # #hash calculates hash code according to all attributes.
    # #hash @return [UInt64] Hash code
    def_equals_and_hash(@mask, @name, @official_name, @subtype, @_type, @owners)
  end
end
