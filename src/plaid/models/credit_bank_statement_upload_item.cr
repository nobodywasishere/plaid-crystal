#  The Plaid API
#
# The Plaid REST API. Please see https://plaid.com/docs/api for more details.
#
# The version of the OpenAPI document: 2020-09-14_1.474.3
#
# Generated by: https://openapi-generator.tech
#

require "../../core"

require "./credit_bank_statement_upload_object"
require "./payroll_item_status"

module Plaid
  # An object containing information about the bank statement upload Item.
  class CreditBankStatementUploadItem
    include JSON::Serializable
    include JSON::Serializable::Unmapped
    include OpenApi::Validatable
    include OpenApi::Json

    # Required Properties

    # The `item_id` of the Item associated with this webhook, warning, or error
    @[JSON::Field(key: "item_id", type: String?, default: nil, required: true, nullable: false, emit_null: false)]
    getter item_id : String? = nil

    @[JSON::Field(key: "bank_statements", type: Array(CreditBankStatementUploadObject)?, default: nil, required: true, nullable: false, emit_null: false)]
    getter bank_statements : Array(CreditBankStatementUploadObject)? = nil

    @[JSON::Field(key: "status", type: PayrollItemStatus?, default: nil, required: true, nullable: true, emit_null: true)]
    getter status : PayrollItemStatus? = nil

    # Timestamp in [ISO 8601](https://wikipedia.org/wiki/ISO_8601) format (YYYY-MM-DDTHH:mm:ssZ) indicating the last time that the Item was updated.
    @[JSON::Field(key: "updated_at", type: Time?, default: nil, required: true, nullable: true, emit_null: true, converter: Time::RFC3339Converter)]
    getter updated_at : Time? = nil

    # End of Required Properties

    # Initializes the object
    # @param [Hash] attributes Model attributes in the form of hash
    def initialize(
      *,
      # Required properties
      @item_id : String? = nil,
      @bank_statements : Array(CreditBankStatementUploadObject)? = nil,
      @status : PayrollItemStatus? = nil,
      @updated_at : Time? = nil
    )
    end

    # Show invalid properties with the reasons. Usually used together with valid?
    # @return Array for valid properties with the reasons
    def list_invalid_properties : Array(String)
      invalid_properties = Array(String).new

      invalid_properties.push("\"item_id\" is required and cannot be null") if @item_id.nil?

      unless (_item_id = @item_id).nil?
      end
      invalid_properties.push("\"bank_statements\" is required and cannot be null") if @bank_statements.nil?

      unless (_bank_statements = @bank_statements).nil?
      end
      unless (_status = @status).nil?
      end
      unless (_updated_at = @updated_at).nil?
      end
      invalid_properties
    end

    # Check to see if the all the properties in the model are valid
    # @return true if the model is valid
    def valid? : Bool
      return false if @item_id.nil?
      unless (_item_id = @item_id).nil?
      end

      return false if @bank_statements.nil?
      unless (_bank_statements = @bank_statements).nil?
      end

      unless (_status = @status).nil?
      end

      unless (_updated_at = @updated_at).nil?
      end

      true
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] item_id Object to be assigned
    def item_id=(new_value : String?)
      raise ArgumentError.new("\"item_id\" is required and cannot be null") if new_value.nil?
      unless new_value.nil?
      end

      @item_id = new_value
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] bank_statements Object to be assigned
    def bank_statements=(new_value : Array(CreditBankStatementUploadObject)?)
      raise ArgumentError.new("\"bank_statements\" is required and cannot be null") if new_value.nil?
      unless new_value.nil?
      end

      @bank_statements = new_value
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] status Object to be assigned
    def status=(new_value : PayrollItemStatus?)
      unless new_value.nil?
      end

      @status = new_value
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] updated_at Object to be assigned
    def updated_at=(new_value : Time?)
      unless new_value.nil?
      end

      @updated_at = new_value
    end

    # Generates #hash and #== methods from all fields
    # #== @return [Bool]
    # #hash calculates hash code according to all attributes.
    # #hash @return [UInt64] Hash code
    def_equals_and_hash(@item_id, @bank_statements, @status, @updated_at)
  end
end
