#  The Plaid API
#
# The Plaid REST API. Please see https://plaid.com/docs/api for more details.
#
# The version of the OpenAPI document: 2020-09-14_1.474.3
#
# Generated by: https://openapi-generator.tech
#

require "../../core"

require "./income_verification_source_type"
require "./link_token_create_request_income_verification_bank_income"
require "./link_token_create_request_income_verification_payroll_income"
require "./link_token_create_request_user_stated_income_source"

module Plaid
  # Specifies options for initializing Link for use with the Income product. This field is required if `income_verification` is included in the `products` array.
  class LinkTokenCreateRequestIncomeVerification
    include JSON::Serializable
    include JSON::Serializable::Unmapped
    include OpenApi::Validatable
    include OpenApi::Json

    # Optional Properties

    # The `income_verification_id` of the verification instance, as provided by `/income/verification/create`.
    @[JSON::Field(key: "income_verification_id", type: String?, default: nil, required: false, nullable: false, emit_null: false)]
    getter income_verification_id : String? = nil

    # The `asset_report_id` of an asset report associated with the user, as provided by `/asset_report/create`. Providing an `asset_report_id` is optional and can be used to verify the user through a streamlined flow. If provided, the bank linking flow will be skipped.
    @[JSON::Field(key: "asset_report_id", type: String?, default: nil, required: false, nullable: false, emit_null: false)]
    getter asset_report_id : String? = nil

    # An array of access tokens corresponding to Items that a user has previously connected with. Data from these institutions will be cross-referenced with document data received during the Document Income flow to help verify that the uploaded documents are accurate. If the `transactions` product was not initialized for these Items during link, it will be initialized after this Link session.  This field should only be used with the `payroll` income source type.
    @[JSON::Field(key: "access_tokens", type: Array(String)?, default: nil, required: false, nullable: true, emit_null: true, presence: true, ignore_serialize: access_tokens.nil? && !access_tokens_present?)]
    getter access_tokens : Array(String)? = nil

    @[JSON::Field(ignore: true)]
    property? access_tokens_present : Bool = false

    # The types of source income data that users will be permitted to share. Options include `bank` and `payroll`. Currently you can only specify one of these options.
    @[JSON::Field(key: "income_source_types", type: Array(IncomeVerificationSourceType)?, default: nil, required: false, nullable: false, emit_null: false)]
    getter income_source_types : Array(IncomeVerificationSourceType)? = nil

    @[JSON::Field(key: "bank_income", type: Plaid::LinkTokenCreateRequestIncomeVerificationBankIncome?, default: nil, required: false, nullable: false, emit_null: false)]
    getter bank_income : Plaid::LinkTokenCreateRequestIncomeVerificationBankIncome? = nil

    @[JSON::Field(key: "payroll_income", type: Plaid::LinkTokenCreateRequestIncomeVerificationPayrollIncome?, default: nil, required: false, nullable: false, emit_null: false)]
    getter payroll_income : Plaid::LinkTokenCreateRequestIncomeVerificationPayrollIncome? = nil

    # A list of user stated income sources
    @[JSON::Field(key: "stated_income_sources", type: Array(Plaid::LinkTokenCreateRequestUserStatedIncomeSource)?, default: nil, required: false, nullable: false, emit_null: false)]
    getter stated_income_sources : Array(Plaid::LinkTokenCreateRequestUserStatedIncomeSource)? = nil

    # Initializes the object
    # @param [Hash] attributes Model attributes in the form of hash
    def initialize(
      *,
      # Optional properties
      @income_verification_id : String? = nil,
      @asset_report_id : String? = nil,
      @access_tokens : Array(String)? = nil,
      @income_source_types : Array(IncomeVerificationSourceType)? = nil,
      @bank_income : Plaid::LinkTokenCreateRequestIncomeVerificationBankIncome? = nil,
      @payroll_income : Plaid::LinkTokenCreateRequestIncomeVerificationPayrollIncome? = nil,
      @stated_income_sources : Array(Plaid::LinkTokenCreateRequestUserStatedIncomeSource)? = nil
    )
    end

    # Show invalid properties with the reasons. Usually used together with valid?
    # @return Array for valid properties with the reasons
    def list_invalid_properties : Array(String)
      invalid_properties = Array(String).new

      unless (_income_verification_id = @income_verification_id).nil?
      end
      unless (_asset_report_id = @asset_report_id).nil?
      end
      unless (_access_tokens = @access_tokens).nil?
      end
      unless (_income_source_types = @income_source_types).nil?
      end
      unless (_bank_income = @bank_income).nil?
        invalid_properties.concat(_bank_income.list_invalid_properties_for("bank_income")) if _bank_income.is_a?(OpenApi::Validatable)
      end
      unless (_payroll_income = @payroll_income).nil?
        invalid_properties.concat(_payroll_income.list_invalid_properties_for("payroll_income")) if _payroll_income.is_a?(OpenApi::Validatable)
      end
      unless (_stated_income_sources = @stated_income_sources).nil?
        invalid_properties.concat(OpenApi::ContainerValidator.list_invalid_properties_for(key: "stated_income_sources", container: _stated_income_sources)) if _stated_income_sources.is_a?(Array)
      end
      invalid_properties
    end

    # Check to see if the all the properties in the model are valid
    # @return true if the model is valid
    def valid? : Bool
      unless (_income_verification_id = @income_verification_id).nil?
      end

      unless (_asset_report_id = @asset_report_id).nil?
      end

      unless (_access_tokens = @access_tokens).nil?
      end

      unless (_income_source_types = @income_source_types).nil?
      end

      unless (_bank_income = @bank_income).nil?
        return false if _bank_income.is_a?(OpenApi::Validatable) && !_bank_income.valid?
      end

      unless (_payroll_income = @payroll_income).nil?
        return false if _payroll_income.is_a?(OpenApi::Validatable) && !_payroll_income.valid?
      end

      unless (_stated_income_sources = @stated_income_sources).nil?
        return false if _stated_income_sources.is_a?(Array) && !OpenApi::ContainerValidator.valid?(container: _stated_income_sources)
      end

      true
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] income_verification_id Object to be assigned
    def income_verification_id=(new_value : String?)
      unless new_value.nil?
      end

      @income_verification_id = new_value
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] asset_report_id Object to be assigned
    def asset_report_id=(new_value : String?)
      unless new_value.nil?
      end

      @asset_report_id = new_value
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] access_tokens Object to be assigned
    def access_tokens=(new_value : Array(String)?)
      unless new_value.nil?
      end

      @access_tokens = new_value
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] income_source_types Object to be assigned
    def income_source_types=(new_value : Array(IncomeVerificationSourceType)?)
      unless new_value.nil?
      end

      @income_source_types = new_value
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] bank_income Object to be assigned
    def bank_income=(new_value : Plaid::LinkTokenCreateRequestIncomeVerificationBankIncome?)
      unless new_value.nil?
        new_value.validate if new_value.is_a?(OpenApi::Validatable)
      end

      @bank_income = new_value
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] payroll_income Object to be assigned
    def payroll_income=(new_value : Plaid::LinkTokenCreateRequestIncomeVerificationPayrollIncome?)
      unless new_value.nil?
        new_value.validate if new_value.is_a?(OpenApi::Validatable)
      end

      @payroll_income = new_value
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] stated_income_sources Object to be assigned
    def stated_income_sources=(new_value : Array(Plaid::LinkTokenCreateRequestUserStatedIncomeSource)?)
      unless new_value.nil?
        OpenApi::ContainerValidator.validate(container: new_value) if new_value.is_a?(Array)
      end

      @stated_income_sources = new_value
    end

    # Generates #hash and #== methods from all fields
    # #== @return [Bool]
    # #hash calculates hash code according to all attributes.
    # #hash @return [UInt64] Hash code
    def_equals_and_hash(@income_verification_id, @asset_report_id, @access_tokens, @access_tokens_present, @income_source_types, @bank_income, @payroll_income, @stated_income_sources)
  end
end
