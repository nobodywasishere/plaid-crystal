#  The Plaid API
#
# The Plaid REST API. Please see https://plaid.com/docs/api for more details.
#
# The version of the OpenAPI document: 2020-09-14_1.474.3
#
# Generated by: https://openapi-generator.tech
#

require "../../core"

require "./asset_report_freddie"

module Plaid
  # AssetReportFreddieGetResponse defines the response schema for `/asset_report/get`
  class AssetReportFreddieGetResponse
    include JSON::Serializable
    include JSON::Serializable::Unmapped
    include OpenApi::Validatable
    include OpenApi::Json

    # Required Properties

    @[JSON::Field(key: "DEAL", type: AssetReportFreddie?, default: nil, required: true, nullable: false, emit_null: false)]
    getter deal : AssetReportFreddie? = nil

    # A unique identifier for the request, which can be used for troubleshooting. This identifier, like all Plaid identifiers, is case sensitive.
    @[JSON::Field(key: "request_id", type: String?, default: nil, required: true, nullable: false, emit_null: false)]
    getter request_id : String? = nil

    # The Verification Of Assets (aka VOA or Freddie Mac Schema) schema version.
    @[JSON::Field(key: "SchemaVersion", type: Float64?, default: nil, required: true, nullable: false, emit_null: false)]
    getter schema_version : Float64? = nil

    # End of Required Properties

    # Initializes the object
    # @param [Hash] attributes Model attributes in the form of hash
    def initialize(
      *,
      # Required properties
      @deal : AssetReportFreddie? = nil,
      @request_id : String? = nil,
      @schema_version : Float64? = nil
    )
    end

    # Show invalid properties with the reasons. Usually used together with valid?
    # @return Array for valid properties with the reasons
    def list_invalid_properties : Array(String)
      invalid_properties = Array(String).new

      invalid_properties.push("\"deal\" is required and cannot be null") if @deal.nil?

      unless (_deal = @deal).nil?
      end
      invalid_properties.push("\"request_id\" is required and cannot be null") if @request_id.nil?

      unless (_request_id = @request_id).nil?
      end
      invalid_properties.push("\"schema_version\" is required and cannot be null") if @schema_version.nil?

      unless (_schema_version = @schema_version).nil?
      end
      invalid_properties
    end

    # Check to see if the all the properties in the model are valid
    # @return true if the model is valid
    def valid? : Bool
      return false if @deal.nil?
      unless (_deal = @deal).nil?
      end

      return false if @request_id.nil?
      unless (_request_id = @request_id).nil?
      end

      return false if @schema_version.nil?
      unless (_schema_version = @schema_version).nil?
      end

      true
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] deal Object to be assigned
    def deal=(new_value : AssetReportFreddie?)
      raise ArgumentError.new("\"deal\" is required and cannot be null") if new_value.nil?
      unless new_value.nil?
      end

      @deal = new_value
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] request_id Object to be assigned
    def request_id=(new_value : String?)
      raise ArgumentError.new("\"request_id\" is required and cannot be null") if new_value.nil?
      unless new_value.nil?
      end

      @request_id = new_value
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] schema_version Object to be assigned
    def schema_version=(new_value : Float64?)
      raise ArgumentError.new("\"schema_version\" is required and cannot be null") if new_value.nil?
      unless new_value.nil?
      end

      @schema_version = new_value
    end

    # Generates #hash and #== methods from all fields
    # #== @return [Bool]
    # #hash calculates hash code according to all attributes.
    # #hash @return [UInt64] Hash code
    def_equals_and_hash(@deal, @request_id, @schema_version)
  end
end
