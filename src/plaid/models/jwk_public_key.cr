#  The Plaid API
#
# The Plaid REST API. Please see https://plaid.com/docs/api for more details.
#
# The version of the OpenAPI document: 2020-09-14_1.474.3
#
# Generated by: https://openapi-generator.tech
#

require "../../core"

module Plaid
  # A JSON Web Key (JWK) that can be used in conjunction with [JWT libraries](https://jwt.io/#libraries-io) to verify Plaid webhooks
  class JWKPublicKey
    include JSON::Serializable
    include JSON::Serializable::Unmapped
    include OpenApi::Validatable
    include OpenApi::Json

    # Required Properties

    # The alg member identifies the cryptographic algorithm family used with the key.
    @[JSON::Field(key: "alg", type: String?, default: nil, required: true, nullable: false, emit_null: false)]
    getter alg : String? = nil

    # The crv member identifies the cryptographic curve used with the key.
    @[JSON::Field(key: "crv", type: String?, default: nil, required: true, nullable: false, emit_null: false)]
    getter crv : String? = nil

    # The kid (Key ID) member can be used to match a specific key. This can be used, for instance, to choose among a set of keys within the JWK during key rollover.
    @[JSON::Field(key: "kid", type: String?, default: nil, required: true, nullable: false, emit_null: false)]
    getter kid : String? = nil

    # The kty (key type) parameter identifies the cryptographic algorithm family used with the key, such as RSA or EC.
    @[JSON::Field(key: "kty", type: String?, default: nil, required: true, nullable: false, emit_null: false)]
    getter kty : String? = nil

    # The use (public key use) parameter identifies the intended use of the public key.
    @[JSON::Field(key: "use", type: String?, default: nil, required: true, nullable: false, emit_null: false)]
    getter use : String? = nil

    # The x member contains the x coordinate for the elliptic curve point, provided as a base64url-encoded string of the coordinate's big endian representation.
    @[JSON::Field(key: "x", type: String?, default: nil, required: true, nullable: false, emit_null: false)]
    getter x : String? = nil

    # The y member contains the y coordinate for the elliptic curve point, provided as a base64url-encoded string of the coordinate's big endian representation.
    @[JSON::Field(key: "y", type: String?, default: nil, required: true, nullable: false, emit_null: false)]
    getter y : String? = nil

    # The timestamp when the key was created, in Unix time.
    @[JSON::Field(key: "created_at", type: Int32?, default: nil, required: true, nullable: false, emit_null: false)]
    getter created_at : Int32? = nil

    # The timestamp when the key expired, in Unix time.
    @[JSON::Field(key: "expired_at", type: Int32?, default: nil, required: true, nullable: true, emit_null: true)]
    getter expired_at : Int32? = nil

    # End of Required Properties

    # Initializes the object
    # @param [Hash] attributes Model attributes in the form of hash
    def initialize(
      *,
      # Required properties
      @alg : String? = nil,
      @crv : String? = nil,
      @kid : String? = nil,
      @kty : String? = nil,
      @use : String? = nil,
      @x : String? = nil,
      @y : String? = nil,
      @created_at : Int32? = nil,
      @expired_at : Int32? = nil
    )
    end

    # Show invalid properties with the reasons. Usually used together with valid?
    # @return Array for valid properties with the reasons
    def list_invalid_properties : Array(String)
      invalid_properties = Array(String).new

      invalid_properties.push("\"alg\" is required and cannot be null") if @alg.nil?

      unless (_alg = @alg).nil?
      end
      invalid_properties.push("\"crv\" is required and cannot be null") if @crv.nil?

      unless (_crv = @crv).nil?
      end
      invalid_properties.push("\"kid\" is required and cannot be null") if @kid.nil?

      unless (_kid = @kid).nil?
      end
      invalid_properties.push("\"kty\" is required and cannot be null") if @kty.nil?

      unless (_kty = @kty).nil?
      end
      invalid_properties.push("\"use\" is required and cannot be null") if @use.nil?

      unless (_use = @use).nil?
      end
      invalid_properties.push("\"x\" is required and cannot be null") if @x.nil?

      unless (_x = @x).nil?
      end
      invalid_properties.push("\"y\" is required and cannot be null") if @y.nil?

      unless (_y = @y).nil?
      end
      invalid_properties.push("\"created_at\" is required and cannot be null") if @created_at.nil?

      unless (_created_at = @created_at).nil?
      end
      unless (_expired_at = @expired_at).nil?
      end
      invalid_properties
    end

    # Check to see if the all the properties in the model are valid
    # @return true if the model is valid
    def valid? : Bool
      return false if @alg.nil?
      unless (_alg = @alg).nil?
      end

      return false if @crv.nil?
      unless (_crv = @crv).nil?
      end

      return false if @kid.nil?
      unless (_kid = @kid).nil?
      end

      return false if @kty.nil?
      unless (_kty = @kty).nil?
      end

      return false if @use.nil?
      unless (_use = @use).nil?
      end

      return false if @x.nil?
      unless (_x = @x).nil?
      end

      return false if @y.nil?
      unless (_y = @y).nil?
      end

      return false if @created_at.nil?
      unless (_created_at = @created_at).nil?
      end

      unless (_expired_at = @expired_at).nil?
      end

      true
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] alg Object to be assigned
    def alg=(new_value : String?)
      raise ArgumentError.new("\"alg\" is required and cannot be null") if new_value.nil?
      unless new_value.nil?
      end

      @alg = new_value
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] crv Object to be assigned
    def crv=(new_value : String?)
      raise ArgumentError.new("\"crv\" is required and cannot be null") if new_value.nil?
      unless new_value.nil?
      end

      @crv = new_value
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] kid Object to be assigned
    def kid=(new_value : String?)
      raise ArgumentError.new("\"kid\" is required and cannot be null") if new_value.nil?
      unless new_value.nil?
      end

      @kid = new_value
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] kty Object to be assigned
    def kty=(new_value : String?)
      raise ArgumentError.new("\"kty\" is required and cannot be null") if new_value.nil?
      unless new_value.nil?
      end

      @kty = new_value
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] use Object to be assigned
    def use=(new_value : String?)
      raise ArgumentError.new("\"use\" is required and cannot be null") if new_value.nil?
      unless new_value.nil?
      end

      @use = new_value
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] x Object to be assigned
    def x=(new_value : String?)
      raise ArgumentError.new("\"x\" is required and cannot be null") if new_value.nil?
      unless new_value.nil?
      end

      @x = new_value
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] y Object to be assigned
    def y=(new_value : String?)
      raise ArgumentError.new("\"y\" is required and cannot be null") if new_value.nil?
      unless new_value.nil?
      end

      @y = new_value
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] created_at Object to be assigned
    def created_at=(new_value : Int32?)
      raise ArgumentError.new("\"created_at\" is required and cannot be null") if new_value.nil?
      unless new_value.nil?
      end

      @created_at = new_value
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] expired_at Object to be assigned
    def expired_at=(new_value : Int32?)
      unless new_value.nil?
      end

      @expired_at = new_value
    end

    # Generates #hash and #== methods from all fields
    # #== @return [Bool]
    # #hash calculates hash code according to all attributes.
    # #hash @return [UInt64] Hash code
    def_equals_and_hash(@alg, @crv, @kid, @kty, @use, @x, @y, @created_at, @expired_at)
  end
end
