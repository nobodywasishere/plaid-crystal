#  The Plaid API
#
# The Plaid REST API. Please see https://plaid.com/docs/api for more details.
#
# The version of the OpenAPI document: 2020-09-14_1.474.3
#
# Generated by: https://openapi-generator.tech
#

require "../../core"

module Plaid
  # LinkTokenCreateResponse defines the response schema for `/link/token/create`
  class LinkTokenCreateResponse
    include JSON::Serializable
    include JSON::Serializable::Unmapped
    include OpenApi::Validatable
    include OpenApi::Json

    # Required Properties

    # A `link_token`, which can be supplied to Link in order to initialize it and receive a `public_token`, which can be exchanged for an `access_token`.
    @[JSON::Field(key: "link_token", type: String?, default: nil, required: true, nullable: false, emit_null: false)]
    getter link_token : String? = nil

    # The expiration date for the `link_token`, in [ISO 8601](https://wikipedia.org/wiki/ISO_8601) format. A `link_token` created to generate a `public_token` that will be exchanged for a new `access_token` expires after 4 hours. A `link_token` created for an existing Item (such as when updating an existing `access_token` by launching Link in update mode) expires after 30 minutes.
    @[JSON::Field(key: "expiration", type: Time?, default: nil, required: true, nullable: false, emit_null: false, converter: Time::RFC3339Converter)]
    getter expiration : Time? = nil

    # A unique identifier for the request, which can be used for troubleshooting. This identifier, like all Plaid identifiers, is case sensitive.
    @[JSON::Field(key: "request_id", type: String?, default: nil, required: true, nullable: false, emit_null: false)]
    getter request_id : String? = nil

    # End of Required Properties

    # Optional Properties

    # A URL of a Plaid-hosted Link flow that will use the Link token returned by this request
    @[JSON::Field(key: "hosted_link_url", type: String?, default: nil, required: false, nullable: false, emit_null: false)]
    getter hosted_link_url : String? = nil

    # Initializes the object
    # @param [Hash] attributes Model attributes in the form of hash
    def initialize(
      *,
      # Required properties
      @link_token : String? = nil,
      @expiration : Time? = nil,
      @request_id : String? = nil,
      # Optional properties
      @hosted_link_url : String? = nil
    )
    end

    # Show invalid properties with the reasons. Usually used together with valid?
    # @return Array for valid properties with the reasons
    def list_invalid_properties : Array(String)
      invalid_properties = Array(String).new

      invalid_properties.push("\"link_token\" is required and cannot be null") if @link_token.nil?

      unless (_link_token = @link_token).nil?
      end
      invalid_properties.push("\"expiration\" is required and cannot be null") if @expiration.nil?

      unless (_expiration = @expiration).nil?
      end
      invalid_properties.push("\"request_id\" is required and cannot be null") if @request_id.nil?

      unless (_request_id = @request_id).nil?
      end
      unless (_hosted_link_url = @hosted_link_url).nil?
      end
      invalid_properties
    end

    # Check to see if the all the properties in the model are valid
    # @return true if the model is valid
    def valid? : Bool
      return false if @link_token.nil?
      unless (_link_token = @link_token).nil?
      end

      return false if @expiration.nil?
      unless (_expiration = @expiration).nil?
      end

      return false if @request_id.nil?
      unless (_request_id = @request_id).nil?
      end

      unless (_hosted_link_url = @hosted_link_url).nil?
      end

      true
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] link_token Object to be assigned
    def link_token=(new_value : String?)
      raise ArgumentError.new("\"link_token\" is required and cannot be null") if new_value.nil?
      unless new_value.nil?
      end

      @link_token = new_value
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] expiration Object to be assigned
    def expiration=(new_value : Time?)
      raise ArgumentError.new("\"expiration\" is required and cannot be null") if new_value.nil?
      unless new_value.nil?
      end

      @expiration = new_value
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] request_id Object to be assigned
    def request_id=(new_value : String?)
      raise ArgumentError.new("\"request_id\" is required and cannot be null") if new_value.nil?
      unless new_value.nil?
      end

      @request_id = new_value
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] hosted_link_url Object to be assigned
    def hosted_link_url=(new_value : String?)
      unless new_value.nil?
      end

      @hosted_link_url = new_value
    end

    # Generates #hash and #== methods from all fields
    # #== @return [Bool]
    # #hash calculates hash code according to all attributes.
    # #hash @return [UInt64] Hash code
    def_equals_and_hash(@link_token, @expiration, @request_id, @hosted_link_url)
  end
end
