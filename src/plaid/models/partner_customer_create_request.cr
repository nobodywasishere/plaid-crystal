#  The Plaid API
#
# The Plaid REST API. Please see https://plaid.com/docs/api for more details.
#
# The version of the OpenAPI document: 2020-09-14_1.474.3
#
# Generated by: https://openapi-generator.tech
#

require "../../core"

require "./partner_end_customer_address"
require "./partner_end_customer_assets_under_management"
require "./partner_end_customer_billing_contact"
require "./partner_end_customer_customer_support_info"
require "./partner_end_customer_technical_contact"
require "./products"

module Plaid
  # Request schema for `/partner/customer/create`.
  class PartnerCustomerCreateRequest
    include JSON::Serializable
    include JSON::Serializable::Unmapped
    include OpenApi::Validatable
    include OpenApi::Json

    # Required Properties

    # The company name of the end customer being created. This will be used to display the end customer in the Plaid Dashboard. It will not be shown to end users.
    @[JSON::Field(key: "company_name", type: String?, default: nil, required: true, nullable: false, emit_null: false)]
    getter company_name : String? = nil

    # Denotes whether or not the partner has completed attestation of diligence for the end customer to be created.
    @[JSON::Field(key: "is_diligence_attested", type: Bool?, default: nil, required: true, nullable: false, emit_null: false)]
    getter is_diligence_attested : Bool? = nil

    # The end customer's legal name. This will be shared with financial institutions as part of the OAuth registration process. It will not be shown to end users.
    @[JSON::Field(key: "legal_entity_name", type: String?, default: nil, required: true, nullable: false, emit_null: false)]
    getter legal_entity_name : String? = nil

    # The end customer's website.
    @[JSON::Field(key: "website", type: String?, default: nil, required: true, nullable: false, emit_null: false)]
    getter website : String? = nil

    # The name of the end customer's application. This will be shown to end users when they go through the Plaid Link flow.
    @[JSON::Field(key: "application_name", type: String?, default: nil, required: true, nullable: false, emit_null: false)]
    getter application_name : String? = nil

    @[JSON::Field(key: "address", type: PartnerEndCustomerAddress?, default: nil, required: true, nullable: false, emit_null: false)]
    getter address : PartnerEndCustomerAddress? = nil

    # Denotes whether the partner has forwarded the Plaid bank addendum to the end customer.
    @[JSON::Field(key: "is_bank_addendum_completed", type: Bool?, default: nil, required: true, nullable: false, emit_null: false)]
    getter is_bank_addendum_completed : Bool? = nil

    # End of Required Properties

    # Optional Properties

    # Your Plaid API `client_id`. The `client_id` is required and may be provided either in the `PLAID-CLIENT-ID` header or as part of a request body.
    @[JSON::Field(key: "client_id", type: String?, default: nil, required: false, nullable: false, emit_null: false)]
    getter client_id : String? = nil

    # Your Plaid API `secret`. The `secret` is required and may be provided either in the `PLAID-SECRET` header or as part of a request body.
    @[JSON::Field(key: "secret", type: String?, default: nil, required: false, nullable: false, emit_null: false)]
    getter secret : String? = nil

    # The products to be enabled for the end customer. If empty or `null`, this field will default to the products enabled for the reseller at the time this endpoint is called.
    @[JSON::Field(key: "products", type: Array(Products)?, default: nil, required: false, nullable: false, emit_null: false)]
    getter products : Array(Products)? = nil

    # If `true`, the end customer's default Link customization will be set to match the partner's. You can always change the end customer's Link customization in the Plaid Dashboard. See the [Link Customization docs](https://plaid.com/docs/link/customization/) for more information.
    @[JSON::Field(key: "create_link_customization", type: Bool?, default: nil, required: false, nullable: false, emit_null: false)]
    getter create_link_customization : Bool? = nil

    # Base64-encoded representation of the end customer's logo. Must be a PNG of size 1024x1024 under 4MB. The logo will be shared with financial institutions and shown to the end user during Link flows. A logo is required if `create_link_customization` is `true`. If `create_link_customization` is `false` and the logo is omitted, the partner's logo will be used if one exists, otherwise a stock logo will be used.
    @[JSON::Field(key: "logo", type: String?, default: nil, required: false, nullable: false, emit_null: false)]
    getter logo : String? = nil

    @[JSON::Field(key: "technical_contact", type: PartnerEndCustomerTechnicalContact?, default: nil, required: false, nullable: false, emit_null: false)]
    getter technical_contact : PartnerEndCustomerTechnicalContact? = nil

    @[JSON::Field(key: "billing_contact", type: PartnerEndCustomerBillingContact?, default: nil, required: false, nullable: false, emit_null: false)]
    getter billing_contact : PartnerEndCustomerBillingContact? = nil

    @[JSON::Field(key: "customer_support_info", type: PartnerEndCustomerCustomerSupportInfo?, default: nil, required: false, nullable: false, emit_null: false)]
    getter customer_support_info : PartnerEndCustomerCustomerSupportInfo? = nil

    @[JSON::Field(key: "assets_under_management", type: PartnerEndCustomerAssetsUnderManagement?, default: nil, required: false, nullable: false, emit_null: false)]
    getter assets_under_management : PartnerEndCustomerAssetsUnderManagement? = nil

    # A list of URIs indicating the destination(s) where a user can be forwarded after completing the Link flow; used to support OAuth authentication flows when launching Link in the browser or via a webview. URIs should not contain any query parameters. When used in Production or Development, URIs must use https. To specify any subdomain, use `*` as a wildcard character, e.g. `https://*.example.com/oauth.html`. To modify redirect URIs for an end customer after creating them, go to the end customer's [API page](https://dashboard.plaid.com/team/api) in the Dashboard.
    @[JSON::Field(key: "redirect_uris", type: Array(String)?, default: nil, required: false, nullable: false, emit_null: false)]
    getter redirect_uris : Array(String)? = nil

    # Initializes the object
    # @param [Hash] attributes Model attributes in the form of hash
    def initialize(
      *,
      # Required properties
      @company_name : String? = nil,
      @is_diligence_attested : Bool? = nil,
      @legal_entity_name : String? = nil,
      @website : String? = nil,
      @application_name : String? = nil,
      @address : PartnerEndCustomerAddress? = nil,
      @is_bank_addendum_completed : Bool? = nil,
      # Optional properties
      @client_id : String? = nil,
      @secret : String? = nil,
      @products : Array(Products)? = nil,
      @create_link_customization : Bool? = nil,
      @logo : String? = nil,
      @technical_contact : PartnerEndCustomerTechnicalContact? = nil,
      @billing_contact : PartnerEndCustomerBillingContact? = nil,
      @customer_support_info : PartnerEndCustomerCustomerSupportInfo? = nil,
      @assets_under_management : PartnerEndCustomerAssetsUnderManagement? = nil,
      @redirect_uris : Array(String)? = nil
    )
    end

    # Show invalid properties with the reasons. Usually used together with valid?
    # @return Array for valid properties with the reasons
    def list_invalid_properties : Array(String)
      invalid_properties = Array(String).new

      invalid_properties.push("\"company_name\" is required and cannot be null") if @company_name.nil?

      unless (_company_name = @company_name).nil?
      end
      invalid_properties.push("\"is_diligence_attested\" is required and cannot be null") if @is_diligence_attested.nil?

      unless (_is_diligence_attested = @is_diligence_attested).nil?
      end
      invalid_properties.push("\"legal_entity_name\" is required and cannot be null") if @legal_entity_name.nil?

      unless (_legal_entity_name = @legal_entity_name).nil?
      end
      invalid_properties.push("\"website\" is required and cannot be null") if @website.nil?

      unless (_website = @website).nil?
      end
      invalid_properties.push("\"application_name\" is required and cannot be null") if @application_name.nil?

      unless (_application_name = @application_name).nil?
      end
      invalid_properties.push("\"address\" is required and cannot be null") if @address.nil?

      unless (_address = @address).nil?
      end
      invalid_properties.push("\"is_bank_addendum_completed\" is required and cannot be null") if @is_bank_addendum_completed.nil?

      unless (_is_bank_addendum_completed = @is_bank_addendum_completed).nil?
      end
      unless (_client_id = @client_id).nil?
      end
      unless (_secret = @secret).nil?
      end
      unless (_products = @products).nil?
      end
      unless (_create_link_customization = @create_link_customization).nil?
      end
      unless (_logo = @logo).nil?
      end
      unless (_technical_contact = @technical_contact).nil?
      end
      unless (_billing_contact = @billing_contact).nil?
      end
      unless (_customer_support_info = @customer_support_info).nil?
      end
      unless (_assets_under_management = @assets_under_management).nil?
      end
      unless (_redirect_uris = @redirect_uris).nil?
      end
      invalid_properties
    end

    # Check to see if the all the properties in the model are valid
    # @return true if the model is valid
    def valid? : Bool
      return false if @company_name.nil?
      unless (_company_name = @company_name).nil?
      end

      return false if @is_diligence_attested.nil?
      unless (_is_diligence_attested = @is_diligence_attested).nil?
      end

      return false if @legal_entity_name.nil?
      unless (_legal_entity_name = @legal_entity_name).nil?
      end

      return false if @website.nil?
      unless (_website = @website).nil?
      end

      return false if @application_name.nil?
      unless (_application_name = @application_name).nil?
      end

      return false if @address.nil?
      unless (_address = @address).nil?
      end

      return false if @is_bank_addendum_completed.nil?
      unless (_is_bank_addendum_completed = @is_bank_addendum_completed).nil?
      end

      unless (_client_id = @client_id).nil?
      end

      unless (_secret = @secret).nil?
      end

      unless (_products = @products).nil?
      end

      unless (_create_link_customization = @create_link_customization).nil?
      end

      unless (_logo = @logo).nil?
      end

      unless (_technical_contact = @technical_contact).nil?
      end

      unless (_billing_contact = @billing_contact).nil?
      end

      unless (_customer_support_info = @customer_support_info).nil?
      end

      unless (_assets_under_management = @assets_under_management).nil?
      end

      unless (_redirect_uris = @redirect_uris).nil?
      end

      true
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] company_name Object to be assigned
    def company_name=(new_value : String?)
      raise ArgumentError.new("\"company_name\" is required and cannot be null") if new_value.nil?
      unless new_value.nil?
      end

      @company_name = new_value
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] is_diligence_attested Object to be assigned
    def is_diligence_attested=(new_value : Bool?)
      raise ArgumentError.new("\"is_diligence_attested\" is required and cannot be null") if new_value.nil?
      unless new_value.nil?
      end

      @is_diligence_attested = new_value
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] legal_entity_name Object to be assigned
    def legal_entity_name=(new_value : String?)
      raise ArgumentError.new("\"legal_entity_name\" is required and cannot be null") if new_value.nil?
      unless new_value.nil?
      end

      @legal_entity_name = new_value
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] website Object to be assigned
    def website=(new_value : String?)
      raise ArgumentError.new("\"website\" is required and cannot be null") if new_value.nil?
      unless new_value.nil?
      end

      @website = new_value
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] application_name Object to be assigned
    def application_name=(new_value : String?)
      raise ArgumentError.new("\"application_name\" is required and cannot be null") if new_value.nil?
      unless new_value.nil?
      end

      @application_name = new_value
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] address Object to be assigned
    def address=(new_value : PartnerEndCustomerAddress?)
      raise ArgumentError.new("\"address\" is required and cannot be null") if new_value.nil?
      unless new_value.nil?
      end

      @address = new_value
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] is_bank_addendum_completed Object to be assigned
    def is_bank_addendum_completed=(new_value : Bool?)
      raise ArgumentError.new("\"is_bank_addendum_completed\" is required and cannot be null") if new_value.nil?
      unless new_value.nil?
      end

      @is_bank_addendum_completed = new_value
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] client_id Object to be assigned
    def client_id=(new_value : String?)
      unless new_value.nil?
      end

      @client_id = new_value
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] secret Object to be assigned
    def secret=(new_value : String?)
      unless new_value.nil?
      end

      @secret = new_value
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] products Object to be assigned
    def products=(new_value : Array(Products)?)
      unless new_value.nil?
      end

      @products = new_value
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] create_link_customization Object to be assigned
    def create_link_customization=(new_value : Bool?)
      unless new_value.nil?
      end

      @create_link_customization = new_value
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] logo Object to be assigned
    def logo=(new_value : String?)
      unless new_value.nil?
      end

      @logo = new_value
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] technical_contact Object to be assigned
    def technical_contact=(new_value : PartnerEndCustomerTechnicalContact?)
      unless new_value.nil?
      end

      @technical_contact = new_value
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] billing_contact Object to be assigned
    def billing_contact=(new_value : PartnerEndCustomerBillingContact?)
      unless new_value.nil?
      end

      @billing_contact = new_value
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] customer_support_info Object to be assigned
    def customer_support_info=(new_value : PartnerEndCustomerCustomerSupportInfo?)
      unless new_value.nil?
      end

      @customer_support_info = new_value
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] assets_under_management Object to be assigned
    def assets_under_management=(new_value : PartnerEndCustomerAssetsUnderManagement?)
      unless new_value.nil?
      end

      @assets_under_management = new_value
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] redirect_uris Object to be assigned
    def redirect_uris=(new_value : Array(String)?)
      unless new_value.nil?
      end

      @redirect_uris = new_value
    end

    # Generates #hash and #== methods from all fields
    # #== @return [Bool]
    # #hash calculates hash code according to all attributes.
    # #hash @return [UInt64] Hash code
    def_equals_and_hash(@company_name, @is_diligence_attested, @legal_entity_name, @website, @application_name, @address, @is_bank_addendum_completed, @client_id, @secret, @products, @create_link_customization, @logo, @technical_contact, @billing_contact, @customer_support_info, @assets_under_management, @redirect_uris)
  end
end
