#  The Plaid API
#
# The Plaid REST API. Please see https://plaid.com/docs/api for more details.
#
# The version of the OpenAPI document: 2020-09-14_1.474.3
#
# Generated by: https://openapi-generator.tech
#

require "../../core"

require "./cause"

module Plaid
  # It is possible for an Asset Report to be returned with missing account owner information. In such cases, the Asset Report will contain warning data in the response, indicating why obtaining the owner information failed.
  class Warning
    include JSON::Serializable
    include JSON::Serializable::Unmapped
    include OpenApi::Validatable
    include OpenApi::Json

    # Required Properties

    # The warning type, which will always be `ASSET_REPORT_WARNING`
    @[JSON::Field(key: "warning_type", type: String?, default: nil, required: true, nullable: false, emit_null: false)]
    getter warning_type : String? = nil

    # The warning code identifies a specific kind of warning. `OWNERS_UNAVAILABLE` indicates that account-owner information is not available.`INVESTMENTS_UNAVAILABLE` indicates that Investments specific information is not available. `TRANSACTIONS_UNAVAILABLE` indicates that transactions information associated with Credit and Depository accounts are unavailable.
    @[JSON::Field(key: "warning_code", type: String?, default: nil, required: true, nullable: false, emit_null: false)]
    getter warning_code : String? = nil
    ERROR_MESSAGE_FOR_WARNING_CODE = "invalid value for \"warning_code\", must be one of [OWNERS_UNAVAILABLE, INVESTMENTS_UNAVAILABLE, TRANSACTIONS_UNAVAILABLE]."
    VALID_VALUES_FOR_WARNING_CODE  = String.static_array("OWNERS_UNAVAILABLE", "INVESTMENTS_UNAVAILABLE", "TRANSACTIONS_UNAVAILABLE")

    @[JSON::Field(key: "cause", type: Plaid::Cause?, default: nil, required: true, nullable: false, emit_null: false)]
    getter cause : Plaid::Cause? = nil

    # End of Required Properties

    # Initializes the object
    # @param [Hash] attributes Model attributes in the form of hash
    def initialize(
      *,
      # Required properties
      @warning_type : String? = nil,
      @warning_code : String? = nil,
      @cause : Plaid::Cause? = nil
    )
    end

    # Show invalid properties with the reasons. Usually used together with valid?
    # @return Array for valid properties with the reasons
    def list_invalid_properties : Array(String)
      invalid_properties = Array(String).new

      invalid_properties.push("\"warning_type\" is required and cannot be null") if @warning_type.nil?

      unless (_warning_type = @warning_type).nil?
      end
      invalid_properties.push("\"warning_code\" is required and cannot be null") if @warning_code.nil?

      unless (_warning_code = @warning_code).nil?
        invalid_properties.push(ERROR_MESSAGE_FOR_WARNING_CODE) unless OpenApi::EnumValidator.valid?(_warning_code, VALID_VALUES_FOR_WARNING_CODE)
      end
      invalid_properties.push("\"cause\" is required and cannot be null") if @cause.nil?

      unless (_cause = @cause).nil?
        invalid_properties.concat(_cause.list_invalid_properties_for("cause")) if _cause.is_a?(OpenApi::Validatable)
      end
      invalid_properties
    end

    # Check to see if the all the properties in the model are valid
    # @return true if the model is valid
    def valid? : Bool
      return false if @warning_type.nil?
      unless (_warning_type = @warning_type).nil?
      end

      return false if @warning_code.nil?
      unless (_warning_code = @warning_code).nil?
        return false unless OpenApi::EnumValidator.valid?(_warning_code, VALID_VALUES_FOR_WARNING_CODE)
      end

      return false if @cause.nil?
      unless (_cause = @cause).nil?
        return false if _cause.is_a?(OpenApi::Validatable) && !_cause.valid?
      end

      true
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] warning_type Object to be assigned
    def warning_type=(new_value : String?)
      raise ArgumentError.new("\"warning_type\" is required and cannot be null") if new_value.nil?
      unless new_value.nil?
      end

      @warning_type = new_value
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] warning_code Object to be assigned
    def warning_code=(new_value : String?)
      raise ArgumentError.new("\"warning_code\" is required and cannot be null") if new_value.nil?
      unless new_value.nil?
        OpenApi::EnumValidator.validate("warning_code", new_value, VALID_VALUES_FOR_WARNING_CODE)
      end

      @warning_code = new_value
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] cause Object to be assigned
    def cause=(new_value : Plaid::Cause?)
      raise ArgumentError.new("\"cause\" is required and cannot be null") if new_value.nil?
      unless new_value.nil?
        new_value.validate if new_value.is_a?(OpenApi::Validatable)
      end

      @cause = new_value
    end

    # Generates #hash and #== methods from all fields
    # #== @return [Bool]
    # #hash calculates hash code according to all attributes.
    # #hash @return [UInt64] Hash code
    def_equals_and_hash(@warning_type, @warning_code, @cause)
  end
end
