#  The Plaid API
#
# The Plaid REST API. Please see https://plaid.com/docs/api for more details.
#
# The version of the OpenAPI document: 2020-09-14_1.474.3
#
# Generated by: https://openapi-generator.tech
#

require "../../core"

require "./address_data_nullable"

module Plaid
  # Data about the employer.
  class Employer
    include JSON::Serializable
    include JSON::Serializable::Unmapped
    include OpenApi::Validatable
    include OpenApi::Json

    # Required Properties

    # Plaid's unique identifier for the employer.
    @[JSON::Field(key: "employer_id", type: String?, default: nil, required: true, nullable: false, emit_null: false)]
    getter employer_id : String? = nil

    # The name of the employer
    @[JSON::Field(key: "name", type: String?, default: nil, required: true, nullable: false, emit_null: false)]
    getter name : String? = nil

    @[JSON::Field(key: "address", type: Plaid::AddressDataNullable?, default: nil, required: true, nullable: true, emit_null: true)]
    getter address : Plaid::AddressDataNullable? = nil

    # A number from 0 to 1 indicating Plaid's level of confidence in the pairing between the employer and the institution (not yet implemented).
    @[JSON::Field(key: "confidence_score", type: Float64?, default: nil, required: true, nullable: false, emit_null: false)]
    getter confidence_score : Float64? = nil

    # End of Required Properties

    # Initializes the object
    # @param [Hash] attributes Model attributes in the form of hash
    def initialize(
      *,
      # Required properties
      @employer_id : String? = nil,
      @name : String? = nil,
      @address : Plaid::AddressDataNullable? = nil,
      @confidence_score : Float64? = nil
    )
    end

    # Show invalid properties with the reasons. Usually used together with valid?
    # @return Array for valid properties with the reasons
    def list_invalid_properties : Array(String)
      invalid_properties = Array(String).new

      invalid_properties.push("\"employer_id\" is required and cannot be null") if @employer_id.nil?

      unless (_employer_id = @employer_id).nil?
      end
      invalid_properties.push("\"name\" is required and cannot be null") if @name.nil?

      unless (_name = @name).nil?
      end
      unless (_address = @address).nil?
        invalid_properties.concat(_address.list_invalid_properties_for("address")) if _address.is_a?(OpenApi::Validatable)
      end
      invalid_properties.push("\"confidence_score\" is required and cannot be null") if @confidence_score.nil?

      unless (_confidence_score = @confidence_score).nil?
      end
      invalid_properties
    end

    # Check to see if the all the properties in the model are valid
    # @return true if the model is valid
    def valid? : Bool
      return false if @employer_id.nil?
      unless (_employer_id = @employer_id).nil?
      end

      return false if @name.nil?
      unless (_name = @name).nil?
      end

      unless (_address = @address).nil?
        return false if _address.is_a?(OpenApi::Validatable) && !_address.valid?
      end

      return false if @confidence_score.nil?
      unless (_confidence_score = @confidence_score).nil?
      end

      true
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] employer_id Object to be assigned
    def employer_id=(new_value : String?)
      raise ArgumentError.new("\"employer_id\" is required and cannot be null") if new_value.nil?
      unless new_value.nil?
      end

      @employer_id = new_value
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] name Object to be assigned
    def name=(new_value : String?)
      raise ArgumentError.new("\"name\" is required and cannot be null") if new_value.nil?
      unless new_value.nil?
      end

      @name = new_value
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] address Object to be assigned
    def address=(new_value : Plaid::AddressDataNullable?)
      unless new_value.nil?
        new_value.validate if new_value.is_a?(OpenApi::Validatable)
      end

      @address = new_value
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] confidence_score Object to be assigned
    def confidence_score=(new_value : Float64?)
      raise ArgumentError.new("\"confidence_score\" is required and cannot be null") if new_value.nil?
      unless new_value.nil?
      end

      @confidence_score = new_value
    end

    # Generates #hash and #== methods from all fields
    # #== @return [Bool]
    # #hash calculates hash code according to all attributes.
    # #hash @return [UInt64] Hash code
    def_equals_and_hash(@employer_id, @name, @address, @confidence_score)
  end
end
