#  The Plaid API
#
# The Plaid REST API. Please see https://plaid.com/docs/api for more details.
#
# The version of the OpenAPI document: 2020-09-14_1.474.3
#
# Generated by: https://openapi-generator.tech
#

require "../../core"

require "./doc_type"

module Plaid
  # An object representing metadata from the end user's uploaded document.
  class DocumentMetadata
    include JSON::Serializable
    include JSON::Serializable::Unmapped
    include OpenApi::Validatable
    include OpenApi::Json

    # Optional Properties

    # The name of the document.
    @[JSON::Field(key: "name", type: String?, default: nil, required: false, nullable: false, emit_null: false)]
    getter name : String? = nil

    # The processing status of the document.  `PROCESSING_COMPLETE`: The document was successfully processed.  `DOCUMENT_ERROR`: The document could not be processed. Possible causes include: The document was an unacceptable document type such as an offer letter or bank statement, the document image was cropped or blurry, or the document was corrupted.  `UNKNOWN` or `null`: An internal error occurred. If this happens repeatedly, contact support or your Plaid account manager.
    @[JSON::Field(key: "status", type: String?, default: nil, required: false, nullable: true, emit_null: true, presence: true, ignore_serialize: status.nil? && !status_present?)]
    getter status : String? = nil

    @[JSON::Field(ignore: true)]
    property? status_present : Bool = false

    # An identifier of the document that is also present in the paystub response.
    @[JSON::Field(key: "doc_id", type: String?, default: nil, required: false, nullable: false, emit_null: false)]
    getter doc_id : String? = nil

    @[JSON::Field(key: "doc_type", type: Plaid::DocType?, default: nil, required: false, nullable: false, emit_null: false)]
    getter doc_type : Plaid::DocType? = nil

    # Initializes the object
    # @param [Hash] attributes Model attributes in the form of hash
    def initialize(
      *,
      # Optional properties
      @name : String? = nil,
      @status : String? = nil,
      @doc_id : String? = nil,
      @doc_type : Plaid::DocType? = nil
    )
    end

    # Show invalid properties with the reasons. Usually used together with valid?
    # @return Array for valid properties with the reasons
    def list_invalid_properties : Array(String)
      invalid_properties = Array(String).new

      unless (_name = @name).nil?
      end
      unless (_status = @status).nil?
      end
      unless (_doc_id = @doc_id).nil?
      end
      unless (_doc_type = @doc_type).nil?
        invalid_properties.push(_doc_type.error_message) if !_doc_type.valid?
      end
      invalid_properties
    end

    # Check to see if the all the properties in the model are valid
    # @return true if the model is valid
    def valid? : Bool
      unless (_name = @name).nil?
      end

      unless (_status = @status).nil?
      end

      unless (_doc_id = @doc_id).nil?
      end

      unless (_doc_type = @doc_type).nil?
        return false if !_doc_type.valid?
      end

      true
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] name Object to be assigned
    def name=(new_value : String?)
      unless new_value.nil?
      end

      @name = new_value
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] status Object to be assigned
    def status=(new_value : String?)
      unless new_value.nil?
      end

      @status = new_value
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] doc_id Object to be assigned
    def doc_id=(new_value : String?)
      unless new_value.nil?
      end

      @doc_id = new_value
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] doc_type Object to be assigned
    def doc_type=(new_value : Plaid::DocType?)
      unless new_value.nil?
        new_value.validate
      end

      @doc_type = new_value
    end

    # Generates #hash and #== methods from all fields
    # #== @return [Bool]
    # #hash calculates hash code according to all attributes.
    # #hash @return [UInt64] Hash code
    def_equals_and_hash(@name, @status, @status_present, @doc_id, @doc_type)
  end
end
