#  The Plaid API
#
# The Plaid REST API. Please see https://plaid.com/docs/api for more details.
#
# The version of the OpenAPI document: 2020-09-14_1.474.3
#
# Generated by: https://openapi-generator.tech
#

require "../../core"

require "./transfer_document_purpose"

module Plaid
  # Defines the request schema for `/transfer/diligence/document/upload`
  class TransferDiligenceDocumentUploadRequest
    include JSON::Serializable
    include JSON::Serializable::Unmapped
    include OpenApi::Validatable
    include OpenApi::Json

    # Required Properties

    # The Client ID of the originator whose document that you want to upload.
    @[JSON::Field(key: "originator_client_id", type: String?, default: nil, required: true, nullable: false, emit_null: false)]
    getter originator_client_id : String? = nil

    # A file to upload. The file size must be less than 20MB. Supported file extensions: .pdf.
    @[JSON::Field(key: "file", type: ::File?, default: nil, required: true, nullable: false, emit_null: false)]
    getter file : ::File? = nil

    @[JSON::Field(key: "purpose", type: Plaid::TransferDocumentPurpose?, default: nil, required: true, nullable: false, emit_null: false)]
    getter purpose : Plaid::TransferDocumentPurpose? = nil

    # End of Required Properties

    # Initializes the object
    # @param [Hash] attributes Model attributes in the form of hash
    def initialize(
      *,
      # Required properties
      @originator_client_id : String? = nil,
      @file : ::File? = nil,
      @purpose : Plaid::TransferDocumentPurpose? = nil
    )
    end

    # Show invalid properties with the reasons. Usually used together with valid?
    # @return Array for valid properties with the reasons
    def list_invalid_properties : Array(String)
      invalid_properties = Array(String).new

      invalid_properties.push("\"originator_client_id\" is required and cannot be null") if @originator_client_id.nil?

      unless (_originator_client_id = @originator_client_id).nil?
      end
      invalid_properties.push("\"file\" is required and cannot be null") if @file.nil?

      unless (_file = @file).nil?
      end
      invalid_properties.push("\"purpose\" is required and cannot be null") if @purpose.nil?

      unless (_purpose = @purpose).nil?
        invalid_properties.push(_purpose.error_message) if !_purpose.valid?
      end
      invalid_properties
    end

    # Check to see if the all the properties in the model are valid
    # @return true if the model is valid
    def valid? : Bool
      return false if @originator_client_id.nil?
      unless (_originator_client_id = @originator_client_id).nil?
      end

      return false if @file.nil?
      unless (_file = @file).nil?
      end

      return false if @purpose.nil?
      unless (_purpose = @purpose).nil?
        return false if !_purpose.valid?
      end

      true
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] originator_client_id Object to be assigned
    def originator_client_id=(new_value : String?)
      raise ArgumentError.new("\"originator_client_id\" is required and cannot be null") if new_value.nil?
      unless new_value.nil?
      end

      @originator_client_id = new_value
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] file Object to be assigned
    def file=(new_value : ::File?)
      raise ArgumentError.new("\"file\" is required and cannot be null") if new_value.nil?
      unless new_value.nil?
      end

      @file = new_value
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] purpose Object to be assigned
    def purpose=(new_value : Plaid::TransferDocumentPurpose?)
      raise ArgumentError.new("\"purpose\" is required and cannot be null") if new_value.nil?
      unless new_value.nil?
        new_value.validate
      end

      @purpose = new_value
    end

    # Generates #hash and #== methods from all fields
    # #== @return [Bool]
    # #hash calculates hash code according to all attributes.
    # #hash @return [UInt64] Hash code
    def_equals_and_hash(@originator_client_id, @file, @purpose)
  end
end
