#  The Plaid API
#
# The Plaid REST API. Please see https://plaid.com/docs/api for more details.
#
# The version of the OpenAPI document: 2020-09-14_1.474.3
#
# Generated by: https://openapi-generator.tech
#

require "../../core"

module Plaid
  # Account and bank identifier number data used to configure the test account. All values are optional.
  class Numbers
    include JSON::Serializable
    include JSON::Serializable::Unmapped
    include OpenApi::Validatable
    include OpenApi::Json

    # Optional Properties

    # Will be used for the account number.
    @[JSON::Field(key: "account", type: String?, default: nil, required: false, nullable: false, emit_null: false)]
    getter account : String? = nil

    # Must be a valid ACH routing number.
    @[JSON::Field(key: "ach_routing", type: String?, default: nil, required: false, nullable: false, emit_null: false)]
    getter ach_routing : String? = nil

    # Must be a valid wire transfer routing number.
    @[JSON::Field(key: "ach_wire_routing", type: String?, default: nil, required: false, nullable: false, emit_null: false)]
    getter ach_wire_routing : String? = nil

    # EFT institution number. Must be specified alongside `eft_branch`.
    @[JSON::Field(key: "eft_institution", type: String?, default: nil, required: false, nullable: false, emit_null: false)]
    getter eft_institution : String? = nil

    # EFT branch number. Must be specified alongside `eft_institution`.
    @[JSON::Field(key: "eft_branch", type: String?, default: nil, required: false, nullable: false, emit_null: false)]
    getter eft_branch : String? = nil

    # Bank identifier code (BIC). Must be specified alongside `international_iban`.
    @[JSON::Field(key: "international_bic", type: String?, default: nil, required: false, nullable: false, emit_null: false)]
    getter international_bic : String? = nil

    # International bank account number (IBAN). If no account number is specified via `account`, will also be used as the account number by default. Must be specified alongside `international_bic`.
    @[JSON::Field(key: "international_iban", type: String?, default: nil, required: false, nullable: false, emit_null: false)]
    getter international_iban : String? = nil

    # BACS sort code
    @[JSON::Field(key: "bacs_sort_code", type: String?, default: nil, required: false, nullable: false, emit_null: false)]
    getter bacs_sort_code : String? = nil

    # Initializes the object
    # @param [Hash] attributes Model attributes in the form of hash
    def initialize(
      *,
      # Optional properties
      @account : String? = nil,
      @ach_routing : String? = nil,
      @ach_wire_routing : String? = nil,
      @eft_institution : String? = nil,
      @eft_branch : String? = nil,
      @international_bic : String? = nil,
      @international_iban : String? = nil,
      @bacs_sort_code : String? = nil
    )
    end

    # Show invalid properties with the reasons. Usually used together with valid?
    # @return Array for valid properties with the reasons
    def list_invalid_properties : Array(String)
      invalid_properties = Array(String).new

      unless (_account = @account).nil?
      end
      unless (_ach_routing = @ach_routing).nil?
      end
      unless (_ach_wire_routing = @ach_wire_routing).nil?
      end
      unless (_eft_institution = @eft_institution).nil?
      end
      unless (_eft_branch = @eft_branch).nil?
      end
      unless (_international_bic = @international_bic).nil?
      end
      unless (_international_iban = @international_iban).nil?
      end
      unless (_bacs_sort_code = @bacs_sort_code).nil?
      end
      invalid_properties
    end

    # Check to see if the all the properties in the model are valid
    # @return true if the model is valid
    def valid? : Bool
      unless (_account = @account).nil?
      end

      unless (_ach_routing = @ach_routing).nil?
      end

      unless (_ach_wire_routing = @ach_wire_routing).nil?
      end

      unless (_eft_institution = @eft_institution).nil?
      end

      unless (_eft_branch = @eft_branch).nil?
      end

      unless (_international_bic = @international_bic).nil?
      end

      unless (_international_iban = @international_iban).nil?
      end

      unless (_bacs_sort_code = @bacs_sort_code).nil?
      end

      true
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] account Object to be assigned
    def account=(new_value : String?)
      unless new_value.nil?
      end

      @account = new_value
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] ach_routing Object to be assigned
    def ach_routing=(new_value : String?)
      unless new_value.nil?
      end

      @ach_routing = new_value
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] ach_wire_routing Object to be assigned
    def ach_wire_routing=(new_value : String?)
      unless new_value.nil?
      end

      @ach_wire_routing = new_value
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] eft_institution Object to be assigned
    def eft_institution=(new_value : String?)
      unless new_value.nil?
      end

      @eft_institution = new_value
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] eft_branch Object to be assigned
    def eft_branch=(new_value : String?)
      unless new_value.nil?
      end

      @eft_branch = new_value
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] international_bic Object to be assigned
    def international_bic=(new_value : String?)
      unless new_value.nil?
      end

      @international_bic = new_value
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] international_iban Object to be assigned
    def international_iban=(new_value : String?)
      unless new_value.nil?
      end

      @international_iban = new_value
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] bacs_sort_code Object to be assigned
    def bacs_sort_code=(new_value : String?)
      unless new_value.nil?
      end

      @bacs_sort_code = new_value
    end

    # Generates #hash and #== methods from all fields
    # #== @return [Bool]
    # #hash calculates hash code according to all attributes.
    # #hash @return [UInt64] Hash code
    def_equals_and_hash(@account, @ach_routing, @ach_wire_routing, @eft_institution, @eft_branch, @international_bic, @international_iban, @bacs_sort_code)
  end
end
