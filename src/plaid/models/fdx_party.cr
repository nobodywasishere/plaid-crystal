#  The Plaid API
#
# The Plaid REST API. Please see https://plaid.com/docs/api for more details.
#
# The version of the OpenAPI document: 2020-09-14_1.474.3
#
# Generated by: https://openapi-generator.tech
#

require "../../core"

require "./fdx_party_registry"
require "./fdx_party_type"

module Plaid
  # FDX Participant - an entity or person that is a part of a FDX API transaction
  class FDXParty
    include JSON::Serializable
    include JSON::Serializable::Unmapped
    include OpenApi::Validatable
    include OpenApi::Json

    # Required Properties

    # Human recognizable common name
    @[JSON::Field(key: "name", type: String?, default: nil, required: true, nullable: false, emit_null: false)]
    getter name : String? = nil

    @[JSON::Field(key: "type", type: Plaid::FDXPartyType?, default: nil, required: true, nullable: false, emit_null: false)]
    getter _type : Plaid::FDXPartyType? = nil

    # End of Required Properties

    # Optional Properties

    # URI for party, where an end user could learn more about the company or application involved in the data sharing chain
    @[JSON::Field(key: "homeUri", type: String?, default: nil, required: false, nullable: false, emit_null: false)]
    getter home_uri : String? = nil

    # URI for a logo asset to be displayed to the end user
    @[JSON::Field(key: "logoUri", type: String?, default: nil, required: false, nullable: false, emit_null: false)]
    getter logo_uri : String? = nil

    @[JSON::Field(key: "registry", type: Plaid::FDXPartyRegistry?, default: nil, required: false, nullable: false, emit_null: false)]
    getter registry : Plaid::FDXPartyRegistry? = nil

    # Registered name of party
    @[JSON::Field(key: "registeredEntityName", type: String?, default: nil, required: false, nullable: false, emit_null: false)]
    getter registered_entity_name : String? = nil

    # Registered id of party
    @[JSON::Field(key: "registeredEntityId", type: String?, default: nil, required: false, nullable: false, emit_null: false)]
    getter registered_entity_id : String? = nil

    # Initializes the object
    # @param [Hash] attributes Model attributes in the form of hash
    def initialize(
      *,
      # Required properties
      @name : String? = nil,
      @_type : Plaid::FDXPartyType? = nil,
      # Optional properties
      @home_uri : String? = nil,
      @logo_uri : String? = nil,
      @registry : Plaid::FDXPartyRegistry? = nil,
      @registered_entity_name : String? = nil,
      @registered_entity_id : String? = nil
    )
    end

    # Show invalid properties with the reasons. Usually used together with valid?
    # @return Array for valid properties with the reasons
    def list_invalid_properties : Array(String)
      invalid_properties = Array(String).new

      invalid_properties.push("\"name\" is required and cannot be null") if @name.nil?

      unless (_name = @name).nil?
      end
      invalid_properties.push("\"_type\" is required and cannot be null") if @_type.nil?

      unless (__type = @_type).nil?
        invalid_properties.push(__type.error_message) if !__type.valid?
      end
      unless (_home_uri = @home_uri).nil?
      end
      unless (_logo_uri = @logo_uri).nil?
      end
      unless (_registry = @registry).nil?
        invalid_properties.push(_registry.error_message) if !_registry.valid?
      end
      unless (_registered_entity_name = @registered_entity_name).nil?
      end
      unless (_registered_entity_id = @registered_entity_id).nil?
      end
      invalid_properties
    end

    # Check to see if the all the properties in the model are valid
    # @return true if the model is valid
    def valid? : Bool
      return false if @name.nil?
      unless (_name = @name).nil?
      end

      return false if @_type.nil?
      unless (__type = @_type).nil?
        return false if !__type.valid?
      end

      unless (_home_uri = @home_uri).nil?
      end

      unless (_logo_uri = @logo_uri).nil?
      end

      unless (_registry = @registry).nil?
        return false if !_registry.valid?
      end

      unless (_registered_entity_name = @registered_entity_name).nil?
      end

      unless (_registered_entity_id = @registered_entity_id).nil?
      end

      true
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] name Object to be assigned
    def name=(new_value : String?)
      raise ArgumentError.new("\"name\" is required and cannot be null") if new_value.nil?
      unless new_value.nil?
      end

      @name = new_value
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] _type Object to be assigned
    def _type=(new_value : Plaid::FDXPartyType?)
      raise ArgumentError.new("\"_type\" is required and cannot be null") if new_value.nil?
      unless new_value.nil?
        new_value.validate
      end

      @_type = new_value
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] home_uri Object to be assigned
    def home_uri=(new_value : String?)
      unless new_value.nil?
      end

      @home_uri = new_value
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] logo_uri Object to be assigned
    def logo_uri=(new_value : String?)
      unless new_value.nil?
      end

      @logo_uri = new_value
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] registry Object to be assigned
    def registry=(new_value : Plaid::FDXPartyRegistry?)
      unless new_value.nil?
        new_value.validate
      end

      @registry = new_value
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] registered_entity_name Object to be assigned
    def registered_entity_name=(new_value : String?)
      unless new_value.nil?
      end

      @registered_entity_name = new_value
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] registered_entity_id Object to be assigned
    def registered_entity_id=(new_value : String?)
      unless new_value.nil?
      end

      @registered_entity_id = new_value
    end

    # Generates #hash and #== methods from all fields
    # #== @return [Bool]
    # #hash calculates hash code according to all attributes.
    # #hash @return [UInt64] Hash code
    def_equals_and_hash(@name, @_type, @home_uri, @logo_uri, @registry, @registered_entity_name, @registered_entity_id)
  end
end
