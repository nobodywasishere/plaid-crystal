#  The Plaid API
#
# The Plaid REST API. Please see https://plaid.com/docs/api for more details.
#
# The version of the OpenAPI document: 2020-09-14_1.474.3
#
# Generated by: https://openapi-generator.tech
#

require "../../core"

require "./credit_bank_employer"

module Plaid
  # Detailed information for the bank employment.
  class CreditBankEmployment
    include JSON::Serializable
    include JSON::Serializable::Unmapped
    include OpenApi::Validatable
    include OpenApi::Json

    # Required Properties

    # A unique identifier for the bank employment.
    @[JSON::Field(key: "bank_employment_id", type: String?, default: nil, required: true, nullable: false, emit_null: false)]
    getter bank_employment_id : String? = nil

    # Plaid's unique identifier for the account.
    @[JSON::Field(key: "account_id", type: String?, default: nil, required: true, nullable: false, emit_null: false)]
    getter account_id : String? = nil

    @[JSON::Field(key: "employer", type: Plaid::CreditBankEmployer?, default: nil, required: true, nullable: false, emit_null: false)]
    getter employer : Plaid::CreditBankEmployer? = nil

    # The date of the most recent deposit from this employer.
    @[JSON::Field(key: "latest_deposit_date", type: Time?, default: nil, required: true, nullable: false, emit_null: false, converter: Time::ISO8601DateConverter)]
    getter latest_deposit_date : Time? = nil

    # The date of the earliest deposit from this employer from within the period of the days requested.
    @[JSON::Field(key: "earliest_deposit_date", type: Time?, default: nil, required: true, nullable: false, emit_null: false, converter: Time::ISO8601DateConverter)]
    getter earliest_deposit_date : Time? = nil

    # End of Required Properties

    # Initializes the object
    # @param [Hash] attributes Model attributes in the form of hash
    def initialize(
      *,
      # Required properties
      @bank_employment_id : String? = nil,
      @account_id : String? = nil,
      @employer : Plaid::CreditBankEmployer? = nil,
      @latest_deposit_date : Time? = nil,
      @earliest_deposit_date : Time? = nil
    )
    end

    # Show invalid properties with the reasons. Usually used together with valid?
    # @return Array for valid properties with the reasons
    def list_invalid_properties : Array(String)
      invalid_properties = Array(String).new

      invalid_properties.push("\"bank_employment_id\" is required and cannot be null") if @bank_employment_id.nil?

      unless (_bank_employment_id = @bank_employment_id).nil?
      end
      invalid_properties.push("\"account_id\" is required and cannot be null") if @account_id.nil?

      unless (_account_id = @account_id).nil?
      end
      invalid_properties.push("\"employer\" is required and cannot be null") if @employer.nil?

      unless (_employer = @employer).nil?
        invalid_properties.concat(_employer.list_invalid_properties_for("employer")) if _employer.is_a?(OpenApi::Validatable)
      end
      invalid_properties.push("\"latest_deposit_date\" is required and cannot be null") if @latest_deposit_date.nil?

      unless (_latest_deposit_date = @latest_deposit_date).nil?
      end
      invalid_properties.push("\"earliest_deposit_date\" is required and cannot be null") if @earliest_deposit_date.nil?

      unless (_earliest_deposit_date = @earliest_deposit_date).nil?
      end
      invalid_properties
    end

    # Check to see if the all the properties in the model are valid
    # @return true if the model is valid
    def valid? : Bool
      return false if @bank_employment_id.nil?
      unless (_bank_employment_id = @bank_employment_id).nil?
      end

      return false if @account_id.nil?
      unless (_account_id = @account_id).nil?
      end

      return false if @employer.nil?
      unless (_employer = @employer).nil?
        return false if _employer.is_a?(OpenApi::Validatable) && !_employer.valid?
      end

      return false if @latest_deposit_date.nil?
      unless (_latest_deposit_date = @latest_deposit_date).nil?
      end

      return false if @earliest_deposit_date.nil?
      unless (_earliest_deposit_date = @earliest_deposit_date).nil?
      end

      true
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] bank_employment_id Object to be assigned
    def bank_employment_id=(new_value : String?)
      raise ArgumentError.new("\"bank_employment_id\" is required and cannot be null") if new_value.nil?
      unless new_value.nil?
      end

      @bank_employment_id = new_value
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] account_id Object to be assigned
    def account_id=(new_value : String?)
      raise ArgumentError.new("\"account_id\" is required and cannot be null") if new_value.nil?
      unless new_value.nil?
      end

      @account_id = new_value
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] employer Object to be assigned
    def employer=(new_value : Plaid::CreditBankEmployer?)
      raise ArgumentError.new("\"employer\" is required and cannot be null") if new_value.nil?
      unless new_value.nil?
        new_value.validate if new_value.is_a?(OpenApi::Validatable)
      end

      @employer = new_value
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] latest_deposit_date Object to be assigned
    def latest_deposit_date=(new_value : Time?)
      raise ArgumentError.new("\"latest_deposit_date\" is required and cannot be null") if new_value.nil?
      unless new_value.nil?
      end

      @latest_deposit_date = new_value
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] earliest_deposit_date Object to be assigned
    def earliest_deposit_date=(new_value : Time?)
      raise ArgumentError.new("\"earliest_deposit_date\" is required and cannot be null") if new_value.nil?
      unless new_value.nil?
      end

      @earliest_deposit_date = new_value
    end

    # Generates #hash and #== methods from all fields
    # #== @return [Bool]
    # #hash calculates hash code according to all attributes.
    # #hash @return [UInt64] Hash code
    def_equals_and_hash(@bank_employment_id, @account_id, @employer, @latest_deposit_date, @earliest_deposit_date)
  end
end
