#  The Plaid API
#
# The Plaid REST API. Please see https://plaid.com/docs/api for more details.
#
# The version of the OpenAPI document: 2020-09-14_1.474.3
#
# Generated by: https://openapi-generator.tech
#

require "../../core"

require "./identity_verification_document_address_response"
require "./physical_document_category"

module Plaid
  # Data extracted from a user-submitted document.
  class PhysicalDocumentExtractedData
    include JSON::Serializable
    include JSON::Serializable::Unmapped
    include OpenApi::Validatable
    include OpenApi::Json

    # Required Properties

    # Alpha-numeric ID number extracted via OCR from the user's document image.
    @[JSON::Field(key: "id_number", type: String?, default: nil, required: true, nullable: true, emit_null: true)]
    getter id_number : String? = nil

    @[JSON::Field(key: "category", type: Plaid::PhysicalDocumentCategory?, default: nil, required: true, nullable: false, emit_null: false)]
    getter category : Plaid::PhysicalDocumentCategory? = nil

    # A date in the format YYYY-MM-DD (RFC 3339 Section 5.6).
    @[JSON::Field(key: "expiration_date", type: Time?, default: nil, required: true, nullable: true, emit_null: true, converter: Time::ISO8601DateConverter)]
    getter expiration_date : Time? = nil

    # Valid, capitalized, two-letter ISO code representing the country of this object. Must be in ISO 3166-1 alpha-2 form.
    @[JSON::Field(key: "issuing_country", type: String?, default: nil, required: true, nullable: false, emit_null: false)]
    getter issuing_country : String? = nil
    MIN_LENGTH_FOR_ISSUING_COUNTRY = 2

    # An ISO 3166-2 subdivision code. Related terms would be \"state\", \"province\", \"prefecture\", \"zone\", \"subdivision\", etc.
    @[JSON::Field(key: "issuing_region", type: String?, default: nil, required: true, nullable: true, emit_null: true)]
    getter issuing_region : String? = nil

    # A date extracted from the document in the format YYYY-MM-DD (RFC 3339 Section 5.6).
    @[JSON::Field(key: "date_of_birth", type: Time?, default: nil, required: true, nullable: true, emit_null: true, converter: Time::ISO8601DateConverter)]
    getter date_of_birth : Time? = nil

    @[JSON::Field(key: "address", type: IdentityVerificationDocumentAddressResponse?, default: nil, required: true, nullable: true, emit_null: true)]
    getter address : IdentityVerificationDocumentAddressResponse? = nil

    # End of Required Properties

    # Initializes the object
    # @param [Hash] attributes Model attributes in the form of hash
    def initialize(
      *,
      # Required properties
      @id_number : String? = nil,
      @category : Plaid::PhysicalDocumentCategory? = nil,
      @expiration_date : Time? = nil,
      @issuing_country : String? = nil,
      @issuing_region : String? = nil,
      @date_of_birth : Time? = nil,
      @address : IdentityVerificationDocumentAddressResponse? = nil
    )
    end

    # Show invalid properties with the reasons. Usually used together with valid?
    # @return Array for valid properties with the reasons
    def list_invalid_properties : Array(String)
      invalid_properties = Array(String).new

      unless (_id_number = @id_number).nil?
      end
      invalid_properties.push("\"category\" is required and cannot be null") if @category.nil?

      unless (_category = @category).nil?
        invalid_properties.push(_category.error_message) if !_category.valid?
      end
      unless (_expiration_date = @expiration_date).nil?
      end
      invalid_properties.push("\"issuing_country\" is required and cannot be null") if @issuing_country.nil?

      unless (_issuing_country = @issuing_country).nil?
        if min_length_error = OpenApi::PrimitiveValidator.min_length_error("issuing_country", _issuing_country.to_s.size, MIN_LENGTH_FOR_ISSUING_COUNTRY)
          invalid_properties.push(min_length_error)
        end
      end
      unless (_issuing_region = @issuing_region).nil?
      end
      unless (_date_of_birth = @date_of_birth).nil?
      end
      unless (_address = @address).nil?
      end
      invalid_properties
    end

    # Check to see if the all the properties in the model are valid
    # @return true if the model is valid
    def valid? : Bool
      unless (_id_number = @id_number).nil?
      end

      return false if @category.nil?
      unless (_category = @category).nil?
        return false if !_category.valid?
      end

      unless (_expiration_date = @expiration_date).nil?
      end

      return false if @issuing_country.nil?
      unless (_issuing_country = @issuing_country).nil?
        return false if _issuing_country.to_s.size < MIN_LENGTH_FOR_ISSUING_COUNTRY
      end

      unless (_issuing_region = @issuing_region).nil?
      end

      unless (_date_of_birth = @date_of_birth).nil?
      end

      unless (_address = @address).nil?
      end

      true
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] id_number Object to be assigned
    def id_number=(new_value : String?)
      unless new_value.nil?
      end

      @id_number = new_value
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] category Object to be assigned
    def category=(new_value : Plaid::PhysicalDocumentCategory?)
      raise ArgumentError.new("\"category\" is required and cannot be null") if new_value.nil?
      unless new_value.nil?
        new_value.validate
      end

      @category = new_value
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] expiration_date Object to be assigned
    def expiration_date=(new_value : Time?)
      unless new_value.nil?
      end

      @expiration_date = new_value
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] issuing_country Object to be assigned
    def issuing_country=(new_value : String?)
      raise ArgumentError.new("\"issuing_country\" is required and cannot be null") if new_value.nil?
      unless new_value.nil?
        OpenApi::PrimitiveValidator.validate_min_length("issuing_country", new_value.to_s.size, MIN_LENGTH_FOR_ISSUING_COUNTRY)
      end

      @issuing_country = new_value
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] issuing_region Object to be assigned
    def issuing_region=(new_value : String?)
      unless new_value.nil?
      end

      @issuing_region = new_value
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] date_of_birth Object to be assigned
    def date_of_birth=(new_value : Time?)
      unless new_value.nil?
      end

      @date_of_birth = new_value
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] address Object to be assigned
    def address=(new_value : IdentityVerificationDocumentAddressResponse?)
      unless new_value.nil?
      end

      @address = new_value
    end

    # Generates #hash and #== methods from all fields
    # #== @return [Bool]
    # #hash calculates hash code according to all attributes.
    # #hash @return [UInt64] Hash code
    def_equals_and_hash(@id_number, @category, @expiration_date, @issuing_country, @issuing_region, @date_of_birth, @address)
  end
end
