#  The Plaid API
#
# The Plaid REST API. Please see https://plaid.com/docs/api for more details.
#
# The version of the OpenAPI document: 2020-09-14_1.474.3
#
# Generated by: https://openapi-generator.tech
#

require "../../core"

require "./apr"

module Plaid
  # An object representing a credit card account.
  class CreditCardLiability
    include JSON::Serializable
    include JSON::Serializable::Unmapped
    include OpenApi::Validatable
    include OpenApi::Json

    # Required Properties

    # The ID of the account that this liability belongs to.
    @[JSON::Field(key: "account_id", type: String?, default: nil, required: true, nullable: true, emit_null: true)]
    getter account_id : String? = nil

    # The various interest rates that apply to the account. APR information is not provided by all card issuers; if APR data is not available, this array will be empty.
    @[JSON::Field(key: "aprs", type: Array(APR)?, default: nil, required: true, nullable: false, emit_null: false)]
    getter aprs : Array(APR)? = nil

    # true if a payment is currently overdue. Availability for this field is limited.
    @[JSON::Field(key: "is_overdue", type: Bool?, default: nil, required: true, nullable: true, emit_null: true)]
    getter is_overdue : Bool? = nil

    # The amount of the last payment.
    @[JSON::Field(key: "last_payment_amount", type: Float64?, default: nil, required: true, nullable: true, emit_null: true)]
    getter last_payment_amount : Float64? = nil

    # The date of the last payment. Dates are returned in an [ISO 8601](https://wikipedia.org/wiki/ISO_8601) format (YYYY-MM-DD). Availability for this field is limited.
    @[JSON::Field(key: "last_payment_date", type: Time?, default: nil, required: true, nullable: true, emit_null: true, converter: Time::ISO8601DateConverter)]
    getter last_payment_date : Time? = nil

    # The date of the last statement. Dates are returned in an [ISO 8601](https://wikipedia.org/wiki/ISO_8601) format (YYYY-MM-DD).
    @[JSON::Field(key: "last_statement_issue_date", type: Time?, default: nil, required: true, nullable: true, emit_null: true, converter: Time::ISO8601DateConverter)]
    getter last_statement_issue_date : Time? = nil

    # The total amount owed as of the last statement issued
    @[JSON::Field(key: "last_statement_balance", type: Float64?, default: nil, required: true, nullable: true, emit_null: true)]
    getter last_statement_balance : Float64? = nil

    # The minimum payment due for the next billing cycle.
    @[JSON::Field(key: "minimum_payment_amount", type: Float64?, default: nil, required: true, nullable: true, emit_null: true)]
    getter minimum_payment_amount : Float64? = nil

    # The due date for the next payment. The due date is `null` if a payment is not expected. Dates are returned in an [ISO 8601](https://wikipedia.org/wiki/ISO_8601) format (YYYY-MM-DD).
    @[JSON::Field(key: "next_payment_due_date", type: Time?, default: nil, required: true, nullable: true, emit_null: true, converter: Time::ISO8601DateConverter)]
    getter next_payment_due_date : Time? = nil

    # End of Required Properties

    # Initializes the object
    # @param [Hash] attributes Model attributes in the form of hash
    def initialize(
      *,
      # Required properties
      @account_id : String? = nil,
      @aprs : Array(APR)? = nil,
      @is_overdue : Bool? = nil,
      @last_payment_amount : Float64? = nil,
      @last_payment_date : Time? = nil,
      @last_statement_issue_date : Time? = nil,
      @last_statement_balance : Float64? = nil,
      @minimum_payment_amount : Float64? = nil,
      @next_payment_due_date : Time? = nil
    )
    end

    # Show invalid properties with the reasons. Usually used together with valid?
    # @return Array for valid properties with the reasons
    def list_invalid_properties : Array(String)
      invalid_properties = Array(String).new

      unless (_account_id = @account_id).nil?
      end
      invalid_properties.push("\"aprs\" is required and cannot be null") if @aprs.nil?

      unless (_aprs = @aprs).nil?
      end
      unless (_is_overdue = @is_overdue).nil?
      end
      unless (_last_payment_amount = @last_payment_amount).nil?
      end
      unless (_last_payment_date = @last_payment_date).nil?
      end
      unless (_last_statement_issue_date = @last_statement_issue_date).nil?
      end
      unless (_last_statement_balance = @last_statement_balance).nil?
      end
      unless (_minimum_payment_amount = @minimum_payment_amount).nil?
      end
      unless (_next_payment_due_date = @next_payment_due_date).nil?
      end
      invalid_properties
    end

    # Check to see if the all the properties in the model are valid
    # @return true if the model is valid
    def valid? : Bool
      unless (_account_id = @account_id).nil?
      end

      return false if @aprs.nil?
      unless (_aprs = @aprs).nil?
      end

      unless (_is_overdue = @is_overdue).nil?
      end

      unless (_last_payment_amount = @last_payment_amount).nil?
      end

      unless (_last_payment_date = @last_payment_date).nil?
      end

      unless (_last_statement_issue_date = @last_statement_issue_date).nil?
      end

      unless (_last_statement_balance = @last_statement_balance).nil?
      end

      unless (_minimum_payment_amount = @minimum_payment_amount).nil?
      end

      unless (_next_payment_due_date = @next_payment_due_date).nil?
      end

      true
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] account_id Object to be assigned
    def account_id=(new_value : String?)
      unless new_value.nil?
      end

      @account_id = new_value
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] aprs Object to be assigned
    def aprs=(new_value : Array(APR)?)
      raise ArgumentError.new("\"aprs\" is required and cannot be null") if new_value.nil?
      unless new_value.nil?
      end

      @aprs = new_value
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] is_overdue Object to be assigned
    def is_overdue=(new_value : Bool?)
      unless new_value.nil?
      end

      @is_overdue = new_value
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] last_payment_amount Object to be assigned
    def last_payment_amount=(new_value : Float64?)
      unless new_value.nil?
      end

      @last_payment_amount = new_value
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] last_payment_date Object to be assigned
    def last_payment_date=(new_value : Time?)
      unless new_value.nil?
      end

      @last_payment_date = new_value
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] last_statement_issue_date Object to be assigned
    def last_statement_issue_date=(new_value : Time?)
      unless new_value.nil?
      end

      @last_statement_issue_date = new_value
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] last_statement_balance Object to be assigned
    def last_statement_balance=(new_value : Float64?)
      unless new_value.nil?
      end

      @last_statement_balance = new_value
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] minimum_payment_amount Object to be assigned
    def minimum_payment_amount=(new_value : Float64?)
      unless new_value.nil?
      end

      @minimum_payment_amount = new_value
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] next_payment_due_date Object to be assigned
    def next_payment_due_date=(new_value : Time?)
      unless new_value.nil?
      end

      @next_payment_due_date = new_value
    end

    # Generates #hash and #== methods from all fields
    # #== @return [Bool]
    # #hash calculates hash code according to all attributes.
    # #hash @return [UInt64] Hash code
    def_equals_and_hash(@account_id, @aprs, @is_overdue, @last_payment_amount, @last_payment_date, @last_statement_issue_date, @last_statement_balance, @minimum_payment_amount, @next_payment_due_date)
  end
end
