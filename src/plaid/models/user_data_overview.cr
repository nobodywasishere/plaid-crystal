#  The Plaid API
#
# The Plaid REST API. Please see https://plaid.com/docs/api for more details.
#
# The version of the OpenAPI document: 2020-09-14_1.474.3
#
# Generated by: https://openapi-generator.tech
#

require "../../core"

module Plaid
  # metadata for the set of insights provided in `TransactionsUserInsightsGetResponse`
  class UserDataOverview
    include JSON::Serializable
    include JSON::Serializable::Unmapped
    include OpenApi::Validatable
    include OpenApi::Json

    # Required Properties

    # The total number of transactions.
    @[JSON::Field(key: "transaction_count", type: Int32?, default: nil, required: true, nullable: false, emit_null: false)]
    getter transaction_count : Int32? = nil

    # The range of days of transactions available.
    @[JSON::Field(key: "days_available", type: Int32?, default: nil, required: true, nullable: false, emit_null: false)]
    getter days_available : Int32? = nil

    # Sum of outflow amounts.
    @[JSON::Field(key: "total_outflows", type: Float64?, default: nil, required: true, nullable: false, emit_null: false)]
    getter total_outflows : Float64? = nil

    # Sum of inflow amounts.
    @[JSON::Field(key: "total_inflows", type: Float64?, default: nil, required: true, nullable: false, emit_null: false)]
    getter total_inflows : Float64? = nil

    # End of Required Properties

    # Optional Properties

    # The date of the oldest transaction processed to generate insights.
    @[JSON::Field(key: "oldest_transaction_date", type: Time?, default: nil, required: false, nullable: false, emit_null: false, converter: Time::ISO8601DateConverter)]
    getter oldest_transaction_date : Time? = nil

    # The date of the newest transaction processed to generate insights.
    @[JSON::Field(key: "newest_transaction_date", type: Time?, default: nil, required: false, nullable: false, emit_null: false, converter: Time::ISO8601DateConverter)]
    getter newest_transaction_date : Time? = nil

    # Initializes the object
    # @param [Hash] attributes Model attributes in the form of hash
    def initialize(
      *,
      # Required properties
      @transaction_count : Int32? = nil,
      @days_available : Int32? = nil,
      @total_outflows : Float64? = nil,
      @total_inflows : Float64? = nil,
      # Optional properties
      @oldest_transaction_date : Time? = nil,
      @newest_transaction_date : Time? = nil
    )
    end

    # Show invalid properties with the reasons. Usually used together with valid?
    # @return Array for valid properties with the reasons
    def list_invalid_properties : Array(String)
      invalid_properties = Array(String).new

      invalid_properties.push("\"transaction_count\" is required and cannot be null") if @transaction_count.nil?

      unless (_transaction_count = @transaction_count).nil?
      end
      invalid_properties.push("\"days_available\" is required and cannot be null") if @days_available.nil?

      unless (_days_available = @days_available).nil?
      end
      invalid_properties.push("\"total_outflows\" is required and cannot be null") if @total_outflows.nil?

      unless (_total_outflows = @total_outflows).nil?
      end
      invalid_properties.push("\"total_inflows\" is required and cannot be null") if @total_inflows.nil?

      unless (_total_inflows = @total_inflows).nil?
      end
      unless (_oldest_transaction_date = @oldest_transaction_date).nil?
      end
      unless (_newest_transaction_date = @newest_transaction_date).nil?
      end
      invalid_properties
    end

    # Check to see if the all the properties in the model are valid
    # @return true if the model is valid
    def valid? : Bool
      return false if @transaction_count.nil?
      unless (_transaction_count = @transaction_count).nil?
      end

      return false if @days_available.nil?
      unless (_days_available = @days_available).nil?
      end

      return false if @total_outflows.nil?
      unless (_total_outflows = @total_outflows).nil?
      end

      return false if @total_inflows.nil?
      unless (_total_inflows = @total_inflows).nil?
      end

      unless (_oldest_transaction_date = @oldest_transaction_date).nil?
      end

      unless (_newest_transaction_date = @newest_transaction_date).nil?
      end

      true
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] transaction_count Object to be assigned
    def transaction_count=(new_value : Int32?)
      raise ArgumentError.new("\"transaction_count\" is required and cannot be null") if new_value.nil?
      unless new_value.nil?
      end

      @transaction_count = new_value
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] days_available Object to be assigned
    def days_available=(new_value : Int32?)
      raise ArgumentError.new("\"days_available\" is required and cannot be null") if new_value.nil?
      unless new_value.nil?
      end

      @days_available = new_value
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] total_outflows Object to be assigned
    def total_outflows=(new_value : Float64?)
      raise ArgumentError.new("\"total_outflows\" is required and cannot be null") if new_value.nil?
      unless new_value.nil?
      end

      @total_outflows = new_value
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] total_inflows Object to be assigned
    def total_inflows=(new_value : Float64?)
      raise ArgumentError.new("\"total_inflows\" is required and cannot be null") if new_value.nil?
      unless new_value.nil?
      end

      @total_inflows = new_value
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] oldest_transaction_date Object to be assigned
    def oldest_transaction_date=(new_value : Time?)
      unless new_value.nil?
      end

      @oldest_transaction_date = new_value
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] newest_transaction_date Object to be assigned
    def newest_transaction_date=(new_value : Time?)
      unless new_value.nil?
      end

      @newest_transaction_date = new_value
    end

    # Generates #hash and #== methods from all fields
    # #== @return [Bool]
    # #hash calculates hash code according to all attributes.
    # #hash @return [UInt64] Hash code
    def_equals_and_hash(@transaction_count, @days_available, @total_outflows, @total_inflows, @oldest_transaction_date, @newest_transaction_date)
  end
end
