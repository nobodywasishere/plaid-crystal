#  The Plaid API
#
# The Plaid REST API. Please see https://plaid.com/docs/api for more details.
#
# The version of the OpenAPI document: 2020-09-14_1.474.3
#
# Generated by: https://openapi-generator.tech
#

require "../../core"

require "./credit1099_filer"
require "./credit1099_payer"
require "./credit1099_recipient"
require "./credit_document_metadata"
require "./form1099_type"

module Plaid
  # An object representing an end user's 1099 tax form
  class Credit1099
    include JSON::Serializable
    include JSON::Serializable::Unmapped
    include OpenApi::Validatable
    include OpenApi::Json

    # Required Properties

    # An identifier of the document referenced by the document metadata.
    @[JSON::Field(key: "document_id", type: String?, default: nil, required: true, nullable: true, emit_null: true)]
    getter document_id : String? = nil

    # End of Required Properties

    # Optional Properties

    @[JSON::Field(key: "document_metadata", type: CreditDocumentMetadata?, default: nil, required: false, nullable: false, emit_null: false)]
    getter document_metadata : CreditDocumentMetadata? = nil

    @[JSON::Field(key: "form_1099_type", type: Plaid::Form1099Type?, default: nil, required: false, nullable: false, emit_null: false)]
    getter form_1099_type : Plaid::Form1099Type? = nil

    @[JSON::Field(key: "recipient", type: Credit1099Recipient?, default: nil, required: false, nullable: false, emit_null: false)]
    getter recipient : Credit1099Recipient? = nil

    @[JSON::Field(key: "payer", type: Credit1099Payer?, default: nil, required: false, nullable: false, emit_null: false)]
    getter payer : Credit1099Payer? = nil

    @[JSON::Field(key: "filer", type: Credit1099Filer?, default: nil, required: false, nullable: false, emit_null: false)]
    getter filer : Credit1099Filer? = nil

    # Tax year of the tax form.
    @[JSON::Field(key: "tax_year", type: String?, default: nil, required: false, nullable: true, emit_null: true, presence: true, ignore_serialize: tax_year.nil? && !tax_year_present?)]
    getter tax_year : String? = nil

    @[JSON::Field(ignore: true)]
    property? tax_year_present : Bool = false

    # Amount in rent by payer.
    @[JSON::Field(key: "rents", type: Float64?, default: nil, required: false, nullable: true, emit_null: true, presence: true, ignore_serialize: rents.nil? && !rents_present?)]
    getter rents : Float64? = nil

    @[JSON::Field(ignore: true)]
    property? rents_present : Bool = false

    # Amount in royalties by payer.
    @[JSON::Field(key: "royalties", type: Float64?, default: nil, required: false, nullable: true, emit_null: true, presence: true, ignore_serialize: royalties.nil? && !royalties_present?)]
    getter royalties : Float64? = nil

    @[JSON::Field(ignore: true)]
    property? royalties_present : Bool = false

    # Amount in other income by payer.
    @[JSON::Field(key: "other_income", type: Float64?, default: nil, required: false, nullable: true, emit_null: true, presence: true, ignore_serialize: other_income.nil? && !other_income_present?)]
    getter other_income : Float64? = nil

    @[JSON::Field(ignore: true)]
    property? other_income_present : Bool = false

    # Amount of federal income tax withheld from payer.
    @[JSON::Field(key: "federal_income_tax_withheld", type: Float64?, default: nil, required: false, nullable: true, emit_null: true, presence: true, ignore_serialize: federal_income_tax_withheld.nil? && !federal_income_tax_withheld_present?)]
    getter federal_income_tax_withheld : Float64? = nil

    @[JSON::Field(ignore: true)]
    property? federal_income_tax_withheld_present : Bool = false

    # Amount of fishing boat proceeds from payer.
    @[JSON::Field(key: "fishing_boat_proceeds", type: Float64?, default: nil, required: false, nullable: true, emit_null: true, presence: true, ignore_serialize: fishing_boat_proceeds.nil? && !fishing_boat_proceeds_present?)]
    getter fishing_boat_proceeds : Float64? = nil

    @[JSON::Field(ignore: true)]
    property? fishing_boat_proceeds_present : Bool = false

    # Amount of medical and healthcare payments from payer.
    @[JSON::Field(key: "medical_and_healthcare_payments", type: Float64?, default: nil, required: false, nullable: true, emit_null: true, presence: true, ignore_serialize: medical_and_healthcare_payments.nil? && !medical_and_healthcare_payments_present?)]
    getter medical_and_healthcare_payments : Float64? = nil

    @[JSON::Field(ignore: true)]
    property? medical_and_healthcare_payments_present : Bool = false

    # Amount of nonemployee compensation from payer.
    @[JSON::Field(key: "nonemployee_compensation", type: Float64?, default: nil, required: false, nullable: true, emit_null: true, presence: true, ignore_serialize: nonemployee_compensation.nil? && !nonemployee_compensation_present?)]
    getter nonemployee_compensation : Float64? = nil

    @[JSON::Field(ignore: true)]
    property? nonemployee_compensation_present : Bool = false

    # Amount of substitute payments made by payer.
    @[JSON::Field(key: "substitute_payments_in_lieu_of_dividends_or_interest", type: Float64?, default: nil, required: false, nullable: true, emit_null: true, presence: true, ignore_serialize: substitute_payments_in_lieu_of_dividends_or_interest.nil? && !substitute_payments_in_lieu_of_dividends_or_interest_present?)]
    getter substitute_payments_in_lieu_of_dividends_or_interest : Float64? = nil

    @[JSON::Field(ignore: true)]
    property? substitute_payments_in_lieu_of_dividends_or_interest_present : Bool = false

    # Whether or not payer made direct sales over $5000 of consumer products.
    @[JSON::Field(key: "payer_made_direct_sales_of_5000_or_more_of_consumer_products_to_buyer", type: String?, default: nil, required: false, nullable: true, emit_null: true, presence: true, ignore_serialize: payer_made_direct_sales_of_5000_or_more_of_consumer_products_to_buyer.nil? && !payer_made_direct_sales_of_5000_or_more_of_consumer_products_to_buyer_present?)]
    getter payer_made_direct_sales_of_5000_or_more_of_consumer_products_to_buyer : String? = nil

    @[JSON::Field(ignore: true)]
    property? payer_made_direct_sales_of_5000_or_more_of_consumer_products_to_buyer_present : Bool = false

    # Amount of crop insurance proceeds.
    @[JSON::Field(key: "crop_insurance_proceeds", type: Float64?, default: nil, required: false, nullable: true, emit_null: true, presence: true, ignore_serialize: crop_insurance_proceeds.nil? && !crop_insurance_proceeds_present?)]
    getter crop_insurance_proceeds : Float64? = nil

    @[JSON::Field(ignore: true)]
    property? crop_insurance_proceeds_present : Bool = false

    # Amount of golden parachute payments made by payer.
    @[JSON::Field(key: "excess_golden_parachute_payments", type: Float64?, default: nil, required: false, nullable: true, emit_null: true, presence: true, ignore_serialize: excess_golden_parachute_payments.nil? && !excess_golden_parachute_payments_present?)]
    getter excess_golden_parachute_payments : Float64? = nil

    @[JSON::Field(ignore: true)]
    property? excess_golden_parachute_payments_present : Bool = false

    # Amount of gross proceeds paid to an attorney by payer.
    @[JSON::Field(key: "gross_proceeds_paid_to_an_attorney", type: Float64?, default: nil, required: false, nullable: true, emit_null: true, presence: true, ignore_serialize: gross_proceeds_paid_to_an_attorney.nil? && !gross_proceeds_paid_to_an_attorney_present?)]
    getter gross_proceeds_paid_to_an_attorney : Float64? = nil

    @[JSON::Field(ignore: true)]
    property? gross_proceeds_paid_to_an_attorney_present : Bool = false

    # Amount of 409A deferrals earned by payer.
    @[JSON::Field(key: "section_409a_deferrals", type: Float64?, default: nil, required: false, nullable: true, emit_null: true, presence: true, ignore_serialize: section_409a_deferrals.nil? && !section_409a_deferrals_present?)]
    getter section_409a_deferrals : Float64? = nil

    @[JSON::Field(ignore: true)]
    property? section_409a_deferrals_present : Bool = false

    # Amount of 409A income earned by payer.
    @[JSON::Field(key: "section_409a_income", type: Float64?, default: nil, required: false, nullable: true, emit_null: true, presence: true, ignore_serialize: section_409a_income.nil? && !section_409a_income_present?)]
    getter section_409a_income : Float64? = nil

    @[JSON::Field(ignore: true)]
    property? section_409a_income_present : Bool = false

    # Amount of state tax withheld of payer for primary state.
    @[JSON::Field(key: "state_tax_withheld", type: Float64?, default: nil, required: false, nullable: true, emit_null: true, presence: true, ignore_serialize: state_tax_withheld.nil? && !state_tax_withheld_present?)]
    getter state_tax_withheld : Float64? = nil

    @[JSON::Field(ignore: true)]
    property? state_tax_withheld_present : Bool = false

    # Amount of state tax withheld of payer for secondary state.
    @[JSON::Field(key: "state_tax_withheld_lower", type: Float64?, default: nil, required: false, nullable: true, emit_null: true, presence: true, ignore_serialize: state_tax_withheld_lower.nil? && !state_tax_withheld_lower_present?)]
    getter state_tax_withheld_lower : Float64? = nil

    @[JSON::Field(ignore: true)]
    property? state_tax_withheld_lower_present : Bool = false

    # Primary state ID.
    @[JSON::Field(key: "payer_state_number", type: String?, default: nil, required: false, nullable: true, emit_null: true, presence: true, ignore_serialize: payer_state_number.nil? && !payer_state_number_present?)]
    getter payer_state_number : String? = nil

    @[JSON::Field(ignore: true)]
    property? payer_state_number_present : Bool = false

    # Secondary state ID.
    @[JSON::Field(key: "payer_state_number_lower", type: String?, default: nil, required: false, nullable: true, emit_null: true, presence: true, ignore_serialize: payer_state_number_lower.nil? && !payer_state_number_lower_present?)]
    getter payer_state_number_lower : String? = nil

    @[JSON::Field(ignore: true)]
    property? payer_state_number_lower_present : Bool = false

    # State income reported for primary state.
    @[JSON::Field(key: "state_income", type: Float64?, default: nil, required: false, nullable: true, emit_null: true, presence: true, ignore_serialize: state_income.nil? && !state_income_present?)]
    getter state_income : Float64? = nil

    @[JSON::Field(ignore: true)]
    property? state_income_present : Bool = false

    # State income reported for secondary state.
    @[JSON::Field(key: "state_income_lower", type: Float64?, default: nil, required: false, nullable: true, emit_null: true, presence: true, ignore_serialize: state_income_lower.nil? && !state_income_lower_present?)]
    getter state_income_lower : Float64? = nil

    @[JSON::Field(ignore: true)]
    property? state_income_lower_present : Bool = false

    # One of the values will be provided Payment card Third party network
    @[JSON::Field(key: "transactions_reported", type: String?, default: nil, required: false, nullable: true, emit_null: true, presence: true, ignore_serialize: transactions_reported.nil? && !transactions_reported_present?)]
    getter transactions_reported : String? = nil

    @[JSON::Field(ignore: true)]
    property? transactions_reported_present : Bool = false

    # Name of the PSE (Payment Settlement Entity).
    @[JSON::Field(key: "pse_name", type: String?, default: nil, required: false, nullable: true, emit_null: true, presence: true, ignore_serialize: pse_name.nil? && !pse_name_present?)]
    getter pse_name : String? = nil

    @[JSON::Field(ignore: true)]
    property? pse_name_present : Bool = false

    # Formatted (XXX) XXX-XXXX. Phone number of the PSE (Payment Settlement Entity).
    @[JSON::Field(key: "pse_telephone_number", type: String?, default: nil, required: false, nullable: true, emit_null: true, presence: true, ignore_serialize: pse_telephone_number.nil? && !pse_telephone_number_present?)]
    getter pse_telephone_number : String? = nil

    @[JSON::Field(ignore: true)]
    property? pse_telephone_number_present : Bool = false

    # Gross amount reported.
    @[JSON::Field(key: "gross_amount", type: Float64?, default: nil, required: false, nullable: true, emit_null: true, presence: true, ignore_serialize: gross_amount.nil? && !gross_amount_present?)]
    getter gross_amount : Float64? = nil

    @[JSON::Field(ignore: true)]
    property? gross_amount_present : Bool = false

    # Amount in card not present transactions.
    @[JSON::Field(key: "card_not_present_transaction", type: Float64?, default: nil, required: false, nullable: true, emit_null: true, presence: true, ignore_serialize: card_not_present_transaction.nil? && !card_not_present_transaction_present?)]
    getter card_not_present_transaction : Float64? = nil

    @[JSON::Field(ignore: true)]
    property? card_not_present_transaction_present : Bool = false

    # Merchant category of filer.
    @[JSON::Field(key: "merchant_category_code", type: String?, default: nil, required: false, nullable: true, emit_null: true, presence: true, ignore_serialize: merchant_category_code.nil? && !merchant_category_code_present?)]
    getter merchant_category_code : String? = nil

    @[JSON::Field(ignore: true)]
    property? merchant_category_code_present : Bool = false

    # Number of payment transactions made.
    @[JSON::Field(key: "number_of_payment_transactions", type: String?, default: nil, required: false, nullable: true, emit_null: true, presence: true, ignore_serialize: number_of_payment_transactions.nil? && !number_of_payment_transactions_present?)]
    getter number_of_payment_transactions : String? = nil

    @[JSON::Field(ignore: true)]
    property? number_of_payment_transactions_present : Bool = false

    # Amount reported for January.
    @[JSON::Field(key: "january_amount", type: Float64?, default: nil, required: false, nullable: true, emit_null: true, presence: true, ignore_serialize: january_amount.nil? && !january_amount_present?)]
    getter january_amount : Float64? = nil

    @[JSON::Field(ignore: true)]
    property? january_amount_present : Bool = false

    # Amount reported for February.
    @[JSON::Field(key: "february_amount", type: Float64?, default: nil, required: false, nullable: true, emit_null: true, presence: true, ignore_serialize: february_amount.nil? && !february_amount_present?)]
    getter february_amount : Float64? = nil

    @[JSON::Field(ignore: true)]
    property? february_amount_present : Bool = false

    # Amount reported for March.
    @[JSON::Field(key: "march_amount", type: Float64?, default: nil, required: false, nullable: true, emit_null: true, presence: true, ignore_serialize: march_amount.nil? && !march_amount_present?)]
    getter march_amount : Float64? = nil

    @[JSON::Field(ignore: true)]
    property? march_amount_present : Bool = false

    # Amount reported for April.
    @[JSON::Field(key: "april_amount", type: Float64?, default: nil, required: false, nullable: true, emit_null: true, presence: true, ignore_serialize: april_amount.nil? && !april_amount_present?)]
    getter april_amount : Float64? = nil

    @[JSON::Field(ignore: true)]
    property? april_amount_present : Bool = false

    # Amount reported for May.
    @[JSON::Field(key: "may_amount", type: Float64?, default: nil, required: false, nullable: true, emit_null: true, presence: true, ignore_serialize: may_amount.nil? && !may_amount_present?)]
    getter may_amount : Float64? = nil

    @[JSON::Field(ignore: true)]
    property? may_amount_present : Bool = false

    # Amount reported for June.
    @[JSON::Field(key: "june_amount", type: Float64?, default: nil, required: false, nullable: true, emit_null: true, presence: true, ignore_serialize: june_amount.nil? && !june_amount_present?)]
    getter june_amount : Float64? = nil

    @[JSON::Field(ignore: true)]
    property? june_amount_present : Bool = false

    # Amount reported for July.
    @[JSON::Field(key: "july_amount", type: Float64?, default: nil, required: false, nullable: true, emit_null: true, presence: true, ignore_serialize: july_amount.nil? && !july_amount_present?)]
    getter july_amount : Float64? = nil

    @[JSON::Field(ignore: true)]
    property? july_amount_present : Bool = false

    # Amount reported for August.
    @[JSON::Field(key: "august_amount", type: Float64?, default: nil, required: false, nullable: true, emit_null: true, presence: true, ignore_serialize: august_amount.nil? && !august_amount_present?)]
    getter august_amount : Float64? = nil

    @[JSON::Field(ignore: true)]
    property? august_amount_present : Bool = false

    # Amount reported for September.
    @[JSON::Field(key: "september_amount", type: Float64?, default: nil, required: false, nullable: true, emit_null: true, presence: true, ignore_serialize: september_amount.nil? && !september_amount_present?)]
    getter september_amount : Float64? = nil

    @[JSON::Field(ignore: true)]
    property? september_amount_present : Bool = false

    # Amount reported for October.
    @[JSON::Field(key: "october_amount", type: Float64?, default: nil, required: false, nullable: true, emit_null: true, presence: true, ignore_serialize: october_amount.nil? && !october_amount_present?)]
    getter october_amount : Float64? = nil

    @[JSON::Field(ignore: true)]
    property? october_amount_present : Bool = false

    # Amount reported for November.
    @[JSON::Field(key: "november_amount", type: Float64?, default: nil, required: false, nullable: true, emit_null: true, presence: true, ignore_serialize: november_amount.nil? && !november_amount_present?)]
    getter november_amount : Float64? = nil

    @[JSON::Field(ignore: true)]
    property? november_amount_present : Bool = false

    # Amount reported for December.
    @[JSON::Field(key: "december_amount", type: Float64?, default: nil, required: false, nullable: true, emit_null: true, presence: true, ignore_serialize: december_amount.nil? && !december_amount_present?)]
    getter december_amount : Float64? = nil

    @[JSON::Field(ignore: true)]
    property? december_amount_present : Bool = false

    # Primary state of business.
    @[JSON::Field(key: "primary_state", type: String?, default: nil, required: false, nullable: true, emit_null: true, presence: true, ignore_serialize: primary_state.nil? && !primary_state_present?)]
    getter primary_state : String? = nil

    @[JSON::Field(ignore: true)]
    property? primary_state_present : Bool = false

    # Secondary state of business.
    @[JSON::Field(key: "secondary_state", type: String?, default: nil, required: false, nullable: true, emit_null: true, presence: true, ignore_serialize: secondary_state.nil? && !secondary_state_present?)]
    getter secondary_state : String? = nil

    @[JSON::Field(ignore: true)]
    property? secondary_state_present : Bool = false

    # Primary state ID.
    @[JSON::Field(key: "primary_state_id", type: String?, default: nil, required: false, nullable: true, emit_null: true, presence: true, ignore_serialize: primary_state_id.nil? && !primary_state_id_present?)]
    getter primary_state_id : String? = nil

    @[JSON::Field(ignore: true)]
    property? primary_state_id_present : Bool = false

    # Secondary state ID.
    @[JSON::Field(key: "secondary_state_id", type: String?, default: nil, required: false, nullable: true, emit_null: true, presence: true, ignore_serialize: secondary_state_id.nil? && !secondary_state_id_present?)]
    getter secondary_state_id : String? = nil

    @[JSON::Field(ignore: true)]
    property? secondary_state_id_present : Bool = false

    # State income tax reported for primary state.
    @[JSON::Field(key: "primary_state_income_tax", type: Float64?, default: nil, required: false, nullable: true, emit_null: true, presence: true, ignore_serialize: primary_state_income_tax.nil? && !primary_state_income_tax_present?)]
    getter primary_state_income_tax : Float64? = nil

    @[JSON::Field(ignore: true)]
    property? primary_state_income_tax_present : Bool = false

    # State income tax reported for secondary state.
    @[JSON::Field(key: "secondary_state_income_tax", type: Float64?, default: nil, required: false, nullable: true, emit_null: true, presence: true, ignore_serialize: secondary_state_income_tax.nil? && !secondary_state_income_tax_present?)]
    getter secondary_state_income_tax : Float64? = nil

    @[JSON::Field(ignore: true)]
    property? secondary_state_income_tax_present : Bool = false

    # Initializes the object
    # @param [Hash] attributes Model attributes in the form of hash
    def initialize(
      *,
      # Required properties
      @document_id : String? = nil,
      # Optional properties
      @document_metadata : CreditDocumentMetadata? = nil,
      @form_1099_type : Plaid::Form1099Type? = nil,
      @recipient : Credit1099Recipient? = nil,
      @payer : Credit1099Payer? = nil,
      @filer : Credit1099Filer? = nil,
      @tax_year : String? = nil,
      @rents : Float64? = nil,
      @royalties : Float64? = nil,
      @other_income : Float64? = nil,
      @federal_income_tax_withheld : Float64? = nil,
      @fishing_boat_proceeds : Float64? = nil,
      @medical_and_healthcare_payments : Float64? = nil,
      @nonemployee_compensation : Float64? = nil,
      @substitute_payments_in_lieu_of_dividends_or_interest : Float64? = nil,
      @payer_made_direct_sales_of_5000_or_more_of_consumer_products_to_buyer : String? = nil,
      @crop_insurance_proceeds : Float64? = nil,
      @excess_golden_parachute_payments : Float64? = nil,
      @gross_proceeds_paid_to_an_attorney : Float64? = nil,
      @section_409a_deferrals : Float64? = nil,
      @section_409a_income : Float64? = nil,
      @state_tax_withheld : Float64? = nil,
      @state_tax_withheld_lower : Float64? = nil,
      @payer_state_number : String? = nil,
      @payer_state_number_lower : String? = nil,
      @state_income : Float64? = nil,
      @state_income_lower : Float64? = nil,
      @transactions_reported : String? = nil,
      @pse_name : String? = nil,
      @pse_telephone_number : String? = nil,
      @gross_amount : Float64? = nil,
      @card_not_present_transaction : Float64? = nil,
      @merchant_category_code : String? = nil,
      @number_of_payment_transactions : String? = nil,
      @january_amount : Float64? = nil,
      @february_amount : Float64? = nil,
      @march_amount : Float64? = nil,
      @april_amount : Float64? = nil,
      @may_amount : Float64? = nil,
      @june_amount : Float64? = nil,
      @july_amount : Float64? = nil,
      @august_amount : Float64? = nil,
      @september_amount : Float64? = nil,
      @october_amount : Float64? = nil,
      @november_amount : Float64? = nil,
      @december_amount : Float64? = nil,
      @primary_state : String? = nil,
      @secondary_state : String? = nil,
      @primary_state_id : String? = nil,
      @secondary_state_id : String? = nil,
      @primary_state_income_tax : Float64? = nil,
      @secondary_state_income_tax : Float64? = nil
    )
    end

    # Show invalid properties with the reasons. Usually used together with valid?
    # @return Array for valid properties with the reasons
    def list_invalid_properties : Array(String)
      invalid_properties = Array(String).new

      unless (_document_id = @document_id).nil?
      end
      unless (_document_metadata = @document_metadata).nil?
      end
      unless (_form_1099_type = @form_1099_type).nil?
        invalid_properties.push(_form_1099_type.error_message) if !_form_1099_type.valid?
      end
      unless (_recipient = @recipient).nil?
      end
      unless (_payer = @payer).nil?
      end
      unless (_filer = @filer).nil?
      end
      unless (_tax_year = @tax_year).nil?
      end
      unless (_rents = @rents).nil?
      end
      unless (_royalties = @royalties).nil?
      end
      unless (_other_income = @other_income).nil?
      end
      unless (_federal_income_tax_withheld = @federal_income_tax_withheld).nil?
      end
      unless (_fishing_boat_proceeds = @fishing_boat_proceeds).nil?
      end
      unless (_medical_and_healthcare_payments = @medical_and_healthcare_payments).nil?
      end
      unless (_nonemployee_compensation = @nonemployee_compensation).nil?
      end
      unless (_substitute_payments_in_lieu_of_dividends_or_interest = @substitute_payments_in_lieu_of_dividends_or_interest).nil?
      end
      unless (_payer_made_direct_sales_of_5000_or_more_of_consumer_products_to_buyer = @payer_made_direct_sales_of_5000_or_more_of_consumer_products_to_buyer).nil?
      end
      unless (_crop_insurance_proceeds = @crop_insurance_proceeds).nil?
      end
      unless (_excess_golden_parachute_payments = @excess_golden_parachute_payments).nil?
      end
      unless (_gross_proceeds_paid_to_an_attorney = @gross_proceeds_paid_to_an_attorney).nil?
      end
      unless (_section_409a_deferrals = @section_409a_deferrals).nil?
      end
      unless (_section_409a_income = @section_409a_income).nil?
      end
      unless (_state_tax_withheld = @state_tax_withheld).nil?
      end
      unless (_state_tax_withheld_lower = @state_tax_withheld_lower).nil?
      end
      unless (_payer_state_number = @payer_state_number).nil?
      end
      unless (_payer_state_number_lower = @payer_state_number_lower).nil?
      end
      unless (_state_income = @state_income).nil?
      end
      unless (_state_income_lower = @state_income_lower).nil?
      end
      unless (_transactions_reported = @transactions_reported).nil?
      end
      unless (_pse_name = @pse_name).nil?
      end
      unless (_pse_telephone_number = @pse_telephone_number).nil?
      end
      unless (_gross_amount = @gross_amount).nil?
      end
      unless (_card_not_present_transaction = @card_not_present_transaction).nil?
      end
      unless (_merchant_category_code = @merchant_category_code).nil?
      end
      unless (_number_of_payment_transactions = @number_of_payment_transactions).nil?
      end
      unless (_january_amount = @january_amount).nil?
      end
      unless (_february_amount = @february_amount).nil?
      end
      unless (_march_amount = @march_amount).nil?
      end
      unless (_april_amount = @april_amount).nil?
      end
      unless (_may_amount = @may_amount).nil?
      end
      unless (_june_amount = @june_amount).nil?
      end
      unless (_july_amount = @july_amount).nil?
      end
      unless (_august_amount = @august_amount).nil?
      end
      unless (_september_amount = @september_amount).nil?
      end
      unless (_october_amount = @october_amount).nil?
      end
      unless (_november_amount = @november_amount).nil?
      end
      unless (_december_amount = @december_amount).nil?
      end
      unless (_primary_state = @primary_state).nil?
      end
      unless (_secondary_state = @secondary_state).nil?
      end
      unless (_primary_state_id = @primary_state_id).nil?
      end
      unless (_secondary_state_id = @secondary_state_id).nil?
      end
      unless (_primary_state_income_tax = @primary_state_income_tax).nil?
      end
      unless (_secondary_state_income_tax = @secondary_state_income_tax).nil?
      end
      invalid_properties
    end

    # Check to see if the all the properties in the model are valid
    # @return true if the model is valid
    def valid? : Bool
      unless (_document_id = @document_id).nil?
      end

      unless (_document_metadata = @document_metadata).nil?
      end

      unless (_form_1099_type = @form_1099_type).nil?
        return false if !_form_1099_type.valid?
      end

      unless (_recipient = @recipient).nil?
      end

      unless (_payer = @payer).nil?
      end

      unless (_filer = @filer).nil?
      end

      unless (_tax_year = @tax_year).nil?
      end

      unless (_rents = @rents).nil?
      end

      unless (_royalties = @royalties).nil?
      end

      unless (_other_income = @other_income).nil?
      end

      unless (_federal_income_tax_withheld = @federal_income_tax_withheld).nil?
      end

      unless (_fishing_boat_proceeds = @fishing_boat_proceeds).nil?
      end

      unless (_medical_and_healthcare_payments = @medical_and_healthcare_payments).nil?
      end

      unless (_nonemployee_compensation = @nonemployee_compensation).nil?
      end

      unless (_substitute_payments_in_lieu_of_dividends_or_interest = @substitute_payments_in_lieu_of_dividends_or_interest).nil?
      end

      unless (_payer_made_direct_sales_of_5000_or_more_of_consumer_products_to_buyer = @payer_made_direct_sales_of_5000_or_more_of_consumer_products_to_buyer).nil?
      end

      unless (_crop_insurance_proceeds = @crop_insurance_proceeds).nil?
      end

      unless (_excess_golden_parachute_payments = @excess_golden_parachute_payments).nil?
      end

      unless (_gross_proceeds_paid_to_an_attorney = @gross_proceeds_paid_to_an_attorney).nil?
      end

      unless (_section_409a_deferrals = @section_409a_deferrals).nil?
      end

      unless (_section_409a_income = @section_409a_income).nil?
      end

      unless (_state_tax_withheld = @state_tax_withheld).nil?
      end

      unless (_state_tax_withheld_lower = @state_tax_withheld_lower).nil?
      end

      unless (_payer_state_number = @payer_state_number).nil?
      end

      unless (_payer_state_number_lower = @payer_state_number_lower).nil?
      end

      unless (_state_income = @state_income).nil?
      end

      unless (_state_income_lower = @state_income_lower).nil?
      end

      unless (_transactions_reported = @transactions_reported).nil?
      end

      unless (_pse_name = @pse_name).nil?
      end

      unless (_pse_telephone_number = @pse_telephone_number).nil?
      end

      unless (_gross_amount = @gross_amount).nil?
      end

      unless (_card_not_present_transaction = @card_not_present_transaction).nil?
      end

      unless (_merchant_category_code = @merchant_category_code).nil?
      end

      unless (_number_of_payment_transactions = @number_of_payment_transactions).nil?
      end

      unless (_january_amount = @january_amount).nil?
      end

      unless (_february_amount = @february_amount).nil?
      end

      unless (_march_amount = @march_amount).nil?
      end

      unless (_april_amount = @april_amount).nil?
      end

      unless (_may_amount = @may_amount).nil?
      end

      unless (_june_amount = @june_amount).nil?
      end

      unless (_july_amount = @july_amount).nil?
      end

      unless (_august_amount = @august_amount).nil?
      end

      unless (_september_amount = @september_amount).nil?
      end

      unless (_october_amount = @october_amount).nil?
      end

      unless (_november_amount = @november_amount).nil?
      end

      unless (_december_amount = @december_amount).nil?
      end

      unless (_primary_state = @primary_state).nil?
      end

      unless (_secondary_state = @secondary_state).nil?
      end

      unless (_primary_state_id = @primary_state_id).nil?
      end

      unless (_secondary_state_id = @secondary_state_id).nil?
      end

      unless (_primary_state_income_tax = @primary_state_income_tax).nil?
      end

      unless (_secondary_state_income_tax = @secondary_state_income_tax).nil?
      end

      true
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] document_id Object to be assigned
    def document_id=(new_value : String?)
      unless new_value.nil?
      end

      @document_id = new_value
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] document_metadata Object to be assigned
    def document_metadata=(new_value : CreditDocumentMetadata?)
      unless new_value.nil?
      end

      @document_metadata = new_value
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] form_1099_type Object to be assigned
    def form_1099_type=(new_value : Plaid::Form1099Type?)
      unless new_value.nil?
        new_value.validate
      end

      @form_1099_type = new_value
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] recipient Object to be assigned
    def recipient=(new_value : Credit1099Recipient?)
      unless new_value.nil?
      end

      @recipient = new_value
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] payer Object to be assigned
    def payer=(new_value : Credit1099Payer?)
      unless new_value.nil?
      end

      @payer = new_value
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] filer Object to be assigned
    def filer=(new_value : Credit1099Filer?)
      unless new_value.nil?
      end

      @filer = new_value
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] tax_year Object to be assigned
    def tax_year=(new_value : String?)
      unless new_value.nil?
      end

      @tax_year = new_value
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] rents Object to be assigned
    def rents=(new_value : Float64?)
      unless new_value.nil?
      end

      @rents = new_value
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] royalties Object to be assigned
    def royalties=(new_value : Float64?)
      unless new_value.nil?
      end

      @royalties = new_value
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] other_income Object to be assigned
    def other_income=(new_value : Float64?)
      unless new_value.nil?
      end

      @other_income = new_value
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] federal_income_tax_withheld Object to be assigned
    def federal_income_tax_withheld=(new_value : Float64?)
      unless new_value.nil?
      end

      @federal_income_tax_withheld = new_value
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] fishing_boat_proceeds Object to be assigned
    def fishing_boat_proceeds=(new_value : Float64?)
      unless new_value.nil?
      end

      @fishing_boat_proceeds = new_value
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] medical_and_healthcare_payments Object to be assigned
    def medical_and_healthcare_payments=(new_value : Float64?)
      unless new_value.nil?
      end

      @medical_and_healthcare_payments = new_value
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] nonemployee_compensation Object to be assigned
    def nonemployee_compensation=(new_value : Float64?)
      unless new_value.nil?
      end

      @nonemployee_compensation = new_value
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] substitute_payments_in_lieu_of_dividends_or_interest Object to be assigned
    def substitute_payments_in_lieu_of_dividends_or_interest=(new_value : Float64?)
      unless new_value.nil?
      end

      @substitute_payments_in_lieu_of_dividends_or_interest = new_value
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] payer_made_direct_sales_of_5000_or_more_of_consumer_products_to_buyer Object to be assigned
    def payer_made_direct_sales_of_5000_or_more_of_consumer_products_to_buyer=(new_value : String?)
      unless new_value.nil?
      end

      @payer_made_direct_sales_of_5000_or_more_of_consumer_products_to_buyer = new_value
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] crop_insurance_proceeds Object to be assigned
    def crop_insurance_proceeds=(new_value : Float64?)
      unless new_value.nil?
      end

      @crop_insurance_proceeds = new_value
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] excess_golden_parachute_payments Object to be assigned
    def excess_golden_parachute_payments=(new_value : Float64?)
      unless new_value.nil?
      end

      @excess_golden_parachute_payments = new_value
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] gross_proceeds_paid_to_an_attorney Object to be assigned
    def gross_proceeds_paid_to_an_attorney=(new_value : Float64?)
      unless new_value.nil?
      end

      @gross_proceeds_paid_to_an_attorney = new_value
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] section_409a_deferrals Object to be assigned
    def section_409a_deferrals=(new_value : Float64?)
      unless new_value.nil?
      end

      @section_409a_deferrals = new_value
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] section_409a_income Object to be assigned
    def section_409a_income=(new_value : Float64?)
      unless new_value.nil?
      end

      @section_409a_income = new_value
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] state_tax_withheld Object to be assigned
    def state_tax_withheld=(new_value : Float64?)
      unless new_value.nil?
      end

      @state_tax_withheld = new_value
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] state_tax_withheld_lower Object to be assigned
    def state_tax_withheld_lower=(new_value : Float64?)
      unless new_value.nil?
      end

      @state_tax_withheld_lower = new_value
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] payer_state_number Object to be assigned
    def payer_state_number=(new_value : String?)
      unless new_value.nil?
      end

      @payer_state_number = new_value
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] payer_state_number_lower Object to be assigned
    def payer_state_number_lower=(new_value : String?)
      unless new_value.nil?
      end

      @payer_state_number_lower = new_value
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] state_income Object to be assigned
    def state_income=(new_value : Float64?)
      unless new_value.nil?
      end

      @state_income = new_value
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] state_income_lower Object to be assigned
    def state_income_lower=(new_value : Float64?)
      unless new_value.nil?
      end

      @state_income_lower = new_value
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] transactions_reported Object to be assigned
    def transactions_reported=(new_value : String?)
      unless new_value.nil?
      end

      @transactions_reported = new_value
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] pse_name Object to be assigned
    def pse_name=(new_value : String?)
      unless new_value.nil?
      end

      @pse_name = new_value
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] pse_telephone_number Object to be assigned
    def pse_telephone_number=(new_value : String?)
      unless new_value.nil?
      end

      @pse_telephone_number = new_value
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] gross_amount Object to be assigned
    def gross_amount=(new_value : Float64?)
      unless new_value.nil?
      end

      @gross_amount = new_value
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] card_not_present_transaction Object to be assigned
    def card_not_present_transaction=(new_value : Float64?)
      unless new_value.nil?
      end

      @card_not_present_transaction = new_value
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] merchant_category_code Object to be assigned
    def merchant_category_code=(new_value : String?)
      unless new_value.nil?
      end

      @merchant_category_code = new_value
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] number_of_payment_transactions Object to be assigned
    def number_of_payment_transactions=(new_value : String?)
      unless new_value.nil?
      end

      @number_of_payment_transactions = new_value
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] january_amount Object to be assigned
    def january_amount=(new_value : Float64?)
      unless new_value.nil?
      end

      @january_amount = new_value
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] february_amount Object to be assigned
    def february_amount=(new_value : Float64?)
      unless new_value.nil?
      end

      @february_amount = new_value
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] march_amount Object to be assigned
    def march_amount=(new_value : Float64?)
      unless new_value.nil?
      end

      @march_amount = new_value
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] april_amount Object to be assigned
    def april_amount=(new_value : Float64?)
      unless new_value.nil?
      end

      @april_amount = new_value
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] may_amount Object to be assigned
    def may_amount=(new_value : Float64?)
      unless new_value.nil?
      end

      @may_amount = new_value
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] june_amount Object to be assigned
    def june_amount=(new_value : Float64?)
      unless new_value.nil?
      end

      @june_amount = new_value
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] july_amount Object to be assigned
    def july_amount=(new_value : Float64?)
      unless new_value.nil?
      end

      @july_amount = new_value
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] august_amount Object to be assigned
    def august_amount=(new_value : Float64?)
      unless new_value.nil?
      end

      @august_amount = new_value
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] september_amount Object to be assigned
    def september_amount=(new_value : Float64?)
      unless new_value.nil?
      end

      @september_amount = new_value
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] october_amount Object to be assigned
    def october_amount=(new_value : Float64?)
      unless new_value.nil?
      end

      @october_amount = new_value
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] november_amount Object to be assigned
    def november_amount=(new_value : Float64?)
      unless new_value.nil?
      end

      @november_amount = new_value
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] december_amount Object to be assigned
    def december_amount=(new_value : Float64?)
      unless new_value.nil?
      end

      @december_amount = new_value
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] primary_state Object to be assigned
    def primary_state=(new_value : String?)
      unless new_value.nil?
      end

      @primary_state = new_value
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] secondary_state Object to be assigned
    def secondary_state=(new_value : String?)
      unless new_value.nil?
      end

      @secondary_state = new_value
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] primary_state_id Object to be assigned
    def primary_state_id=(new_value : String?)
      unless new_value.nil?
      end

      @primary_state_id = new_value
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] secondary_state_id Object to be assigned
    def secondary_state_id=(new_value : String?)
      unless new_value.nil?
      end

      @secondary_state_id = new_value
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] primary_state_income_tax Object to be assigned
    def primary_state_income_tax=(new_value : Float64?)
      unless new_value.nil?
      end

      @primary_state_income_tax = new_value
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] secondary_state_income_tax Object to be assigned
    def secondary_state_income_tax=(new_value : Float64?)
      unless new_value.nil?
      end

      @secondary_state_income_tax = new_value
    end

    # Generates #hash and #== methods from all fields
    # #== @return [Bool]
    # #hash calculates hash code according to all attributes.
    # #hash @return [UInt64] Hash code
    def_equals_and_hash(@document_id, @document_metadata, @form_1099_type, @recipient, @payer, @filer, @tax_year, @tax_year_present, @rents, @rents_present, @royalties, @royalties_present, @other_income, @other_income_present, @federal_income_tax_withheld, @federal_income_tax_withheld_present, @fishing_boat_proceeds, @fishing_boat_proceeds_present, @medical_and_healthcare_payments, @medical_and_healthcare_payments_present, @nonemployee_compensation, @nonemployee_compensation_present, @substitute_payments_in_lieu_of_dividends_or_interest, @substitute_payments_in_lieu_of_dividends_or_interest_present, @payer_made_direct_sales_of_5000_or_more_of_consumer_products_to_buyer, @payer_made_direct_sales_of_5000_or_more_of_consumer_products_to_buyer_present, @crop_insurance_proceeds, @crop_insurance_proceeds_present, @excess_golden_parachute_payments, @excess_golden_parachute_payments_present, @gross_proceeds_paid_to_an_attorney, @gross_proceeds_paid_to_an_attorney_present, @section_409a_deferrals, @section_409a_deferrals_present, @section_409a_income, @section_409a_income_present, @state_tax_withheld, @state_tax_withheld_present, @state_tax_withheld_lower, @state_tax_withheld_lower_present, @payer_state_number, @payer_state_number_present, @payer_state_number_lower, @payer_state_number_lower_present, @state_income, @state_income_present, @state_income_lower, @state_income_lower_present, @transactions_reported, @transactions_reported_present, @pse_name, @pse_name_present, @pse_telephone_number, @pse_telephone_number_present, @gross_amount, @gross_amount_present, @card_not_present_transaction, @card_not_present_transaction_present, @merchant_category_code, @merchant_category_code_present, @number_of_payment_transactions, @number_of_payment_transactions_present, @january_amount, @january_amount_present, @february_amount, @february_amount_present, @march_amount, @march_amount_present, @april_amount, @april_amount_present, @may_amount, @may_amount_present, @june_amount, @june_amount_present, @july_amount, @july_amount_present, @august_amount, @august_amount_present, @september_amount, @september_amount_present, @october_amount, @october_amount_present, @november_amount, @november_amount_present, @december_amount, @december_amount_present, @primary_state, @primary_state_present, @secondary_state, @secondary_state_present, @primary_state_id, @primary_state_id_present, @secondary_state_id, @secondary_state_id_present, @primary_state_income_tax, @primary_state_income_tax_present, @secondary_state_income_tax, @secondary_state_income_tax_present)
  end
end
