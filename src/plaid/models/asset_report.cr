#  The Plaid API
#
# The Plaid REST API. Please see https://plaid.com/docs/api for more details.
#
# The version of the OpenAPI document: 2020-09-14_1.474.3
#
# Generated by: https://openapi-generator.tech
#

require "../../core"

require "./asset_report_item"
require "./asset_report_user"

module Plaid
  # An object representing an Asset Report
  class AssetReport
    include JSON::Serializable
    include JSON::Serializable::Unmapped
    include OpenApi::Validatable
    include OpenApi::Json

    # Required Properties

    # A unique ID identifying an Asset Report. Like all Plaid identifiers, this ID is case sensitive.
    @[JSON::Field(key: "asset_report_id", type: String?, default: nil, required: true, nullable: false, emit_null: false)]
    getter asset_report_id : String? = nil

    # An identifier you determine and submit for the Asset Report.
    @[JSON::Field(key: "client_report_id", type: String?, default: nil, required: true, nullable: true, emit_null: true)]
    getter client_report_id : String? = nil

    # The date and time when the Asset Report was created, in [ISO 8601](https://wikipedia.org/wiki/ISO_8601) format (e.g. \"2018-04-12T03:32:11Z\").
    @[JSON::Field(key: "date_generated", type: Time?, default: nil, required: true, nullable: false, emit_null: false, converter: Time::RFC3339Converter)]
    getter date_generated : Time? = nil

    # The duration of transaction history you requested
    @[JSON::Field(key: "days_requested", type: Float64?, default: nil, required: true, nullable: false, emit_null: false)]
    getter days_requested : Float64? = nil

    @[JSON::Field(key: "user", type: AssetReportUser?, default: nil, required: true, nullable: false, emit_null: false)]
    getter user : AssetReportUser? = nil

    # Data returned by Plaid about each of the Items included in the Asset Report.
    @[JSON::Field(key: "items", type: Array(AssetReportItem)?, default: nil, required: true, nullable: false, emit_null: false)]
    getter items : Array(AssetReportItem)? = nil

    # End of Required Properties

    # Initializes the object
    # @param [Hash] attributes Model attributes in the form of hash
    def initialize(
      *,
      # Required properties
      @asset_report_id : String? = nil,
      @client_report_id : String? = nil,
      @date_generated : Time? = nil,
      @days_requested : Float64? = nil,
      @user : AssetReportUser? = nil,
      @items : Array(AssetReportItem)? = nil
    )
    end

    # Show invalid properties with the reasons. Usually used together with valid?
    # @return Array for valid properties with the reasons
    def list_invalid_properties : Array(String)
      invalid_properties = Array(String).new

      invalid_properties.push("\"asset_report_id\" is required and cannot be null") if @asset_report_id.nil?

      unless (_asset_report_id = @asset_report_id).nil?
      end
      unless (_client_report_id = @client_report_id).nil?
      end
      invalid_properties.push("\"date_generated\" is required and cannot be null") if @date_generated.nil?

      unless (_date_generated = @date_generated).nil?
      end
      invalid_properties.push("\"days_requested\" is required and cannot be null") if @days_requested.nil?

      unless (_days_requested = @days_requested).nil?
      end
      invalid_properties.push("\"user\" is required and cannot be null") if @user.nil?

      unless (_user = @user).nil?
      end
      invalid_properties.push("\"items\" is required and cannot be null") if @items.nil?

      unless (_items = @items).nil?
      end
      invalid_properties
    end

    # Check to see if the all the properties in the model are valid
    # @return true if the model is valid
    def valid? : Bool
      return false if @asset_report_id.nil?
      unless (_asset_report_id = @asset_report_id).nil?
      end

      unless (_client_report_id = @client_report_id).nil?
      end

      return false if @date_generated.nil?
      unless (_date_generated = @date_generated).nil?
      end

      return false if @days_requested.nil?
      unless (_days_requested = @days_requested).nil?
      end

      return false if @user.nil?
      unless (_user = @user).nil?
      end

      return false if @items.nil?
      unless (_items = @items).nil?
      end

      true
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] asset_report_id Object to be assigned
    def asset_report_id=(new_value : String?)
      raise ArgumentError.new("\"asset_report_id\" is required and cannot be null") if new_value.nil?
      unless new_value.nil?
      end

      @asset_report_id = new_value
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] client_report_id Object to be assigned
    def client_report_id=(new_value : String?)
      unless new_value.nil?
      end

      @client_report_id = new_value
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] date_generated Object to be assigned
    def date_generated=(new_value : Time?)
      raise ArgumentError.new("\"date_generated\" is required and cannot be null") if new_value.nil?
      unless new_value.nil?
      end

      @date_generated = new_value
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] days_requested Object to be assigned
    def days_requested=(new_value : Float64?)
      raise ArgumentError.new("\"days_requested\" is required and cannot be null") if new_value.nil?
      unless new_value.nil?
      end

      @days_requested = new_value
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] user Object to be assigned
    def user=(new_value : AssetReportUser?)
      raise ArgumentError.new("\"user\" is required and cannot be null") if new_value.nil?
      unless new_value.nil?
      end

      @user = new_value
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] items Object to be assigned
    def items=(new_value : Array(AssetReportItem)?)
      raise ArgumentError.new("\"items\" is required and cannot be null") if new_value.nil?
      unless new_value.nil?
      end

      @items = new_value
    end

    # Generates #hash and #== methods from all fields
    # #== @return [Bool]
    # #hash calculates hash code according to all attributes.
    # #hash @return [UInt64] Hash code
    def_equals_and_hash(@asset_report_id, @client_report_id, @date_generated, @days_requested, @user, @items)
  end
end
