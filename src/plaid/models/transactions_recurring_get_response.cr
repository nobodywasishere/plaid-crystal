#  The Plaid API
#
# The Plaid REST API. Please see https://plaid.com/docs/api for more details.
#
# The version of the OpenAPI document: 2020-09-14_1.474.3
#
# Generated by: https://openapi-generator.tech
#

require "../../core"

require "./transaction_stream"

module Plaid
  # TransactionsRecurringGetResponse defines the response schema for `/transactions/recurring/get`
  class TransactionsRecurringGetResponse
    include JSON::Serializable
    include JSON::Serializable::Unmapped
    include OpenApi::Validatable
    include OpenApi::Json

    # Required Properties

    # An array of depository transaction streams.
    @[JSON::Field(key: "inflow_streams", type: Array(TransactionStream)?, default: nil, required: true, nullable: false, emit_null: false)]
    getter inflow_streams : Array(TransactionStream)? = nil

    # An array of expense transaction streams.
    @[JSON::Field(key: "outflow_streams", type: Array(TransactionStream)?, default: nil, required: true, nullable: false, emit_null: false)]
    getter outflow_streams : Array(TransactionStream)? = nil

    # Timestamp in [ISO 8601](https://wikipedia.org/wiki/ISO_8601) format (`YYYY-MM-DDTHH:mm:ssZ`) indicating the last time transaction streams for the given account were updated on
    @[JSON::Field(key: "updated_datetime", type: Time?, default: nil, required: true, nullable: false, emit_null: false, converter: Time::RFC3339Converter)]
    getter updated_datetime : Time? = nil

    # A unique identifier for the request, which can be used for troubleshooting. This identifier, like all Plaid identifiers, is case sensitive.
    @[JSON::Field(key: "request_id", type: String?, default: nil, required: true, nullable: false, emit_null: false)]
    getter request_id : String? = nil

    # End of Required Properties

    # Initializes the object
    # @param [Hash] attributes Model attributes in the form of hash
    def initialize(
      *,
      # Required properties
      @inflow_streams : Array(TransactionStream)? = nil,
      @outflow_streams : Array(TransactionStream)? = nil,
      @updated_datetime : Time? = nil,
      @request_id : String? = nil
    )
    end

    # Show invalid properties with the reasons. Usually used together with valid?
    # @return Array for valid properties with the reasons
    def list_invalid_properties : Array(String)
      invalid_properties = Array(String).new

      invalid_properties.push("\"inflow_streams\" is required and cannot be null") if @inflow_streams.nil?

      unless (_inflow_streams = @inflow_streams).nil?
      end
      invalid_properties.push("\"outflow_streams\" is required and cannot be null") if @outflow_streams.nil?

      unless (_outflow_streams = @outflow_streams).nil?
      end
      invalid_properties.push("\"updated_datetime\" is required and cannot be null") if @updated_datetime.nil?

      unless (_updated_datetime = @updated_datetime).nil?
      end
      invalid_properties.push("\"request_id\" is required and cannot be null") if @request_id.nil?

      unless (_request_id = @request_id).nil?
      end
      invalid_properties
    end

    # Check to see if the all the properties in the model are valid
    # @return true if the model is valid
    def valid? : Bool
      return false if @inflow_streams.nil?
      unless (_inflow_streams = @inflow_streams).nil?
      end

      return false if @outflow_streams.nil?
      unless (_outflow_streams = @outflow_streams).nil?
      end

      return false if @updated_datetime.nil?
      unless (_updated_datetime = @updated_datetime).nil?
      end

      return false if @request_id.nil?
      unless (_request_id = @request_id).nil?
      end

      true
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] inflow_streams Object to be assigned
    def inflow_streams=(new_value : Array(TransactionStream)?)
      raise ArgumentError.new("\"inflow_streams\" is required and cannot be null") if new_value.nil?
      unless new_value.nil?
      end

      @inflow_streams = new_value
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] outflow_streams Object to be assigned
    def outflow_streams=(new_value : Array(TransactionStream)?)
      raise ArgumentError.new("\"outflow_streams\" is required and cannot be null") if new_value.nil?
      unless new_value.nil?
      end

      @outflow_streams = new_value
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] updated_datetime Object to be assigned
    def updated_datetime=(new_value : Time?)
      raise ArgumentError.new("\"updated_datetime\" is required and cannot be null") if new_value.nil?
      unless new_value.nil?
      end

      @updated_datetime = new_value
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] request_id Object to be assigned
    def request_id=(new_value : String?)
      raise ArgumentError.new("\"request_id\" is required and cannot be null") if new_value.nil?
      unless new_value.nil?
      end

      @request_id = new_value
    end

    # Generates #hash and #== methods from all fields
    # #== @return [Bool]
    # #hash calculates hash code according to all attributes.
    # #hash @return [UInt64] Hash code
    def_equals_and_hash(@inflow_streams, @outflow_streams, @updated_datetime, @request_id)
  end
end
