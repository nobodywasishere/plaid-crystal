#  The Plaid API
#
# The Plaid REST API. Please see https://plaid.com/docs/api for more details.
#
# The version of the OpenAPI document: 2020-09-14_1.474.3
#
# Generated by: https://openapi-generator.tech
#

require "../../core"

require "./credit_bank_employment_report"

module Plaid
  # CreditBankEmploymentGetResponse defines the response schema for `/beta/credit/v1/bank_employment/get`.
  class CreditBankEmploymentGetResponse
    include JSON::Serializable
    include JSON::Serializable::Unmapped
    include OpenApi::Validatable
    include OpenApi::Json

    # Required Properties

    # Bank Employment data. Each entry in the array will be a distinct bank employment report.
    @[JSON::Field(key: "bank_employment_reports", type: Array(Plaid::CreditBankEmploymentReport)?, default: nil, required: true, nullable: false, emit_null: false)]
    getter bank_employment_reports : Array(Plaid::CreditBankEmploymentReport)? = nil

    # A unique identifier for the request, which can be used for troubleshooting. This identifier, like all Plaid identifiers, is case sensitive.
    @[JSON::Field(key: "request_id", type: String?, default: nil, required: true, nullable: false, emit_null: false)]
    getter request_id : String? = nil

    # End of Required Properties

    # Initializes the object
    # @param [Hash] attributes Model attributes in the form of hash
    def initialize(
      *,
      # Required properties
      @bank_employment_reports : Array(Plaid::CreditBankEmploymentReport)? = nil,
      @request_id : String? = nil
    )
    end

    # Show invalid properties with the reasons. Usually used together with valid?
    # @return Array for valid properties with the reasons
    def list_invalid_properties : Array(String)
      invalid_properties = Array(String).new

      invalid_properties.push("\"bank_employment_reports\" is required and cannot be null") if @bank_employment_reports.nil?

      unless (_bank_employment_reports = @bank_employment_reports).nil?
        invalid_properties.concat(OpenApi::ContainerValidator.list_invalid_properties_for(key: "bank_employment_reports", container: _bank_employment_reports)) if _bank_employment_reports.is_a?(Array)
      end
      invalid_properties.push("\"request_id\" is required and cannot be null") if @request_id.nil?

      unless (_request_id = @request_id).nil?
      end
      invalid_properties
    end

    # Check to see if the all the properties in the model are valid
    # @return true if the model is valid
    def valid? : Bool
      return false if @bank_employment_reports.nil?
      unless (_bank_employment_reports = @bank_employment_reports).nil?
        return false if _bank_employment_reports.is_a?(Array) && !OpenApi::ContainerValidator.valid?(container: _bank_employment_reports)
      end

      return false if @request_id.nil?
      unless (_request_id = @request_id).nil?
      end

      true
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] bank_employment_reports Object to be assigned
    def bank_employment_reports=(new_value : Array(Plaid::CreditBankEmploymentReport)?)
      raise ArgumentError.new("\"bank_employment_reports\" is required and cannot be null") if new_value.nil?
      unless new_value.nil?
        OpenApi::ContainerValidator.validate(container: new_value) if new_value.is_a?(Array)
      end

      @bank_employment_reports = new_value
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] request_id Object to be assigned
    def request_id=(new_value : String?)
      raise ArgumentError.new("\"request_id\" is required and cannot be null") if new_value.nil?
      unless new_value.nil?
      end

      @request_id = new_value
    end

    # Generates #hash and #== methods from all fields
    # #== @return [Bool]
    # #hash calculates hash code according to all attributes.
    # #hash @return [UInt64] Hash code
    def_equals_and_hash(@bank_employment_reports, @request_id)
  end
end
