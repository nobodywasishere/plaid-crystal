#  The Plaid API
#
# The Plaid REST API. Please see https://plaid.com/docs/api for more details.
#
# The version of the OpenAPI document: 2020-09-14_1.474.3
#
# Generated by: https://openapi-generator.tech
#

require "../../core"

module Plaid
  # Configuration parameters for the Investments product
  class LinkTokenInvestments
    include JSON::Serializable
    include JSON::Serializable::Unmapped
    include OpenApi::Validatable
    include OpenApi::Json

    # Optional Properties

    # If `true`, allow self-custody crypto wallets to be added without requiring signature verification. Defaults to `false`.
    @[JSON::Field(key: "allow_unverified_crypto_wallets", type: Bool?, default: nil, required: false, nullable: false, emit_null: false)]
    getter allow_unverified_crypto_wallets : Bool? = nil

    # If `true`, allow users to manually enter Investments account and holdings information. Defaults to `false`.
    @[JSON::Field(key: "allow_manual_entry", type: Bool?, default: nil, required: false, nullable: false, emit_null: false)]
    getter allow_manual_entry : Bool? = nil

    # Initializes the object
    # @param [Hash] attributes Model attributes in the form of hash
    def initialize(
      *,
      # Optional properties
      @allow_unverified_crypto_wallets : Bool? = nil,
      @allow_manual_entry : Bool? = nil
    )
    end

    # Show invalid properties with the reasons. Usually used together with valid?
    # @return Array for valid properties with the reasons
    def list_invalid_properties : Array(String)
      invalid_properties = Array(String).new

      unless (_allow_unverified_crypto_wallets = @allow_unverified_crypto_wallets).nil?
      end
      unless (_allow_manual_entry = @allow_manual_entry).nil?
      end
      invalid_properties
    end

    # Check to see if the all the properties in the model are valid
    # @return true if the model is valid
    def valid? : Bool
      unless (_allow_unverified_crypto_wallets = @allow_unverified_crypto_wallets).nil?
      end

      unless (_allow_manual_entry = @allow_manual_entry).nil?
      end

      true
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] allow_unverified_crypto_wallets Object to be assigned
    def allow_unverified_crypto_wallets=(new_value : Bool?)
      unless new_value.nil?
      end

      @allow_unverified_crypto_wallets = new_value
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] allow_manual_entry Object to be assigned
    def allow_manual_entry=(new_value : Bool?)
      unless new_value.nil?
      end

      @allow_manual_entry = new_value
    end

    # Generates #hash and #== methods from all fields
    # #== @return [Bool]
    # #hash calculates hash code according to all attributes.
    # #hash @return [UInt64] Hash code
    def_equals_and_hash(@allow_unverified_crypto_wallets, @allow_manual_entry)
  end
end
