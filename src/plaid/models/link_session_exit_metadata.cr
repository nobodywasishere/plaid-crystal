#  The Plaid API
#
# The Plaid REST API. Please see https://plaid.com/docs/api for more details.
#
# The version of the OpenAPI document: 2020-09-14_1.474.3
#
# Generated by: https://openapi-generator.tech
#

require "../../core"

require "./link_session_exit_metadata_institution"

module Plaid
  # Displayed if a user exits Link without successfully linking an Item.
  class LinkSessionExitMetadata
    include JSON::Serializable
    include JSON::Serializable::Unmapped
    include OpenApi::Validatable
    include OpenApi::Json

    # Optional Properties

    @[JSON::Field(key: "institution", type: Plaid::LinkSessionExitMetadataInstitution?, default: nil, required: false, nullable: true, emit_null: true, presence: true, ignore_serialize: institution.nil? && !institution_present?)]
    getter institution : Plaid::LinkSessionExitMetadataInstitution? = nil

    @[JSON::Field(ignore: true)]
    property? institution_present : Bool = false

    # The point at which the user exited the Link flow. One of the following values.
    @[JSON::Field(key: "status", type: String?, default: nil, required: false, nullable: false, emit_null: false)]
    getter status : String? = nil

    # A unique identifier associated with a user's actions and events through the Link flow. Include this identifier when opening a support ticket for faster turnaround.
    @[JSON::Field(key: "link_session_id", type: String?, default: nil, required: false, nullable: false, emit_null: false)]
    getter link_session_id : String? = nil

    # The request ID for the last request made by Link. This can be shared with Plaid Support to expedite investigation.
    @[JSON::Field(key: "request_id", type: String?, default: nil, required: false, nullable: false, emit_null: false)]
    getter request_id : String? = nil

    # Initializes the object
    # @param [Hash] attributes Model attributes in the form of hash
    def initialize(
      *,
      # Optional properties
      @institution : Plaid::LinkSessionExitMetadataInstitution? = nil,
      @status : String? = nil,
      @link_session_id : String? = nil,
      @request_id : String? = nil
    )
    end

    # Show invalid properties with the reasons. Usually used together with valid?
    # @return Array for valid properties with the reasons
    def list_invalid_properties : Array(String)
      invalid_properties = Array(String).new

      unless (_institution = @institution).nil?
        invalid_properties.concat(_institution.list_invalid_properties_for("institution")) if _institution.is_a?(OpenApi::Validatable)
      end
      unless (_status = @status).nil?
      end
      unless (_link_session_id = @link_session_id).nil?
      end
      unless (_request_id = @request_id).nil?
      end
      invalid_properties
    end

    # Check to see if the all the properties in the model are valid
    # @return true if the model is valid
    def valid? : Bool
      unless (_institution = @institution).nil?
        return false if _institution.is_a?(OpenApi::Validatable) && !_institution.valid?
      end

      unless (_status = @status).nil?
      end

      unless (_link_session_id = @link_session_id).nil?
      end

      unless (_request_id = @request_id).nil?
      end

      true
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] institution Object to be assigned
    def institution=(new_value : Plaid::LinkSessionExitMetadataInstitution?)
      unless new_value.nil?
        new_value.validate if new_value.is_a?(OpenApi::Validatable)
      end

      @institution = new_value
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] status Object to be assigned
    def status=(new_value : String?)
      unless new_value.nil?
      end

      @status = new_value
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] link_session_id Object to be assigned
    def link_session_id=(new_value : String?)
      unless new_value.nil?
      end

      @link_session_id = new_value
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] request_id Object to be assigned
    def request_id=(new_value : String?)
      unless new_value.nil?
      end

      @request_id = new_value
    end

    # Generates #hash and #== methods from all fields
    # #== @return [Bool]
    # #hash calculates hash code according to all attributes.
    # #hash @return [UInt64] Hash code
    def_equals_and_hash(@institution, @institution_present, @status, @link_session_id, @request_id)
  end
end
