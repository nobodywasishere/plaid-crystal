#  The Plaid API
#
# The Plaid REST API. Please see https://plaid.com/docs/api for more details.
#
# The version of the OpenAPI document: 2020-09-14_1.474.3
#
# Generated by: https://openapi-generator.tech
#

require "../../core"

module Plaid
  # Enumerates the account subtypes that the application wishes for the user to be able to select from. For more details refer to Plaid documentation on account filters.
  class AccountFilter
    include JSON::Serializable
    include JSON::Serializable::Unmapped
    include OpenApi::Validatable
    include OpenApi::Json

    # Optional Properties

    # A list of account subtypes to be filtered.
    @[JSON::Field(key: "depository", type: Array(String)?, default: nil, required: false, nullable: false, emit_null: false)]
    getter depository : Array(String)? = nil

    # A list of account subtypes to be filtered.
    @[JSON::Field(key: "credit", type: Array(String)?, default: nil, required: false, nullable: false, emit_null: false)]
    getter credit : Array(String)? = nil

    # A list of account subtypes to be filtered.
    @[JSON::Field(key: "loan", type: Array(String)?, default: nil, required: false, nullable: false, emit_null: false)]
    getter loan : Array(String)? = nil

    # A list of account subtypes to be filtered.
    @[JSON::Field(key: "investment", type: Array(String)?, default: nil, required: false, nullable: false, emit_null: false)]
    getter investment : Array(String)? = nil

    # Initializes the object
    # @param [Hash] attributes Model attributes in the form of hash
    def initialize(
      *,
      # Optional properties
      @depository : Array(String)? = nil,
      @credit : Array(String)? = nil,
      @loan : Array(String)? = nil,
      @investment : Array(String)? = nil
    )
    end

    # Show invalid properties with the reasons. Usually used together with valid?
    # @return Array for valid properties with the reasons
    def list_invalid_properties : Array(String)
      invalid_properties = Array(String).new

      unless (_depository = @depository).nil?
      end
      unless (_credit = @credit).nil?
      end
      unless (_loan = @loan).nil?
      end
      unless (_investment = @investment).nil?
      end
      invalid_properties
    end

    # Check to see if the all the properties in the model are valid
    # @return true if the model is valid
    def valid? : Bool
      unless (_depository = @depository).nil?
      end

      unless (_credit = @credit).nil?
      end

      unless (_loan = @loan).nil?
      end

      unless (_investment = @investment).nil?
      end

      true
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] depository Object to be assigned
    def depository=(new_value : Array(String)?)
      unless new_value.nil?
      end

      @depository = new_value
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] credit Object to be assigned
    def credit=(new_value : Array(String)?)
      unless new_value.nil?
      end

      @credit = new_value
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] loan Object to be assigned
    def loan=(new_value : Array(String)?)
      unless new_value.nil?
      end

      @loan = new_value
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] investment Object to be assigned
    def investment=(new_value : Array(String)?)
      unless new_value.nil?
      end

      @investment = new_value
    end

    # Generates #hash and #== methods from all fields
    # #== @return [Bool]
    # #hash calculates hash code according to all attributes.
    # #hash @return [UInt64] Hash code
    def_equals_and_hash(@depository, @credit, @loan, @investment)
  end
end
