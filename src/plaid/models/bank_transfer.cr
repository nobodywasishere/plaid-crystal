#  The Plaid API
#
# The Plaid REST API. Please see https://plaid.com/docs/api for more details.
#
# The version of the OpenAPI document: 2020-09-14_1.474.3
#
# Generated by: https://openapi-generator.tech
#

require "../../core"

require "./ach_class"
require "./bank_transfer_direction"
require "./bank_transfer_failure"
require "./bank_transfer_network"
require "./bank_transfer_status"
require "./bank_transfer_type"
require "./bank_transfer_user"

module Plaid
  # Represents a bank transfer within the Bank Transfers API.
  class BankTransfer
    include JSON::Serializable
    include JSON::Serializable::Unmapped
    include OpenApi::Validatable
    include OpenApi::Json

    # Required Properties

    # Plaid’s unique identifier for a bank transfer.
    @[JSON::Field(key: "id", type: String?, default: nil, required: true, nullable: false, emit_null: false)]
    getter id : String? = nil

    @[JSON::Field(key: "ach_class", type: Plaid::ACHClass?, default: nil, required: true, nullable: false, emit_null: false)]
    getter ach_class : Plaid::ACHClass? = nil

    # The account ID that should be credited/debited for this bank transfer.
    @[JSON::Field(key: "account_id", type: String?, default: nil, required: true, nullable: false, emit_null: false)]
    getter account_id : String? = nil

    @[JSON::Field(key: "type", type: Plaid::BankTransferType?, default: nil, required: true, nullable: false, emit_null: false)]
    getter _type : Plaid::BankTransferType? = nil

    @[JSON::Field(key: "user", type: BankTransferUser?, default: nil, required: true, nullable: false, emit_null: false)]
    getter user : BankTransferUser? = nil

    # The amount of the bank transfer (decimal string with two digits of precision e.g. \"10.00\").
    @[JSON::Field(key: "amount", type: String?, default: nil, required: true, nullable: false, emit_null: false)]
    getter amount : String? = nil

    # The currency of the transfer amount, e.g. \"USD\"
    @[JSON::Field(key: "iso_currency_code", type: String?, default: nil, required: true, nullable: false, emit_null: false)]
    getter iso_currency_code : String? = nil

    # The description of the transfer.
    @[JSON::Field(key: "description", type: String?, default: nil, required: true, nullable: false, emit_null: false)]
    getter description : String? = nil

    # The datetime when this bank transfer was created. This will be of the form `2006-01-02T15:04:05Z`
    @[JSON::Field(key: "created", type: Time?, default: nil, required: true, nullable: false, emit_null: false, converter: Time::RFC3339Converter)]
    getter created : Time? = nil

    @[JSON::Field(key: "status", type: Plaid::BankTransferStatus?, default: nil, required: true, nullable: false, emit_null: false)]
    getter status : Plaid::BankTransferStatus? = nil

    @[JSON::Field(key: "network", type: Plaid::BankTransferNetwork?, default: nil, required: true, nullable: false, emit_null: false)]
    getter network : Plaid::BankTransferNetwork? = nil

    # When `true`, you can still cancel this bank transfer.
    @[JSON::Field(key: "cancellable", type: Bool?, default: nil, required: true, nullable: false, emit_null: false)]
    getter cancellable : Bool? = nil

    @[JSON::Field(key: "failure_reason", type: BankTransferFailure?, default: nil, required: true, nullable: true, emit_null: true)]
    getter failure_reason : BankTransferFailure? = nil

    # A string containing the custom tag provided by the client in the create request. Will be null if not provided.
    @[JSON::Field(key: "custom_tag", type: String?, default: nil, required: true, nullable: true, emit_null: true)]
    getter custom_tag : String? = nil

    # The Metadata object is a mapping of client-provided string fields to any string value. The following limitations apply: The JSON values must be Strings (no nested JSON objects allowed) Only ASCII characters may be used Maximum of 50 key/value pairs Maximum key length of 40 characters Maximum value length of 500 characters
    @[JSON::Field(key: "metadata", type: Hash(String, String)?, default: nil, required: true, nullable: true, emit_null: true)]
    getter metadata : Hash(String, String)? = nil
    MAX_ITEMS_FOR_METADATA = 50

    # Plaid’s unique identifier for the origination account that was used for this transfer.
    @[JSON::Field(key: "origination_account_id", type: String?, default: nil, required: true, nullable: false, emit_null: false)]
    getter origination_account_id : String? = nil

    @[JSON::Field(key: "direction", type: Plaid::BankTransferDirection?, default: nil, required: true, nullable: true, emit_null: true)]
    getter direction : Plaid::BankTransferDirection? = nil

    # End of Required Properties

    # Initializes the object
    # @param [Hash] attributes Model attributes in the form of hash
    def initialize(
      *,
      # Required properties
      @id : String? = nil,
      @ach_class : Plaid::ACHClass? = nil,
      @account_id : String? = nil,
      @_type : Plaid::BankTransferType? = nil,
      @user : BankTransferUser? = nil,
      @amount : String? = nil,
      @iso_currency_code : String? = nil,
      @description : String? = nil,
      @created : Time? = nil,
      @status : Plaid::BankTransferStatus? = nil,
      @network : Plaid::BankTransferNetwork? = nil,
      @cancellable : Bool? = nil,
      @failure_reason : BankTransferFailure? = nil,
      @custom_tag : String? = nil,
      @metadata : Hash(String, String)? = nil,
      @origination_account_id : String? = nil,
      @direction : Plaid::BankTransferDirection? = nil
    )
    end

    # Show invalid properties with the reasons. Usually used together with valid?
    # @return Array for valid properties with the reasons
    def list_invalid_properties : Array(String)
      invalid_properties = Array(String).new

      invalid_properties.push("\"id\" is required and cannot be null") if @id.nil?

      unless (_id = @id).nil?
      end
      invalid_properties.push("\"ach_class\" is required and cannot be null") if @ach_class.nil?

      unless (_ach_class = @ach_class).nil?
        invalid_properties.push(_ach_class.error_message) if !_ach_class.valid?
      end
      invalid_properties.push("\"account_id\" is required and cannot be null") if @account_id.nil?

      unless (_account_id = @account_id).nil?
      end
      invalid_properties.push("\"_type\" is required and cannot be null") if @_type.nil?

      unless (__type = @_type).nil?
        invalid_properties.push(__type.error_message) if !__type.valid?
      end
      invalid_properties.push("\"user\" is required and cannot be null") if @user.nil?

      unless (_user = @user).nil?
      end
      invalid_properties.push("\"amount\" is required and cannot be null") if @amount.nil?

      unless (_amount = @amount).nil?
      end
      invalid_properties.push("\"iso_currency_code\" is required and cannot be null") if @iso_currency_code.nil?

      unless (_iso_currency_code = @iso_currency_code).nil?
      end
      invalid_properties.push("\"description\" is required and cannot be null") if @description.nil?

      unless (_description = @description).nil?
      end
      invalid_properties.push("\"created\" is required and cannot be null") if @created.nil?

      unless (_created = @created).nil?
      end
      invalid_properties.push("\"status\" is required and cannot be null") if @status.nil?

      unless (_status = @status).nil?
        invalid_properties.push(_status.error_message) if !_status.valid?
      end
      invalid_properties.push("\"network\" is required and cannot be null") if @network.nil?

      unless (_network = @network).nil?
        invalid_properties.push(_network.error_message) if !_network.valid?
      end
      invalid_properties.push("\"cancellable\" is required and cannot be null") if @cancellable.nil?

      unless (_cancellable = @cancellable).nil?
      end
      unless (_failure_reason = @failure_reason).nil?
      end
      unless (_custom_tag = @custom_tag).nil?
      end
      unless (_metadata = @metadata).nil?
        if max_items_error = OpenApi::PrimitiveValidator.max_items_error("metadata", _metadata.size, MAX_ITEMS_FOR_METADATA)
          invalid_properties.push(max_items_error)
        end
      end
      invalid_properties.push("\"origination_account_id\" is required and cannot be null") if @origination_account_id.nil?

      unless (_origination_account_id = @origination_account_id).nil?
      end
      unless (_direction = @direction).nil?
        invalid_properties.push(_direction.error_message) if !_direction.valid?
      end
      invalid_properties
    end

    # Check to see if the all the properties in the model are valid
    # @return true if the model is valid
    def valid? : Bool
      return false if @id.nil?
      unless (_id = @id).nil?
      end

      return false if @ach_class.nil?
      unless (_ach_class = @ach_class).nil?
        return false if !_ach_class.valid?
      end

      return false if @account_id.nil?
      unless (_account_id = @account_id).nil?
      end

      return false if @_type.nil?
      unless (__type = @_type).nil?
        return false if !__type.valid?
      end

      return false if @user.nil?
      unless (_user = @user).nil?
      end

      return false if @amount.nil?
      unless (_amount = @amount).nil?
      end

      return false if @iso_currency_code.nil?
      unless (_iso_currency_code = @iso_currency_code).nil?
      end

      return false if @description.nil?
      unless (_description = @description).nil?
      end

      return false if @created.nil?
      unless (_created = @created).nil?
      end

      return false if @status.nil?
      unless (_status = @status).nil?
        return false if !_status.valid?
      end

      return false if @network.nil?
      unless (_network = @network).nil?
        return false if !_network.valid?
      end

      return false if @cancellable.nil?
      unless (_cancellable = @cancellable).nil?
      end

      unless (_failure_reason = @failure_reason).nil?
      end

      unless (_custom_tag = @custom_tag).nil?
      end

      unless (_metadata = @metadata).nil?
        return false if _metadata.size > MAX_ITEMS_FOR_METADATA
      end

      return false if @origination_account_id.nil?
      unless (_origination_account_id = @origination_account_id).nil?
      end

      unless (_direction = @direction).nil?
        return false if !_direction.valid?
      end

      true
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] id Object to be assigned
    def id=(new_value : String?)
      raise ArgumentError.new("\"id\" is required and cannot be null") if new_value.nil?
      unless new_value.nil?
      end

      @id = new_value
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] ach_class Object to be assigned
    def ach_class=(new_value : Plaid::ACHClass?)
      raise ArgumentError.new("\"ach_class\" is required and cannot be null") if new_value.nil?
      unless new_value.nil?
        new_value.validate
      end

      @ach_class = new_value
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] account_id Object to be assigned
    def account_id=(new_value : String?)
      raise ArgumentError.new("\"account_id\" is required and cannot be null") if new_value.nil?
      unless new_value.nil?
      end

      @account_id = new_value
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] _type Object to be assigned
    def _type=(new_value : Plaid::BankTransferType?)
      raise ArgumentError.new("\"_type\" is required and cannot be null") if new_value.nil?
      unless new_value.nil?
        new_value.validate
      end

      @_type = new_value
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] user Object to be assigned
    def user=(new_value : BankTransferUser?)
      raise ArgumentError.new("\"user\" is required and cannot be null") if new_value.nil?
      unless new_value.nil?
      end

      @user = new_value
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] amount Object to be assigned
    def amount=(new_value : String?)
      raise ArgumentError.new("\"amount\" is required and cannot be null") if new_value.nil?
      unless new_value.nil?
      end

      @amount = new_value
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] iso_currency_code Object to be assigned
    def iso_currency_code=(new_value : String?)
      raise ArgumentError.new("\"iso_currency_code\" is required and cannot be null") if new_value.nil?
      unless new_value.nil?
      end

      @iso_currency_code = new_value
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] description Object to be assigned
    def description=(new_value : String?)
      raise ArgumentError.new("\"description\" is required and cannot be null") if new_value.nil?
      unless new_value.nil?
      end

      @description = new_value
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] created Object to be assigned
    def created=(new_value : Time?)
      raise ArgumentError.new("\"created\" is required and cannot be null") if new_value.nil?
      unless new_value.nil?
      end

      @created = new_value
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] status Object to be assigned
    def status=(new_value : Plaid::BankTransferStatus?)
      raise ArgumentError.new("\"status\" is required and cannot be null") if new_value.nil?
      unless new_value.nil?
        new_value.validate
      end

      @status = new_value
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] network Object to be assigned
    def network=(new_value : Plaid::BankTransferNetwork?)
      raise ArgumentError.new("\"network\" is required and cannot be null") if new_value.nil?
      unless new_value.nil?
        new_value.validate
      end

      @network = new_value
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] cancellable Object to be assigned
    def cancellable=(new_value : Bool?)
      raise ArgumentError.new("\"cancellable\" is required and cannot be null") if new_value.nil?
      unless new_value.nil?
      end

      @cancellable = new_value
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] failure_reason Object to be assigned
    def failure_reason=(new_value : BankTransferFailure?)
      unless new_value.nil?
      end

      @failure_reason = new_value
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] custom_tag Object to be assigned
    def custom_tag=(new_value : String?)
      unless new_value.nil?
      end

      @custom_tag = new_value
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] metadata Object to be assigned
    def metadata=(new_value : Hash(String, String)?)
      unless new_value.nil?
        OpenApi::PrimitiveValidator.validate_max_items("metadata", new_value.size, MAX_ITEMS_FOR_METADATA)
      end

      @metadata = new_value
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] origination_account_id Object to be assigned
    def origination_account_id=(new_value : String?)
      raise ArgumentError.new("\"origination_account_id\" is required and cannot be null") if new_value.nil?
      unless new_value.nil?
      end

      @origination_account_id = new_value
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] direction Object to be assigned
    def direction=(new_value : Plaid::BankTransferDirection?)
      unless new_value.nil?
        new_value.validate
      end

      @direction = new_value
    end

    # Generates #hash and #== methods from all fields
    # #== @return [Bool]
    # #hash calculates hash code according to all attributes.
    # #hash @return [UInt64] Hash code
    def_equals_and_hash(@id, @ach_class, @account_id, @_type, @user, @amount, @iso_currency_code, @description, @created, @status, @network, @cancellable, @failure_reason, @custom_tag, @metadata, @origination_account_id, @direction)
  end
end
