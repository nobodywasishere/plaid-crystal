#  The Plaid API
#
# The Plaid REST API. Please see https://plaid.com/docs/api for more details.
#
# The version of the OpenAPI document: 2020-09-14_1.474.3
#
# Generated by: https://openapi-generator.tech
#

require "../../core"

module Plaid
  # The user object allows you to provide additional information about the user to be appended to the Asset Report. All fields are optional. The `first_name`, `last_name`, and `ssn` fields are required if you would like the Report to be eligible for Fannie Mae’s Day 1 Certainty™ program.
  class AssetReportUser
    include JSON::Serializable
    include JSON::Serializable::Unmapped
    include OpenApi::Validatable
    include OpenApi::Json

    # Optional Properties

    # An identifier you determine and submit for the user.
    @[JSON::Field(key: "client_user_id", type: String?, default: nil, required: false, nullable: true, emit_null: true, presence: true, ignore_serialize: client_user_id.nil? && !client_user_id_present?)]
    getter client_user_id : String? = nil

    @[JSON::Field(ignore: true)]
    property? client_user_id_present : Bool = false

    # The user's first name. Required for the Fannie Mae Day 1 Certainty™ program.
    @[JSON::Field(key: "first_name", type: String?, default: nil, required: false, nullable: true, emit_null: true, presence: true, ignore_serialize: first_name.nil? && !first_name_present?)]
    getter first_name : String? = nil

    @[JSON::Field(ignore: true)]
    property? first_name_present : Bool = false

    # The user's middle name
    @[JSON::Field(key: "middle_name", type: String?, default: nil, required: false, nullable: true, emit_null: true, presence: true, ignore_serialize: middle_name.nil? && !middle_name_present?)]
    getter middle_name : String? = nil

    @[JSON::Field(ignore: true)]
    property? middle_name_present : Bool = false

    # The user's last name.  Required for the Fannie Mae Day 1 Certainty™ program.
    @[JSON::Field(key: "last_name", type: String?, default: nil, required: false, nullable: true, emit_null: true, presence: true, ignore_serialize: last_name.nil? && !last_name_present?)]
    getter last_name : String? = nil

    @[JSON::Field(ignore: true)]
    property? last_name_present : Bool = false

    # The user's Social Security Number. Required for the Fannie Mae Day 1 Certainty™ program.  Format: \"ddd-dd-dddd\"
    @[JSON::Field(key: "ssn", type: String?, default: nil, required: false, nullable: true, emit_null: true, presence: true, ignore_serialize: ssn.nil? && !ssn_present?)]
    getter ssn : String? = nil

    @[JSON::Field(ignore: true)]
    property? ssn_present : Bool = false

    # The user's phone number, in E.164 format: +{countrycode}{number}. For example: \"+14151234567\". Phone numbers provided in other formats will be parsed on a best-effort basis.
    @[JSON::Field(key: "phone_number", type: String?, default: nil, required: false, nullable: true, emit_null: true, presence: true, ignore_serialize: phone_number.nil? && !phone_number_present?)]
    getter phone_number : String? = nil

    @[JSON::Field(ignore: true)]
    property? phone_number_present : Bool = false

    # The user's email address.
    @[JSON::Field(key: "email", type: String?, default: nil, required: false, nullable: true, emit_null: true, presence: true, ignore_serialize: email.nil? && !email_present?)]
    getter email : String? = nil

    @[JSON::Field(ignore: true)]
    property? email_present : Bool = false

    # Initializes the object
    # @param [Hash] attributes Model attributes in the form of hash
    def initialize(
      *,
      # Optional properties
      @client_user_id : String? = nil,
      @first_name : String? = nil,
      @middle_name : String? = nil,
      @last_name : String? = nil,
      @ssn : String? = nil,
      @phone_number : String? = nil,
      @email : String? = nil
    )
    end

    # Show invalid properties with the reasons. Usually used together with valid?
    # @return Array for valid properties with the reasons
    def list_invalid_properties : Array(String)
      invalid_properties = Array(String).new

      unless (_client_user_id = @client_user_id).nil?
      end
      unless (_first_name = @first_name).nil?
      end
      unless (_middle_name = @middle_name).nil?
      end
      unless (_last_name = @last_name).nil?
      end
      unless (_ssn = @ssn).nil?
      end
      unless (_phone_number = @phone_number).nil?
      end
      unless (_email = @email).nil?
      end
      invalid_properties
    end

    # Check to see if the all the properties in the model are valid
    # @return true if the model is valid
    def valid? : Bool
      unless (_client_user_id = @client_user_id).nil?
      end

      unless (_first_name = @first_name).nil?
      end

      unless (_middle_name = @middle_name).nil?
      end

      unless (_last_name = @last_name).nil?
      end

      unless (_ssn = @ssn).nil?
      end

      unless (_phone_number = @phone_number).nil?
      end

      unless (_email = @email).nil?
      end

      true
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] client_user_id Object to be assigned
    def client_user_id=(new_value : String?)
      unless new_value.nil?
      end

      @client_user_id = new_value
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] first_name Object to be assigned
    def first_name=(new_value : String?)
      unless new_value.nil?
      end

      @first_name = new_value
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] middle_name Object to be assigned
    def middle_name=(new_value : String?)
      unless new_value.nil?
      end

      @middle_name = new_value
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] last_name Object to be assigned
    def last_name=(new_value : String?)
      unless new_value.nil?
      end

      @last_name = new_value
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] ssn Object to be assigned
    def ssn=(new_value : String?)
      unless new_value.nil?
      end

      @ssn = new_value
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] phone_number Object to be assigned
    def phone_number=(new_value : String?)
      unless new_value.nil?
      end

      @phone_number = new_value
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] email Object to be assigned
    def email=(new_value : String?)
      unless new_value.nil?
      end

      @email = new_value
    end

    # Generates #hash and #== methods from all fields
    # #== @return [Bool]
    # #hash calculates hash code according to all attributes.
    # #hash @return [UInt64] Hash code
    def_equals_and_hash(@client_user_id, @client_user_id_present, @first_name, @first_name_present, @middle_name, @middle_name_present, @last_name, @last_name_present, @ssn, @ssn_present, @phone_number, @phone_number_present, @email, @email_present)
  end
end
