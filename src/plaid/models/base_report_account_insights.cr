#  The Plaid API
#
# The Plaid REST API. Please see https://plaid.com/docs/api for more details.
#
# The version of the OpenAPI document: 2020-09-14_1.474.3
#
# Generated by: https://openapi-generator.tech
#

require "../../core"

require "./base_report_average_flow_insights"
require "./base_report_longest_gap_insights"
require "./base_report_number_flow_insights"

module Plaid
  # Calculated insights derived from transaction-level data.
  class BaseReportAccountInsights
    include JSON::Serializable
    include JSON::Serializable::Unmapped
    include OpenApi::Validatable
    include OpenApi::Json

    # Optional Properties

    # Date of the earliest transaction in the base report for the account.
    @[JSON::Field(key: "oldest_transaction_date", type: Time?, default: nil, required: false, nullable: false, emit_null: false, converter: Time::ISO8601DateConverter)]
    getter oldest_transaction_date : Time? = nil

    # Date of the most recent transaction in the base report for the account.
    @[JSON::Field(key: "most_recent_transaction_date", type: Time?, default: nil, required: false, nullable: false, emit_null: false, converter: Time::ISO8601DateConverter)]
    getter most_recent_transaction_date : Time? = nil

    # Number of days days available in the base report for the account.
    @[JSON::Field(key: "days_available", type: Int32?, default: nil, required: false, nullable: false, emit_null: false)]
    getter days_available : Int32? = nil

    # Average number of days between sequential transactions
    @[JSON::Field(key: "average_days_between_transactions", type: Float64?, default: nil, required: false, nullable: false, emit_null: false)]
    getter average_days_between_transactions : Float64? = nil

    # Longest gap between sequential transactions
    @[JSON::Field(key: "longest_gap_between_transactions", type: Array(BaseReportLongestGapInsights)?, default: nil, required: false, nullable: false, emit_null: false)]
    getter longest_gap_between_transactions : Array(BaseReportLongestGapInsights)? = nil

    # The number of debits into the account. This field will be null for non-depository accounts.
    @[JSON::Field(key: "number_of_inflows", type: Array(BaseReportNumberFlowInsights)?, default: nil, required: false, nullable: true, emit_null: true, presence: true, ignore_serialize: number_of_inflows.nil? && !number_of_inflows_present?)]
    getter number_of_inflows : Array(BaseReportNumberFlowInsights)? = nil

    @[JSON::Field(ignore: true)]
    property? number_of_inflows_present : Bool = false

    # Average amount of debit transactions into account. This field will be null for non-depository accounts. This field only takes into account USD transactions from the account.
    @[JSON::Field(key: "average_inflow_amount", type: Array(BaseReportAverageFlowInsights)?, default: nil, required: false, nullable: true, emit_null: true, presence: true, ignore_serialize: average_inflow_amount.nil? && !average_inflow_amount_present?)]
    getter average_inflow_amount : Array(BaseReportAverageFlowInsights)? = nil

    @[JSON::Field(ignore: true)]
    property? average_inflow_amount_present : Bool = false

    # The number of credit into the account. This field will be null for non-depository accounts.
    @[JSON::Field(key: "number_of_outflows", type: Array(BaseReportNumberFlowInsights)?, default: nil, required: false, nullable: true, emit_null: true, presence: true, ignore_serialize: number_of_outflows.nil? && !number_of_outflows_present?)]
    getter number_of_outflows : Array(BaseReportNumberFlowInsights)? = nil

    @[JSON::Field(ignore: true)]
    property? number_of_outflows_present : Bool = false

    # Average amount of credit transactions into account. This field will be null for non-depository accounts. This field only takes into account USD transactions from the account.
    @[JSON::Field(key: "average_outflow_amount", type: Array(BaseReportAverageFlowInsights)?, default: nil, required: false, nullable: true, emit_null: true, presence: true, ignore_serialize: average_outflow_amount.nil? && !average_outflow_amount_present?)]
    getter average_outflow_amount : Array(BaseReportAverageFlowInsights)? = nil

    @[JSON::Field(ignore: true)]
    property? average_outflow_amount_present : Bool = false

    # Number of days with no transactions
    @[JSON::Field(key: "number_of_days_no_transactions", type: Int32?, default: nil, required: false, nullable: false, emit_null: false)]
    getter number_of_days_no_transactions : Int32? = nil

    # Initializes the object
    # @param [Hash] attributes Model attributes in the form of hash
    def initialize(
      *,
      # Optional properties
      @oldest_transaction_date : Time? = nil,
      @most_recent_transaction_date : Time? = nil,
      @days_available : Int32? = nil,
      @average_days_between_transactions : Float64? = nil,
      @longest_gap_between_transactions : Array(BaseReportLongestGapInsights)? = nil,
      @number_of_inflows : Array(BaseReportNumberFlowInsights)? = nil,
      @average_inflow_amount : Array(BaseReportAverageFlowInsights)? = nil,
      @number_of_outflows : Array(BaseReportNumberFlowInsights)? = nil,
      @average_outflow_amount : Array(BaseReportAverageFlowInsights)? = nil,
      @number_of_days_no_transactions : Int32? = nil
    )
    end

    # Show invalid properties with the reasons. Usually used together with valid?
    # @return Array for valid properties with the reasons
    def list_invalid_properties : Array(String)
      invalid_properties = Array(String).new

      unless (_oldest_transaction_date = @oldest_transaction_date).nil?
      end
      unless (_most_recent_transaction_date = @most_recent_transaction_date).nil?
      end
      unless (_days_available = @days_available).nil?
      end
      unless (_average_days_between_transactions = @average_days_between_transactions).nil?
      end
      unless (_longest_gap_between_transactions = @longest_gap_between_transactions).nil?
      end
      unless (_number_of_inflows = @number_of_inflows).nil?
      end
      unless (_average_inflow_amount = @average_inflow_amount).nil?
      end
      unless (_number_of_outflows = @number_of_outflows).nil?
      end
      unless (_average_outflow_amount = @average_outflow_amount).nil?
      end
      unless (_number_of_days_no_transactions = @number_of_days_no_transactions).nil?
      end
      invalid_properties
    end

    # Check to see if the all the properties in the model are valid
    # @return true if the model is valid
    def valid? : Bool
      unless (_oldest_transaction_date = @oldest_transaction_date).nil?
      end

      unless (_most_recent_transaction_date = @most_recent_transaction_date).nil?
      end

      unless (_days_available = @days_available).nil?
      end

      unless (_average_days_between_transactions = @average_days_between_transactions).nil?
      end

      unless (_longest_gap_between_transactions = @longest_gap_between_transactions).nil?
      end

      unless (_number_of_inflows = @number_of_inflows).nil?
      end

      unless (_average_inflow_amount = @average_inflow_amount).nil?
      end

      unless (_number_of_outflows = @number_of_outflows).nil?
      end

      unless (_average_outflow_amount = @average_outflow_amount).nil?
      end

      unless (_number_of_days_no_transactions = @number_of_days_no_transactions).nil?
      end

      true
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] oldest_transaction_date Object to be assigned
    def oldest_transaction_date=(new_value : Time?)
      unless new_value.nil?
      end

      @oldest_transaction_date = new_value
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] most_recent_transaction_date Object to be assigned
    def most_recent_transaction_date=(new_value : Time?)
      unless new_value.nil?
      end

      @most_recent_transaction_date = new_value
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] days_available Object to be assigned
    def days_available=(new_value : Int32?)
      unless new_value.nil?
      end

      @days_available = new_value
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] average_days_between_transactions Object to be assigned
    def average_days_between_transactions=(new_value : Float64?)
      unless new_value.nil?
      end

      @average_days_between_transactions = new_value
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] longest_gap_between_transactions Object to be assigned
    def longest_gap_between_transactions=(new_value : Array(BaseReportLongestGapInsights)?)
      unless new_value.nil?
      end

      @longest_gap_between_transactions = new_value
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] number_of_inflows Object to be assigned
    def number_of_inflows=(new_value : Array(BaseReportNumberFlowInsights)?)
      unless new_value.nil?
      end

      @number_of_inflows = new_value
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] average_inflow_amount Object to be assigned
    def average_inflow_amount=(new_value : Array(BaseReportAverageFlowInsights)?)
      unless new_value.nil?
      end

      @average_inflow_amount = new_value
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] number_of_outflows Object to be assigned
    def number_of_outflows=(new_value : Array(BaseReportNumberFlowInsights)?)
      unless new_value.nil?
      end

      @number_of_outflows = new_value
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] average_outflow_amount Object to be assigned
    def average_outflow_amount=(new_value : Array(BaseReportAverageFlowInsights)?)
      unless new_value.nil?
      end

      @average_outflow_amount = new_value
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] number_of_days_no_transactions Object to be assigned
    def number_of_days_no_transactions=(new_value : Int32?)
      unless new_value.nil?
      end

      @number_of_days_no_transactions = new_value
    end

    # Generates #hash and #== methods from all fields
    # #== @return [Bool]
    # #hash calculates hash code according to all attributes.
    # #hash @return [UInt64] Hash code
    def_equals_and_hash(@oldest_transaction_date, @most_recent_transaction_date, @days_available, @average_days_between_transactions, @longest_gap_between_transactions, @number_of_inflows, @number_of_inflows_present, @average_inflow_amount, @average_inflow_amount_present, @number_of_outflows, @number_of_outflows_present, @average_outflow_amount, @average_outflow_amount_present, @number_of_days_no_transactions)
  end
end
