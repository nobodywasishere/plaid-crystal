#  The Plaid API
#
# The Plaid REST API. Please see https://plaid.com/docs/api for more details.
#
# The version of the OpenAPI document: 2020-09-14_1.474.3
#
# Generated by: https://openapi-generator.tech
#

require "../../core"

module Plaid
  class InvestmentAccountSubtype
    include OpenApi::Validatable
    include OpenApi::Json

    property data : String

    ERROR_MESSAGE = %{invalid value for "InvestmentAccountSubtype", must be one of ["529", "401a", "401k", "403B", "457b", "brokerage", "cash isa", "crypto exchange", "education savings account", "fixed annuity", "gic", "health reimbursement arrangement", "hsa", "ira", "isa", "keogh", "lif", "life insurance", "lira", "lrif", "lrsp", "mutual fund", "non-custodial wallet", "non-taxable brokerage account", "other", "other annuity", "other insurance", "pension", "prif", "profit sharing plan", "qshr", "rdsp", "resp", "retirement", "rlif", "roth", "roth 401k", "rrif", "rrsp", "sarsep", "sep ira", "simple ira", "sipp", "stock plan", "tfsa", "trust", "ugma", "utma", "variable annuity", "all"].}

    VALID_VALUES = String.static_array("529", "401a", "401k", "403B", "457b", "brokerage", "cash isa", "crypto exchange", "education savings account", "fixed annuity", "gic", "health reimbursement arrangement", "hsa", "ira", "isa", "keogh", "lif", "life insurance", "lira", "lrif", "lrsp", "mutual fund", "non-custodial wallet", "non-taxable brokerage account", "other", "other annuity", "other insurance", "pension", "prif", "profit sharing plan", "qshr", "rdsp", "resp", "retirement", "rlif", "roth", "roth 401k", "rrif", "rrsp", "sarsep", "sep ira", "simple ira", "sipp", "stock plan", "tfsa", "trust", "ugma", "utma", "variable annuity", "all")

    delegate to_json_object_key, to: @data

    def self.from_json(value : JSON::PullParser) : InvestmentAccountSubtype
      new(value)
    end

    def self.to_json(value : InvestmentAccountSubtype, json : JSON::Builder) : Nil
      value.to_json(json)
    end

    def self.new(pull : JSON::PullParser)
      new(String.new(pull), false)
    end

    def self.from_json_object_key?(key : String)
      String.from_json_object_key?(key)
    end

    def initialize(@data : String, strict : Bool = true)
      validate if strict
    end

    def error_message : String
      ERROR_MESSAGE
    end

    def list_invalid_properties : Array(String)
      errors = Array(String).new
      errors.push(error_message) unless valid?
      errors
    end

    def valid? : Bool
      OpenApi::EnumValidator.valid?(data, VALID_VALUES, false)
    end

    def validate : Nil
      OpenApi::EnumValidator.validate("InvestmentAccountSubtype", data, VALID_VALUES, false)
    end

    def to_json(json : JSON::Builder) : Nil
      @data.to_json(json)
    end

    def_equals_and_hash(@data)
  end
end
