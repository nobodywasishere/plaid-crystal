#  The Plaid API
#
# The Plaid REST API. Please see https://plaid.com/docs/api for more details.
#
# The version of the OpenAPI document: 2020-09-14_1.474.3
#
# Generated by: https://openapi-generator.tech
#

require "../../core"

require "./credit_amount_with_currency"

module Plaid
  # Average dollar amount of credit or debit transactions out of the account. This field will only added for depository accounts
  class BaseReportAverageFlowInsights
    include JSON::Serializable
    include JSON::Serializable::Unmapped
    include OpenApi::Validatable
    include OpenApi::Json

    # Optional Properties

    # The start date of this time period. The date will be returned in an ISO 8601 format (YYYY-MM-DD).
    @[JSON::Field(key: "start_date", type: Time?, default: nil, required: false, nullable: false, emit_null: false, converter: Time::ISO8601DateConverter)]
    getter start_date : Time? = nil

    # The end date of this time period. The date will be returned in an ISO 8601 format (YYYY-MM-DD).
    @[JSON::Field(key: "end_date", type: Time?, default: nil, required: false, nullable: false, emit_null: false, converter: Time::ISO8601DateConverter)]
    getter end_date : Time? = nil

    @[JSON::Field(key: "total_amount", type: CreditAmountWithCurrency?, default: nil, required: false, nullable: false, emit_null: false)]
    getter total_amount : CreditAmountWithCurrency? = nil

    # Initializes the object
    # @param [Hash] attributes Model attributes in the form of hash
    def initialize(
      *,
      # Optional properties
      @start_date : Time? = nil,
      @end_date : Time? = nil,
      @total_amount : CreditAmountWithCurrency? = nil
    )
    end

    # Show invalid properties with the reasons. Usually used together with valid?
    # @return Array for valid properties with the reasons
    def list_invalid_properties : Array(String)
      invalid_properties = Array(String).new

      unless (_start_date = @start_date).nil?
      end
      unless (_end_date = @end_date).nil?
      end
      unless (_total_amount = @total_amount).nil?
      end
      invalid_properties
    end

    # Check to see if the all the properties in the model are valid
    # @return true if the model is valid
    def valid? : Bool
      unless (_start_date = @start_date).nil?
      end

      unless (_end_date = @end_date).nil?
      end

      unless (_total_amount = @total_amount).nil?
      end

      true
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] start_date Object to be assigned
    def start_date=(new_value : Time?)
      unless new_value.nil?
      end

      @start_date = new_value
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] end_date Object to be assigned
    def end_date=(new_value : Time?)
      unless new_value.nil?
      end

      @end_date = new_value
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] total_amount Object to be assigned
    def total_amount=(new_value : CreditAmountWithCurrency?)
      unless new_value.nil?
      end

      @total_amount = new_value
    end

    # Generates #hash and #== methods from all fields
    # #== @return [Bool]
    # #hash calculates hash code according to all attributes.
    # #hash @return [UInt64] Hash code
    def_equals_and_hash(@start_date, @end_date, @total_amount)
  end
end
