#  The Plaid API
#
# The Plaid REST API. Please see https://plaid.com/docs/api for more details.
#
# The version of the OpenAPI document: 2020-09-14_1.474.3
#
# Generated by: https://openapi-generator.tech
#

require "../../core"

require "./beacon_report_syndication_analysis"
require "./beacon_report_syndication_original_report"

module Plaid
  # A Beacon Report Syndication represents a Beacon Report created either by your organization or another Beacon customer that matches a specific Beacon User you've created.  The `analysis` field in the response indicates which fields matched between the originally reported Beacon User and the Beacon User that the report was syndicated to.  The `report` field in the response contains a subset of information from the original report.
  class BeaconReportSyndication
    include JSON::Serializable
    include JSON::Serializable::Unmapped
    include OpenApi::Validatable
    include OpenApi::Json

    # Required Properties

    # ID of the associated Beacon Report Syndication.
    @[JSON::Field(key: "id", type: String?, default: nil, required: true, nullable: false, emit_null: false)]
    getter id : String? = nil

    @[JSON::Field(key: "report", type: BeaconReportSyndicationOriginalReport?, default: nil, required: true, nullable: false, emit_null: false)]
    getter report : BeaconReportSyndicationOriginalReport? = nil

    @[JSON::Field(key: "analysis", type: BeaconReportSyndicationAnalysis?, default: nil, required: true, nullable: false, emit_null: false)]
    getter analysis : BeaconReportSyndicationAnalysis? = nil

    # End of Required Properties

    # Initializes the object
    # @param [Hash] attributes Model attributes in the form of hash
    def initialize(
      *,
      # Required properties
      @id : String? = nil,
      @report : BeaconReportSyndicationOriginalReport? = nil,
      @analysis : BeaconReportSyndicationAnalysis? = nil
    )
    end

    # Show invalid properties with the reasons. Usually used together with valid?
    # @return Array for valid properties with the reasons
    def list_invalid_properties : Array(String)
      invalid_properties = Array(String).new

      invalid_properties.push("\"id\" is required and cannot be null") if @id.nil?

      unless (_id = @id).nil?
      end
      invalid_properties.push("\"report\" is required and cannot be null") if @report.nil?

      unless (_report = @report).nil?
      end
      invalid_properties.push("\"analysis\" is required and cannot be null") if @analysis.nil?

      unless (_analysis = @analysis).nil?
      end
      invalid_properties
    end

    # Check to see if the all the properties in the model are valid
    # @return true if the model is valid
    def valid? : Bool
      return false if @id.nil?
      unless (_id = @id).nil?
      end

      return false if @report.nil?
      unless (_report = @report).nil?
      end

      return false if @analysis.nil?
      unless (_analysis = @analysis).nil?
      end

      true
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] id Object to be assigned
    def id=(new_value : String?)
      raise ArgumentError.new("\"id\" is required and cannot be null") if new_value.nil?
      unless new_value.nil?
      end

      @id = new_value
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] report Object to be assigned
    def report=(new_value : BeaconReportSyndicationOriginalReport?)
      raise ArgumentError.new("\"report\" is required and cannot be null") if new_value.nil?
      unless new_value.nil?
      end

      @report = new_value
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] analysis Object to be assigned
    def analysis=(new_value : BeaconReportSyndicationAnalysis?)
      raise ArgumentError.new("\"analysis\" is required and cannot be null") if new_value.nil?
      unless new_value.nil?
      end

      @analysis = new_value
    end

    # Generates #hash and #== methods from all fields
    # #== @return [Bool]
    # #hash calculates hash code according to all attributes.
    # #hash @return [UInt64] Hash code
    def_equals_and_hash(@id, @report, @analysis)
  end
end
