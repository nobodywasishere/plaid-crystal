#  The Plaid API
#
# The Plaid REST API. Please see https://plaid.com/docs/api for more details.
#
# The version of the OpenAPI document: 2020-09-14_1.474.3
#
# Generated by: https://openapi-generator.tech
#

require "../../core"

module Plaid
  # Data about military info in the income verification precheck.
  class IncomeVerificationPrecheckMilitaryInfo
    include JSON::Serializable
    include JSON::Serializable::Unmapped
    include OpenApi::Validatable
    include OpenApi::Json

    # Optional Properties

    # Is the user currently active duty in the US military
    @[JSON::Field(key: "is_active_duty", type: Bool?, default: nil, required: false, nullable: true, emit_null: true, presence: true, ignore_serialize: is_active_duty.nil? && !is_active_duty_present?)]
    getter is_active_duty : Bool? = nil

    @[JSON::Field(ignore: true)]
    property? is_active_duty_present : Bool = false

    # If the user is currently serving in the US military, the branch of the military in which they are serving Valid values: 'AIR FORCE', 'ARMY', 'COAST GUARD', 'MARINES', 'NAVY', 'UNKNOWN'
    @[JSON::Field(key: "branch", type: String?, default: nil, required: false, nullable: true, emit_null: true, presence: true, ignore_serialize: branch.nil? && !branch_present?)]
    getter branch : String? = nil

    @[JSON::Field(ignore: true)]
    property? branch_present : Bool = false

    # Initializes the object
    # @param [Hash] attributes Model attributes in the form of hash
    def initialize(
      *,
      # Optional properties
      @is_active_duty : Bool? = nil,
      @branch : String? = nil
    )
    end

    # Show invalid properties with the reasons. Usually used together with valid?
    # @return Array for valid properties with the reasons
    def list_invalid_properties : Array(String)
      invalid_properties = Array(String).new

      unless (_is_active_duty = @is_active_duty).nil?
      end
      unless (_branch = @branch).nil?
      end
      invalid_properties
    end

    # Check to see if the all the properties in the model are valid
    # @return true if the model is valid
    def valid? : Bool
      unless (_is_active_duty = @is_active_duty).nil?
      end

      unless (_branch = @branch).nil?
      end

      true
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] is_active_duty Object to be assigned
    def is_active_duty=(new_value : Bool?)
      unless new_value.nil?
      end

      @is_active_duty = new_value
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] branch Object to be assigned
    def branch=(new_value : String?)
      unless new_value.nil?
      end

      @branch = new_value
    end

    # Generates #hash and #== methods from all fields
    # #== @return [Bool]
    # #hash calculates hash code according to all attributes.
    # #hash @return [UInt64] Hash code
    def_equals_and_hash(@is_active_duty, @is_active_duty_present, @branch, @branch_present)
  end
end
