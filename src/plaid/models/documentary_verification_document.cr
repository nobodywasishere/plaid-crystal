#  The Plaid API
#
# The Plaid REST API. Please see https://plaid.com/docs/api for more details.
#
# The version of the OpenAPI document: 2020-09-14_1.474.3
#
# Generated by: https://openapi-generator.tech
#

require "../../core"

require "./document_analysis"
require "./document_status"
require "./physical_document_extracted_data"
require "./physical_document_images"

module Plaid
  # Images, extracted data, and analysis from a user's identity document
  class DocumentaryVerificationDocument
    include JSON::Serializable
    include JSON::Serializable::Unmapped
    include OpenApi::Validatable
    include OpenApi::Json

    # Required Properties

    @[JSON::Field(key: "status", type: Plaid::DocumentStatus?, default: nil, required: true, nullable: false, emit_null: false)]
    getter status : Plaid::DocumentStatus? = nil

    # The `attempt` field begins with 1 and increments with each subsequent document upload.
    @[JSON::Field(key: "attempt", type: Int32?, default: nil, required: true, nullable: false, emit_null: false)]
    getter attempt : Int32? = nil

    @[JSON::Field(key: "images", type: PhysicalDocumentImages?, default: nil, required: true, nullable: false, emit_null: false)]
    getter images : PhysicalDocumentImages? = nil

    @[JSON::Field(key: "extracted_data", type: PhysicalDocumentExtractedData?, default: nil, required: true, nullable: true, emit_null: true)]
    getter extracted_data : PhysicalDocumentExtractedData? = nil

    @[JSON::Field(key: "analysis", type: DocumentAnalysis?, default: nil, required: true, nullable: false, emit_null: false)]
    getter analysis : DocumentAnalysis? = nil

    # An ISO8601 formatted timestamp.
    @[JSON::Field(key: "redacted_at", type: Time?, default: nil, required: true, nullable: true, emit_null: true, converter: Time::RFC3339Converter)]
    getter redacted_at : Time? = nil

    # End of Required Properties

    # Initializes the object
    # @param [Hash] attributes Model attributes in the form of hash
    def initialize(
      *,
      # Required properties
      @status : Plaid::DocumentStatus? = nil,
      @attempt : Int32? = nil,
      @images : PhysicalDocumentImages? = nil,
      @extracted_data : PhysicalDocumentExtractedData? = nil,
      @analysis : DocumentAnalysis? = nil,
      @redacted_at : Time? = nil
    )
    end

    # Show invalid properties with the reasons. Usually used together with valid?
    # @return Array for valid properties with the reasons
    def list_invalid_properties : Array(String)
      invalid_properties = Array(String).new

      invalid_properties.push("\"status\" is required and cannot be null") if @status.nil?

      unless (_status = @status).nil?
        invalid_properties.push(_status.error_message) if !_status.valid?
      end
      invalid_properties.push("\"attempt\" is required and cannot be null") if @attempt.nil?

      unless (_attempt = @attempt).nil?
      end
      invalid_properties.push("\"images\" is required and cannot be null") if @images.nil?

      unless (_images = @images).nil?
      end
      unless (_extracted_data = @extracted_data).nil?
      end
      invalid_properties.push("\"analysis\" is required and cannot be null") if @analysis.nil?

      unless (_analysis = @analysis).nil?
      end
      unless (_redacted_at = @redacted_at).nil?
      end
      invalid_properties
    end

    # Check to see if the all the properties in the model are valid
    # @return true if the model is valid
    def valid? : Bool
      return false if @status.nil?
      unless (_status = @status).nil?
        return false if !_status.valid?
      end

      return false if @attempt.nil?
      unless (_attempt = @attempt).nil?
      end

      return false if @images.nil?
      unless (_images = @images).nil?
      end

      unless (_extracted_data = @extracted_data).nil?
      end

      return false if @analysis.nil?
      unless (_analysis = @analysis).nil?
      end

      unless (_redacted_at = @redacted_at).nil?
      end

      true
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] status Object to be assigned
    def status=(new_value : Plaid::DocumentStatus?)
      raise ArgumentError.new("\"status\" is required and cannot be null") if new_value.nil?
      unless new_value.nil?
        new_value.validate
      end

      @status = new_value
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] attempt Object to be assigned
    def attempt=(new_value : Int32?)
      raise ArgumentError.new("\"attempt\" is required and cannot be null") if new_value.nil?
      unless new_value.nil?
      end

      @attempt = new_value
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] images Object to be assigned
    def images=(new_value : PhysicalDocumentImages?)
      raise ArgumentError.new("\"images\" is required and cannot be null") if new_value.nil?
      unless new_value.nil?
      end

      @images = new_value
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] extracted_data Object to be assigned
    def extracted_data=(new_value : PhysicalDocumentExtractedData?)
      unless new_value.nil?
      end

      @extracted_data = new_value
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] analysis Object to be assigned
    def analysis=(new_value : DocumentAnalysis?)
      raise ArgumentError.new("\"analysis\" is required and cannot be null") if new_value.nil?
      unless new_value.nil?
      end

      @analysis = new_value
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] redacted_at Object to be assigned
    def redacted_at=(new_value : Time?)
      unless new_value.nil?
      end

      @redacted_at = new_value
    end

    # Generates #hash and #== methods from all fields
    # #== @return [Bool]
    # #hash calculates hash code according to all attributes.
    # #hash @return [UInt64] Hash code
    def_equals_and_hash(@status, @attempt, @images, @extracted_data, @analysis, @redacted_at)
  end
end
