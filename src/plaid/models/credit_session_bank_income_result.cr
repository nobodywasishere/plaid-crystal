#  The Plaid API
#
# The Plaid REST API. Please see https://plaid.com/docs/api for more details.
#
# The version of the OpenAPI document: 2020-09-14_1.474.3
#
# Generated by: https://openapi-generator.tech
#

require "../../core"

require "./credit_session_bank_income_status"

module Plaid
  # The details of a bank income verification in Link
  class CreditSessionBankIncomeResult
    include JSON::Serializable
    include JSON::Serializable::Unmapped
    include OpenApi::Validatable
    include OpenApi::Json

    # Optional Properties

    @[JSON::Field(key: "status", type: Plaid::CreditSessionBankIncomeStatus?, default: nil, required: false, nullable: false, emit_null: false)]
    getter status : Plaid::CreditSessionBankIncomeStatus? = nil

    # The Plaid Item ID. The `item_id` is always unique; linking the same account at the same institution twice will result in two Items with different `item_id` values. Like all Plaid identifiers, the `item_id` is case-sensitive.
    @[JSON::Field(key: "item_id", type: String?, default: nil, required: false, nullable: false, emit_null: false)]
    getter item_id : String? = nil

    # The Plaid Institution ID associated with the Item.
    @[JSON::Field(key: "institution_id", type: String?, default: nil, required: false, nullable: false, emit_null: false)]
    getter institution_id : String? = nil

    # Initializes the object
    # @param [Hash] attributes Model attributes in the form of hash
    def initialize(
      *,
      # Optional properties
      @status : Plaid::CreditSessionBankIncomeStatus? = nil,
      @item_id : String? = nil,
      @institution_id : String? = nil
    )
    end

    # Show invalid properties with the reasons. Usually used together with valid?
    # @return Array for valid properties with the reasons
    def list_invalid_properties : Array(String)
      invalid_properties = Array(String).new

      unless (_status = @status).nil?
        invalid_properties.push(_status.error_message) if !_status.valid?
      end
      unless (_item_id = @item_id).nil?
      end
      unless (_institution_id = @institution_id).nil?
      end
      invalid_properties
    end

    # Check to see if the all the properties in the model are valid
    # @return true if the model is valid
    def valid? : Bool
      unless (_status = @status).nil?
        return false if !_status.valid?
      end

      unless (_item_id = @item_id).nil?
      end

      unless (_institution_id = @institution_id).nil?
      end

      true
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] status Object to be assigned
    def status=(new_value : Plaid::CreditSessionBankIncomeStatus?)
      unless new_value.nil?
        new_value.validate
      end

      @status = new_value
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] item_id Object to be assigned
    def item_id=(new_value : String?)
      unless new_value.nil?
      end

      @item_id = new_value
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] institution_id Object to be assigned
    def institution_id=(new_value : String?)
      unless new_value.nil?
      end

      @institution_id = new_value
    end

    # Generates #hash and #== methods from all fields
    # #== @return [Bool]
    # #hash calculates hash code according to all attributes.
    # #hash @return [UInt64] Hash code
    def_equals_and_hash(@status, @item_id, @institution_id)
  end
end
