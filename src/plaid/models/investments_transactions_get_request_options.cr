#  The Plaid API
#
# The Plaid REST API. Please see https://plaid.com/docs/api for more details.
#
# The version of the OpenAPI document: 2020-09-14_1.474.3
#
# Generated by: https://openapi-generator.tech
#

require "../../core"

module Plaid
  # An optional object to filter `/investments/transactions/get` results. If provided, must be non-`null`.
  class InvestmentsTransactionsGetRequestOptions
    include JSON::Serializable
    include JSON::Serializable::Unmapped
    include OpenApi::Validatable
    include OpenApi::Json

    # Optional Properties

    # An array of `account_ids` to retrieve for the Item.
    @[JSON::Field(key: "account_ids", type: Array(String)?, default: nil, required: false, nullable: false, emit_null: false)]
    getter account_ids : Array(String)? = nil

    # The number of transactions to fetch.
    @[JSON::Field(key: "count", type: Int32?, default: 100, required: false, nullable: false, emit_null: false)]
    getter count : Int32? = 100
    MAX_FOR_COUNT = Int32.new("500")
    MIN_FOR_COUNT = Int32.new("1")

    # The number of transactions to skip when fetching transaction history
    @[JSON::Field(key: "offset", type: Int32?, default: 0, required: false, nullable: false, emit_null: false)]
    getter offset : Int32? = 0
    MIN_FOR_OFFSET = Int32.new("0")

    # If the Item was not initialized with the investments product via the `products` array when calling `/link/token/create`, and `async_update` is set to true, the initial Investments extraction will happen asynchronously. Plaid will subsequently fire a `HISTORICAL_UPDATE` webhook when the extraction completes. When `false`, Plaid will wait to return a response until extraction completion and no `HISTORICAL_UPDATE` webhook will fire. Note that while the extraction is happening asynchronously, calls to `/investments/transactions/get` and `/investments/refresh` will return `PRODUCT_NOT_READY` errors until the extraction completes.
    @[JSON::Field(key: "async_update", type: Bool?, default: false, required: false, nullable: false, emit_null: false)]
    getter async_update : Bool? = false

    # Initializes the object
    # @param [Hash] attributes Model attributes in the form of hash
    def initialize(
      *,
      # Optional properties
      @account_ids : Array(String)? = nil,
      @count : Int32? = 100,
      @offset : Int32? = 0,
      @async_update : Bool? = false
    )
    end

    # Show invalid properties with the reasons. Usually used together with valid?
    # @return Array for valid properties with the reasons
    def list_invalid_properties : Array(String)
      invalid_properties = Array(String).new

      unless (_account_ids = @account_ids).nil?
      end
      unless (_count = @count).nil?
        if max_number_error = OpenApi::PrimitiveValidator.max_number_error("count", _count, MAX_FOR_COUNT)
          invalid_properties.push(max_number_error)
        end

        if min_number_error = OpenApi::PrimitiveValidator.min_number_error("count", _count, MIN_FOR_COUNT)
          invalid_properties.push(min_number_error)
        end
      end
      unless (_offset = @offset).nil?
        if min_number_error = OpenApi::PrimitiveValidator.min_number_error("offset", _offset, MIN_FOR_OFFSET)
          invalid_properties.push(min_number_error)
        end
      end
      unless (_async_update = @async_update).nil?
      end
      invalid_properties
    end

    # Check to see if the all the properties in the model are valid
    # @return true if the model is valid
    def valid? : Bool
      unless (_account_ids = @account_ids).nil?
      end

      unless (_count = @count).nil?
        return false if _count > MAX_FOR_COUNT
        return false if _count < MIN_FOR_COUNT
      end

      unless (_offset = @offset).nil?
        return false if _offset < MIN_FOR_OFFSET
      end

      unless (_async_update = @async_update).nil?
      end

      true
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] account_ids Object to be assigned
    def account_ids=(new_value : Array(String)?)
      unless new_value.nil?
      end

      @account_ids = new_value
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] count Object to be assigned
    def count=(new_value : Int32?)
      unless new_value.nil?
        OpenApi::PrimitiveValidator.validate_max_number("count", new_value, MAX_FOR_COUNT)
        OpenApi::PrimitiveValidator.validate_min_number("count", new_value, MIN_FOR_COUNT)
      end

      @count = new_value
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] offset Object to be assigned
    def offset=(new_value : Int32?)
      unless new_value.nil?
        OpenApi::PrimitiveValidator.validate_min_number("offset", new_value, MIN_FOR_OFFSET)
      end

      @offset = new_value
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] async_update Object to be assigned
    def async_update=(new_value : Bool?)
      unless new_value.nil?
      end

      @async_update = new_value
    end

    # Generates #hash and #== methods from all fields
    # #== @return [Bool]
    # #hash calculates hash code according to all attributes.
    # #hash @return [UInt64] Hash code
    def_equals_and_hash(@account_ids, @count, @offset, @async_update)
  end
end
