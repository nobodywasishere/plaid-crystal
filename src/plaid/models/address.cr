#  The Plaid API
#
# The Plaid REST API. Please see https://plaid.com/docs/api for more details.
#
# The version of the OpenAPI document: 2020-09-14_1.474.3
#
# Generated by: https://openapi-generator.tech
#

require "../../core"

require "./address_data"

module Plaid
  # A physical mailing address.
  class Address
    include JSON::Serializable
    include JSON::Serializable::Unmapped
    include OpenApi::Validatable
    include OpenApi::Json

    # Required Properties

    @[JSON::Field(key: "data", type: AddressData?, default: nil, required: true, nullable: false, emit_null: false)]
    getter data : AddressData? = nil

    # End of Required Properties

    # Optional Properties

    # When `true`, identifies the address as the primary address on an account.
    @[JSON::Field(key: "primary", type: Bool?, default: nil, required: false, nullable: false, emit_null: false)]
    getter primary : Bool? = nil

    # Initializes the object
    # @param [Hash] attributes Model attributes in the form of hash
    def initialize(
      *,
      # Required properties
      @data : AddressData? = nil,
      # Optional properties
      @primary : Bool? = nil
    )
    end

    # Show invalid properties with the reasons. Usually used together with valid?
    # @return Array for valid properties with the reasons
    def list_invalid_properties : Array(String)
      invalid_properties = Array(String).new

      invalid_properties.push("\"data\" is required and cannot be null") if @data.nil?

      unless (_data = @data).nil?
      end
      unless (_primary = @primary).nil?
      end
      invalid_properties
    end

    # Check to see if the all the properties in the model are valid
    # @return true if the model is valid
    def valid? : Bool
      return false if @data.nil?
      unless (_data = @data).nil?
      end

      unless (_primary = @primary).nil?
      end

      true
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] data Object to be assigned
    def data=(new_value : AddressData?)
      raise ArgumentError.new("\"data\" is required and cannot be null") if new_value.nil?
      unless new_value.nil?
      end

      @data = new_value
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] primary Object to be assigned
    def primary=(new_value : Bool?)
      unless new_value.nil?
      end

      @primary = new_value
    end

    # Generates #hash and #== methods from all fields
    # #== @return [Bool]
    # #hash calculates hash code according to all attributes.
    # #hash @return [UInt64] Hash code
    def_equals_and_hash(@data, @primary)
  end
end
