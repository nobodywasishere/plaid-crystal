#  The Plaid API
#
# The Plaid REST API. Please see https://plaid.com/docs/api for more details.
#
# The version of the OpenAPI document: 2020-09-14_1.474.3
#
# Generated by: https://openapi-generator.tech
#

require "../../core"

module Plaid
  # Allow the application to access specific products on this account
  class AccountProductAccess
    include JSON::Serializable
    include JSON::Serializable::Unmapped
    include OpenApi::Validatable
    include OpenApi::Json

    # Optional Properties

    # Allow the application to access account data. Only used by certain partners. If relevant to the partner and unset, defaults to `true`.
    @[JSON::Field(key: "account_data", type: Bool?, default: true, required: false, nullable: true, emit_null: true, presence: true, ignore_serialize: account_data.nil? && !account_data_present?)]
    getter account_data : Bool? = true

    @[JSON::Field(ignore: true)]
    property? account_data_present : Bool = false

    # Allow the application to access bank statements. Only used by certain partners. If relevant to the partner and unset, defaults to `true`.
    @[JSON::Field(key: "statements", type: Bool?, default: true, required: false, nullable: true, emit_null: true, presence: true, ignore_serialize: statements.nil? && !statements_present?)]
    getter statements : Bool? = true

    @[JSON::Field(ignore: true)]
    property? statements_present : Bool = false

    # Allow the application to access tax documents. Only used by certain partners. If relevant to the partner and unset, defaults to `true`.
    @[JSON::Field(key: "tax_documents", type: Bool?, default: true, required: false, nullable: true, emit_null: true, presence: true, ignore_serialize: tax_documents.nil? && !tax_documents_present?)]
    getter tax_documents : Bool? = true

    @[JSON::Field(ignore: true)]
    property? tax_documents_present : Bool = false

    # Initializes the object
    # @param [Hash] attributes Model attributes in the form of hash
    def initialize(
      *,
      # Optional properties
      @account_data : Bool? = true,
      @statements : Bool? = true,
      @tax_documents : Bool? = true
    )
    end

    # Show invalid properties with the reasons. Usually used together with valid?
    # @return Array for valid properties with the reasons
    def list_invalid_properties : Array(String)
      invalid_properties = Array(String).new

      unless (_account_data = @account_data).nil?
      end
      unless (_statements = @statements).nil?
      end
      unless (_tax_documents = @tax_documents).nil?
      end
      invalid_properties
    end

    # Check to see if the all the properties in the model are valid
    # @return true if the model is valid
    def valid? : Bool
      unless (_account_data = @account_data).nil?
      end

      unless (_statements = @statements).nil?
      end

      unless (_tax_documents = @tax_documents).nil?
      end

      true
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] account_data Object to be assigned
    def account_data=(new_value : Bool?)
      unless new_value.nil?
      end

      @account_data = new_value
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] statements Object to be assigned
    def statements=(new_value : Bool?)
      unless new_value.nil?
      end

      @statements = new_value
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] tax_documents Object to be assigned
    def tax_documents=(new_value : Bool?)
      unless new_value.nil?
      end

      @tax_documents = new_value
    end

    # Generates #hash and #== methods from all fields
    # #== @return [Bool]
    # #hash calculates hash code according to all attributes.
    # #hash @return [UInt64] Hash code
    def_equals_and_hash(@account_data, @account_data_present, @statements, @statements_present, @tax_documents, @tax_documents_present)
  end
end
