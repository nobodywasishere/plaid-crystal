#  The Plaid API
#
# The Plaid REST API. Please see https://plaid.com/docs/api for more details.
#
# The version of the OpenAPI document: 2020-09-14_1.474.3
#
# Generated by: https://openapi-generator.tech
#

require "../../core"

require "./payment_initiation_address"
require "./wallet_transaction_counterparty_numbers"

module Plaid
  # An object representing the e-wallet transaction's counterparty
  class WalletTransactionCounterparty
    include JSON::Serializable
    include JSON::Serializable::Unmapped
    include OpenApi::Validatable
    include OpenApi::Json

    # Required Properties

    # The name of the counterparty
    @[JSON::Field(key: "name", type: String?, default: nil, required: true, nullable: false, emit_null: false)]
    getter name : String? = nil
    MIN_LENGTH_FOR_NAME = 1

    @[JSON::Field(key: "numbers", type: WalletTransactionCounterpartyNumbers?, default: nil, required: true, nullable: false, emit_null: false)]
    getter numbers : WalletTransactionCounterpartyNumbers? = nil

    # End of Required Properties

    # Optional Properties

    @[JSON::Field(key: "address", type: PaymentInitiationAddress?, default: nil, required: false, nullable: true, emit_null: true, presence: true, ignore_serialize: address.nil? && !address_present?)]
    getter address : PaymentInitiationAddress? = nil

    @[JSON::Field(ignore: true)]
    property? address_present : Bool = false

    # The counterparty's birthdate, in [ISO 8601](https://wikipedia.org/wiki/ISO_8601) (YYYY-MM-DD) format.
    @[JSON::Field(key: "date_of_birth", type: Time?, default: nil, required: false, nullable: true, emit_null: true, presence: true, ignore_serialize: date_of_birth.nil? && !date_of_birth_present?, converter: Time::ISO8601DateConverter)]
    getter date_of_birth : Time? = nil

    @[JSON::Field(ignore: true)]
    property? date_of_birth_present : Bool = false

    # Initializes the object
    # @param [Hash] attributes Model attributes in the form of hash
    def initialize(
      *,
      # Required properties
      @name : String? = nil,
      @numbers : WalletTransactionCounterpartyNumbers? = nil,
      # Optional properties
      @address : PaymentInitiationAddress? = nil,
      @date_of_birth : Time? = nil
    )
    end

    # Show invalid properties with the reasons. Usually used together with valid?
    # @return Array for valid properties with the reasons
    def list_invalid_properties : Array(String)
      invalid_properties = Array(String).new

      invalid_properties.push("\"name\" is required and cannot be null") if @name.nil?

      unless (_name = @name).nil?
        if min_length_error = OpenApi::PrimitiveValidator.min_length_error("name", _name.to_s.size, MIN_LENGTH_FOR_NAME)
          invalid_properties.push(min_length_error)
        end
      end
      invalid_properties.push("\"numbers\" is required and cannot be null") if @numbers.nil?

      unless (_numbers = @numbers).nil?
      end
      unless (_address = @address).nil?
      end
      unless (_date_of_birth = @date_of_birth).nil?
      end
      invalid_properties
    end

    # Check to see if the all the properties in the model are valid
    # @return true if the model is valid
    def valid? : Bool
      return false if @name.nil?
      unless (_name = @name).nil?
        return false if _name.to_s.size < MIN_LENGTH_FOR_NAME
      end

      return false if @numbers.nil?
      unless (_numbers = @numbers).nil?
      end

      unless (_address = @address).nil?
      end

      unless (_date_of_birth = @date_of_birth).nil?
      end

      true
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] name Object to be assigned
    def name=(new_value : String?)
      raise ArgumentError.new("\"name\" is required and cannot be null") if new_value.nil?
      unless new_value.nil?
        OpenApi::PrimitiveValidator.validate_min_length("name", new_value.to_s.size, MIN_LENGTH_FOR_NAME)
      end

      @name = new_value
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] numbers Object to be assigned
    def numbers=(new_value : WalletTransactionCounterpartyNumbers?)
      raise ArgumentError.new("\"numbers\" is required and cannot be null") if new_value.nil?
      unless new_value.nil?
      end

      @numbers = new_value
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] address Object to be assigned
    def address=(new_value : PaymentInitiationAddress?)
      unless new_value.nil?
      end

      @address = new_value
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] date_of_birth Object to be assigned
    def date_of_birth=(new_value : Time?)
      unless new_value.nil?
      end

      @date_of_birth = new_value
    end

    # Generates #hash and #== methods from all fields
    # #== @return [Bool]
    # #hash calculates hash code according to all attributes.
    # #hash @return [UInt64] Hash code
    def_equals_and_hash(@name, @numbers, @address, @address_present, @date_of_birth, @date_of_birth_present)
  end
end
