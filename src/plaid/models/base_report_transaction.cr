#  The Plaid API
#
# The Plaid REST API. Please see https://plaid.com/docs/api for more details.
#
# The version of the OpenAPI document: 2020-09-14_1.474.3
#
# Generated by: https://openapi-generator.tech
#

require "../../core"

require "./credit_category"
require "./location"

module Plaid
  # A transaction on the Base Report
  class BaseReportTransaction
    include JSON::Serializable
    include JSON::Serializable::Unmapped
    include OpenApi::Validatable
    include OpenApi::Json

    # Required Properties

    # The settled value of the transaction, denominated in the transaction's currency, as stated in `iso_currency_code` or `unofficial_currency_code`. Positive values when money moves out of the account; negative values when money moves in. For example, debit card purchases are positive; credit card payments, direct deposits, and refunds are negative.
    @[JSON::Field(key: "amount", type: Float64?, default: nil, required: true, nullable: false, emit_null: false)]
    getter amount : Float64? = nil

    # The ISO-4217 currency code of the transaction. Always `null` if `unofficial_currency_code` is non-null.
    @[JSON::Field(key: "iso_currency_code", type: String?, default: nil, required: true, nullable: true, emit_null: true)]
    getter iso_currency_code : String? = nil

    # The unofficial currency code associated with the transaction. Always `null` if `iso_currency_code` is non-`null`. Unofficial currency codes are used for currencies that do not have official ISO currency codes, such as cryptocurrencies and the currencies of certain countries.  See the [currency code schema](https://plaid.com/docs/api/accounts#currency-code-schema) for a full listing of supported `unofficial_currency_code`s.
    @[JSON::Field(key: "unofficial_currency_code", type: String?, default: nil, required: true, nullable: true, emit_null: true)]
    getter unofficial_currency_code : String? = nil

    # The string returned by the financial institution to describe the transaction.
    @[JSON::Field(key: "original_description", type: String?, default: nil, required: true, nullable: true, emit_null: true)]
    getter original_description : String? = nil

    # For pending transactions, the date that the transaction occurred; for posted transactions, the date that the transaction posted. Both dates are returned in an [ISO 8601](https://wikipedia.org/wiki/ISO_8601) format ( `YYYY-MM-DD` ).
    @[JSON::Field(key: "date", type: Time?, default: nil, required: true, nullable: false, emit_null: false, converter: Time::ISO8601DateConverter)]
    getter date : Time? = nil

    # When `true`, identifies the transaction as pending or unsettled. Pending transaction details (name, type, amount, category ID) may change before they are settled.
    @[JSON::Field(key: "pending", type: Bool?, default: nil, required: true, nullable: false, emit_null: false)]
    getter pending : Bool? = nil

    # End of Required Properties

    # Optional Properties

    @[JSON::Field(key: "credit_category", type: CreditCategory?, default: nil, required: false, nullable: true, emit_null: true, presence: true, ignore_serialize: credit_category.nil? && !credit_category_present?)]
    getter credit_category : CreditCategory? = nil

    @[JSON::Field(ignore: true)]
    property? credit_category_present : Bool = false

    # The check number of the transaction. This field is only populated for check transactions.
    @[JSON::Field(key: "check_number", type: String?, default: nil, required: false, nullable: true, emit_null: true, presence: true, ignore_serialize: check_number.nil? && !check_number_present?)]
    getter check_number : String? = nil

    @[JSON::Field(ignore: true)]
    property? check_number_present : Bool = false

    # The date on which the transaction took place, in IS0 8601 format.
    @[JSON::Field(key: "date_transacted", type: String?, default: nil, required: false, nullable: true, emit_null: true, presence: true, ignore_serialize: date_transacted.nil? && !date_transacted_present?)]
    getter date_transacted : String? = nil

    @[JSON::Field(ignore: true)]
    property? date_transacted_present : Bool = false

    @[JSON::Field(key: "location", type: Location?, default: nil, required: false, nullable: false, emit_null: false)]
    getter location : Location? = nil

    # The merchant name, as enriched by Plaid from the `name` field. This is typically a more human-readable version of the merchant counterparty in the transaction. For some bank transactions (such as checks or account transfers) where there is no meaningful merchant name, this value will be `null`.
    @[JSON::Field(key: "merchant_name", type: String?, default: nil, required: false, nullable: true, emit_null: true, presence: true, ignore_serialize: merchant_name.nil? && !merchant_name_present?)]
    getter merchant_name : String? = nil

    @[JSON::Field(ignore: true)]
    property? merchant_name_present : Bool = false

    # The name of the account owner. This field is not typically populated and only relevant when dealing with sub-accounts.
    @[JSON::Field(key: "account_owner", type: String?, default: nil, required: false, nullable: true, emit_null: true, presence: true, ignore_serialize: account_owner.nil? && !account_owner_present?)]
    getter account_owner : String? = nil

    @[JSON::Field(ignore: true)]
    property? account_owner_present : Bool = false

    # Initializes the object
    # @param [Hash] attributes Model attributes in the form of hash
    def initialize(
      *,
      # Required properties
      @amount : Float64? = nil,
      @iso_currency_code : String? = nil,
      @unofficial_currency_code : String? = nil,
      @original_description : String? = nil,
      @date : Time? = nil,
      @pending : Bool? = nil,
      # Optional properties
      @credit_category : CreditCategory? = nil,
      @check_number : String? = nil,
      @date_transacted : String? = nil,
      @location : Location? = nil,
      @merchant_name : String? = nil,
      @account_owner : String? = nil
    )
    end

    # Show invalid properties with the reasons. Usually used together with valid?
    # @return Array for valid properties with the reasons
    def list_invalid_properties : Array(String)
      invalid_properties = Array(String).new

      invalid_properties.push("\"amount\" is required and cannot be null") if @amount.nil?

      unless (_amount = @amount).nil?
      end
      unless (_iso_currency_code = @iso_currency_code).nil?
      end
      unless (_unofficial_currency_code = @unofficial_currency_code).nil?
      end
      unless (_original_description = @original_description).nil?
      end
      invalid_properties.push("\"date\" is required and cannot be null") if @date.nil?

      unless (_date = @date).nil?
      end
      invalid_properties.push("\"pending\" is required and cannot be null") if @pending.nil?

      unless (_pending = @pending).nil?
      end
      unless (_credit_category = @credit_category).nil?
      end
      unless (_check_number = @check_number).nil?
      end
      unless (_date_transacted = @date_transacted).nil?
      end
      unless (_location = @location).nil?
      end
      unless (_merchant_name = @merchant_name).nil?
      end
      unless (_account_owner = @account_owner).nil?
      end
      invalid_properties
    end

    # Check to see if the all the properties in the model are valid
    # @return true if the model is valid
    def valid? : Bool
      return false if @amount.nil?
      unless (_amount = @amount).nil?
      end

      unless (_iso_currency_code = @iso_currency_code).nil?
      end

      unless (_unofficial_currency_code = @unofficial_currency_code).nil?
      end

      unless (_original_description = @original_description).nil?
      end

      return false if @date.nil?
      unless (_date = @date).nil?
      end

      return false if @pending.nil?
      unless (_pending = @pending).nil?
      end

      unless (_credit_category = @credit_category).nil?
      end

      unless (_check_number = @check_number).nil?
      end

      unless (_date_transacted = @date_transacted).nil?
      end

      unless (_location = @location).nil?
      end

      unless (_merchant_name = @merchant_name).nil?
      end

      unless (_account_owner = @account_owner).nil?
      end

      true
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] amount Object to be assigned
    def amount=(new_value : Float64?)
      raise ArgumentError.new("\"amount\" is required and cannot be null") if new_value.nil?
      unless new_value.nil?
      end

      @amount = new_value
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] iso_currency_code Object to be assigned
    def iso_currency_code=(new_value : String?)
      unless new_value.nil?
      end

      @iso_currency_code = new_value
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] unofficial_currency_code Object to be assigned
    def unofficial_currency_code=(new_value : String?)
      unless new_value.nil?
      end

      @unofficial_currency_code = new_value
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] original_description Object to be assigned
    def original_description=(new_value : String?)
      unless new_value.nil?
      end

      @original_description = new_value
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] date Object to be assigned
    def date=(new_value : Time?)
      raise ArgumentError.new("\"date\" is required and cannot be null") if new_value.nil?
      unless new_value.nil?
      end

      @date = new_value
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] pending Object to be assigned
    def pending=(new_value : Bool?)
      raise ArgumentError.new("\"pending\" is required and cannot be null") if new_value.nil?
      unless new_value.nil?
      end

      @pending = new_value
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] credit_category Object to be assigned
    def credit_category=(new_value : CreditCategory?)
      unless new_value.nil?
      end

      @credit_category = new_value
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] check_number Object to be assigned
    def check_number=(new_value : String?)
      unless new_value.nil?
      end

      @check_number = new_value
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] date_transacted Object to be assigned
    def date_transacted=(new_value : String?)
      unless new_value.nil?
      end

      @date_transacted = new_value
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] location Object to be assigned
    def location=(new_value : Location?)
      unless new_value.nil?
      end

      @location = new_value
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] merchant_name Object to be assigned
    def merchant_name=(new_value : String?)
      unless new_value.nil?
      end

      @merchant_name = new_value
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] account_owner Object to be assigned
    def account_owner=(new_value : String?)
      unless new_value.nil?
      end

      @account_owner = new_value
    end

    # Generates #hash and #== methods from all fields
    # #== @return [Bool]
    # #hash calculates hash code according to all attributes.
    # #hash @return [UInt64] Hash code
    def_equals_and_hash(@amount, @iso_currency_code, @unofficial_currency_code, @original_description, @date, @pending, @credit_category, @credit_category_present, @check_number, @check_number_present, @date_transacted, @date_transacted_present, @location, @merchant_name, @merchant_name_present, @account_owner, @account_owner_present)
  end
end
