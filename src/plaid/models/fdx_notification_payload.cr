#  The Plaid API
#
# The Plaid REST API. Please see https://plaid.com/docs/api for more details.
#
# The version of the OpenAPI document: 2020-09-14_1.474.3
#
# Generated by: https://openapi-generator.tech
#

require "../../core"

require "./fdx_notification_payload_id_type"
require "./fdxfi_attribute"

module Plaid
  # Custom key-value pairs payload for a notification
  class FDXNotificationPayload
    include JSON::Serializable
    include JSON::Serializable::Unmapped
    include OpenApi::Validatable
    include OpenApi::Json

    # Optional Properties

    # ID for the origination entity related to the notification
    @[JSON::Field(key: "id", type: String?, default: nil, required: false, nullable: false, emit_null: false)]
    getter id : String? = nil

    @[JSON::Field(key: "idType", type: Plaid::FDXNotificationPayloadIdType?, default: nil, required: false, nullable: false, emit_null: false)]
    getter id_type : Plaid::FDXNotificationPayloadIdType? = nil

    @[JSON::Field(key: "customFields", type: Array(Plaid::FDXFiAttribute)?, default: nil, required: false, nullable: false, emit_null: false)]
    getter custom_fields : Array(Plaid::FDXFiAttribute)? = nil

    # Initializes the object
    # @param [Hash] attributes Model attributes in the form of hash
    def initialize(
      *,
      # Optional properties
      @id : String? = nil,
      @id_type : Plaid::FDXNotificationPayloadIdType? = nil,
      @custom_fields : Array(Plaid::FDXFiAttribute)? = nil
    )
    end

    # Show invalid properties with the reasons. Usually used together with valid?
    # @return Array for valid properties with the reasons
    def list_invalid_properties : Array(String)
      invalid_properties = Array(String).new

      unless (_id = @id).nil?
      end
      unless (_id_type = @id_type).nil?
        invalid_properties.push(_id_type.error_message) if !_id_type.valid?
      end
      unless (_custom_fields = @custom_fields).nil?
        invalid_properties.concat(OpenApi::ContainerValidator.list_invalid_properties_for(key: "custom_fields", container: _custom_fields)) if _custom_fields.is_a?(Array)
      end
      invalid_properties
    end

    # Check to see if the all the properties in the model are valid
    # @return true if the model is valid
    def valid? : Bool
      unless (_id = @id).nil?
      end

      unless (_id_type = @id_type).nil?
        return false if !_id_type.valid?
      end

      unless (_custom_fields = @custom_fields).nil?
        return false if _custom_fields.is_a?(Array) && !OpenApi::ContainerValidator.valid?(container: _custom_fields)
      end

      true
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] id Object to be assigned
    def id=(new_value : String?)
      unless new_value.nil?
      end

      @id = new_value
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] id_type Object to be assigned
    def id_type=(new_value : Plaid::FDXNotificationPayloadIdType?)
      unless new_value.nil?
        new_value.validate
      end

      @id_type = new_value
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] custom_fields Object to be assigned
    def custom_fields=(new_value : Array(Plaid::FDXFiAttribute)?)
      unless new_value.nil?
        OpenApi::ContainerValidator.validate(container: new_value) if new_value.is_a?(Array)
      end

      @custom_fields = new_value
    end

    # Generates #hash and #== methods from all fields
    # #== @return [Bool]
    # #hash calculates hash code according to all attributes.
    # #hash @return [UInt64] Hash code
    def_equals_and_hash(@id, @id_type, @custom_fields)
  end
end
