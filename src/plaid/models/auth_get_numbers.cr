#  The Plaid API
#
# The Plaid REST API. Please see https://plaid.com/docs/api for more details.
#
# The version of the OpenAPI document: 2020-09-14_1.474.3
#
# Generated by: https://openapi-generator.tech
#

require "../../core"

require "./numbers_ach"
require "./numbers_bacs"
require "./numbers_eft"
require "./numbers_international"

module Plaid
  # An object containing identifying numbers used for making electronic transfers to and from the `accounts`. The identifying number type (ACH, EFT, IBAN, or BACS) used will depend on the country of the account. An account may have more than one number type. If a particular identifying number type is not used by any `accounts` for which data has been requested, the array for that type will be empty.
  class AuthGetNumbers
    include JSON::Serializable
    include JSON::Serializable::Unmapped
    include OpenApi::Validatable
    include OpenApi::Json

    # Required Properties

    # An array of ACH numbers identifying accounts.
    @[JSON::Field(key: "ach", type: Array(NumbersACH)?, default: nil, required: true, nullable: false, emit_null: false)]
    getter ach : Array(NumbersACH)? = nil

    # An array of EFT numbers identifying accounts.
    @[JSON::Field(key: "eft", type: Array(NumbersEFT)?, default: nil, required: true, nullable: false, emit_null: false)]
    getter eft : Array(NumbersEFT)? = nil

    # An array of IBAN numbers identifying accounts.
    @[JSON::Field(key: "international", type: Array(NumbersInternational)?, default: nil, required: true, nullable: false, emit_null: false)]
    getter international : Array(NumbersInternational)? = nil

    # An array of BACS numbers identifying accounts.
    @[JSON::Field(key: "bacs", type: Array(NumbersBACS)?, default: nil, required: true, nullable: false, emit_null: false)]
    getter bacs : Array(NumbersBACS)? = nil

    # End of Required Properties

    # Initializes the object
    # @param [Hash] attributes Model attributes in the form of hash
    def initialize(
      *,
      # Required properties
      @ach : Array(NumbersACH)? = nil,
      @eft : Array(NumbersEFT)? = nil,
      @international : Array(NumbersInternational)? = nil,
      @bacs : Array(NumbersBACS)? = nil
    )
    end

    # Show invalid properties with the reasons. Usually used together with valid?
    # @return Array for valid properties with the reasons
    def list_invalid_properties : Array(String)
      invalid_properties = Array(String).new

      invalid_properties.push("\"ach\" is required and cannot be null") if @ach.nil?

      unless (_ach = @ach).nil?
      end
      invalid_properties.push("\"eft\" is required and cannot be null") if @eft.nil?

      unless (_eft = @eft).nil?
      end
      invalid_properties.push("\"international\" is required and cannot be null") if @international.nil?

      unless (_international = @international).nil?
      end
      invalid_properties.push("\"bacs\" is required and cannot be null") if @bacs.nil?

      unless (_bacs = @bacs).nil?
      end
      invalid_properties
    end

    # Check to see if the all the properties in the model are valid
    # @return true if the model is valid
    def valid? : Bool
      return false if @ach.nil?
      unless (_ach = @ach).nil?
      end

      return false if @eft.nil?
      unless (_eft = @eft).nil?
      end

      return false if @international.nil?
      unless (_international = @international).nil?
      end

      return false if @bacs.nil?
      unless (_bacs = @bacs).nil?
      end

      true
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] ach Object to be assigned
    def ach=(new_value : Array(NumbersACH)?)
      raise ArgumentError.new("\"ach\" is required and cannot be null") if new_value.nil?
      unless new_value.nil?
      end

      @ach = new_value
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] eft Object to be assigned
    def eft=(new_value : Array(NumbersEFT)?)
      raise ArgumentError.new("\"eft\" is required and cannot be null") if new_value.nil?
      unless new_value.nil?
      end

      @eft = new_value
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] international Object to be assigned
    def international=(new_value : Array(NumbersInternational)?)
      raise ArgumentError.new("\"international\" is required and cannot be null") if new_value.nil?
      unless new_value.nil?
      end

      @international = new_value
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] bacs Object to be assigned
    def bacs=(new_value : Array(NumbersBACS)?)
      raise ArgumentError.new("\"bacs\" is required and cannot be null") if new_value.nil?
      unless new_value.nil?
      end

      @bacs = new_value
    end

    # Generates #hash and #== methods from all fields
    # #== @return [Bool]
    # #hash calculates hash code according to all attributes.
    # #hash @return [UInt64] Hash code
    def_equals_and_hash(@ach, @eft, @international, @bacs)
  end
end
