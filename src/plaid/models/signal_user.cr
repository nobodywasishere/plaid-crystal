#  The Plaid API
#
# The Plaid REST API. Please see https://plaid.com/docs/api for more details.
#
# The version of the OpenAPI document: 2020-09-14_1.474.3
#
# Generated by: https://openapi-generator.tech
#

require "../../core"

require "./signal_address_data"
require "./signal_person_name"

module Plaid
  # Details about the end user initiating the transaction (i.e., the account holder).
  class SignalUser
    include JSON::Serializable
    include JSON::Serializable::Unmapped
    include OpenApi::Validatable
    include OpenApi::Json

    # Optional Properties

    @[JSON::Field(key: "name", type: Plaid::SignalPersonName?, default: nil, required: false, nullable: true, emit_null: true, presence: true, ignore_serialize: name.nil? && !name_present?)]
    getter name : Plaid::SignalPersonName? = nil

    @[JSON::Field(ignore: true)]
    property? name_present : Bool = false

    # The user's phone number, in E.164 format: +{countrycode}{number}. For example: \"+14151234567\"
    @[JSON::Field(key: "phone_number", type: String?, default: nil, required: false, nullable: true, emit_null: true, presence: true, ignore_serialize: phone_number.nil? && !phone_number_present?)]
    getter phone_number : String? = nil

    @[JSON::Field(ignore: true)]
    property? phone_number_present : Bool = false

    # The user's email address.
    @[JSON::Field(key: "email_address", type: String?, default: nil, required: false, nullable: true, emit_null: true, presence: true, ignore_serialize: email_address.nil? && !email_address_present?)]
    getter email_address : String? = nil

    @[JSON::Field(ignore: true)]
    property? email_address_present : Bool = false

    @[JSON::Field(key: "address", type: SignalAddressData?, default: nil, required: false, nullable: true, emit_null: true, presence: true, ignore_serialize: address.nil? && !address_present?)]
    getter address : SignalAddressData? = nil

    @[JSON::Field(ignore: true)]
    property? address_present : Bool = false

    # Initializes the object
    # @param [Hash] attributes Model attributes in the form of hash
    def initialize(
      *,
      # Optional properties
      @name : Plaid::SignalPersonName? = nil,
      @phone_number : String? = nil,
      @email_address : String? = nil,
      @address : SignalAddressData? = nil
    )
    end

    # Show invalid properties with the reasons. Usually used together with valid?
    # @return Array for valid properties with the reasons
    def list_invalid_properties : Array(String)
      invalid_properties = Array(String).new

      unless (_name = @name).nil?
        invalid_properties.concat(_name.list_invalid_properties_for("name")) if _name.is_a?(OpenApi::Validatable)
      end
      unless (_phone_number = @phone_number).nil?
      end
      unless (_email_address = @email_address).nil?
      end
      unless (_address = @address).nil?
      end
      invalid_properties
    end

    # Check to see if the all the properties in the model are valid
    # @return true if the model is valid
    def valid? : Bool
      unless (_name = @name).nil?
        return false if _name.is_a?(OpenApi::Validatable) && !_name.valid?
      end

      unless (_phone_number = @phone_number).nil?
      end

      unless (_email_address = @email_address).nil?
      end

      unless (_address = @address).nil?
      end

      true
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] name Object to be assigned
    def name=(new_value : Plaid::SignalPersonName?)
      unless new_value.nil?
        new_value.validate if new_value.is_a?(OpenApi::Validatable)
      end

      @name = new_value
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] phone_number Object to be assigned
    def phone_number=(new_value : String?)
      unless new_value.nil?
      end

      @phone_number = new_value
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] email_address Object to be assigned
    def email_address=(new_value : String?)
      unless new_value.nil?
      end

      @email_address = new_value
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] address Object to be assigned
    def address=(new_value : SignalAddressData?)
      unless new_value.nil?
      end

      @address = new_value
    end

    # Generates #hash and #== methods from all fields
    # #== @return [Bool]
    # #hash calculates hash code according to all attributes.
    # #hash @return [UInt64] Hash code
    def_equals_and_hash(@name, @name_present, @phone_number, @phone_number_present, @email_address, @email_address_present, @address, @address_present)
  end
end
