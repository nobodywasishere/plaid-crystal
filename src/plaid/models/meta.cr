#  The Plaid API
#
# The Plaid REST API. Please see https://plaid.com/docs/api for more details.
#
# The version of the OpenAPI document: 2020-09-14_1.474.3
#
# Generated by: https://openapi-generator.tech
#

require "../../core"

module Plaid
  # Allows specifying the metadata of the test account
  class Meta
    include JSON::Serializable
    include JSON::Serializable::Unmapped
    include OpenApi::Validatable
    include OpenApi::Json

    # Required Properties

    # The account's name
    @[JSON::Field(key: "name", type: String?, default: nil, required: true, nullable: false, emit_null: false)]
    getter name : String? = nil

    # The account's official name
    @[JSON::Field(key: "official_name", type: String?, default: nil, required: true, nullable: false, emit_null: false)]
    getter official_name : String? = nil

    # The account's limit
    @[JSON::Field(key: "limit", type: Float64?, default: nil, required: true, nullable: false, emit_null: false)]
    getter limit : Float64? = nil

    # The account's mask. Should be an empty string or a string of 2-4 alphanumeric characters. This allows you to model a mask which does not match the account number (such as with a virtual account number).
    @[JSON::Field(key: "mask", type: String?, default: nil, required: true, nullable: false, emit_null: false)]
    getter mask : String? = nil
    PATTERN_FOR_MASK = /^$|^[A-Za-z0-9]{2,4}$/

    # End of Required Properties

    # Initializes the object
    # @param [Hash] attributes Model attributes in the form of hash
    def initialize(
      *,
      # Required properties
      @name : String? = nil,
      @official_name : String? = nil,
      @limit : Float64? = nil,
      @mask : String? = nil
    )
    end

    # Show invalid properties with the reasons. Usually used together with valid?
    # @return Array for valid properties with the reasons
    def list_invalid_properties : Array(String)
      invalid_properties = Array(String).new

      invalid_properties.push("\"name\" is required and cannot be null") if @name.nil?

      unless (_name = @name).nil?
      end
      invalid_properties.push("\"official_name\" is required and cannot be null") if @official_name.nil?

      unless (_official_name = @official_name).nil?
      end
      invalid_properties.push("\"limit\" is required and cannot be null") if @limit.nil?

      unless (_limit = @limit).nil?
      end
      invalid_properties.push("\"mask\" is required and cannot be null") if @mask.nil?

      unless (_mask = @mask).nil?
        if pattern_error = OpenApi::PrimitiveValidator.pattern_error("mask", _mask, PATTERN_FOR_MASK)
          invalid_properties.push(pattern_error)
        end
      end
      invalid_properties
    end

    # Check to see if the all the properties in the model are valid
    # @return true if the model is valid
    def valid? : Bool
      return false if @name.nil?
      unless (_name = @name).nil?
      end

      return false if @official_name.nil?
      unless (_official_name = @official_name).nil?
      end

      return false if @limit.nil?
      unless (_limit = @limit).nil?
      end

      return false if @mask.nil?
      unless (_mask = @mask).nil?
        return false if !PATTERN_FOR_MASK.matches?(_mask)
      end

      true
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] name Object to be assigned
    def name=(new_value : String?)
      raise ArgumentError.new("\"name\" is required and cannot be null") if new_value.nil?
      unless new_value.nil?
      end

      @name = new_value
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] official_name Object to be assigned
    def official_name=(new_value : String?)
      raise ArgumentError.new("\"official_name\" is required and cannot be null") if new_value.nil?
      unless new_value.nil?
      end

      @official_name = new_value
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] limit Object to be assigned
    def limit=(new_value : Float64?)
      raise ArgumentError.new("\"limit\" is required and cannot be null") if new_value.nil?
      unless new_value.nil?
      end

      @limit = new_value
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] mask Object to be assigned
    def mask=(new_value : String?)
      raise ArgumentError.new("\"mask\" is required and cannot be null") if new_value.nil?
      unless new_value.nil?
        OpenApi::PrimitiveValidator.validate_pattern("mask", new_value, PATTERN_FOR_MASK)
      end

      @mask = new_value
    end

    # Generates #hash and #== methods from all fields
    # #== @return [Bool]
    # #hash calculates hash code according to all attributes.
    # #hash @return [UInt64] Hash code
    def_equals_and_hash(@name, @official_name, @limit, @mask)
  end
end
