#  The Plaid API
#
# The Plaid REST API. Please see https://plaid.com/docs/api for more details.
#
# The version of the OpenAPI document: 2020-09-14_1.474.3
#
# Generated by: https://openapi-generator.tech
#

require "../../core"

require "./country_code"
require "./institutions_get_request_options"

module Plaid
  # InstitutionsGetRequest defines the request schema for `/institutions/get`
  class InstitutionsGetRequest
    include JSON::Serializable
    include JSON::Serializable::Unmapped
    include OpenApi::Validatable
    include OpenApi::Json

    # Required Properties

    # The total number of Institutions to return.
    @[JSON::Field(key: "count", type: Int32?, default: nil, required: true, nullable: false, emit_null: false)]
    getter count : Int32? = nil
    MAX_FOR_COUNT = Int32.new("500")
    MIN_FOR_COUNT = Int32.new("1")

    # The number of Institutions to skip.
    @[JSON::Field(key: "offset", type: Int32?, default: nil, required: true, nullable: false, emit_null: false)]
    getter offset : Int32? = nil
    MIN_FOR_OFFSET = Int32.new("0")

    # Specify which country or countries to include institutions from, using the ISO-3166-1 alpha-2 country code standard.  In API versions 2019-05-29 and earlier, the `country_codes` parameter is an optional parameter within the `options` object and will default to `[US]` if it is not supplied.
    @[JSON::Field(key: "country_codes", type: Array(CountryCode)?, default: nil, required: true, nullable: false, emit_null: false)]
    getter country_codes : Array(CountryCode)? = nil
    MIN_ITEMS_FOR_COUNTRY_CODES = 1

    # End of Required Properties

    # Optional Properties

    # Your Plaid API `client_id`. The `client_id` is required and may be provided either in the `PLAID-CLIENT-ID` header or as part of a request body.
    @[JSON::Field(key: "client_id", type: String?, default: nil, required: false, nullable: false, emit_null: false)]
    getter client_id : String? = nil

    # Your Plaid API `secret`. The `secret` is required and may be provided either in the `PLAID-SECRET` header or as part of a request body.
    @[JSON::Field(key: "secret", type: String?, default: nil, required: false, nullable: false, emit_null: false)]
    getter secret : String? = nil

    @[JSON::Field(key: "options", type: Plaid::InstitutionsGetRequestOptions?, default: nil, required: false, nullable: false, emit_null: false)]
    getter options : Plaid::InstitutionsGetRequestOptions? = nil

    # Initializes the object
    # @param [Hash] attributes Model attributes in the form of hash
    def initialize(
      *,
      # Required properties
      @count : Int32? = nil,
      @offset : Int32? = nil,
      @country_codes : Array(CountryCode)? = nil,
      # Optional properties
      @client_id : String? = nil,
      @secret : String? = nil,
      @options : Plaid::InstitutionsGetRequestOptions? = nil
    )
    end

    # Show invalid properties with the reasons. Usually used together with valid?
    # @return Array for valid properties with the reasons
    def list_invalid_properties : Array(String)
      invalid_properties = Array(String).new

      invalid_properties.push("\"count\" is required and cannot be null") if @count.nil?

      unless (_count = @count).nil?
        if max_number_error = OpenApi::PrimitiveValidator.max_number_error("count", _count, MAX_FOR_COUNT)
          invalid_properties.push(max_number_error)
        end

        if min_number_error = OpenApi::PrimitiveValidator.min_number_error("count", _count, MIN_FOR_COUNT)
          invalid_properties.push(min_number_error)
        end
      end
      invalid_properties.push("\"offset\" is required and cannot be null") if @offset.nil?

      unless (_offset = @offset).nil?
        if min_number_error = OpenApi::PrimitiveValidator.min_number_error("offset", _offset, MIN_FOR_OFFSET)
          invalid_properties.push(min_number_error)
        end
      end
      invalid_properties.push("\"country_codes\" is required and cannot be null") if @country_codes.nil?

      unless (_country_codes = @country_codes).nil?
        if min_items_error = OpenApi::PrimitiveValidator.min_items_error("country_codes", _country_codes.size, MIN_ITEMS_FOR_COUNTRY_CODES)
          invalid_properties.push(min_items_error)
        end
      end
      unless (_client_id = @client_id).nil?
      end
      unless (_secret = @secret).nil?
      end
      unless (_options = @options).nil?
        invalid_properties.concat(_options.list_invalid_properties_for("options")) if _options.is_a?(OpenApi::Validatable)
      end
      invalid_properties
    end

    # Check to see if the all the properties in the model are valid
    # @return true if the model is valid
    def valid? : Bool
      return false if @count.nil?
      unless (_count = @count).nil?
        return false if _count > MAX_FOR_COUNT
        return false if _count < MIN_FOR_COUNT
      end

      return false if @offset.nil?
      unless (_offset = @offset).nil?
        return false if _offset < MIN_FOR_OFFSET
      end

      return false if @country_codes.nil?
      unless (_country_codes = @country_codes).nil?
        return false if _country_codes.size < MIN_ITEMS_FOR_COUNTRY_CODES
      end

      unless (_client_id = @client_id).nil?
      end

      unless (_secret = @secret).nil?
      end

      unless (_options = @options).nil?
        return false if _options.is_a?(OpenApi::Validatable) && !_options.valid?
      end

      true
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] count Object to be assigned
    def count=(new_value : Int32?)
      raise ArgumentError.new("\"count\" is required and cannot be null") if new_value.nil?
      unless new_value.nil?
        OpenApi::PrimitiveValidator.validate_max_number("count", new_value, MAX_FOR_COUNT)
        OpenApi::PrimitiveValidator.validate_min_number("count", new_value, MIN_FOR_COUNT)
      end

      @count = new_value
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] offset Object to be assigned
    def offset=(new_value : Int32?)
      raise ArgumentError.new("\"offset\" is required and cannot be null") if new_value.nil?
      unless new_value.nil?
        OpenApi::PrimitiveValidator.validate_min_number("offset", new_value, MIN_FOR_OFFSET)
      end

      @offset = new_value
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] country_codes Object to be assigned
    def country_codes=(new_value : Array(CountryCode)?)
      raise ArgumentError.new("\"country_codes\" is required and cannot be null") if new_value.nil?
      unless new_value.nil?
        OpenApi::PrimitiveValidator.validate_min_items("country_codes", new_value.size, MIN_ITEMS_FOR_COUNTRY_CODES)
      end

      @country_codes = new_value
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] client_id Object to be assigned
    def client_id=(new_value : String?)
      unless new_value.nil?
      end

      @client_id = new_value
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] secret Object to be assigned
    def secret=(new_value : String?)
      unless new_value.nil?
      end

      @secret = new_value
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] options Object to be assigned
    def options=(new_value : Plaid::InstitutionsGetRequestOptions?)
      unless new_value.nil?
        new_value.validate if new_value.is_a?(OpenApi::Validatable)
      end

      @options = new_value
    end

    # Generates #hash and #== methods from all fields
    # #== @return [Bool]
    # #hash calculates hash code according to all attributes.
    # #hash @return [UInt64] Hash code
    def_equals_and_hash(@count, @offset, @country_codes, @client_id, @secret, @options)
  end
end
