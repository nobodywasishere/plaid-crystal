#  The Plaid API
#
# The Plaid REST API. Please see https://plaid.com/docs/api for more details.
#
# The version of the OpenAPI document: 2020-09-14_1.474.3
#
# Generated by: https://openapi-generator.tech
#

require "../../core"

require "./cra_bank_income_employer"
require "./cra_bank_income_historical_summary"
require "./credit_bank_income_category"
require "./credit_bank_income_pay_frequency"

module Plaid
  # Detailed information for the income source.
  class CraBankIncomeSource
    include JSON::Serializable
    include JSON::Serializable::Unmapped
    include OpenApi::Validatable
    include OpenApi::Json

    # Optional Properties

    # A unique identifier for an income source.
    @[JSON::Field(key: "income_source_id", type: String?, default: nil, required: false, nullable: false, emit_null: false)]
    getter income_source_id : String? = nil

    # The most common name or original description for the underlying income transactions.
    @[JSON::Field(key: "income_description", type: String?, default: nil, required: false, nullable: false, emit_null: false)]
    getter income_description : String? = nil

    @[JSON::Field(key: "income_category", type: Plaid::CreditBankIncomeCategory?, default: nil, required: false, nullable: false, emit_null: false)]
    getter income_category : Plaid::CreditBankIncomeCategory? = nil

    # Minimum of all dates within the specific income sources in the user's bank account for days requested by the client. The date will be returned in an ISO 8601 format (YYYY-MM-DD).
    @[JSON::Field(key: "start_date", type: Time?, default: nil, required: false, nullable: false, emit_null: false, converter: Time::ISO8601DateConverter)]
    getter start_date : Time? = nil

    # Maximum of all dates within the specific income sources in the user’s bank account for days requested by the client. The date will be returned in an ISO 8601 format (YYYY-MM-DD).
    @[JSON::Field(key: "end_date", type: Time?, default: nil, required: false, nullable: false, emit_null: false, converter: Time::ISO8601DateConverter)]
    getter end_date : Time? = nil

    @[JSON::Field(key: "pay_frequency", type: Plaid::CreditBankIncomePayFrequency?, default: nil, required: false, nullable: false, emit_null: false)]
    getter pay_frequency : Plaid::CreditBankIncomePayFrequency? = nil

    # Total amount of earnings in the user’s bank account for the specific income source for days requested by the client.
    @[JSON::Field(key: "total_amount", type: Float64?, default: nil, required: false, nullable: false, emit_null: false)]
    getter total_amount : Float64? = nil

    # The ISO 4217 currency code of the amount or balance.
    @[JSON::Field(key: "iso_currency_code", type: String?, default: nil, required: false, nullable: true, emit_null: true, presence: true, ignore_serialize: iso_currency_code.nil? && !iso_currency_code_present?)]
    getter iso_currency_code : String? = nil

    @[JSON::Field(ignore: true)]
    property? iso_currency_code_present : Bool = false

    # The unofficial currency code associated with the amount or balance. Always `null` if `iso_currency_code` is non-null. Unofficial currency codes are used for currencies that do not have official ISO currency codes, such as cryptocurrencies and the currencies of certain countries.
    @[JSON::Field(key: "unofficial_currency_code", type: String?, default: nil, required: false, nullable: true, emit_null: true, presence: true, ignore_serialize: unofficial_currency_code.nil? && !unofficial_currency_code_present?)]
    getter unofficial_currency_code : String? = nil

    @[JSON::Field(ignore: true)]
    property? unofficial_currency_code_present : Bool = false

    # Number of transactions for the income source within the start and end date.
    @[JSON::Field(key: "transaction_count", type: Int32?, default: nil, required: false, nullable: false, emit_null: false)]
    getter transaction_count : Int32? = nil

    # The expected date of the end user’s next paycheck for the income source. The date will be returned in an ISO 8601 format (YYYY-MM-DD).
    @[JSON::Field(key: "next_payment_date", type: Time?, default: nil, required: false, nullable: true, emit_null: true, presence: true, ignore_serialize: next_payment_date.nil? && !next_payment_date_present?, converter: Time::ISO8601DateConverter)]
    getter next_payment_date : Time? = nil

    @[JSON::Field(ignore: true)]
    property? next_payment_date_present : Bool = false

    # An estimate of the average gross monthly income based on the historical net amount and income category for the income source(s).
    @[JSON::Field(key: "historical_average_monthly_gross_income", type: Float64?, default: nil, required: false, nullable: true, emit_null: true, presence: true, ignore_serialize: historical_average_monthly_gross_income.nil? && !historical_average_monthly_gross_income_present?)]
    getter historical_average_monthly_gross_income : Float64? = nil

    @[JSON::Field(ignore: true)]
    property? historical_average_monthly_gross_income_present : Bool = false

    # The average monthly net income amount estimated based on the historical data for the income source(s).
    @[JSON::Field(key: "historical_average_monthly_income", type: Float64?, default: nil, required: false, nullable: true, emit_null: true, presence: true, ignore_serialize: historical_average_monthly_income.nil? && !historical_average_monthly_income_present?)]
    getter historical_average_monthly_income : Float64? = nil

    @[JSON::Field(ignore: true)]
    property? historical_average_monthly_income_present : Bool = false

    # The predicted average monthly net income amount for the income source(s).
    @[JSON::Field(key: "forecasted_average_monthly_income", type: Float64?, default: nil, required: false, nullable: true, emit_null: true, presence: true, ignore_serialize: forecasted_average_monthly_income.nil? && !forecasted_average_monthly_income_present?)]
    getter forecasted_average_monthly_income : Float64? = nil

    @[JSON::Field(ignore: true)]
    property? forecasted_average_monthly_income_present : Bool = false

    @[JSON::Field(key: "employer", type: CraBankIncomeEmployer?, default: nil, required: false, nullable: false, emit_null: false)]
    getter employer : CraBankIncomeEmployer? = nil

    @[JSON::Field(key: "historical_summary", type: Array(CraBankIncomeHistoricalSummary)?, default: nil, required: false, nullable: false, emit_null: false)]
    getter historical_summary : Array(CraBankIncomeHistoricalSummary)? = nil

    # Initializes the object
    # @param [Hash] attributes Model attributes in the form of hash
    def initialize(
      *,
      # Optional properties
      @income_source_id : String? = nil,
      @income_description : String? = nil,
      @income_category : Plaid::CreditBankIncomeCategory? = nil,
      @start_date : Time? = nil,
      @end_date : Time? = nil,
      @pay_frequency : Plaid::CreditBankIncomePayFrequency? = nil,
      @total_amount : Float64? = nil,
      @iso_currency_code : String? = nil,
      @unofficial_currency_code : String? = nil,
      @transaction_count : Int32? = nil,
      @next_payment_date : Time? = nil,
      @historical_average_monthly_gross_income : Float64? = nil,
      @historical_average_monthly_income : Float64? = nil,
      @forecasted_average_monthly_income : Float64? = nil,
      @employer : CraBankIncomeEmployer? = nil,
      @historical_summary : Array(CraBankIncomeHistoricalSummary)? = nil
    )
    end

    # Show invalid properties with the reasons. Usually used together with valid?
    # @return Array for valid properties with the reasons
    def list_invalid_properties : Array(String)
      invalid_properties = Array(String).new

      unless (_income_source_id = @income_source_id).nil?
      end
      unless (_income_description = @income_description).nil?
      end
      unless (_income_category = @income_category).nil?
        invalid_properties.push(_income_category.error_message) if !_income_category.valid?
      end
      unless (_start_date = @start_date).nil?
      end
      unless (_end_date = @end_date).nil?
      end
      unless (_pay_frequency = @pay_frequency).nil?
        invalid_properties.push(_pay_frequency.error_message) if !_pay_frequency.valid?
      end
      unless (_total_amount = @total_amount).nil?
      end
      unless (_iso_currency_code = @iso_currency_code).nil?
      end
      unless (_unofficial_currency_code = @unofficial_currency_code).nil?
      end
      unless (_transaction_count = @transaction_count).nil?
      end
      unless (_next_payment_date = @next_payment_date).nil?
      end
      unless (_historical_average_monthly_gross_income = @historical_average_monthly_gross_income).nil?
      end
      unless (_historical_average_monthly_income = @historical_average_monthly_income).nil?
      end
      unless (_forecasted_average_monthly_income = @forecasted_average_monthly_income).nil?
      end
      unless (_employer = @employer).nil?
      end
      unless (_historical_summary = @historical_summary).nil?
      end
      invalid_properties
    end

    # Check to see if the all the properties in the model are valid
    # @return true if the model is valid
    def valid? : Bool
      unless (_income_source_id = @income_source_id).nil?
      end

      unless (_income_description = @income_description).nil?
      end

      unless (_income_category = @income_category).nil?
        return false if !_income_category.valid?
      end

      unless (_start_date = @start_date).nil?
      end

      unless (_end_date = @end_date).nil?
      end

      unless (_pay_frequency = @pay_frequency).nil?
        return false if !_pay_frequency.valid?
      end

      unless (_total_amount = @total_amount).nil?
      end

      unless (_iso_currency_code = @iso_currency_code).nil?
      end

      unless (_unofficial_currency_code = @unofficial_currency_code).nil?
      end

      unless (_transaction_count = @transaction_count).nil?
      end

      unless (_next_payment_date = @next_payment_date).nil?
      end

      unless (_historical_average_monthly_gross_income = @historical_average_monthly_gross_income).nil?
      end

      unless (_historical_average_monthly_income = @historical_average_monthly_income).nil?
      end

      unless (_forecasted_average_monthly_income = @forecasted_average_monthly_income).nil?
      end

      unless (_employer = @employer).nil?
      end

      unless (_historical_summary = @historical_summary).nil?
      end

      true
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] income_source_id Object to be assigned
    def income_source_id=(new_value : String?)
      unless new_value.nil?
      end

      @income_source_id = new_value
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] income_description Object to be assigned
    def income_description=(new_value : String?)
      unless new_value.nil?
      end

      @income_description = new_value
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] income_category Object to be assigned
    def income_category=(new_value : Plaid::CreditBankIncomeCategory?)
      unless new_value.nil?
        new_value.validate
      end

      @income_category = new_value
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] start_date Object to be assigned
    def start_date=(new_value : Time?)
      unless new_value.nil?
      end

      @start_date = new_value
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] end_date Object to be assigned
    def end_date=(new_value : Time?)
      unless new_value.nil?
      end

      @end_date = new_value
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] pay_frequency Object to be assigned
    def pay_frequency=(new_value : Plaid::CreditBankIncomePayFrequency?)
      unless new_value.nil?
        new_value.validate
      end

      @pay_frequency = new_value
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] total_amount Object to be assigned
    def total_amount=(new_value : Float64?)
      unless new_value.nil?
      end

      @total_amount = new_value
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] iso_currency_code Object to be assigned
    def iso_currency_code=(new_value : String?)
      unless new_value.nil?
      end

      @iso_currency_code = new_value
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] unofficial_currency_code Object to be assigned
    def unofficial_currency_code=(new_value : String?)
      unless new_value.nil?
      end

      @unofficial_currency_code = new_value
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] transaction_count Object to be assigned
    def transaction_count=(new_value : Int32?)
      unless new_value.nil?
      end

      @transaction_count = new_value
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] next_payment_date Object to be assigned
    def next_payment_date=(new_value : Time?)
      unless new_value.nil?
      end

      @next_payment_date = new_value
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] historical_average_monthly_gross_income Object to be assigned
    def historical_average_monthly_gross_income=(new_value : Float64?)
      unless new_value.nil?
      end

      @historical_average_monthly_gross_income = new_value
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] historical_average_monthly_income Object to be assigned
    def historical_average_monthly_income=(new_value : Float64?)
      unless new_value.nil?
      end

      @historical_average_monthly_income = new_value
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] forecasted_average_monthly_income Object to be assigned
    def forecasted_average_monthly_income=(new_value : Float64?)
      unless new_value.nil?
      end

      @forecasted_average_monthly_income = new_value
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] employer Object to be assigned
    def employer=(new_value : CraBankIncomeEmployer?)
      unless new_value.nil?
      end

      @employer = new_value
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] historical_summary Object to be assigned
    def historical_summary=(new_value : Array(CraBankIncomeHistoricalSummary)?)
      unless new_value.nil?
      end

      @historical_summary = new_value
    end

    # Generates #hash and #== methods from all fields
    # #== @return [Bool]
    # #hash calculates hash code according to all attributes.
    # #hash @return [UInt64] Hash code
    def_equals_and_hash(@income_source_id, @income_description, @income_category, @start_date, @end_date, @pay_frequency, @total_amount, @iso_currency_code, @iso_currency_code_present, @unofficial_currency_code, @unofficial_currency_code_present, @transaction_count, @next_payment_date, @next_payment_date_present, @historical_average_monthly_gross_income, @historical_average_monthly_gross_income_present, @historical_average_monthly_income, @historical_average_monthly_income_present, @forecasted_average_monthly_income, @forecasted_average_monthly_income_present, @employer, @historical_summary)
  end
end
