#  The Plaid API
#
# The Plaid REST API. Please see https://plaid.com/docs/api for more details.
#
# The version of the OpenAPI document: 2020-09-14_1.474.3
#
# Generated by: https://openapi-generator.tech
#

require "../../core"

require "./loans"
require "./parties"
require "./services"

module Plaid
  # An object representing an Asset Report with Freddie Mac schema.
  class AssetReportFreddie
    include JSON::Serializable
    include JSON::Serializable::Unmapped
    include OpenApi::Validatable
    include OpenApi::Json

    # Required Properties

    @[JSON::Field(key: "LOANS", type: Loans?, default: nil, required: true, nullable: false, emit_null: false)]
    getter loans : Loans? = nil

    @[JSON::Field(key: "PARTIES", type: Parties?, default: nil, required: true, nullable: false, emit_null: false)]
    getter parties : Parties? = nil

    @[JSON::Field(key: "SERVICES", type: Services?, default: nil, required: true, nullable: false, emit_null: false)]
    getter services : Services? = nil

    # End of Required Properties

    # Initializes the object
    # @param [Hash] attributes Model attributes in the form of hash
    def initialize(
      *,
      # Required properties
      @loans : Loans? = nil,
      @parties : Parties? = nil,
      @services : Services? = nil
    )
    end

    # Show invalid properties with the reasons. Usually used together with valid?
    # @return Array for valid properties with the reasons
    def list_invalid_properties : Array(String)
      invalid_properties = Array(String).new

      invalid_properties.push("\"loans\" is required and cannot be null") if @loans.nil?

      unless (_loans = @loans).nil?
      end
      invalid_properties.push("\"parties\" is required and cannot be null") if @parties.nil?

      unless (_parties = @parties).nil?
      end
      invalid_properties.push("\"services\" is required and cannot be null") if @services.nil?

      unless (_services = @services).nil?
      end
      invalid_properties
    end

    # Check to see if the all the properties in the model are valid
    # @return true if the model is valid
    def valid? : Bool
      return false if @loans.nil?
      unless (_loans = @loans).nil?
      end

      return false if @parties.nil?
      unless (_parties = @parties).nil?
      end

      return false if @services.nil?
      unless (_services = @services).nil?
      end

      true
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] loans Object to be assigned
    def loans=(new_value : Loans?)
      raise ArgumentError.new("\"loans\" is required and cannot be null") if new_value.nil?
      unless new_value.nil?
      end

      @loans = new_value
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] parties Object to be assigned
    def parties=(new_value : Parties?)
      raise ArgumentError.new("\"parties\" is required and cannot be null") if new_value.nil?
      unless new_value.nil?
      end

      @parties = new_value
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] services Object to be assigned
    def services=(new_value : Services?)
      raise ArgumentError.new("\"services\" is required and cannot be null") if new_value.nil?
      unless new_value.nil?
      end

      @services = new_value
    end

    # Generates #hash and #== methods from all fields
    # #== @return [Bool]
    # #hash calculates hash code according to all attributes.
    # #hash @return [UInt64] Hash code
    def_equals_and_hash(@loans, @parties, @services)
  end
end
