#  The Plaid API
#
# The Plaid REST API. Please see https://plaid.com/docs/api for more details.
#
# The version of the OpenAPI document: 2020-09-14_1.474.3
#
# Generated by: https://openapi-generator.tech
#

require "../../core"

module Plaid
  # A securities holding at an institution.
  class Holding
    include JSON::Serializable
    include JSON::Serializable::Unmapped
    include OpenApi::Validatable
    include OpenApi::Json

    # Required Properties

    # The Plaid `account_id` associated with the holding.
    @[JSON::Field(key: "account_id", type: String?, default: nil, required: true, nullable: false, emit_null: false)]
    getter account_id : String? = nil

    # The Plaid `security_id` associated with the holding. Security data is not specific to a user's account; any user who held the same security at the same financial institution at the same time would have identical security data. The `security_id` for the same security will typically be the same across different institutions, but this is not guaranteed. The `security_id` does not typically change, but may change if inherent details of the security change due to a corporate action, for example, in the event of a ticker symbol change or CUSIP change.
    @[JSON::Field(key: "security_id", type: String?, default: nil, required: true, nullable: false, emit_null: false)]
    getter security_id : String? = nil

    # The last price given by the institution for this security.
    @[JSON::Field(key: "institution_price", type: Float64?, default: nil, required: true, nullable: false, emit_null: false)]
    getter institution_price : Float64? = nil

    # The value of the holding, as reported by the institution.
    @[JSON::Field(key: "institution_value", type: Float64?, default: nil, required: true, nullable: false, emit_null: false)]
    getter institution_value : Float64? = nil

    # The original total value of the holding. This field is calculated by Plaid as the sum of the purchase price of all of the shares in the holding.
    @[JSON::Field(key: "cost_basis", type: Float64?, default: nil, required: true, nullable: true, emit_null: true)]
    getter cost_basis : Float64? = nil

    # The total quantity of the asset held, as reported by the financial institution. If the security is an option, `quantity` will reflect the total number of options (typically the number of contracts multiplied by 100), not the number of contracts.
    @[JSON::Field(key: "quantity", type: Float64?, default: nil, required: true, nullable: false, emit_null: false)]
    getter quantity : Float64? = nil

    # The ISO-4217 currency code of the holding. Always `null` if `unofficial_currency_code` is non-`null`.
    @[JSON::Field(key: "iso_currency_code", type: String?, default: nil, required: true, nullable: true, emit_null: true)]
    getter iso_currency_code : String? = nil

    # The unofficial currency code associated with the holding. Always `null` if `iso_currency_code` is non-`null`. Unofficial currency codes are used for currencies that do not have official ISO currency codes, such as cryptocurrencies and the currencies of certain countries.  See the [currency code schema](https://plaid.com/docs/api/accounts#currency-code-schema) for a full listing of supported `iso_currency_code`s.
    @[JSON::Field(key: "unofficial_currency_code", type: String?, default: nil, required: true, nullable: true, emit_null: true)]
    getter unofficial_currency_code : String? = nil

    # End of Required Properties

    # Optional Properties

    # The date at which `institution_price` was current.
    @[JSON::Field(key: "institution_price_as_of", type: Time?, default: nil, required: false, nullable: true, emit_null: true, presence: true, ignore_serialize: institution_price_as_of.nil? && !institution_price_as_of_present?, converter: Time::ISO8601DateConverter)]
    getter institution_price_as_of : Time? = nil

    @[JSON::Field(ignore: true)]
    property? institution_price_as_of_present : Bool = false

    # Date and time at which `institution_price` was current, in ISO 8601 format (YYYY-MM-DDTHH:mm:ssZ).  This field is returned for select financial institutions and comes as provided by the institution. It may contain default time values (such as 00:00:00).
    @[JSON::Field(key: "institution_price_datetime", type: Time?, default: nil, required: false, nullable: true, emit_null: true, presence: true, ignore_serialize: institution_price_datetime.nil? && !institution_price_datetime_present?, converter: Time::RFC3339Converter)]
    getter institution_price_datetime : Time? = nil

    @[JSON::Field(ignore: true)]
    property? institution_price_datetime_present : Bool = false

    # Initializes the object
    # @param [Hash] attributes Model attributes in the form of hash
    def initialize(
      *,
      # Required properties
      @account_id : String? = nil,
      @security_id : String? = nil,
      @institution_price : Float64? = nil,
      @institution_value : Float64? = nil,
      @cost_basis : Float64? = nil,
      @quantity : Float64? = nil,
      @iso_currency_code : String? = nil,
      @unofficial_currency_code : String? = nil,
      # Optional properties
      @institution_price_as_of : Time? = nil,
      @institution_price_datetime : Time? = nil
    )
    end

    # Show invalid properties with the reasons. Usually used together with valid?
    # @return Array for valid properties with the reasons
    def list_invalid_properties : Array(String)
      invalid_properties = Array(String).new

      invalid_properties.push("\"account_id\" is required and cannot be null") if @account_id.nil?

      unless (_account_id = @account_id).nil?
      end
      invalid_properties.push("\"security_id\" is required and cannot be null") if @security_id.nil?

      unless (_security_id = @security_id).nil?
      end
      invalid_properties.push("\"institution_price\" is required and cannot be null") if @institution_price.nil?

      unless (_institution_price = @institution_price).nil?
      end
      invalid_properties.push("\"institution_value\" is required and cannot be null") if @institution_value.nil?

      unless (_institution_value = @institution_value).nil?
      end
      unless (_cost_basis = @cost_basis).nil?
      end
      invalid_properties.push("\"quantity\" is required and cannot be null") if @quantity.nil?

      unless (_quantity = @quantity).nil?
      end
      unless (_iso_currency_code = @iso_currency_code).nil?
      end
      unless (_unofficial_currency_code = @unofficial_currency_code).nil?
      end
      unless (_institution_price_as_of = @institution_price_as_of).nil?
      end
      unless (_institution_price_datetime = @institution_price_datetime).nil?
      end
      invalid_properties
    end

    # Check to see if the all the properties in the model are valid
    # @return true if the model is valid
    def valid? : Bool
      return false if @account_id.nil?
      unless (_account_id = @account_id).nil?
      end

      return false if @security_id.nil?
      unless (_security_id = @security_id).nil?
      end

      return false if @institution_price.nil?
      unless (_institution_price = @institution_price).nil?
      end

      return false if @institution_value.nil?
      unless (_institution_value = @institution_value).nil?
      end

      unless (_cost_basis = @cost_basis).nil?
      end

      return false if @quantity.nil?
      unless (_quantity = @quantity).nil?
      end

      unless (_iso_currency_code = @iso_currency_code).nil?
      end

      unless (_unofficial_currency_code = @unofficial_currency_code).nil?
      end

      unless (_institution_price_as_of = @institution_price_as_of).nil?
      end

      unless (_institution_price_datetime = @institution_price_datetime).nil?
      end

      true
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] account_id Object to be assigned
    def account_id=(new_value : String?)
      raise ArgumentError.new("\"account_id\" is required and cannot be null") if new_value.nil?
      unless new_value.nil?
      end

      @account_id = new_value
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] security_id Object to be assigned
    def security_id=(new_value : String?)
      raise ArgumentError.new("\"security_id\" is required and cannot be null") if new_value.nil?
      unless new_value.nil?
      end

      @security_id = new_value
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] institution_price Object to be assigned
    def institution_price=(new_value : Float64?)
      raise ArgumentError.new("\"institution_price\" is required and cannot be null") if new_value.nil?
      unless new_value.nil?
      end

      @institution_price = new_value
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] institution_value Object to be assigned
    def institution_value=(new_value : Float64?)
      raise ArgumentError.new("\"institution_value\" is required and cannot be null") if new_value.nil?
      unless new_value.nil?
      end

      @institution_value = new_value
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] cost_basis Object to be assigned
    def cost_basis=(new_value : Float64?)
      unless new_value.nil?
      end

      @cost_basis = new_value
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] quantity Object to be assigned
    def quantity=(new_value : Float64?)
      raise ArgumentError.new("\"quantity\" is required and cannot be null") if new_value.nil?
      unless new_value.nil?
      end

      @quantity = new_value
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] iso_currency_code Object to be assigned
    def iso_currency_code=(new_value : String?)
      unless new_value.nil?
      end

      @iso_currency_code = new_value
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] unofficial_currency_code Object to be assigned
    def unofficial_currency_code=(new_value : String?)
      unless new_value.nil?
      end

      @unofficial_currency_code = new_value
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] institution_price_as_of Object to be assigned
    def institution_price_as_of=(new_value : Time?)
      unless new_value.nil?
      end

      @institution_price_as_of = new_value
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] institution_price_datetime Object to be assigned
    def institution_price_datetime=(new_value : Time?)
      unless new_value.nil?
      end

      @institution_price_datetime = new_value
    end

    # Generates #hash and #== methods from all fields
    # #== @return [Bool]
    # #hash calculates hash code according to all attributes.
    # #hash @return [UInt64] Hash code
    def_equals_and_hash(@account_id, @security_id, @institution_price, @institution_value, @cost_basis, @quantity, @iso_currency_code, @unofficial_currency_code, @institution_price_as_of, @institution_price_as_of_present, @institution_price_datetime, @institution_price_datetime_present)
  end
end
