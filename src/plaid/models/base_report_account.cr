#  The Plaid API
#
# The Plaid REST API. Please see https://plaid.com/docs/api for more details.
#
# The version of the OpenAPI document: 2020-09-14_1.474.3
#
# Generated by: https://openapi-generator.tech
#

require "../../core"

require "./account_subtype"
require "./account_type"
require "./base_report_account_balances"
require "./base_report_account_insights"
require "./base_report_transaction"
require "./historical_balance"
require "./owner"
require "./ownership_type"

module Plaid
  # Base Report information about an account
  class BaseReportAccount
    include JSON::Serializable
    include JSON::Serializable::Unmapped
    include OpenApi::Validatable
    include OpenApi::Json

    # Required Properties

    @[JSON::Field(key: "balances", type: Plaid::BaseReportAccountBalances?, default: nil, required: true, nullable: false, emit_null: false)]
    getter balances : Plaid::BaseReportAccountBalances? = nil

    # The last 2-4 alphanumeric characters of an account's official account number. Note that the mask may be non-unique between an Item's accounts, and it may also not match the mask that the bank displays to the user.
    @[JSON::Field(key: "mask", type: String?, default: nil, required: true, nullable: true, emit_null: true)]
    getter mask : String? = nil

    # The name of the account, either assigned by the user or by the financial institution itself
    @[JSON::Field(key: "name", type: String?, default: nil, required: true, nullable: false, emit_null: false)]
    getter name : String? = nil

    # The official name of the account as given by the financial institution
    @[JSON::Field(key: "official_name", type: String?, default: nil, required: true, nullable: true, emit_null: true)]
    getter official_name : String? = nil

    @[JSON::Field(key: "type", type: Plaid::AccountType?, default: nil, required: true, nullable: false, emit_null: false)]
    getter _type : Plaid::AccountType? = nil

    @[JSON::Field(key: "subtype", type: Plaid::AccountSubtype?, default: nil, required: true, nullable: true, emit_null: true)]
    getter subtype : Plaid::AccountSubtype? = nil

    # The duration of transaction history available for this Item, typically defined as the time since the date of the earliest transaction in that account. Only returned by Base Report endpoints.
    @[JSON::Field(key: "days_available", type: Float64?, default: nil, required: true, nullable: false, emit_null: false)]
    getter days_available : Float64? = nil

    # Transaction history associated with the account. Only returned by Base Report endpoints. Transaction history returned by endpoints such as `/transactions/get` or `/investments/transactions/get` will be returned in the top-level `transactions` field instead.
    @[JSON::Field(key: "transactions", type: Array(BaseReportTransaction)?, default: nil, required: true, nullable: false, emit_null: false)]
    getter transactions : Array(BaseReportTransaction)? = nil

    # Data returned by the financial institution about the account owner or owners. For business accounts, the name reported may be either the name of the individual or the name of the business, depending on the institution. Multiple owners on a single account will be represented in the same `owner` object, not in multiple owner objects within the array.
    @[JSON::Field(key: "owners", type: Array(Owner)?, default: nil, required: true, nullable: false, emit_null: false)]
    getter owners : Array(Owner)? = nil

    @[JSON::Field(key: "ownership_type", type: Plaid::OwnershipType?, default: nil, required: true, nullable: true, emit_null: true)]
    getter ownership_type : Plaid::OwnershipType? = nil

    # Calculated data about the historical balances on the account. Only returned by Base Report endpoints and currently not supported by `brokerage` or `investment` accounts.
    @[JSON::Field(key: "historical_balances", type: Array(HistoricalBalance)?, default: nil, required: true, nullable: false, emit_null: false)]
    getter historical_balances : Array(HistoricalBalance)? = nil

    # End of Required Properties

    # Optional Properties

    @[JSON::Field(key: "account_insights", type: BaseReportAccountInsights?, default: nil, required: false, nullable: false, emit_null: false)]
    getter account_insights : BaseReportAccountInsights? = nil

    # Initializes the object
    # @param [Hash] attributes Model attributes in the form of hash
    def initialize(
      *,
      # Required properties
      @balances : Plaid::BaseReportAccountBalances? = nil,
      @mask : String? = nil,
      @name : String? = nil,
      @official_name : String? = nil,
      @_type : Plaid::AccountType? = nil,
      @subtype : Plaid::AccountSubtype? = nil,
      @days_available : Float64? = nil,
      @transactions : Array(BaseReportTransaction)? = nil,
      @owners : Array(Owner)? = nil,
      @ownership_type : Plaid::OwnershipType? = nil,
      @historical_balances : Array(HistoricalBalance)? = nil,
      # Optional properties
      @account_insights : BaseReportAccountInsights? = nil
    )
    end

    # Show invalid properties with the reasons. Usually used together with valid?
    # @return Array for valid properties with the reasons
    def list_invalid_properties : Array(String)
      invalid_properties = Array(String).new

      invalid_properties.push("\"balances\" is required and cannot be null") if @balances.nil?

      unless (_balances = @balances).nil?
        invalid_properties.concat(_balances.list_invalid_properties_for("balances")) if _balances.is_a?(OpenApi::Validatable)
      end
      unless (_mask = @mask).nil?
      end
      invalid_properties.push("\"name\" is required and cannot be null") if @name.nil?

      unless (_name = @name).nil?
      end
      unless (_official_name = @official_name).nil?
      end
      invalid_properties.push("\"_type\" is required and cannot be null") if @_type.nil?

      unless (__type = @_type).nil?
        invalid_properties.push(__type.error_message) if !__type.valid?
      end
      unless (_subtype = @subtype).nil?
        invalid_properties.push(_subtype.error_message) if !_subtype.valid?
      end
      invalid_properties.push("\"days_available\" is required and cannot be null") if @days_available.nil?

      unless (_days_available = @days_available).nil?
      end
      invalid_properties.push("\"transactions\" is required and cannot be null") if @transactions.nil?

      unless (_transactions = @transactions).nil?
      end
      invalid_properties.push("\"owners\" is required and cannot be null") if @owners.nil?

      unless (_owners = @owners).nil?
      end
      unless (_ownership_type = @ownership_type).nil?
        invalid_properties.push(_ownership_type.error_message) if !_ownership_type.valid?
      end
      invalid_properties.push("\"historical_balances\" is required and cannot be null") if @historical_balances.nil?

      unless (_historical_balances = @historical_balances).nil?
      end
      unless (_account_insights = @account_insights).nil?
      end
      invalid_properties
    end

    # Check to see if the all the properties in the model are valid
    # @return true if the model is valid
    def valid? : Bool
      return false if @balances.nil?
      unless (_balances = @balances).nil?
        return false if _balances.is_a?(OpenApi::Validatable) && !_balances.valid?
      end

      unless (_mask = @mask).nil?
      end

      return false if @name.nil?
      unless (_name = @name).nil?
      end

      unless (_official_name = @official_name).nil?
      end

      return false if @_type.nil?
      unless (__type = @_type).nil?
        return false if !__type.valid?
      end

      unless (_subtype = @subtype).nil?
        return false if !_subtype.valid?
      end

      return false if @days_available.nil?
      unless (_days_available = @days_available).nil?
      end

      return false if @transactions.nil?
      unless (_transactions = @transactions).nil?
      end

      return false if @owners.nil?
      unless (_owners = @owners).nil?
      end

      unless (_ownership_type = @ownership_type).nil?
        return false if !_ownership_type.valid?
      end

      return false if @historical_balances.nil?
      unless (_historical_balances = @historical_balances).nil?
      end

      unless (_account_insights = @account_insights).nil?
      end

      true
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] balances Object to be assigned
    def balances=(new_value : Plaid::BaseReportAccountBalances?)
      raise ArgumentError.new("\"balances\" is required and cannot be null") if new_value.nil?
      unless new_value.nil?
        new_value.validate if new_value.is_a?(OpenApi::Validatable)
      end

      @balances = new_value
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] mask Object to be assigned
    def mask=(new_value : String?)
      unless new_value.nil?
      end

      @mask = new_value
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] name Object to be assigned
    def name=(new_value : String?)
      raise ArgumentError.new("\"name\" is required and cannot be null") if new_value.nil?
      unless new_value.nil?
      end

      @name = new_value
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] official_name Object to be assigned
    def official_name=(new_value : String?)
      unless new_value.nil?
      end

      @official_name = new_value
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] _type Object to be assigned
    def _type=(new_value : Plaid::AccountType?)
      raise ArgumentError.new("\"_type\" is required and cannot be null") if new_value.nil?
      unless new_value.nil?
        new_value.validate
      end

      @_type = new_value
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] subtype Object to be assigned
    def subtype=(new_value : Plaid::AccountSubtype?)
      unless new_value.nil?
        new_value.validate
      end

      @subtype = new_value
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] days_available Object to be assigned
    def days_available=(new_value : Float64?)
      raise ArgumentError.new("\"days_available\" is required and cannot be null") if new_value.nil?
      unless new_value.nil?
      end

      @days_available = new_value
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] transactions Object to be assigned
    def transactions=(new_value : Array(BaseReportTransaction)?)
      raise ArgumentError.new("\"transactions\" is required and cannot be null") if new_value.nil?
      unless new_value.nil?
      end

      @transactions = new_value
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] owners Object to be assigned
    def owners=(new_value : Array(Owner)?)
      raise ArgumentError.new("\"owners\" is required and cannot be null") if new_value.nil?
      unless new_value.nil?
      end

      @owners = new_value
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] ownership_type Object to be assigned
    def ownership_type=(new_value : Plaid::OwnershipType?)
      unless new_value.nil?
        new_value.validate
      end

      @ownership_type = new_value
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] historical_balances Object to be assigned
    def historical_balances=(new_value : Array(HistoricalBalance)?)
      raise ArgumentError.new("\"historical_balances\" is required and cannot be null") if new_value.nil?
      unless new_value.nil?
      end

      @historical_balances = new_value
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] account_insights Object to be assigned
    def account_insights=(new_value : BaseReportAccountInsights?)
      unless new_value.nil?
      end

      @account_insights = new_value
    end

    # Generates #hash and #== methods from all fields
    # #== @return [Bool]
    # #hash calculates hash code according to all attributes.
    # #hash @return [UInt64] Hash code
    def_equals_and_hash(@balances, @mask, @name, @official_name, @_type, @subtype, @days_available, @transactions, @owners, @ownership_type, @historical_balances, @account_insights)
  end
end
