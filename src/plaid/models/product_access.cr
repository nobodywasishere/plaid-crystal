#  The Plaid API
#
# The Plaid REST API. Please see https://plaid.com/docs/api for more details.
#
# The version of the OpenAPI document: 2020-09-14_1.474.3
#
# Generated by: https://openapi-generator.tech
#

require "../../core"

module Plaid
  # The product access being requested. Used to or disallow product access across all accounts. If unset, defaults to all products allowed.
  class ProductAccess
    include JSON::Serializable
    include JSON::Serializable::Unmapped
    include OpenApi::Validatable
    include OpenApi::Json

    # Optional Properties

    # Allow access to statements. Only used by certain partners. If relevant to the partner and unset, defaults to `true`.
    @[JSON::Field(key: "statements", type: Bool?, default: true, required: false, nullable: true, emit_null: true, presence: true, ignore_serialize: statements.nil? && !statements_present?)]
    getter statements : Bool? = true

    @[JSON::Field(ignore: true)]
    property? statements_present : Bool = false

    # Allow access to the Identity product (name, email, phone, address). Only used by certain partners. If relevant to the partner and unset, defaults to `true`.
    @[JSON::Field(key: "identity", type: Bool?, default: true, required: false, nullable: true, emit_null: true, presence: true, ignore_serialize: identity.nil? && !identity_present?)]
    getter identity : Bool? = true

    @[JSON::Field(ignore: true)]
    property? identity_present : Bool = false

    # Allow access to account number details. Only used by certain partners. If relevant to the partner and unset, defaults to `true`.
    @[JSON::Field(key: "auth", type: Bool?, default: true, required: false, nullable: true, emit_null: true, presence: true, ignore_serialize: auth.nil? && !auth_present?)]
    getter auth : Bool? = true

    @[JSON::Field(ignore: true)]
    property? auth_present : Bool = false

    # Allow access to transaction details. Only used by certain partners. If relevant to the partner and unset, defaults to `true`.
    @[JSON::Field(key: "transactions", type: Bool?, default: true, required: false, nullable: true, emit_null: true, presence: true, ignore_serialize: transactions.nil? && !transactions_present?)]
    getter transactions : Bool? = true

    @[JSON::Field(ignore: true)]
    property? transactions_present : Bool = false

    # Allow access to \"accounts_details_transactions\". Only used by certain partners. If relevant to the partner and unset, defaults to `true`.
    @[JSON::Field(key: "accounts_details_transactions", type: Bool?, default: true, required: false, nullable: true, emit_null: true, presence: true, ignore_serialize: accounts_details_transactions.nil? && !accounts_details_transactions_present?)]
    getter accounts_details_transactions : Bool? = true

    @[JSON::Field(ignore: true)]
    property? accounts_details_transactions_present : Bool = false

    # Allow access to \"accounts_routing_number\". Only used by certain partners. If relevant to the partner and unset, defaults to `true`.
    @[JSON::Field(key: "accounts_routing_number", type: Bool?, default: true, required: false, nullable: true, emit_null: true, presence: true, ignore_serialize: accounts_routing_number.nil? && !accounts_routing_number_present?)]
    getter accounts_routing_number : Bool? = true

    @[JSON::Field(ignore: true)]
    property? accounts_routing_number_present : Bool = false

    # Allow access to \"accounts_statements\". Only used by certain partners. If relevant to the partner and unset, defaults to `true`.
    @[JSON::Field(key: "accounts_statements", type: Bool?, default: true, required: false, nullable: true, emit_null: true, presence: true, ignore_serialize: accounts_statements.nil? && !accounts_statements_present?)]
    getter accounts_statements : Bool? = true

    @[JSON::Field(ignore: true)]
    property? accounts_statements_present : Bool = false

    # Allow access to \"accounts_tax_statements\". Only used by certain partners. If relevant to the partner and unset, defaults to `true`.
    @[JSON::Field(key: "accounts_tax_statements", type: Bool?, default: true, required: false, nullable: true, emit_null: true, presence: true, ignore_serialize: accounts_tax_statements.nil? && !accounts_tax_statements_present?)]
    getter accounts_tax_statements : Bool? = true

    @[JSON::Field(ignore: true)]
    property? accounts_tax_statements_present : Bool = false

    # Allow access to \"customers_profiles\". Only used by certain partners. If relevant to the partner and unset, defaults to `true`.
    @[JSON::Field(key: "customers_profiles", type: Bool?, default: true, required: false, nullable: true, emit_null: true, presence: true, ignore_serialize: customers_profiles.nil? && !customers_profiles_present?)]
    getter customers_profiles : Bool? = true

    @[JSON::Field(ignore: true)]
    property? customers_profiles_present : Bool = false

    # Initializes the object
    # @param [Hash] attributes Model attributes in the form of hash
    def initialize(
      *,
      # Optional properties
      @statements : Bool? = true,
      @identity : Bool? = true,
      @auth : Bool? = true,
      @transactions : Bool? = true,
      @accounts_details_transactions : Bool? = true,
      @accounts_routing_number : Bool? = true,
      @accounts_statements : Bool? = true,
      @accounts_tax_statements : Bool? = true,
      @customers_profiles : Bool? = true
    )
    end

    # Show invalid properties with the reasons. Usually used together with valid?
    # @return Array for valid properties with the reasons
    def list_invalid_properties : Array(String)
      invalid_properties = Array(String).new

      unless (_statements = @statements).nil?
      end
      unless (_identity = @identity).nil?
      end
      unless (_auth = @auth).nil?
      end
      unless (_transactions = @transactions).nil?
      end
      unless (_accounts_details_transactions = @accounts_details_transactions).nil?
      end
      unless (_accounts_routing_number = @accounts_routing_number).nil?
      end
      unless (_accounts_statements = @accounts_statements).nil?
      end
      unless (_accounts_tax_statements = @accounts_tax_statements).nil?
      end
      unless (_customers_profiles = @customers_profiles).nil?
      end
      invalid_properties
    end

    # Check to see if the all the properties in the model are valid
    # @return true if the model is valid
    def valid? : Bool
      unless (_statements = @statements).nil?
      end

      unless (_identity = @identity).nil?
      end

      unless (_auth = @auth).nil?
      end

      unless (_transactions = @transactions).nil?
      end

      unless (_accounts_details_transactions = @accounts_details_transactions).nil?
      end

      unless (_accounts_routing_number = @accounts_routing_number).nil?
      end

      unless (_accounts_statements = @accounts_statements).nil?
      end

      unless (_accounts_tax_statements = @accounts_tax_statements).nil?
      end

      unless (_customers_profiles = @customers_profiles).nil?
      end

      true
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] statements Object to be assigned
    def statements=(new_value : Bool?)
      unless new_value.nil?
      end

      @statements = new_value
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] identity Object to be assigned
    def identity=(new_value : Bool?)
      unless new_value.nil?
      end

      @identity = new_value
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] auth Object to be assigned
    def auth=(new_value : Bool?)
      unless new_value.nil?
      end

      @auth = new_value
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] transactions Object to be assigned
    def transactions=(new_value : Bool?)
      unless new_value.nil?
      end

      @transactions = new_value
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] accounts_details_transactions Object to be assigned
    def accounts_details_transactions=(new_value : Bool?)
      unless new_value.nil?
      end

      @accounts_details_transactions = new_value
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] accounts_routing_number Object to be assigned
    def accounts_routing_number=(new_value : Bool?)
      unless new_value.nil?
      end

      @accounts_routing_number = new_value
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] accounts_statements Object to be assigned
    def accounts_statements=(new_value : Bool?)
      unless new_value.nil?
      end

      @accounts_statements = new_value
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] accounts_tax_statements Object to be assigned
    def accounts_tax_statements=(new_value : Bool?)
      unless new_value.nil?
      end

      @accounts_tax_statements = new_value
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] customers_profiles Object to be assigned
    def customers_profiles=(new_value : Bool?)
      unless new_value.nil?
      end

      @customers_profiles = new_value
    end

    # Generates #hash and #== methods from all fields
    # #== @return [Bool]
    # #hash calculates hash code according to all attributes.
    # #hash @return [UInt64] Hash code
    def_equals_and_hash(@statements, @statements_present, @identity, @identity_present, @auth, @auth_present, @transactions, @transactions_present, @accounts_details_transactions, @accounts_details_transactions_present, @accounts_routing_number, @accounts_routing_number_present, @accounts_statements, @accounts_statements_present, @accounts_tax_statements, @accounts_tax_statements_present, @customers_profiles, @customers_profiles_present)
  end
end
