#  The Plaid API
#
# The Plaid REST API. Please see https://plaid.com/docs/api for more details.
#
# The version of the OpenAPI document: 2020-09-14_1.474.3
#
# Generated by: https://openapi-generator.tech
#

require "../../core"

require "./signal_device"
require "./signal_user"

module Plaid
  # ProcessorSignalEvaluateRequest defines the request schema for `/processor/signal/evaluate`
  class ProcessorSignalEvaluateRequest
    include JSON::Serializable
    include JSON::Serializable::Unmapped
    include OpenApi::Validatable
    include OpenApi::Json

    # Required Properties

    # The processor token obtained from the Plaid integration partner. Processor tokens are in the format: `processor-<environment>-<identifier>`
    @[JSON::Field(key: "processor_token", type: String?, default: nil, required: true, nullable: false, emit_null: false)]
    getter processor_token : String? = nil

    # The unique ID that you would like to use to refer to this transaction. For your convenience mapping your internal data, you could use your internal ID/identifier for this transaction. The max length for this field is 36 characters.
    @[JSON::Field(key: "client_transaction_id", type: String?, default: nil, required: true, nullable: false, emit_null: false)]
    getter client_transaction_id : String? = nil
    MAX_LENGTH_FOR_CLIENT_TRANSACTION_ID = 36
    MIN_LENGTH_FOR_CLIENT_TRANSACTION_ID =  1

    # The transaction amount, in USD (e.g. `102.05`)
    @[JSON::Field(key: "amount", type: Float64?, default: nil, required: true, nullable: false, emit_null: false)]
    getter amount : Float64? = nil

    # End of Required Properties

    # Optional Properties

    # Your Plaid API `client_id`. The `client_id` is required and may be provided either in the `PLAID-CLIENT-ID` header or as part of a request body.
    @[JSON::Field(key: "client_id", type: String?, default: nil, required: false, nullable: false, emit_null: false)]
    getter client_id : String? = nil

    # Your Plaid API `secret`. The `secret` is required and may be provided either in the `PLAID-SECRET` header or as part of a request body.
    @[JSON::Field(key: "secret", type: String?, default: nil, required: false, nullable: false, emit_null: false)]
    getter secret : String? = nil

    # `true` if the end user is present while initiating the ACH transfer and the endpoint is being called; `false` otherwise (for example, when the ACH transfer is scheduled and the end user is not present, or you call this endpoint after the ACH transfer but before submitting the Nacha file for ACH processing).
    @[JSON::Field(key: "user_present", type: Bool?, default: nil, required: false, nullable: true, emit_null: true, presence: true, ignore_serialize: user_present.nil? && !user_present_present?)]
    getter user_present : Bool? = nil

    @[JSON::Field(ignore: true)]
    property? user_present_present : Bool = false

    # A unique ID that identifies the end user in your system. This ID is used to correlate requests by a user with multiple Items. Personally identifiable information, such as an email address or phone number, should not be used in the `client_user_id`.
    @[JSON::Field(key: "client_user_id", type: String?, default: nil, required: false, nullable: false, emit_null: false)]
    getter client_user_id : String? = nil

    # **true** if the ACH transaction is a recurring transaction; **false** otherwise
    @[JSON::Field(key: "is_recurring", type: Bool?, default: nil, required: false, nullable: true, emit_null: true, presence: true, ignore_serialize: is_recurring.nil? && !is_recurring_present?)]
    getter is_recurring : Bool? = nil

    @[JSON::Field(ignore: true)]
    property? is_recurring_present : Bool = false

    # The default ACH or non-ACH payment method to complete the transaction. `SAME_DAY_ACH`: Same Day ACH by NACHA. The debit transaction is processed and settled on the same day `NEXT_DAY_ACH`: Next Day ACH settlement for debit transactions, offered by some payment processors `STANDARD_ACH`: standard ACH by NACHA `REAL_TIME_PAYMENTS`: real-time payments such as RTP and FedNow `DEBIT_CARD`: if the default payment is over debit card networks `MULTIPLE_PAYMENT_METHODS`: if there is no default debit rail or there are multiple payment methods Possible values:  `SAME_DAY_ACH`, `NEXT_DAY_ACH`, `STANDARD_ACH`, `REAL_TIME_PAYMENTS`, `DEBIT_CARD`, `MULTIPLE_PAYMENT_METHODS`
    @[JSON::Field(key: "default_payment_method", type: String?, default: nil, required: false, nullable: true, emit_null: true, presence: true, ignore_serialize: default_payment_method.nil? && !default_payment_method_present?)]
    getter default_payment_method : String? = nil

    @[JSON::Field(ignore: true)]
    property? default_payment_method_present : Bool = false

    @[JSON::Field(key: "user", type: Plaid::SignalUser?, default: nil, required: false, nullable: false, emit_null: false)]
    getter user : Plaid::SignalUser? = nil

    @[JSON::Field(key: "device", type: Plaid::SignalDevice?, default: nil, required: false, nullable: false, emit_null: false)]
    getter device : Plaid::SignalDevice? = nil

    # Initializes the object
    # @param [Hash] attributes Model attributes in the form of hash
    def initialize(
      *,
      # Required properties
      @processor_token : String? = nil,
      @client_transaction_id : String? = nil,
      @amount : Float64? = nil,
      # Optional properties
      @client_id : String? = nil,
      @secret : String? = nil,
      @user_present : Bool? = nil,
      @client_user_id : String? = nil,
      @is_recurring : Bool? = nil,
      @default_payment_method : String? = nil,
      @user : Plaid::SignalUser? = nil,
      @device : Plaid::SignalDevice? = nil
    )
    end

    # Show invalid properties with the reasons. Usually used together with valid?
    # @return Array for valid properties with the reasons
    def list_invalid_properties : Array(String)
      invalid_properties = Array(String).new

      invalid_properties.push("\"processor_token\" is required and cannot be null") if @processor_token.nil?

      unless (_processor_token = @processor_token).nil?
      end
      invalid_properties.push("\"client_transaction_id\" is required and cannot be null") if @client_transaction_id.nil?

      unless (_client_transaction_id = @client_transaction_id).nil?
        if max_length_error = OpenApi::PrimitiveValidator.max_length_error("client_transaction_id", _client_transaction_id.to_s.size, MAX_LENGTH_FOR_CLIENT_TRANSACTION_ID)
          invalid_properties.push(max_length_error)
        end

        if min_length_error = OpenApi::PrimitiveValidator.min_length_error("client_transaction_id", _client_transaction_id.to_s.size, MIN_LENGTH_FOR_CLIENT_TRANSACTION_ID)
          invalid_properties.push(min_length_error)
        end
      end
      invalid_properties.push("\"amount\" is required and cannot be null") if @amount.nil?

      unless (_amount = @amount).nil?
      end
      unless (_client_id = @client_id).nil?
      end
      unless (_secret = @secret).nil?
      end
      unless (_user_present = @user_present).nil?
      end
      unless (_client_user_id = @client_user_id).nil?
      end
      unless (_is_recurring = @is_recurring).nil?
      end
      unless (_default_payment_method = @default_payment_method).nil?
      end
      unless (_user = @user).nil?
        invalid_properties.concat(_user.list_invalid_properties_for("user")) if _user.is_a?(OpenApi::Validatable)
      end
      unless (_device = @device).nil?
        invalid_properties.concat(_device.list_invalid_properties_for("device")) if _device.is_a?(OpenApi::Validatable)
      end
      invalid_properties
    end

    # Check to see if the all the properties in the model are valid
    # @return true if the model is valid
    def valid? : Bool
      return false if @processor_token.nil?
      unless (_processor_token = @processor_token).nil?
      end

      return false if @client_transaction_id.nil?
      unless (_client_transaction_id = @client_transaction_id).nil?
        return false if _client_transaction_id.to_s.size > MAX_LENGTH_FOR_CLIENT_TRANSACTION_ID
        return false if _client_transaction_id.to_s.size < MIN_LENGTH_FOR_CLIENT_TRANSACTION_ID
      end

      return false if @amount.nil?
      unless (_amount = @amount).nil?
      end

      unless (_client_id = @client_id).nil?
      end

      unless (_secret = @secret).nil?
      end

      unless (_user_present = @user_present).nil?
      end

      unless (_client_user_id = @client_user_id).nil?
      end

      unless (_is_recurring = @is_recurring).nil?
      end

      unless (_default_payment_method = @default_payment_method).nil?
      end

      unless (_user = @user).nil?
        return false if _user.is_a?(OpenApi::Validatable) && !_user.valid?
      end

      unless (_device = @device).nil?
        return false if _device.is_a?(OpenApi::Validatable) && !_device.valid?
      end

      true
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] processor_token Object to be assigned
    def processor_token=(new_value : String?)
      raise ArgumentError.new("\"processor_token\" is required and cannot be null") if new_value.nil?
      unless new_value.nil?
      end

      @processor_token = new_value
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] client_transaction_id Object to be assigned
    def client_transaction_id=(new_value : String?)
      raise ArgumentError.new("\"client_transaction_id\" is required and cannot be null") if new_value.nil?
      unless new_value.nil?
        OpenApi::PrimitiveValidator.validate_max_length("client_transaction_id", new_value.to_s.size, MAX_LENGTH_FOR_CLIENT_TRANSACTION_ID)
        OpenApi::PrimitiveValidator.validate_min_length("client_transaction_id", new_value.to_s.size, MIN_LENGTH_FOR_CLIENT_TRANSACTION_ID)
      end

      @client_transaction_id = new_value
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] amount Object to be assigned
    def amount=(new_value : Float64?)
      raise ArgumentError.new("\"amount\" is required and cannot be null") if new_value.nil?
      unless new_value.nil?
      end

      @amount = new_value
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] client_id Object to be assigned
    def client_id=(new_value : String?)
      unless new_value.nil?
      end

      @client_id = new_value
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] secret Object to be assigned
    def secret=(new_value : String?)
      unless new_value.nil?
      end

      @secret = new_value
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] user_present Object to be assigned
    def user_present=(new_value : Bool?)
      unless new_value.nil?
      end

      @user_present = new_value
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] client_user_id Object to be assigned
    def client_user_id=(new_value : String?)
      unless new_value.nil?
      end

      @client_user_id = new_value
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] is_recurring Object to be assigned
    def is_recurring=(new_value : Bool?)
      unless new_value.nil?
      end

      @is_recurring = new_value
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] default_payment_method Object to be assigned
    def default_payment_method=(new_value : String?)
      unless new_value.nil?
      end

      @default_payment_method = new_value
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] user Object to be assigned
    def user=(new_value : Plaid::SignalUser?)
      unless new_value.nil?
        new_value.validate if new_value.is_a?(OpenApi::Validatable)
      end

      @user = new_value
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] device Object to be assigned
    def device=(new_value : Plaid::SignalDevice?)
      unless new_value.nil?
        new_value.validate if new_value.is_a?(OpenApi::Validatable)
      end

      @device = new_value
    end

    # Generates #hash and #== methods from all fields
    # #== @return [Bool]
    # #hash calculates hash code according to all attributes.
    # #hash @return [UInt64] Hash code
    def_equals_and_hash(@processor_token, @client_transaction_id, @amount, @client_id, @secret, @user_present, @user_present_present, @client_user_id, @is_recurring, @is_recurring_present, @default_payment_method, @default_payment_method_present, @user, @device)
  end
end
