#  The Plaid API
#
# The Plaid REST API. Please see https://plaid.com/docs/api for more details.
#
# The version of the OpenAPI document: 2020-09-14_1.474.3
#
# Generated by: https://openapi-generator.tech
#

require "../../core"

module Plaid
  # The user's legal name
  class SignalPersonName
    include JSON::Serializable
    include JSON::Serializable::Unmapped
    include OpenApi::Validatable
    include OpenApi::Json

    # Optional Properties

    # The user's name prefix (e.g. \"Mr.\")
    @[JSON::Field(key: "prefix", type: String?, default: nil, required: false, nullable: true, emit_null: true, presence: true, ignore_serialize: prefix.nil? && !prefix_present?)]
    getter prefix : String? = nil

    @[JSON::Field(ignore: true)]
    property? prefix_present : Bool = false

    # The user's given name. If the user has a one-word name, it should be provided in this field.
    @[JSON::Field(key: "given_name", type: String?, default: nil, required: false, nullable: true, emit_null: true, presence: true, ignore_serialize: given_name.nil? && !given_name_present?)]
    getter given_name : String? = nil

    @[JSON::Field(ignore: true)]
    property? given_name_present : Bool = false

    # The user's middle name
    @[JSON::Field(key: "middle_name", type: String?, default: nil, required: false, nullable: true, emit_null: true, presence: true, ignore_serialize: middle_name.nil? && !middle_name_present?)]
    getter middle_name : String? = nil

    @[JSON::Field(ignore: true)]
    property? middle_name_present : Bool = false

    # The user's family name / surname
    @[JSON::Field(key: "family_name", type: String?, default: nil, required: false, nullable: true, emit_null: true, presence: true, ignore_serialize: family_name.nil? && !family_name_present?)]
    getter family_name : String? = nil

    @[JSON::Field(ignore: true)]
    property? family_name_present : Bool = false

    # The user's name suffix (e.g. \"II\")
    @[JSON::Field(key: "suffix", type: String?, default: nil, required: false, nullable: true, emit_null: true, presence: true, ignore_serialize: suffix.nil? && !suffix_present?)]
    getter suffix : String? = nil

    @[JSON::Field(ignore: true)]
    property? suffix_present : Bool = false

    # Initializes the object
    # @param [Hash] attributes Model attributes in the form of hash
    def initialize(
      *,
      # Optional properties
      @prefix : String? = nil,
      @given_name : String? = nil,
      @middle_name : String? = nil,
      @family_name : String? = nil,
      @suffix : String? = nil
    )
    end

    # Show invalid properties with the reasons. Usually used together with valid?
    # @return Array for valid properties with the reasons
    def list_invalid_properties : Array(String)
      invalid_properties = Array(String).new

      unless (_prefix = @prefix).nil?
      end
      unless (_given_name = @given_name).nil?
      end
      unless (_middle_name = @middle_name).nil?
      end
      unless (_family_name = @family_name).nil?
      end
      unless (_suffix = @suffix).nil?
      end
      invalid_properties
    end

    # Check to see if the all the properties in the model are valid
    # @return true if the model is valid
    def valid? : Bool
      unless (_prefix = @prefix).nil?
      end

      unless (_given_name = @given_name).nil?
      end

      unless (_middle_name = @middle_name).nil?
      end

      unless (_family_name = @family_name).nil?
      end

      unless (_suffix = @suffix).nil?
      end

      true
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] prefix Object to be assigned
    def prefix=(new_value : String?)
      unless new_value.nil?
      end

      @prefix = new_value
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] given_name Object to be assigned
    def given_name=(new_value : String?)
      unless new_value.nil?
      end

      @given_name = new_value
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] middle_name Object to be assigned
    def middle_name=(new_value : String?)
      unless new_value.nil?
      end

      @middle_name = new_value
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] family_name Object to be assigned
    def family_name=(new_value : String?)
      unless new_value.nil?
      end

      @family_name = new_value
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] suffix Object to be assigned
    def suffix=(new_value : String?)
      unless new_value.nil?
      end

      @suffix = new_value
    end

    # Generates #hash and #== methods from all fields
    # #== @return [Bool]
    # #hash calculates hash code according to all attributes.
    # #hash @return [UInt64] Hash code
    def_equals_and_hash(@prefix, @prefix_present, @given_name, @given_name_present, @middle_name, @middle_name_present, @family_name, @family_name_present, @suffix, @suffix_present)
  end
end
