#  The Plaid API
#
# The Plaid REST API. Please see https://plaid.com/docs/api for more details.
#
# The version of the OpenAPI document: 2020-09-14_1.474.3
#
# Generated by: https://openapi-generator.tech
#

require "../../core"

require "./asset_detail"
require "./asset_holder"
require "./asset_owners"
require "./asset_transactions"
require "./validation_sources"

module Plaid
  # Documentation not found in the MISMO model viewer and not provided by Freddie Mac.
  class Asset
    include JSON::Serializable
    include JSON::Serializable::Unmapped
    include OpenApi::Validatable
    include OpenApi::Json

    # Required Properties

    @[JSON::Field(key: "ASSET_DETAIL", type: AssetDetail?, default: nil, required: true, nullable: false, emit_null: false)]
    getter asset_detail : AssetDetail? = nil

    @[JSON::Field(key: "ASSET_OWNERS", type: AssetOwners?, default: nil, required: true, nullable: false, emit_null: false)]
    getter asset_owners : AssetOwners? = nil

    @[JSON::Field(key: "ASSET_HOLDER", type: AssetHolder?, default: nil, required: true, nullable: false, emit_null: false)]
    getter asset_holder : AssetHolder? = nil

    @[JSON::Field(key: "ASSET_TRANSACTIONS", type: AssetTransactions?, default: nil, required: true, nullable: false, emit_null: false)]
    getter asset_transactions : AssetTransactions? = nil

    @[JSON::Field(key: "VALIDATION_SOURCES", type: ValidationSources?, default: nil, required: true, nullable: false, emit_null: false)]
    getter validation_sources : ValidationSources? = nil

    # End of Required Properties

    # Initializes the object
    # @param [Hash] attributes Model attributes in the form of hash
    def initialize(
      *,
      # Required properties
      @asset_detail : AssetDetail? = nil,
      @asset_owners : AssetOwners? = nil,
      @asset_holder : AssetHolder? = nil,
      @asset_transactions : AssetTransactions? = nil,
      @validation_sources : ValidationSources? = nil
    )
    end

    # Show invalid properties with the reasons. Usually used together with valid?
    # @return Array for valid properties with the reasons
    def list_invalid_properties : Array(String)
      invalid_properties = Array(String).new

      invalid_properties.push("\"asset_detail\" is required and cannot be null") if @asset_detail.nil?

      unless (_asset_detail = @asset_detail).nil?
      end
      invalid_properties.push("\"asset_owners\" is required and cannot be null") if @asset_owners.nil?

      unless (_asset_owners = @asset_owners).nil?
      end
      invalid_properties.push("\"asset_holder\" is required and cannot be null") if @asset_holder.nil?

      unless (_asset_holder = @asset_holder).nil?
      end
      invalid_properties.push("\"asset_transactions\" is required and cannot be null") if @asset_transactions.nil?

      unless (_asset_transactions = @asset_transactions).nil?
      end
      invalid_properties.push("\"validation_sources\" is required and cannot be null") if @validation_sources.nil?

      unless (_validation_sources = @validation_sources).nil?
      end
      invalid_properties
    end

    # Check to see if the all the properties in the model are valid
    # @return true if the model is valid
    def valid? : Bool
      return false if @asset_detail.nil?
      unless (_asset_detail = @asset_detail).nil?
      end

      return false if @asset_owners.nil?
      unless (_asset_owners = @asset_owners).nil?
      end

      return false if @asset_holder.nil?
      unless (_asset_holder = @asset_holder).nil?
      end

      return false if @asset_transactions.nil?
      unless (_asset_transactions = @asset_transactions).nil?
      end

      return false if @validation_sources.nil?
      unless (_validation_sources = @validation_sources).nil?
      end

      true
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] asset_detail Object to be assigned
    def asset_detail=(new_value : AssetDetail?)
      raise ArgumentError.new("\"asset_detail\" is required and cannot be null") if new_value.nil?
      unless new_value.nil?
      end

      @asset_detail = new_value
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] asset_owners Object to be assigned
    def asset_owners=(new_value : AssetOwners?)
      raise ArgumentError.new("\"asset_owners\" is required and cannot be null") if new_value.nil?
      unless new_value.nil?
      end

      @asset_owners = new_value
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] asset_holder Object to be assigned
    def asset_holder=(new_value : AssetHolder?)
      raise ArgumentError.new("\"asset_holder\" is required and cannot be null") if new_value.nil?
      unless new_value.nil?
      end

      @asset_holder = new_value
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] asset_transactions Object to be assigned
    def asset_transactions=(new_value : AssetTransactions?)
      raise ArgumentError.new("\"asset_transactions\" is required and cannot be null") if new_value.nil?
      unless new_value.nil?
      end

      @asset_transactions = new_value
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] validation_sources Object to be assigned
    def validation_sources=(new_value : ValidationSources?)
      raise ArgumentError.new("\"validation_sources\" is required and cannot be null") if new_value.nil?
      unless new_value.nil?
      end

      @validation_sources = new_value
    end

    # Generates #hash and #== methods from all fields
    # #== @return [Bool]
    # #hash calculates hash code according to all attributes.
    # #hash @return [UInt64] Hash code
    def_equals_and_hash(@asset_detail, @asset_owners, @asset_holder, @asset_transactions, @validation_sources)
  end
end
