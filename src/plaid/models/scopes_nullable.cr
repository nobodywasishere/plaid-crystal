#  The Plaid API
#
# The Plaid REST API. Please see https://plaid.com/docs/api for more details.
#
# The version of the OpenAPI document: 2020-09-14_1.474.3
#
# Generated by: https://openapi-generator.tech
#

require "../../core"

require "./account_access"
require "./product_access"

module Plaid
  # The scopes object
  class ScopesNullable
    include JSON::Serializable
    include JSON::Serializable::Unmapped
    include OpenApi::Validatable
    include OpenApi::Json

    # Optional Properties

    @[JSON::Field(key: "product_access", type: ProductAccess?, default: nil, required: false, nullable: false, emit_null: false)]
    getter product_access : ProductAccess? = nil

    @[JSON::Field(key: "accounts", type: Array(Plaid::AccountAccess)?, default: nil, required: false, nullable: false, emit_null: false)]
    getter accounts : Array(Plaid::AccountAccess)? = nil

    # Allow access to newly opened accounts as they are opened. If unset, defaults to `true`.
    @[JSON::Field(key: "new_accounts", type: Bool?, default: true, required: false, nullable: true, emit_null: true, presence: true, ignore_serialize: new_accounts.nil? && !new_accounts_present?)]
    getter new_accounts : Bool? = true

    @[JSON::Field(ignore: true)]
    property? new_accounts_present : Bool = false

    # Initializes the object
    # @param [Hash] attributes Model attributes in the form of hash
    def initialize(
      *,
      # Optional properties
      @product_access : ProductAccess? = nil,
      @accounts : Array(Plaid::AccountAccess)? = nil,
      @new_accounts : Bool? = true
    )
    end

    # Show invalid properties with the reasons. Usually used together with valid?
    # @return Array for valid properties with the reasons
    def list_invalid_properties : Array(String)
      invalid_properties = Array(String).new

      unless (_product_access = @product_access).nil?
      end
      unless (_accounts = @accounts).nil?
        invalid_properties.concat(OpenApi::ContainerValidator.list_invalid_properties_for(key: "accounts", container: _accounts)) if _accounts.is_a?(Array)
      end
      unless (_new_accounts = @new_accounts).nil?
      end
      invalid_properties
    end

    # Check to see if the all the properties in the model are valid
    # @return true if the model is valid
    def valid? : Bool
      unless (_product_access = @product_access).nil?
      end

      unless (_accounts = @accounts).nil?
        return false if _accounts.is_a?(Array) && !OpenApi::ContainerValidator.valid?(container: _accounts)
      end

      unless (_new_accounts = @new_accounts).nil?
      end

      true
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] product_access Object to be assigned
    def product_access=(new_value : ProductAccess?)
      unless new_value.nil?
      end

      @product_access = new_value
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] accounts Object to be assigned
    def accounts=(new_value : Array(Plaid::AccountAccess)?)
      unless new_value.nil?
        OpenApi::ContainerValidator.validate(container: new_value) if new_value.is_a?(Array)
      end

      @accounts = new_value
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] new_accounts Object to be assigned
    def new_accounts=(new_value : Bool?)
      unless new_value.nil?
      end

      @new_accounts = new_value
    end

    # Generates #hash and #== methods from all fields
    # #== @return [Bool]
    # #hash calculates hash code according to all attributes.
    # #hash @return [UInt64] Hash code
    def_equals_and_hash(@product_access, @accounts, @new_accounts, @new_accounts_present)
  end
end
