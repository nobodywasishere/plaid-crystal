#  The Plaid API
#
# The Plaid REST API. Please see https://plaid.com/docs/api for more details.
#
# The version of the OpenAPI document: 2020-09-14_1.474.3
#
# Generated by: https://openapi-generator.tech
#

require "../../core"

require "./credit1099"
require "./credit_pay_stub"
require "./credit_w2"

module Plaid
  # An object representing payroll data.
  class PayrollIncomeObject
    include JSON::Serializable
    include JSON::Serializable::Unmapped
    include OpenApi::Validatable
    include OpenApi::Json

    # Required Properties

    # ID of the payroll provider account.
    @[JSON::Field(key: "account_id", type: String?, default: nil, required: true, nullable: true, emit_null: true)]
    getter account_id : String? = nil

    # Array of pay stubs for the user.
    @[JSON::Field(key: "pay_stubs", type: Array(CreditPayStub)?, default: nil, required: true, nullable: false, emit_null: false)]
    getter pay_stubs : Array(CreditPayStub)? = nil

    # Array of tax form W-2s.
    @[JSON::Field(key: "w2s", type: Array(CreditW2)?, default: nil, required: true, nullable: false, emit_null: false)]
    getter w2s : Array(CreditW2)? = nil

    # Array of tax form 1099s.
    @[JSON::Field(key: "form1099s", type: Array(Credit1099)?, default: nil, required: true, nullable: false, emit_null: false)]
    getter form1099s : Array(Credit1099)? = nil

    # End of Required Properties

    # Initializes the object
    # @param [Hash] attributes Model attributes in the form of hash
    def initialize(
      *,
      # Required properties
      @account_id : String? = nil,
      @pay_stubs : Array(CreditPayStub)? = nil,
      @w2s : Array(CreditW2)? = nil,
      @form1099s : Array(Credit1099)? = nil
    )
    end

    # Show invalid properties with the reasons. Usually used together with valid?
    # @return Array for valid properties with the reasons
    def list_invalid_properties : Array(String)
      invalid_properties = Array(String).new

      unless (_account_id = @account_id).nil?
      end
      invalid_properties.push("\"pay_stubs\" is required and cannot be null") if @pay_stubs.nil?

      unless (_pay_stubs = @pay_stubs).nil?
      end
      invalid_properties.push("\"w2s\" is required and cannot be null") if @w2s.nil?

      unless (_w2s = @w2s).nil?
      end
      invalid_properties.push("\"form1099s\" is required and cannot be null") if @form1099s.nil?

      unless (_form1099s = @form1099s).nil?
      end
      invalid_properties
    end

    # Check to see if the all the properties in the model are valid
    # @return true if the model is valid
    def valid? : Bool
      unless (_account_id = @account_id).nil?
      end

      return false if @pay_stubs.nil?
      unless (_pay_stubs = @pay_stubs).nil?
      end

      return false if @w2s.nil?
      unless (_w2s = @w2s).nil?
      end

      return false if @form1099s.nil?
      unless (_form1099s = @form1099s).nil?
      end

      true
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] account_id Object to be assigned
    def account_id=(new_value : String?)
      unless new_value.nil?
      end

      @account_id = new_value
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] pay_stubs Object to be assigned
    def pay_stubs=(new_value : Array(CreditPayStub)?)
      raise ArgumentError.new("\"pay_stubs\" is required and cannot be null") if new_value.nil?
      unless new_value.nil?
      end

      @pay_stubs = new_value
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] w2s Object to be assigned
    def w2s=(new_value : Array(CreditW2)?)
      raise ArgumentError.new("\"w2s\" is required and cannot be null") if new_value.nil?
      unless new_value.nil?
      end

      @w2s = new_value
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] form1099s Object to be assigned
    def form1099s=(new_value : Array(Credit1099)?)
      raise ArgumentError.new("\"form1099s\" is required and cannot be null") if new_value.nil?
      unless new_value.nil?
      end

      @form1099s = new_value
    end

    # Generates #hash and #== methods from all fields
    # #== @return [Bool]
    # #hash calculates hash code according to all attributes.
    # #hash @return [UInt64] Hash code
    def_equals_and_hash(@account_id, @pay_stubs, @w2s, @form1099s)
  end
end
