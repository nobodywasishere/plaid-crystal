#  The Plaid API
#
# The Plaid REST API. Please see https://plaid.com/docs/api for more details.
#
# The version of the OpenAPI document: 2020-09-14_1.474.3
#
# Generated by: https://openapi-generator.tech
#

require "../../core"

module Plaid
  # A representation of where a transaction took place.  Use this field to pass in structured location information you may have about your transactions. Providing location data is optional but can increase result quality. If you have unstructured location information, it may be appended to the `description` field.
  class ClientProvidedTransactionLocation
    include JSON::Serializable
    include JSON::Serializable::Unmapped
    include OpenApi::Validatable
    include OpenApi::Json

    # Optional Properties

    # The country where the transaction occurred.
    @[JSON::Field(key: "country", type: String?, default: nil, required: false, nullable: false, emit_null: false)]
    getter country : String? = nil

    # The region or state where the transaction occurred.
    @[JSON::Field(key: "region", type: String?, default: nil, required: false, nullable: false, emit_null: false)]
    getter region : String? = nil

    # The city where the transaction occurred.
    @[JSON::Field(key: "city", type: String?, default: nil, required: false, nullable: false, emit_null: false)]
    getter city : String? = nil

    # The street address where the transaction occurred.
    @[JSON::Field(key: "address", type: String?, default: nil, required: false, nullable: false, emit_null: false)]
    getter address : String? = nil

    # The postal code where the transaction occurred.
    @[JSON::Field(key: "postal_code", type: String?, default: nil, required: false, nullable: false, emit_null: false)]
    getter postal_code : String? = nil

    # Initializes the object
    # @param [Hash] attributes Model attributes in the form of hash
    def initialize(
      *,
      # Optional properties
      @country : String? = nil,
      @region : String? = nil,
      @city : String? = nil,
      @address : String? = nil,
      @postal_code : String? = nil
    )
    end

    # Show invalid properties with the reasons. Usually used together with valid?
    # @return Array for valid properties with the reasons
    def list_invalid_properties : Array(String)
      invalid_properties = Array(String).new

      unless (_country = @country).nil?
      end
      unless (_region = @region).nil?
      end
      unless (_city = @city).nil?
      end
      unless (_address = @address).nil?
      end
      unless (_postal_code = @postal_code).nil?
      end
      invalid_properties
    end

    # Check to see if the all the properties in the model are valid
    # @return true if the model is valid
    def valid? : Bool
      unless (_country = @country).nil?
      end

      unless (_region = @region).nil?
      end

      unless (_city = @city).nil?
      end

      unless (_address = @address).nil?
      end

      unless (_postal_code = @postal_code).nil?
      end

      true
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] country Object to be assigned
    def country=(new_value : String?)
      unless new_value.nil?
      end

      @country = new_value
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] region Object to be assigned
    def region=(new_value : String?)
      unless new_value.nil?
      end

      @region = new_value
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] city Object to be assigned
    def city=(new_value : String?)
      unless new_value.nil?
      end

      @city = new_value
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] address Object to be assigned
    def address=(new_value : String?)
      unless new_value.nil?
      end

      @address = new_value
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] postal_code Object to be assigned
    def postal_code=(new_value : String?)
      unless new_value.nil?
      end

      @postal_code = new_value
    end

    # Generates #hash and #== methods from all fields
    # #== @return [Bool]
    # #hash calculates hash code according to all attributes.
    # #hash @return [UInt64] Hash code
    def_equals_and_hash(@country, @region, @city, @address, @postal_code)
  end
end
