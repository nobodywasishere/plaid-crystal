#  The Plaid API
#
# The Plaid REST API. Please see https://plaid.com/docs/api for more details.
#
# The version of the OpenAPI document: 2020-09-14_1.474.3
#
# Generated by: https://openapi-generator.tech
#

require "../../core"

require "./credit_session_bank_employment_result"
require "./credit_session_bank_income_result"
require "./credit_session_document_income_result"
require "./credit_session_item_add_result"
require "./credit_session_payroll_income_result"

module Plaid
  # The set of results for a Link session.
  class CreditSessionResults
    include JSON::Serializable
    include JSON::Serializable::Unmapped
    include OpenApi::Validatable
    include OpenApi::Json

    # Optional Properties

    # The set of Item adds for the Link session.
    @[JSON::Field(key: "item_add_results", type: Array(Plaid::CreditSessionItemAddResult)?, default: nil, required: false, nullable: false, emit_null: false)]
    getter item_add_results : Array(Plaid::CreditSessionItemAddResult)? = nil

    # The set of bank income verifications for the Link session.
    @[JSON::Field(key: "bank_income_results", type: Array(Plaid::CreditSessionBankIncomeResult)?, default: nil, required: false, nullable: false, emit_null: false)]
    getter bank_income_results : Array(Plaid::CreditSessionBankIncomeResult)? = nil

    # The set of bank employment verifications for the Link session.
    @[JSON::Field(key: "bank_employment_results", type: Array(Plaid::CreditSessionBankEmploymentResult)?, default: nil, required: false, nullable: false, emit_null: false)]
    getter bank_employment_results : Array(Plaid::CreditSessionBankEmploymentResult)? = nil

    # The set of payroll income verifications for the Link session.
    @[JSON::Field(key: "payroll_income_results", type: Array(Plaid::CreditSessionPayrollIncomeResult)?, default: nil, required: false, nullable: false, emit_null: false)]
    getter payroll_income_results : Array(Plaid::CreditSessionPayrollIncomeResult)? = nil

    @[JSON::Field(key: "document_income_results", type: Plaid::CreditSessionDocumentIncomeResult?, default: nil, required: false, nullable: true, emit_null: true, presence: true, ignore_serialize: document_income_results.nil? && !document_income_results_present?)]
    getter document_income_results : Plaid::CreditSessionDocumentIncomeResult? = nil

    @[JSON::Field(ignore: true)]
    property? document_income_results_present : Bool = false

    # Initializes the object
    # @param [Hash] attributes Model attributes in the form of hash
    def initialize(
      *,
      # Optional properties
      @item_add_results : Array(Plaid::CreditSessionItemAddResult)? = nil,
      @bank_income_results : Array(Plaid::CreditSessionBankIncomeResult)? = nil,
      @bank_employment_results : Array(Plaid::CreditSessionBankEmploymentResult)? = nil,
      @payroll_income_results : Array(Plaid::CreditSessionPayrollIncomeResult)? = nil,
      @document_income_results : Plaid::CreditSessionDocumentIncomeResult? = nil
    )
    end

    # Show invalid properties with the reasons. Usually used together with valid?
    # @return Array for valid properties with the reasons
    def list_invalid_properties : Array(String)
      invalid_properties = Array(String).new

      unless (_item_add_results = @item_add_results).nil?
        invalid_properties.concat(OpenApi::ContainerValidator.list_invalid_properties_for(key: "item_add_results", container: _item_add_results)) if _item_add_results.is_a?(Array)
      end
      unless (_bank_income_results = @bank_income_results).nil?
        invalid_properties.concat(OpenApi::ContainerValidator.list_invalid_properties_for(key: "bank_income_results", container: _bank_income_results)) if _bank_income_results.is_a?(Array)
      end
      unless (_bank_employment_results = @bank_employment_results).nil?
        invalid_properties.concat(OpenApi::ContainerValidator.list_invalid_properties_for(key: "bank_employment_results", container: _bank_employment_results)) if _bank_employment_results.is_a?(Array)
      end
      unless (_payroll_income_results = @payroll_income_results).nil?
        invalid_properties.concat(OpenApi::ContainerValidator.list_invalid_properties_for(key: "payroll_income_results", container: _payroll_income_results)) if _payroll_income_results.is_a?(Array)
      end
      unless (_document_income_results = @document_income_results).nil?
        invalid_properties.concat(_document_income_results.list_invalid_properties_for("document_income_results")) if _document_income_results.is_a?(OpenApi::Validatable)
      end
      invalid_properties
    end

    # Check to see if the all the properties in the model are valid
    # @return true if the model is valid
    def valid? : Bool
      unless (_item_add_results = @item_add_results).nil?
        return false if _item_add_results.is_a?(Array) && !OpenApi::ContainerValidator.valid?(container: _item_add_results)
      end

      unless (_bank_income_results = @bank_income_results).nil?
        return false if _bank_income_results.is_a?(Array) && !OpenApi::ContainerValidator.valid?(container: _bank_income_results)
      end

      unless (_bank_employment_results = @bank_employment_results).nil?
        return false if _bank_employment_results.is_a?(Array) && !OpenApi::ContainerValidator.valid?(container: _bank_employment_results)
      end

      unless (_payroll_income_results = @payroll_income_results).nil?
        return false if _payroll_income_results.is_a?(Array) && !OpenApi::ContainerValidator.valid?(container: _payroll_income_results)
      end

      unless (_document_income_results = @document_income_results).nil?
        return false if _document_income_results.is_a?(OpenApi::Validatable) && !_document_income_results.valid?
      end

      true
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] item_add_results Object to be assigned
    def item_add_results=(new_value : Array(Plaid::CreditSessionItemAddResult)?)
      unless new_value.nil?
        OpenApi::ContainerValidator.validate(container: new_value) if new_value.is_a?(Array)
      end

      @item_add_results = new_value
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] bank_income_results Object to be assigned
    def bank_income_results=(new_value : Array(Plaid::CreditSessionBankIncomeResult)?)
      unless new_value.nil?
        OpenApi::ContainerValidator.validate(container: new_value) if new_value.is_a?(Array)
      end

      @bank_income_results = new_value
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] bank_employment_results Object to be assigned
    def bank_employment_results=(new_value : Array(Plaid::CreditSessionBankEmploymentResult)?)
      unless new_value.nil?
        OpenApi::ContainerValidator.validate(container: new_value) if new_value.is_a?(Array)
      end

      @bank_employment_results = new_value
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] payroll_income_results Object to be assigned
    def payroll_income_results=(new_value : Array(Plaid::CreditSessionPayrollIncomeResult)?)
      unless new_value.nil?
        OpenApi::ContainerValidator.validate(container: new_value) if new_value.is_a?(Array)
      end

      @payroll_income_results = new_value
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] document_income_results Object to be assigned
    def document_income_results=(new_value : Plaid::CreditSessionDocumentIncomeResult?)
      unless new_value.nil?
        new_value.validate if new_value.is_a?(OpenApi::Validatable)
      end

      @document_income_results = new_value
    end

    # Generates #hash and #== methods from all fields
    # #== @return [Bool]
    # #hash calculates hash code according to all attributes.
    # #hash @return [UInt64] Hash code
    def_equals_and_hash(@item_add_results, @bank_income_results, @bank_employment_results, @payroll_income_results, @document_income_results, @document_income_results_present)
  end
end
