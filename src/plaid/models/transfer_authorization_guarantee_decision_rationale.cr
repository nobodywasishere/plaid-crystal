#  The Plaid API
#
# The Plaid REST API. Please see https://plaid.com/docs/api for more details.
#
# The version of the OpenAPI document: 2020-09-14_1.474.3
#
# Generated by: https://openapi-generator.tech
#

require "../../core"

require "./transfer_authorization_guarantee_decision_rationale_code"

module Plaid
  # The rationale for Plaid's decision to not guarantee a transfer. Will be `null` unless `guarantee_decision` is `NOT_GUARANTEED`.
  class TransferAuthorizationGuaranteeDecisionRationale
    include JSON::Serializable
    include JSON::Serializable::Unmapped
    include OpenApi::Validatable
    include OpenApi::Json

    # Required Properties

    @[JSON::Field(key: "code", type: Plaid::TransferAuthorizationGuaranteeDecisionRationaleCode?, default: nil, required: true, nullable: false, emit_null: false)]
    getter code : Plaid::TransferAuthorizationGuaranteeDecisionRationaleCode? = nil

    # A human-readable description of why the transfer cannot be guaranteed.
    @[JSON::Field(key: "description", type: String?, default: nil, required: true, nullable: false, emit_null: false)]
    getter description : String? = nil

    # End of Required Properties

    # Initializes the object
    # @param [Hash] attributes Model attributes in the form of hash
    def initialize(
      *,
      # Required properties
      @code : Plaid::TransferAuthorizationGuaranteeDecisionRationaleCode? = nil,
      @description : String? = nil
    )
    end

    # Show invalid properties with the reasons. Usually used together with valid?
    # @return Array for valid properties with the reasons
    def list_invalid_properties : Array(String)
      invalid_properties = Array(String).new

      invalid_properties.push("\"code\" is required and cannot be null") if @code.nil?

      unless (_code = @code).nil?
        invalid_properties.push(_code.error_message) if !_code.valid?
      end
      invalid_properties.push("\"description\" is required and cannot be null") if @description.nil?

      unless (_description = @description).nil?
      end
      invalid_properties
    end

    # Check to see if the all the properties in the model are valid
    # @return true if the model is valid
    def valid? : Bool
      return false if @code.nil?
      unless (_code = @code).nil?
        return false if !_code.valid?
      end

      return false if @description.nil?
      unless (_description = @description).nil?
      end

      true
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] code Object to be assigned
    def code=(new_value : Plaid::TransferAuthorizationGuaranteeDecisionRationaleCode?)
      raise ArgumentError.new("\"code\" is required and cannot be null") if new_value.nil?
      unless new_value.nil?
        new_value.validate
      end

      @code = new_value
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] description Object to be assigned
    def description=(new_value : String?)
      raise ArgumentError.new("\"description\" is required and cannot be null") if new_value.nil?
      unless new_value.nil?
      end

      @description = new_value
    end

    # Generates #hash and #== methods from all fields
    # #== @return [Bool]
    # #hash calculates hash code according to all attributes.
    # #hash @return [UInt64] Hash code
    def_equals_and_hash(@code, @description)
  end
end
