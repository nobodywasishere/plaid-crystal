#  The Plaid API
#
# The Plaid REST API. Please see https://plaid.com/docs/api for more details.
#
# The version of the OpenAPI document: 2020-09-14_1.474.3
#
# Generated by: https://openapi-generator.tech
#

require "../../core"

module Plaid
  # The object contains a risk score and a risk tier that evaluate the transaction return risk of an unauthorized debit. Common return codes in this category include: \"R05\", \"R07\", \"R10\", \"R11\", \"R29\". These returns typically have a return time frame of up to 60 calendar days. During this period, the customer of financial institutions can dispute a transaction as unauthorized.
  class CustomerInitiatedReturnRisk
    include JSON::Serializable
    include JSON::Serializable::Unmapped
    include OpenApi::Validatable
    include OpenApi::Json

    # Required Properties

    # A score from 1-99 that indicates the transaction return risk: a higher risk score suggests a higher return likelihood.
    @[JSON::Field(key: "score", type: Int32?, default: nil, required: true, nullable: false, emit_null: false)]
    getter score : Int32? = nil
    MAX_FOR_SCORE = Int32.new("99")
    MIN_FOR_SCORE = Int32.new("1")

    # A tier corresponding to the projected likelihood that the transaction, if initiated, will be subject to a return.  In the `customer_initiated_return_risk` object, there are five risk tiers corresponding to the scores:   1: Predicted customer-initiated return incidence rate between 0.00% - 0.02%   2: Predicted customer-initiated return incidence rate between 0.02% - 0.05%   3: Predicted customer-initiated return incidence rate between 0.05% - 0.1%   4: Predicted customer-initiated return incidence rate between 0.1% - 0.5%   5: Predicted customer-initiated return incidence rate greater than 0.5%
    @[JSON::Field(key: "risk_tier", type: Int32?, default: nil, required: true, nullable: false, emit_null: false)]
    getter risk_tier : Int32? = nil
    MAX_FOR_RISK_TIER = Int32.new("5")
    MIN_FOR_RISK_TIER = Int32.new("1")

    # End of Required Properties

    # Initializes the object
    # @param [Hash] attributes Model attributes in the form of hash
    def initialize(
      *,
      # Required properties
      @score : Int32? = nil,
      @risk_tier : Int32? = nil
    )
    end

    # Show invalid properties with the reasons. Usually used together with valid?
    # @return Array for valid properties with the reasons
    def list_invalid_properties : Array(String)
      invalid_properties = Array(String).new

      invalid_properties.push("\"score\" is required and cannot be null") if @score.nil?

      unless (_score = @score).nil?
        if max_number_error = OpenApi::PrimitiveValidator.max_number_error("score", _score, MAX_FOR_SCORE)
          invalid_properties.push(max_number_error)
        end

        if min_number_error = OpenApi::PrimitiveValidator.min_number_error("score", _score, MIN_FOR_SCORE)
          invalid_properties.push(min_number_error)
        end
      end
      invalid_properties.push("\"risk_tier\" is required and cannot be null") if @risk_tier.nil?

      unless (_risk_tier = @risk_tier).nil?
        if max_number_error = OpenApi::PrimitiveValidator.max_number_error("risk_tier", _risk_tier, MAX_FOR_RISK_TIER)
          invalid_properties.push(max_number_error)
        end

        if min_number_error = OpenApi::PrimitiveValidator.min_number_error("risk_tier", _risk_tier, MIN_FOR_RISK_TIER)
          invalid_properties.push(min_number_error)
        end
      end
      invalid_properties
    end

    # Check to see if the all the properties in the model are valid
    # @return true if the model is valid
    def valid? : Bool
      return false if @score.nil?
      unless (_score = @score).nil?
        return false if _score > MAX_FOR_SCORE
        return false if _score < MIN_FOR_SCORE
      end

      return false if @risk_tier.nil?
      unless (_risk_tier = @risk_tier).nil?
        return false if _risk_tier > MAX_FOR_RISK_TIER
        return false if _risk_tier < MIN_FOR_RISK_TIER
      end

      true
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] score Object to be assigned
    def score=(new_value : Int32?)
      raise ArgumentError.new("\"score\" is required and cannot be null") if new_value.nil?
      unless new_value.nil?
        OpenApi::PrimitiveValidator.validate_max_number("score", new_value, MAX_FOR_SCORE)
        OpenApi::PrimitiveValidator.validate_min_number("score", new_value, MIN_FOR_SCORE)
      end

      @score = new_value
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] risk_tier Object to be assigned
    def risk_tier=(new_value : Int32?)
      raise ArgumentError.new("\"risk_tier\" is required and cannot be null") if new_value.nil?
      unless new_value.nil?
        OpenApi::PrimitiveValidator.validate_max_number("risk_tier", new_value, MAX_FOR_RISK_TIER)
        OpenApi::PrimitiveValidator.validate_min_number("risk_tier", new_value, MIN_FOR_RISK_TIER)
      end

      @risk_tier = new_value
    end

    # Generates #hash and #== methods from all fields
    # #== @return [Bool]
    # #hash calculates hash code according to all attributes.
    # #hash @return [UInt64] Hash code
    def_equals_and_hash(@score, @risk_tier)
  end
end
