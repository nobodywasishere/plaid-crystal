#  The Plaid API
#
# The Plaid REST API. Please see https://plaid.com/docs/api for more details.
#
# The version of the OpenAPI document: 2020-09-14_1.474.3
#
# Generated by: https://openapi-generator.tech
#

require "../../core"

require "./payment_amount_currency"

module Plaid
  # The amount and currency of a payment
  class PaymentAmountToRefund
    include JSON::Serializable
    include JSON::Serializable::Unmapped
    include OpenApi::Validatable
    include OpenApi::Json

    # Required Properties

    @[JSON::Field(key: "currency", type: Plaid::PaymentAmountCurrency?, default: nil, required: true, nullable: false, emit_null: false)]
    getter currency : Plaid::PaymentAmountCurrency? = nil

    # The amount of the payment. Must contain at most two digits of precision e.g. `1.23`.
    @[JSON::Field(key: "value", type: Float64?, default: nil, required: true, nullable: false, emit_null: false)]
    getter value : Float64? = nil
    MIN_FOR_VALUE = Float64.new("0.01")

    # End of Required Properties

    # Initializes the object
    # @param [Hash] attributes Model attributes in the form of hash
    def initialize(
      *,
      # Required properties
      @currency : Plaid::PaymentAmountCurrency? = nil,
      @value : Float64? = nil
    )
    end

    # Show invalid properties with the reasons. Usually used together with valid?
    # @return Array for valid properties with the reasons
    def list_invalid_properties : Array(String)
      invalid_properties = Array(String).new

      invalid_properties.push("\"currency\" is required and cannot be null") if @currency.nil?

      unless (_currency = @currency).nil?
        invalid_properties.push(_currency.error_message) if !_currency.valid?
      end
      invalid_properties.push("\"value\" is required and cannot be null") if @value.nil?

      unless (_value = @value).nil?
        if min_number_error = OpenApi::PrimitiveValidator.min_number_error("value", _value, MIN_FOR_VALUE)
          invalid_properties.push(min_number_error)
        end
      end
      invalid_properties
    end

    # Check to see if the all the properties in the model are valid
    # @return true if the model is valid
    def valid? : Bool
      return false if @currency.nil?
      unless (_currency = @currency).nil?
        return false if !_currency.valid?
      end

      return false if @value.nil?
      unless (_value = @value).nil?
        return false if _value < MIN_FOR_VALUE
      end

      true
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] currency Object to be assigned
    def currency=(new_value : Plaid::PaymentAmountCurrency?)
      raise ArgumentError.new("\"currency\" is required and cannot be null") if new_value.nil?
      unless new_value.nil?
        new_value.validate
      end

      @currency = new_value
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] value Object to be assigned
    def value=(new_value : Float64?)
      raise ArgumentError.new("\"value\" is required and cannot be null") if new_value.nil?
      unless new_value.nil?
        OpenApi::PrimitiveValidator.validate_min_number("value", new_value, MIN_FOR_VALUE)
      end

      @value = new_value
    end

    # Generates #hash and #== methods from all fields
    # #== @return [Bool]
    # #hash calculates hash code according to all attributes.
    # #hash @return [UInt64] Hash code
    def_equals_and_hash(@currency, @value)
  end
end
