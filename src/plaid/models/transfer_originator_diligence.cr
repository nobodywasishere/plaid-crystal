#  The Plaid API
#
# The Plaid REST API. Please see https://plaid.com/docs/api for more details.
#
# The version of the OpenAPI document: 2020-09-14_1.474.3
#
# Generated by: https://openapi-generator.tech
#

require "../../core"

require "./transfer_credit_usage_configuration"
require "./transfer_debit_usage_configuration"
require "./transfer_funding_account"
require "./transfer_originator_address"

module Plaid
  # The diligence information for the originator.
  class TransferOriginatorDiligence
    include JSON::Serializable
    include JSON::Serializable::Unmapped
    include OpenApi::Validatable
    include OpenApi::Json

    # Required Properties

    # The business name of the originator.
    @[JSON::Field(key: "dba", type: String?, default: nil, required: true, nullable: false, emit_null: false)]
    getter dba : String? = nil

    # The tax ID of the originator.
    @[JSON::Field(key: "tax_id", type: String?, default: nil, required: true, nullable: false, emit_null: false)]
    getter tax_id : String? = nil
    MIN_LENGTH_FOR_TAX_ID = 1

    @[JSON::Field(key: "address", type: Plaid::TransferOriginatorAddress?, default: nil, required: true, nullable: false, emit_null: false)]
    getter address : Plaid::TransferOriginatorAddress? = nil

    # The website of the originator.
    @[JSON::Field(key: "website", type: String?, default: nil, required: true, nullable: false, emit_null: false)]
    getter website : String? = nil

    # The NAICS code of the originator.
    @[JSON::Field(key: "naics_code", type: String?, default: nil, required: true, nullable: false, emit_null: false)]
    getter naics_code : String? = nil
    MAX_LENGTH_FOR_NAICS_CODE = 6
    MIN_LENGTH_FOR_NAICS_CODE = 6

    @[JSON::Field(key: "funding_account", type: Plaid::TransferFundingAccount?, default: nil, required: true, nullable: false, emit_null: false)]
    getter funding_account : Plaid::TransferFundingAccount? = nil

    # End of Required Properties

    # Optional Properties

    @[JSON::Field(key: "credit_usage_configuration", type: Plaid::TransferCreditUsageConfiguration?, default: nil, required: false, nullable: true, emit_null: true, presence: true, ignore_serialize: credit_usage_configuration.nil? && !credit_usage_configuration_present?)]
    getter credit_usage_configuration : Plaid::TransferCreditUsageConfiguration? = nil

    @[JSON::Field(ignore: true)]
    property? credit_usage_configuration_present : Bool = false

    @[JSON::Field(key: "debit_usage_configuration", type: Plaid::TransferDebitUsageConfiguration?, default: nil, required: false, nullable: true, emit_null: true, presence: true, ignore_serialize: debit_usage_configuration.nil? && !debit_usage_configuration_present?)]
    getter debit_usage_configuration : Plaid::TransferDebitUsageConfiguration? = nil

    @[JSON::Field(ignore: true)]
    property? debit_usage_configuration_present : Bool = false

    # Initializes the object
    # @param [Hash] attributes Model attributes in the form of hash
    def initialize(
      *,
      # Required properties
      @dba : String? = nil,
      @tax_id : String? = nil,
      @address : Plaid::TransferOriginatorAddress? = nil,
      @website : String? = nil,
      @naics_code : String? = nil,
      @funding_account : Plaid::TransferFundingAccount? = nil,
      # Optional properties
      @credit_usage_configuration : Plaid::TransferCreditUsageConfiguration? = nil,
      @debit_usage_configuration : Plaid::TransferDebitUsageConfiguration? = nil
    )
    end

    # Show invalid properties with the reasons. Usually used together with valid?
    # @return Array for valid properties with the reasons
    def list_invalid_properties : Array(String)
      invalid_properties = Array(String).new

      invalid_properties.push("\"dba\" is required and cannot be null") if @dba.nil?

      unless (_dba = @dba).nil?
      end
      invalid_properties.push("\"tax_id\" is required and cannot be null") if @tax_id.nil?

      unless (_tax_id = @tax_id).nil?
        if min_length_error = OpenApi::PrimitiveValidator.min_length_error("tax_id", _tax_id.to_s.size, MIN_LENGTH_FOR_TAX_ID)
          invalid_properties.push(min_length_error)
        end
      end
      invalid_properties.push("\"address\" is required and cannot be null") if @address.nil?

      unless (_address = @address).nil?
        invalid_properties.concat(_address.list_invalid_properties_for("address")) if _address.is_a?(OpenApi::Validatable)
      end
      invalid_properties.push("\"website\" is required and cannot be null") if @website.nil?

      unless (_website = @website).nil?
      end
      invalid_properties.push("\"naics_code\" is required and cannot be null") if @naics_code.nil?

      unless (_naics_code = @naics_code).nil?
        if max_length_error = OpenApi::PrimitiveValidator.max_length_error("naics_code", _naics_code.to_s.size, MAX_LENGTH_FOR_NAICS_CODE)
          invalid_properties.push(max_length_error)
        end

        if min_length_error = OpenApi::PrimitiveValidator.min_length_error("naics_code", _naics_code.to_s.size, MIN_LENGTH_FOR_NAICS_CODE)
          invalid_properties.push(min_length_error)
        end
      end
      invalid_properties.push("\"funding_account\" is required and cannot be null") if @funding_account.nil?

      unless (_funding_account = @funding_account).nil?
        invalid_properties.concat(_funding_account.list_invalid_properties_for("funding_account")) if _funding_account.is_a?(OpenApi::Validatable)
      end
      unless (_credit_usage_configuration = @credit_usage_configuration).nil?
        invalid_properties.concat(_credit_usage_configuration.list_invalid_properties_for("credit_usage_configuration")) if _credit_usage_configuration.is_a?(OpenApi::Validatable)
      end
      unless (_debit_usage_configuration = @debit_usage_configuration).nil?
        invalid_properties.concat(_debit_usage_configuration.list_invalid_properties_for("debit_usage_configuration")) if _debit_usage_configuration.is_a?(OpenApi::Validatable)
      end
      invalid_properties
    end

    # Check to see if the all the properties in the model are valid
    # @return true if the model is valid
    def valid? : Bool
      return false if @dba.nil?
      unless (_dba = @dba).nil?
      end

      return false if @tax_id.nil?
      unless (_tax_id = @tax_id).nil?
        return false if _tax_id.to_s.size < MIN_LENGTH_FOR_TAX_ID
      end

      return false if @address.nil?
      unless (_address = @address).nil?
        return false if _address.is_a?(OpenApi::Validatable) && !_address.valid?
      end

      return false if @website.nil?
      unless (_website = @website).nil?
      end

      return false if @naics_code.nil?
      unless (_naics_code = @naics_code).nil?
        return false if _naics_code.to_s.size > MAX_LENGTH_FOR_NAICS_CODE
        return false if _naics_code.to_s.size < MIN_LENGTH_FOR_NAICS_CODE
      end

      return false if @funding_account.nil?
      unless (_funding_account = @funding_account).nil?
        return false if _funding_account.is_a?(OpenApi::Validatable) && !_funding_account.valid?
      end

      unless (_credit_usage_configuration = @credit_usage_configuration).nil?
        return false if _credit_usage_configuration.is_a?(OpenApi::Validatable) && !_credit_usage_configuration.valid?
      end

      unless (_debit_usage_configuration = @debit_usage_configuration).nil?
        return false if _debit_usage_configuration.is_a?(OpenApi::Validatable) && !_debit_usage_configuration.valid?
      end

      true
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] dba Object to be assigned
    def dba=(new_value : String?)
      raise ArgumentError.new("\"dba\" is required and cannot be null") if new_value.nil?
      unless new_value.nil?
      end

      @dba = new_value
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] tax_id Object to be assigned
    def tax_id=(new_value : String?)
      raise ArgumentError.new("\"tax_id\" is required and cannot be null") if new_value.nil?
      unless new_value.nil?
        OpenApi::PrimitiveValidator.validate_min_length("tax_id", new_value.to_s.size, MIN_LENGTH_FOR_TAX_ID)
      end

      @tax_id = new_value
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] address Object to be assigned
    def address=(new_value : Plaid::TransferOriginatorAddress?)
      raise ArgumentError.new("\"address\" is required and cannot be null") if new_value.nil?
      unless new_value.nil?
        new_value.validate if new_value.is_a?(OpenApi::Validatable)
      end

      @address = new_value
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] website Object to be assigned
    def website=(new_value : String?)
      raise ArgumentError.new("\"website\" is required and cannot be null") if new_value.nil?
      unless new_value.nil?
      end

      @website = new_value
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] naics_code Object to be assigned
    def naics_code=(new_value : String?)
      raise ArgumentError.new("\"naics_code\" is required and cannot be null") if new_value.nil?
      unless new_value.nil?
        OpenApi::PrimitiveValidator.validate_max_length("naics_code", new_value.to_s.size, MAX_LENGTH_FOR_NAICS_CODE)
        OpenApi::PrimitiveValidator.validate_min_length("naics_code", new_value.to_s.size, MIN_LENGTH_FOR_NAICS_CODE)
      end

      @naics_code = new_value
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] funding_account Object to be assigned
    def funding_account=(new_value : Plaid::TransferFundingAccount?)
      raise ArgumentError.new("\"funding_account\" is required and cannot be null") if new_value.nil?
      unless new_value.nil?
        new_value.validate if new_value.is_a?(OpenApi::Validatable)
      end

      @funding_account = new_value
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] credit_usage_configuration Object to be assigned
    def credit_usage_configuration=(new_value : Plaid::TransferCreditUsageConfiguration?)
      unless new_value.nil?
        new_value.validate if new_value.is_a?(OpenApi::Validatable)
      end

      @credit_usage_configuration = new_value
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] debit_usage_configuration Object to be assigned
    def debit_usage_configuration=(new_value : Plaid::TransferDebitUsageConfiguration?)
      unless new_value.nil?
        new_value.validate if new_value.is_a?(OpenApi::Validatable)
      end

      @debit_usage_configuration = new_value
    end

    # Generates #hash and #== methods from all fields
    # #== @return [Bool]
    # #hash calculates hash code according to all attributes.
    # #hash @return [UInt64] Hash code
    def_equals_and_hash(@dba, @tax_id, @address, @website, @naics_code, @funding_account, @credit_usage_configuration, @credit_usage_configuration_present, @debit_usage_configuration, @debit_usage_configuration_present)
  end
end
