#  The Plaid API
#
# The Plaid REST API. Please see https://plaid.com/docs/api for more details.
#
# The version of the OpenAPI document: 2020-09-14_1.474.3
#
# Generated by: https://openapi-generator.tech
#

require "../../core"

module Plaid
  # The address extracted from the document. The address must at least contain the following fields to be a valid address: `street`, `city`, `country`. If any are missing or unable to be extracted, the address will be null.  `region`, and `postal_code` may be null based on the addressing system. For example:  Addresses from the United Kingdom will not include a region  Addresses from Hong Kong will not include postal code  Note: Optical Character Recognition (OCR) technology may sometimes extract incorrect data from a document.
  class IdentityVerificationDocumentAddressResponse
    include JSON::Serializable
    include JSON::Serializable::Unmapped
    include OpenApi::Validatable
    include OpenApi::Json

    # Required Properties

    # The full street address extracted from the document.
    @[JSON::Field(key: "street", type: String?, default: nil, required: true, nullable: false, emit_null: false)]
    getter street : String? = nil

    # City extracted from the document.
    @[JSON::Field(key: "city", type: String?, default: nil, required: true, nullable: false, emit_null: false)]
    getter city : String? = nil

    # An ISO 3166-2 subdivision code extracted from the document. Related terms would be \"state\", \"province\", \"prefecture\", \"zone\", \"subdivision\", etc.
    @[JSON::Field(key: "region", type: String?, default: nil, required: true, nullable: true, emit_null: true)]
    getter region : String? = nil

    # The postal code extracted from the document. Between 2 and 10 alphanumeric characters. For US-based addresses this must be 5 numeric digits.
    @[JSON::Field(key: "postal_code", type: String?, default: nil, required: true, nullable: true, emit_null: true)]
    getter postal_code : String? = nil

    # Valid, capitalized, two-letter ISO code representing the country extracted from the document. Must be in ISO 3166-1 alpha-2 form.
    @[JSON::Field(key: "country", type: String?, default: nil, required: true, nullable: false, emit_null: false)]
    getter country : String? = nil
    MIN_LENGTH_FOR_COUNTRY = 2

    # End of Required Properties

    # Initializes the object
    # @param [Hash] attributes Model attributes in the form of hash
    def initialize(
      *,
      # Required properties
      @street : String? = nil,
      @city : String? = nil,
      @region : String? = nil,
      @postal_code : String? = nil,
      @country : String? = nil
    )
    end

    # Show invalid properties with the reasons. Usually used together with valid?
    # @return Array for valid properties with the reasons
    def list_invalid_properties : Array(String)
      invalid_properties = Array(String).new

      invalid_properties.push("\"street\" is required and cannot be null") if @street.nil?

      unless (_street = @street).nil?
      end
      invalid_properties.push("\"city\" is required and cannot be null") if @city.nil?

      unless (_city = @city).nil?
      end
      unless (_region = @region).nil?
      end
      unless (_postal_code = @postal_code).nil?
      end
      invalid_properties.push("\"country\" is required and cannot be null") if @country.nil?

      unless (_country = @country).nil?
        if min_length_error = OpenApi::PrimitiveValidator.min_length_error("country", _country.to_s.size, MIN_LENGTH_FOR_COUNTRY)
          invalid_properties.push(min_length_error)
        end
      end
      invalid_properties
    end

    # Check to see if the all the properties in the model are valid
    # @return true if the model is valid
    def valid? : Bool
      return false if @street.nil?
      unless (_street = @street).nil?
      end

      return false if @city.nil?
      unless (_city = @city).nil?
      end

      unless (_region = @region).nil?
      end

      unless (_postal_code = @postal_code).nil?
      end

      return false if @country.nil?
      unless (_country = @country).nil?
        return false if _country.to_s.size < MIN_LENGTH_FOR_COUNTRY
      end

      true
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] street Object to be assigned
    def street=(new_value : String?)
      raise ArgumentError.new("\"street\" is required and cannot be null") if new_value.nil?
      unless new_value.nil?
      end

      @street = new_value
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] city Object to be assigned
    def city=(new_value : String?)
      raise ArgumentError.new("\"city\" is required and cannot be null") if new_value.nil?
      unless new_value.nil?
      end

      @city = new_value
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] region Object to be assigned
    def region=(new_value : String?)
      unless new_value.nil?
      end

      @region = new_value
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] postal_code Object to be assigned
    def postal_code=(new_value : String?)
      unless new_value.nil?
      end

      @postal_code = new_value
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] country Object to be assigned
    def country=(new_value : String?)
      raise ArgumentError.new("\"country\" is required and cannot be null") if new_value.nil?
      unless new_value.nil?
        OpenApi::PrimitiveValidator.validate_min_length("country", new_value.to_s.size, MIN_LENGTH_FOR_COUNTRY)
      end

      @country = new_value
    end

    # Generates #hash and #== methods from all fields
    # #== @return [Bool]
    # #hash calculates hash code according to all attributes.
    # #hash @return [UInt64] Hash code
    def_equals_and_hash(@street, @city, @region, @postal_code, @country)
  end
end
