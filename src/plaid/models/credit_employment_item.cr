#  The Plaid API
#
# The Plaid REST API. Please see https://plaid.com/docs/api for more details.
#
# The version of the OpenAPI document: 2020-09-14_1.474.3
#
# Generated by: https://openapi-generator.tech
#

require "../../core"

require "./credit_employment_verification"

module Plaid
  # The object containing employment items.
  class CreditEmploymentItem
    include JSON::Serializable
    include JSON::Serializable::Unmapped
    include OpenApi::Validatable
    include OpenApi::Json

    # Required Properties

    # The `item_id` of the Item associated with this webhook, warning, or error
    @[JSON::Field(key: "item_id", type: String?, default: nil, required: true, nullable: false, emit_null: false)]
    getter item_id : String? = nil

    @[JSON::Field(key: "employments", type: Array(CreditEmploymentVerification)?, default: nil, required: true, nullable: false, emit_null: false)]
    getter employments : Array(CreditEmploymentVerification)? = nil

    # End of Required Properties

    # Optional Properties

    # Token to represent the underlying Employment data
    @[JSON::Field(key: "employment_report_token", type: String?, default: nil, required: false, nullable: false, emit_null: false)]
    getter employment_report_token : String? = nil

    # Initializes the object
    # @param [Hash] attributes Model attributes in the form of hash
    def initialize(
      *,
      # Required properties
      @item_id : String? = nil,
      @employments : Array(CreditEmploymentVerification)? = nil,
      # Optional properties
      @employment_report_token : String? = nil
    )
    end

    # Show invalid properties with the reasons. Usually used together with valid?
    # @return Array for valid properties with the reasons
    def list_invalid_properties : Array(String)
      invalid_properties = Array(String).new

      invalid_properties.push("\"item_id\" is required and cannot be null") if @item_id.nil?

      unless (_item_id = @item_id).nil?
      end
      invalid_properties.push("\"employments\" is required and cannot be null") if @employments.nil?

      unless (_employments = @employments).nil?
      end
      unless (_employment_report_token = @employment_report_token).nil?
      end
      invalid_properties
    end

    # Check to see if the all the properties in the model are valid
    # @return true if the model is valid
    def valid? : Bool
      return false if @item_id.nil?
      unless (_item_id = @item_id).nil?
      end

      return false if @employments.nil?
      unless (_employments = @employments).nil?
      end

      unless (_employment_report_token = @employment_report_token).nil?
      end

      true
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] item_id Object to be assigned
    def item_id=(new_value : String?)
      raise ArgumentError.new("\"item_id\" is required and cannot be null") if new_value.nil?
      unless new_value.nil?
      end

      @item_id = new_value
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] employments Object to be assigned
    def employments=(new_value : Array(CreditEmploymentVerification)?)
      raise ArgumentError.new("\"employments\" is required and cannot be null") if new_value.nil?
      unless new_value.nil?
      end

      @employments = new_value
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] employment_report_token Object to be assigned
    def employment_report_token=(new_value : String?)
      unless new_value.nil?
      end

      @employment_report_token = new_value
    end

    # Generates #hash and #== methods from all fields
    # #== @return [Bool]
    # #hash calculates hash code according to all attributes.
    # #hash @return [UInt64] Hash code
    def_equals_and_hash(@item_id, @employments, @employment_report_token)
  end
end
