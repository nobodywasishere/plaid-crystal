#  The Plaid API
#
# The Plaid REST API. Please see https://plaid.com/docs/api for more details.
#
# The version of the OpenAPI document: 2020-09-14_1.474.3
#
# Generated by: https://openapi-generator.tech
#

require "../../core"

require "./sweep_status"
require "./sweep_trigger"

module Plaid
  # Describes a sweep of funds to / from the sweep account.  A sweep is associated with many sweep events (events of type `swept` or `return_swept`) which can be retrieved by invoking the `/transfer/event/list` endpoint with the corresponding `sweep_id`.  `swept` events occur when the transfer amount is credited or debited from your sweep account, depending on the `type` of the transfer. `return_swept` events occur when a transfer is returned and Plaid undoes the credit or debit.  The total sum of the `swept` and `return_swept` events is equal to the `amount` of the sweep Plaid creates and matches the amount of the entry on your sweep account ledger.
  class TransferSweep
    include JSON::Serializable
    include JSON::Serializable::Unmapped
    include OpenApi::Validatable
    include OpenApi::Json

    # Required Properties

    # Identifier of the sweep.
    @[JSON::Field(key: "id", type: String?, default: nil, required: true, nullable: false, emit_null: false)]
    getter id : String? = nil

    # The id of the funding account to use, available in the Plaid Dashboard. This determines which of your business checking accounts will be credited or debited.
    @[JSON::Field(key: "funding_account_id", type: String?, default: nil, required: true, nullable: false, emit_null: false)]
    getter funding_account_id : String? = nil

    # The datetime when the sweep occurred, in RFC 3339 format.
    @[JSON::Field(key: "created", type: Time?, default: nil, required: true, nullable: false, emit_null: false, converter: Time::RFC3339Converter)]
    getter created : Time? = nil

    # Signed decimal amount of the sweep as it appears on your sweep account ledger (e.g. \"-10.00\")  If amount is not present, the sweep was net-settled to zero and outstanding debits and credits between the sweep account and Plaid are balanced.
    @[JSON::Field(key: "amount", type: String?, default: nil, required: true, nullable: false, emit_null: false)]
    getter amount : String? = nil

    # The currency of the sweep, e.g. \"USD\".
    @[JSON::Field(key: "iso_currency_code", type: String?, default: nil, required: true, nullable: false, emit_null: false)]
    getter iso_currency_code : String? = nil

    # The date when the sweep settled, in the YYYY-MM-DD format.
    @[JSON::Field(key: "settled", type: Time?, default: nil, required: true, nullable: true, emit_null: true, converter: Time::ISO8601DateConverter)]
    getter settled : Time? = nil

    # End of Required Properties

    # Optional Properties

    @[JSON::Field(key: "status", type: Plaid::SweepStatus?, default: nil, required: false, nullable: true, emit_null: true, presence: true, ignore_serialize: status.nil? && !status_present?)]
    getter status : Plaid::SweepStatus? = nil

    @[JSON::Field(ignore: true)]
    property? status_present : Bool = false

    @[JSON::Field(key: "trigger", type: Plaid::SweepTrigger?, default: nil, required: false, nullable: true, emit_null: true, presence: true, ignore_serialize: trigger.nil? && !trigger_present?)]
    getter trigger : Plaid::SweepTrigger? = nil

    @[JSON::Field(ignore: true)]
    property? trigger_present : Bool = false

    # The description of the deposit that will be passed to the receiving bank (up to 10 characters). Note that banks utilize this field differently, and may or may not show it on the bank statement.
    @[JSON::Field(key: "description", type: String?, default: nil, required: false, nullable: false, emit_null: false)]
    getter description : String? = nil

    # The trace identifier for the transfer based on its network. This will only be set after the transfer has posted.  For `ach` or `same-day-ach` transfers, this is the ACH trace number. Currently, the field will remain null for transfers on other rails.
    @[JSON::Field(key: "network_trace_id", type: String?, default: nil, required: false, nullable: true, emit_null: true, presence: true, ignore_serialize: network_trace_id.nil? && !network_trace_id_present?)]
    getter network_trace_id : String? = nil

    @[JSON::Field(ignore: true)]
    property? network_trace_id_present : Bool = false

    # Initializes the object
    # @param [Hash] attributes Model attributes in the form of hash
    def initialize(
      *,
      # Required properties
      @id : String? = nil,
      @funding_account_id : String? = nil,
      @created : Time? = nil,
      @amount : String? = nil,
      @iso_currency_code : String? = nil,
      @settled : Time? = nil,
      # Optional properties
      @status : Plaid::SweepStatus? = nil,
      @trigger : Plaid::SweepTrigger? = nil,
      @description : String? = nil,
      @network_trace_id : String? = nil
    )
    end

    # Show invalid properties with the reasons. Usually used together with valid?
    # @return Array for valid properties with the reasons
    def list_invalid_properties : Array(String)
      invalid_properties = Array(String).new

      invalid_properties.push("\"id\" is required and cannot be null") if @id.nil?

      unless (_id = @id).nil?
      end
      invalid_properties.push("\"funding_account_id\" is required and cannot be null") if @funding_account_id.nil?

      unless (_funding_account_id = @funding_account_id).nil?
      end
      invalid_properties.push("\"created\" is required and cannot be null") if @created.nil?

      unless (_created = @created).nil?
      end
      invalid_properties.push("\"amount\" is required and cannot be null") if @amount.nil?

      unless (_amount = @amount).nil?
      end
      invalid_properties.push("\"iso_currency_code\" is required and cannot be null") if @iso_currency_code.nil?

      unless (_iso_currency_code = @iso_currency_code).nil?
      end
      unless (_settled = @settled).nil?
      end
      unless (_status = @status).nil?
        invalid_properties.push(_status.error_message) if !_status.valid?
      end
      unless (_trigger = @trigger).nil?
        invalid_properties.push(_trigger.error_message) if !_trigger.valid?
      end
      unless (_description = @description).nil?
      end
      unless (_network_trace_id = @network_trace_id).nil?
      end
      invalid_properties
    end

    # Check to see if the all the properties in the model are valid
    # @return true if the model is valid
    def valid? : Bool
      return false if @id.nil?
      unless (_id = @id).nil?
      end

      return false if @funding_account_id.nil?
      unless (_funding_account_id = @funding_account_id).nil?
      end

      return false if @created.nil?
      unless (_created = @created).nil?
      end

      return false if @amount.nil?
      unless (_amount = @amount).nil?
      end

      return false if @iso_currency_code.nil?
      unless (_iso_currency_code = @iso_currency_code).nil?
      end

      unless (_settled = @settled).nil?
      end

      unless (_status = @status).nil?
        return false if !_status.valid?
      end

      unless (_trigger = @trigger).nil?
        return false if !_trigger.valid?
      end

      unless (_description = @description).nil?
      end

      unless (_network_trace_id = @network_trace_id).nil?
      end

      true
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] id Object to be assigned
    def id=(new_value : String?)
      raise ArgumentError.new("\"id\" is required and cannot be null") if new_value.nil?
      unless new_value.nil?
      end

      @id = new_value
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] funding_account_id Object to be assigned
    def funding_account_id=(new_value : String?)
      raise ArgumentError.new("\"funding_account_id\" is required and cannot be null") if new_value.nil?
      unless new_value.nil?
      end

      @funding_account_id = new_value
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] created Object to be assigned
    def created=(new_value : Time?)
      raise ArgumentError.new("\"created\" is required and cannot be null") if new_value.nil?
      unless new_value.nil?
      end

      @created = new_value
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] amount Object to be assigned
    def amount=(new_value : String?)
      raise ArgumentError.new("\"amount\" is required and cannot be null") if new_value.nil?
      unless new_value.nil?
      end

      @amount = new_value
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] iso_currency_code Object to be assigned
    def iso_currency_code=(new_value : String?)
      raise ArgumentError.new("\"iso_currency_code\" is required and cannot be null") if new_value.nil?
      unless new_value.nil?
      end

      @iso_currency_code = new_value
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] settled Object to be assigned
    def settled=(new_value : Time?)
      unless new_value.nil?
      end

      @settled = new_value
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] status Object to be assigned
    def status=(new_value : Plaid::SweepStatus?)
      unless new_value.nil?
        new_value.validate
      end

      @status = new_value
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] trigger Object to be assigned
    def trigger=(new_value : Plaid::SweepTrigger?)
      unless new_value.nil?
        new_value.validate
      end

      @trigger = new_value
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] description Object to be assigned
    def description=(new_value : String?)
      unless new_value.nil?
      end

      @description = new_value
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] network_trace_id Object to be assigned
    def network_trace_id=(new_value : String?)
      unless new_value.nil?
      end

      @network_trace_id = new_value
    end

    # Generates #hash and #== methods from all fields
    # #== @return [Bool]
    # #hash calculates hash code according to all attributes.
    # #hash @return [UInt64] Hash code
    def_equals_and_hash(@id, @funding_account_id, @created, @amount, @iso_currency_code, @settled, @status, @status_present, @trigger, @trigger_present, @description, @network_trace_id, @network_trace_id_present)
  end
end
