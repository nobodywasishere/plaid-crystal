#  The Plaid API
#
# The Plaid REST API. Please see https://plaid.com/docs/api for more details.
#
# The version of the OpenAPI document: 2020-09-14_1.474.3
#
# Generated by: https://openapi-generator.tech
#

require "../../core"

module Plaid
  # Defines the request schema for `/bank_transfer/migrate_account`
  class BankTransferMigrateAccountRequest
    include JSON::Serializable
    include JSON::Serializable::Unmapped
    include OpenApi::Validatable
    include OpenApi::Json

    # Required Properties

    # The user's account number.
    @[JSON::Field(key: "account_number", type: String?, default: nil, required: true, nullable: false, emit_null: false)]
    getter account_number : String? = nil

    # The user's routing number.
    @[JSON::Field(key: "routing_number", type: String?, default: nil, required: true, nullable: false, emit_null: false)]
    getter routing_number : String? = nil

    # The type of the bank account (`checking` or `savings`).
    @[JSON::Field(key: "account_type", type: String?, default: nil, required: true, nullable: false, emit_null: false)]
    getter account_type : String? = nil

    # End of Required Properties

    # Optional Properties

    # Your Plaid API `client_id`. The `client_id` is required and may be provided either in the `PLAID-CLIENT-ID` header or as part of a request body.
    @[JSON::Field(key: "client_id", type: String?, default: nil, required: false, nullable: false, emit_null: false)]
    getter client_id : String? = nil

    # Your Plaid API `secret`. The `secret` is required and may be provided either in the `PLAID-SECRET` header or as part of a request body.
    @[JSON::Field(key: "secret", type: String?, default: nil, required: false, nullable: false, emit_null: false)]
    getter secret : String? = nil

    # The user's wire transfer routing number. This is the ABA number; for some institutions, this may differ from the ACH number used in `routing_number`.
    @[JSON::Field(key: "wire_routing_number", type: String?, default: nil, required: false, nullable: false, emit_null: false)]
    getter wire_routing_number : String? = nil

    # Initializes the object
    # @param [Hash] attributes Model attributes in the form of hash
    def initialize(
      *,
      # Required properties
      @account_number : String? = nil,
      @routing_number : String? = nil,
      @account_type : String? = nil,
      # Optional properties
      @client_id : String? = nil,
      @secret : String? = nil,
      @wire_routing_number : String? = nil
    )
    end

    # Show invalid properties with the reasons. Usually used together with valid?
    # @return Array for valid properties with the reasons
    def list_invalid_properties : Array(String)
      invalid_properties = Array(String).new

      invalid_properties.push("\"account_number\" is required and cannot be null") if @account_number.nil?

      unless (_account_number = @account_number).nil?
      end
      invalid_properties.push("\"routing_number\" is required and cannot be null") if @routing_number.nil?

      unless (_routing_number = @routing_number).nil?
      end
      invalid_properties.push("\"account_type\" is required and cannot be null") if @account_type.nil?

      unless (_account_type = @account_type).nil?
      end
      unless (_client_id = @client_id).nil?
      end
      unless (_secret = @secret).nil?
      end
      unless (_wire_routing_number = @wire_routing_number).nil?
      end
      invalid_properties
    end

    # Check to see if the all the properties in the model are valid
    # @return true if the model is valid
    def valid? : Bool
      return false if @account_number.nil?
      unless (_account_number = @account_number).nil?
      end

      return false if @routing_number.nil?
      unless (_routing_number = @routing_number).nil?
      end

      return false if @account_type.nil?
      unless (_account_type = @account_type).nil?
      end

      unless (_client_id = @client_id).nil?
      end

      unless (_secret = @secret).nil?
      end

      unless (_wire_routing_number = @wire_routing_number).nil?
      end

      true
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] account_number Object to be assigned
    def account_number=(new_value : String?)
      raise ArgumentError.new("\"account_number\" is required and cannot be null") if new_value.nil?
      unless new_value.nil?
      end

      @account_number = new_value
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] routing_number Object to be assigned
    def routing_number=(new_value : String?)
      raise ArgumentError.new("\"routing_number\" is required and cannot be null") if new_value.nil?
      unless new_value.nil?
      end

      @routing_number = new_value
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] account_type Object to be assigned
    def account_type=(new_value : String?)
      raise ArgumentError.new("\"account_type\" is required and cannot be null") if new_value.nil?
      unless new_value.nil?
      end

      @account_type = new_value
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] client_id Object to be assigned
    def client_id=(new_value : String?)
      unless new_value.nil?
      end

      @client_id = new_value
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] secret Object to be assigned
    def secret=(new_value : String?)
      unless new_value.nil?
      end

      @secret = new_value
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] wire_routing_number Object to be assigned
    def wire_routing_number=(new_value : String?)
      unless new_value.nil?
      end

      @wire_routing_number = new_value
    end

    # Generates #hash and #== methods from all fields
    # #== @return [Bool]
    # #hash calculates hash code according to all attributes.
    # #hash @return [UInt64] Hash code
    def_equals_and_hash(@account_number, @routing_number, @account_type, @client_id, @secret, @wire_routing_number)
  end
end
