#  The Plaid API
#
# The Plaid REST API. Please see https://plaid.com/docs/api for more details.
#
# The version of the OpenAPI document: 2020-09-14_1.474.3
#
# Generated by: https://openapi-generator.tech
#

require "../../core"

require "./user_stated_income_source_category"
require "./user_stated_income_source_frequency"
require "./user_stated_income_source_pay_type"

module Plaid
  # Specifies user stated income sources for the Income product
  class LinkTokenCreateRequestUserStatedIncomeSource
    include JSON::Serializable
    include JSON::Serializable::Unmapped
    include OpenApi::Validatable
    include OpenApi::Json

    # Optional Properties

    # The employer corresponding to an income source specified by the user
    @[JSON::Field(key: "employer", type: String?, default: nil, required: false, nullable: false, emit_null: false)]
    getter employer : String? = nil

    @[JSON::Field(key: "category", type: Plaid::UserStatedIncomeSourceCategory?, default: nil, required: false, nullable: false, emit_null: false)]
    getter category : Plaid::UserStatedIncomeSourceCategory? = nil

    # The income amount paid per cycle for a specified income source
    @[JSON::Field(key: "pay_per_cycle", type: Float64?, default: nil, required: false, nullable: false, emit_null: false)]
    getter pay_per_cycle : Float64? = nil

    # The income amount paid annually for a specified income source
    @[JSON::Field(key: "pay_annual", type: Float64?, default: nil, required: false, nullable: false, emit_null: false)]
    getter pay_annual : Float64? = nil

    @[JSON::Field(key: "pay_type", type: Plaid::UserStatedIncomeSourcePayType?, default: nil, required: false, nullable: false, emit_null: false)]
    getter pay_type : Plaid::UserStatedIncomeSourcePayType? = nil

    @[JSON::Field(key: "pay_frequency", type: Plaid::UserStatedIncomeSourceFrequency?, default: nil, required: false, nullable: false, emit_null: false)]
    getter pay_frequency : Plaid::UserStatedIncomeSourceFrequency? = nil

    # Initializes the object
    # @param [Hash] attributes Model attributes in the form of hash
    def initialize(
      *,
      # Optional properties
      @employer : String? = nil,
      @category : Plaid::UserStatedIncomeSourceCategory? = nil,
      @pay_per_cycle : Float64? = nil,
      @pay_annual : Float64? = nil,
      @pay_type : Plaid::UserStatedIncomeSourcePayType? = nil,
      @pay_frequency : Plaid::UserStatedIncomeSourceFrequency? = nil
    )
    end

    # Show invalid properties with the reasons. Usually used together with valid?
    # @return Array for valid properties with the reasons
    def list_invalid_properties : Array(String)
      invalid_properties = Array(String).new

      unless (_employer = @employer).nil?
      end
      unless (_category = @category).nil?
        invalid_properties.push(_category.error_message) if !_category.valid?
      end
      unless (_pay_per_cycle = @pay_per_cycle).nil?
      end
      unless (_pay_annual = @pay_annual).nil?
      end
      unless (_pay_type = @pay_type).nil?
        invalid_properties.push(_pay_type.error_message) if !_pay_type.valid?
      end
      unless (_pay_frequency = @pay_frequency).nil?
        invalid_properties.push(_pay_frequency.error_message) if !_pay_frequency.valid?
      end
      invalid_properties
    end

    # Check to see if the all the properties in the model are valid
    # @return true if the model is valid
    def valid? : Bool
      unless (_employer = @employer).nil?
      end

      unless (_category = @category).nil?
        return false if !_category.valid?
      end

      unless (_pay_per_cycle = @pay_per_cycle).nil?
      end

      unless (_pay_annual = @pay_annual).nil?
      end

      unless (_pay_type = @pay_type).nil?
        return false if !_pay_type.valid?
      end

      unless (_pay_frequency = @pay_frequency).nil?
        return false if !_pay_frequency.valid?
      end

      true
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] employer Object to be assigned
    def employer=(new_value : String?)
      unless new_value.nil?
      end

      @employer = new_value
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] category Object to be assigned
    def category=(new_value : Plaid::UserStatedIncomeSourceCategory?)
      unless new_value.nil?
        new_value.validate
      end

      @category = new_value
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] pay_per_cycle Object to be assigned
    def pay_per_cycle=(new_value : Float64?)
      unless new_value.nil?
      end

      @pay_per_cycle = new_value
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] pay_annual Object to be assigned
    def pay_annual=(new_value : Float64?)
      unless new_value.nil?
      end

      @pay_annual = new_value
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] pay_type Object to be assigned
    def pay_type=(new_value : Plaid::UserStatedIncomeSourcePayType?)
      unless new_value.nil?
        new_value.validate
      end

      @pay_type = new_value
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] pay_frequency Object to be assigned
    def pay_frequency=(new_value : Plaid::UserStatedIncomeSourceFrequency?)
      unless new_value.nil?
        new_value.validate
      end

      @pay_frequency = new_value
    end

    # Generates #hash and #== methods from all fields
    # #== @return [Bool]
    # #hash calculates hash code according to all attributes.
    # #hash @return [UInt64] Hash code
    def_equals_and_hash(@employer, @category, @pay_per_cycle, @pay_annual, @pay_type, @pay_frequency)
  end
end
