#  The Plaid API
#
# The Plaid REST API. Please see https://plaid.com/docs/api for more details.
#
# The version of the OpenAPI document: 2020-09-14_1.474.3
#
# Generated by: https://openapi-generator.tech
#

require "../../core"

require "./individual_watchlist_code"
require "./program_name_sensitivity"
require "./watchlist_screening_audit_trail"

module Plaid
  # A program that configures the active lists, search parameters, and other behavior for initial and ongoing screening of individuals.
  class IndividualWatchlistProgram
    include JSON::Serializable
    include JSON::Serializable::Unmapped
    include OpenApi::Validatable
    include OpenApi::Json

    # Required Properties

    # ID of the associated program.
    @[JSON::Field(key: "id", type: String?, default: nil, required: true, nullable: false, emit_null: false)]
    getter id : String? = nil

    # An ISO8601 formatted timestamp.
    @[JSON::Field(key: "created_at", type: Time?, default: nil, required: true, nullable: false, emit_null: false, converter: Time::RFC3339Converter)]
    getter created_at : Time? = nil

    # Indicator specifying whether the program is enabled and will perform daily rescans.
    @[JSON::Field(key: "is_rescanning_enabled", type: Bool?, default: nil, required: true, nullable: false, emit_null: false)]
    getter is_rescanning_enabled : Bool? = nil

    # Watchlists enabled for the associated program
    @[JSON::Field(key: "lists_enabled", type: Array(IndividualWatchlistCode)?, default: nil, required: true, nullable: false, emit_null: false)]
    getter lists_enabled : Array(IndividualWatchlistCode)? = nil

    # A name for the program to define its purpose. For example, \"High Risk Individuals\", \"US Cardholders\", or \"Applicants\".
    @[JSON::Field(key: "name", type: String?, default: nil, required: true, nullable: false, emit_null: false)]
    getter name : String? = nil
    MIN_LENGTH_FOR_NAME = 1

    @[JSON::Field(key: "name_sensitivity", type: Plaid::ProgramNameSensitivity?, default: nil, required: true, nullable: false, emit_null: false)]
    getter name_sensitivity : Plaid::ProgramNameSensitivity? = nil

    @[JSON::Field(key: "audit_trail", type: WatchlistScreeningAuditTrail?, default: nil, required: true, nullable: false, emit_null: false)]
    getter audit_trail : WatchlistScreeningAuditTrail? = nil

    # Archived programs are read-only and cannot screen new customers nor participate in ongoing monitoring.
    @[JSON::Field(key: "is_archived", type: Bool?, default: nil, required: true, nullable: false, emit_null: false)]
    getter is_archived : Bool? = nil

    # End of Required Properties

    # Initializes the object
    # @param [Hash] attributes Model attributes in the form of hash
    def initialize(
      *,
      # Required properties
      @id : String? = nil,
      @created_at : Time? = nil,
      @is_rescanning_enabled : Bool? = nil,
      @lists_enabled : Array(IndividualWatchlistCode)? = nil,
      @name : String? = nil,
      @name_sensitivity : Plaid::ProgramNameSensitivity? = nil,
      @audit_trail : WatchlistScreeningAuditTrail? = nil,
      @is_archived : Bool? = nil
    )
    end

    # Show invalid properties with the reasons. Usually used together with valid?
    # @return Array for valid properties with the reasons
    def list_invalid_properties : Array(String)
      invalid_properties = Array(String).new

      invalid_properties.push("\"id\" is required and cannot be null") if @id.nil?

      unless (_id = @id).nil?
      end
      invalid_properties.push("\"created_at\" is required and cannot be null") if @created_at.nil?

      unless (_created_at = @created_at).nil?
      end
      invalid_properties.push("\"is_rescanning_enabled\" is required and cannot be null") if @is_rescanning_enabled.nil?

      unless (_is_rescanning_enabled = @is_rescanning_enabled).nil?
      end
      invalid_properties.push("\"lists_enabled\" is required and cannot be null") if @lists_enabled.nil?

      unless (_lists_enabled = @lists_enabled).nil?
      end
      invalid_properties.push("\"name\" is required and cannot be null") if @name.nil?

      unless (_name = @name).nil?
        if min_length_error = OpenApi::PrimitiveValidator.min_length_error("name", _name.to_s.size, MIN_LENGTH_FOR_NAME)
          invalid_properties.push(min_length_error)
        end
      end
      invalid_properties.push("\"name_sensitivity\" is required and cannot be null") if @name_sensitivity.nil?

      unless (_name_sensitivity = @name_sensitivity).nil?
        invalid_properties.push(_name_sensitivity.error_message) if !_name_sensitivity.valid?
      end
      invalid_properties.push("\"audit_trail\" is required and cannot be null") if @audit_trail.nil?

      unless (_audit_trail = @audit_trail).nil?
      end
      invalid_properties.push("\"is_archived\" is required and cannot be null") if @is_archived.nil?

      unless (_is_archived = @is_archived).nil?
      end
      invalid_properties
    end

    # Check to see if the all the properties in the model are valid
    # @return true if the model is valid
    def valid? : Bool
      return false if @id.nil?
      unless (_id = @id).nil?
      end

      return false if @created_at.nil?
      unless (_created_at = @created_at).nil?
      end

      return false if @is_rescanning_enabled.nil?
      unless (_is_rescanning_enabled = @is_rescanning_enabled).nil?
      end

      return false if @lists_enabled.nil?
      unless (_lists_enabled = @lists_enabled).nil?
      end

      return false if @name.nil?
      unless (_name = @name).nil?
        return false if _name.to_s.size < MIN_LENGTH_FOR_NAME
      end

      return false if @name_sensitivity.nil?
      unless (_name_sensitivity = @name_sensitivity).nil?
        return false if !_name_sensitivity.valid?
      end

      return false if @audit_trail.nil?
      unless (_audit_trail = @audit_trail).nil?
      end

      return false if @is_archived.nil?
      unless (_is_archived = @is_archived).nil?
      end

      true
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] id Object to be assigned
    def id=(new_value : String?)
      raise ArgumentError.new("\"id\" is required and cannot be null") if new_value.nil?
      unless new_value.nil?
      end

      @id = new_value
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] created_at Object to be assigned
    def created_at=(new_value : Time?)
      raise ArgumentError.new("\"created_at\" is required and cannot be null") if new_value.nil?
      unless new_value.nil?
      end

      @created_at = new_value
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] is_rescanning_enabled Object to be assigned
    def is_rescanning_enabled=(new_value : Bool?)
      raise ArgumentError.new("\"is_rescanning_enabled\" is required and cannot be null") if new_value.nil?
      unless new_value.nil?
      end

      @is_rescanning_enabled = new_value
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] lists_enabled Object to be assigned
    def lists_enabled=(new_value : Array(IndividualWatchlistCode)?)
      raise ArgumentError.new("\"lists_enabled\" is required and cannot be null") if new_value.nil?
      unless new_value.nil?
      end

      @lists_enabled = new_value
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] name Object to be assigned
    def name=(new_value : String?)
      raise ArgumentError.new("\"name\" is required and cannot be null") if new_value.nil?
      unless new_value.nil?
        OpenApi::PrimitiveValidator.validate_min_length("name", new_value.to_s.size, MIN_LENGTH_FOR_NAME)
      end

      @name = new_value
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] name_sensitivity Object to be assigned
    def name_sensitivity=(new_value : Plaid::ProgramNameSensitivity?)
      raise ArgumentError.new("\"name_sensitivity\" is required and cannot be null") if new_value.nil?
      unless new_value.nil?
        new_value.validate
      end

      @name_sensitivity = new_value
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] audit_trail Object to be assigned
    def audit_trail=(new_value : WatchlistScreeningAuditTrail?)
      raise ArgumentError.new("\"audit_trail\" is required and cannot be null") if new_value.nil?
      unless new_value.nil?
      end

      @audit_trail = new_value
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] is_archived Object to be assigned
    def is_archived=(new_value : Bool?)
      raise ArgumentError.new("\"is_archived\" is required and cannot be null") if new_value.nil?
      unless new_value.nil?
      end

      @is_archived = new_value
    end

    # Generates #hash and #== methods from all fields
    # #== @return [Bool]
    # #hash calculates hash code according to all attributes.
    # #hash @return [UInt64] Hash code
    def_equals_and_hash(@id, @created_at, @is_rescanning_enabled, @lists_enabled, @name, @name_sensitivity, @audit_trail, @is_archived)
  end
end
