#  The Plaid API
#
# The Plaid REST API. Please see https://plaid.com/docs/api for more details.
#
# The version of the OpenAPI document: 2020-09-14_1.474.3
#
# Generated by: https://openapi-generator.tech
#

require "../../core"

require "./ach_class"
require "./transfer_network"
require "./transfer_recurring_schedule"
require "./transfer_recurring_status"
require "./transfer_type"
require "./transfer_user_in_response"

module Plaid
  # Represents a recurring transfer within the Transfers API.
  class RecurringTransferNullable
    include JSON::Serializable
    include JSON::Serializable::Unmapped
    include OpenApi::Validatable
    include OpenApi::Json

    # Required Properties

    # Plaid’s unique identifier for a recurring transfer.
    @[JSON::Field(key: "recurring_transfer_id", type: String?, default: nil, required: true, nullable: false, emit_null: false)]
    getter recurring_transfer_id : String? = nil

    # The datetime when this transfer was created. This will be of the form `2006-01-02T15:04:05Z`
    @[JSON::Field(key: "created", type: Time?, default: nil, required: true, nullable: false, emit_null: false, converter: Time::RFC3339Converter)]
    getter created : Time? = nil

    # A date in [ISO 8601](https://wikipedia.org/wiki/ISO_8601) format (YYYY-MM-DD).  The next transfer origination date after bank holiday adjustment.
    @[JSON::Field(key: "next_origination_date", type: Time?, default: nil, required: true, nullable: true, emit_null: true, converter: Time::ISO8601DateConverter)]
    getter next_origination_date : Time? = nil

    @[JSON::Field(key: "type", type: Plaid::TransferType?, default: nil, required: true, nullable: false, emit_null: false)]
    getter _type : Plaid::TransferType? = nil

    # The amount of the transfer (decimal string with two digits of precision e.g. \"10.00\"). When calling `/transfer/authorization/create`, specify the maximum amount to authorize. When calling `/transfer/create`, specify the exact amount of the transfer, up to a maximum of the amount authorized. If this field is left blank when calling `/transfer/create`, the maximum amount authorized in the `authorization_id` will be sent.
    @[JSON::Field(key: "amount", type: String?, default: nil, required: true, nullable: false, emit_null: false)]
    getter amount : String? = nil

    @[JSON::Field(key: "status", type: Plaid::TransferRecurringStatus?, default: nil, required: true, nullable: false, emit_null: false)]
    getter status : Plaid::TransferRecurringStatus? = nil

    @[JSON::Field(key: "network", type: Plaid::TransferNetwork?, default: nil, required: true, nullable: false, emit_null: false)]
    getter network : Plaid::TransferNetwork? = nil

    # Plaid’s unique identifier for the origination account that was used for this transfer.
    @[JSON::Field(key: "origination_account_id", type: String?, default: nil, required: true, nullable: false, emit_null: false)]
    getter origination_account_id : String? = nil

    # The Plaid `account_id` corresponding to the end-user account that will be debited or credited.
    @[JSON::Field(key: "account_id", type: String?, default: nil, required: true, nullable: false, emit_null: false)]
    getter account_id : String? = nil

    # The id of the funding account to use, available in the Plaid Dashboard. This determines which of your business checking accounts will be credited or debited.
    @[JSON::Field(key: "funding_account_id", type: String?, default: nil, required: true, nullable: false, emit_null: false)]
    getter funding_account_id : String? = nil

    # The currency of the transfer amount, e.g. \"USD\"
    @[JSON::Field(key: "iso_currency_code", type: String?, default: nil, required: true, nullable: false, emit_null: false)]
    getter iso_currency_code : String? = nil

    # The description of the recurring transfer.
    @[JSON::Field(key: "description", type: String?, default: nil, required: true, nullable: false, emit_null: false)]
    getter description : String? = nil

    @[JSON::Field(key: "transfer_ids", type: Array(String)?, default: nil, required: true, nullable: false, emit_null: false)]
    getter transfer_ids : Array(String)? = nil

    @[JSON::Field(key: "user", type: TransferUserInResponse?, default: nil, required: true, nullable: false, emit_null: false)]
    getter user : TransferUserInResponse? = nil

    @[JSON::Field(key: "schedule", type: Plaid::TransferRecurringSchedule?, default: nil, required: true, nullable: false, emit_null: false)]
    getter schedule : Plaid::TransferRecurringSchedule? = nil

    # End of Required Properties

    # Optional Properties

    # Plaid’s unique identifier for a test clock.
    @[JSON::Field(key: "test_clock_id", type: String?, default: nil, required: false, nullable: true, emit_null: true, presence: true, ignore_serialize: test_clock_id.nil? && !test_clock_id_present?)]
    getter test_clock_id : String? = nil

    @[JSON::Field(ignore: true)]
    property? test_clock_id_present : Bool = false

    @[JSON::Field(key: "ach_class", type: Plaid::ACHClass?, default: nil, required: false, nullable: false, emit_null: false)]
    getter ach_class : Plaid::ACHClass? = nil

    # Initializes the object
    # @param [Hash] attributes Model attributes in the form of hash
    def initialize(
      *,
      # Required properties
      @recurring_transfer_id : String? = nil,
      @created : Time? = nil,
      @next_origination_date : Time? = nil,
      @_type : Plaid::TransferType? = nil,
      @amount : String? = nil,
      @status : Plaid::TransferRecurringStatus? = nil,
      @network : Plaid::TransferNetwork? = nil,
      @origination_account_id : String? = nil,
      @account_id : String? = nil,
      @funding_account_id : String? = nil,
      @iso_currency_code : String? = nil,
      @description : String? = nil,
      @transfer_ids : Array(String)? = nil,
      @user : TransferUserInResponse? = nil,
      @schedule : Plaid::TransferRecurringSchedule? = nil,
      # Optional properties
      @test_clock_id : String? = nil,
      @ach_class : Plaid::ACHClass? = nil
    )
    end

    # Show invalid properties with the reasons. Usually used together with valid?
    # @return Array for valid properties with the reasons
    def list_invalid_properties : Array(String)
      invalid_properties = Array(String).new

      invalid_properties.push("\"recurring_transfer_id\" is required and cannot be null") if @recurring_transfer_id.nil?

      unless (_recurring_transfer_id = @recurring_transfer_id).nil?
      end
      invalid_properties.push("\"created\" is required and cannot be null") if @created.nil?

      unless (_created = @created).nil?
      end
      unless (_next_origination_date = @next_origination_date).nil?
      end
      invalid_properties.push("\"_type\" is required and cannot be null") if @_type.nil?

      unless (__type = @_type).nil?
        invalid_properties.push(__type.error_message) if !__type.valid?
      end
      invalid_properties.push("\"amount\" is required and cannot be null") if @amount.nil?

      unless (_amount = @amount).nil?
      end
      invalid_properties.push("\"status\" is required and cannot be null") if @status.nil?

      unless (_status = @status).nil?
        invalid_properties.push(_status.error_message) if !_status.valid?
      end
      invalid_properties.push("\"network\" is required and cannot be null") if @network.nil?

      unless (_network = @network).nil?
        invalid_properties.push(_network.error_message) if !_network.valid?
      end
      invalid_properties.push("\"origination_account_id\" is required and cannot be null") if @origination_account_id.nil?

      unless (_origination_account_id = @origination_account_id).nil?
      end
      invalid_properties.push("\"account_id\" is required and cannot be null") if @account_id.nil?

      unless (_account_id = @account_id).nil?
      end
      invalid_properties.push("\"funding_account_id\" is required and cannot be null") if @funding_account_id.nil?

      unless (_funding_account_id = @funding_account_id).nil?
      end
      invalid_properties.push("\"iso_currency_code\" is required and cannot be null") if @iso_currency_code.nil?

      unless (_iso_currency_code = @iso_currency_code).nil?
      end
      invalid_properties.push("\"description\" is required and cannot be null") if @description.nil?

      unless (_description = @description).nil?
      end
      invalid_properties.push("\"transfer_ids\" is required and cannot be null") if @transfer_ids.nil?

      unless (_transfer_ids = @transfer_ids).nil?
      end
      invalid_properties.push("\"user\" is required and cannot be null") if @user.nil?

      unless (_user = @user).nil?
      end
      invalid_properties.push("\"schedule\" is required and cannot be null") if @schedule.nil?

      unless (_schedule = @schedule).nil?
        invalid_properties.concat(_schedule.list_invalid_properties_for("schedule")) if _schedule.is_a?(OpenApi::Validatable)
      end
      unless (_test_clock_id = @test_clock_id).nil?
      end
      unless (_ach_class = @ach_class).nil?
        invalid_properties.push(_ach_class.error_message) if !_ach_class.valid?
      end
      invalid_properties
    end

    # Check to see if the all the properties in the model are valid
    # @return true if the model is valid
    def valid? : Bool
      return false if @recurring_transfer_id.nil?
      unless (_recurring_transfer_id = @recurring_transfer_id).nil?
      end

      return false if @created.nil?
      unless (_created = @created).nil?
      end

      unless (_next_origination_date = @next_origination_date).nil?
      end

      return false if @_type.nil?
      unless (__type = @_type).nil?
        return false if !__type.valid?
      end

      return false if @amount.nil?
      unless (_amount = @amount).nil?
      end

      return false if @status.nil?
      unless (_status = @status).nil?
        return false if !_status.valid?
      end

      return false if @network.nil?
      unless (_network = @network).nil?
        return false if !_network.valid?
      end

      return false if @origination_account_id.nil?
      unless (_origination_account_id = @origination_account_id).nil?
      end

      return false if @account_id.nil?
      unless (_account_id = @account_id).nil?
      end

      return false if @funding_account_id.nil?
      unless (_funding_account_id = @funding_account_id).nil?
      end

      return false if @iso_currency_code.nil?
      unless (_iso_currency_code = @iso_currency_code).nil?
      end

      return false if @description.nil?
      unless (_description = @description).nil?
      end

      return false if @transfer_ids.nil?
      unless (_transfer_ids = @transfer_ids).nil?
      end

      return false if @user.nil?
      unless (_user = @user).nil?
      end

      return false if @schedule.nil?
      unless (_schedule = @schedule).nil?
        return false if _schedule.is_a?(OpenApi::Validatable) && !_schedule.valid?
      end

      unless (_test_clock_id = @test_clock_id).nil?
      end

      unless (_ach_class = @ach_class).nil?
        return false if !_ach_class.valid?
      end

      true
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] recurring_transfer_id Object to be assigned
    def recurring_transfer_id=(new_value : String?)
      raise ArgumentError.new("\"recurring_transfer_id\" is required and cannot be null") if new_value.nil?
      unless new_value.nil?
      end

      @recurring_transfer_id = new_value
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] created Object to be assigned
    def created=(new_value : Time?)
      raise ArgumentError.new("\"created\" is required and cannot be null") if new_value.nil?
      unless new_value.nil?
      end

      @created = new_value
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] next_origination_date Object to be assigned
    def next_origination_date=(new_value : Time?)
      unless new_value.nil?
      end

      @next_origination_date = new_value
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] _type Object to be assigned
    def _type=(new_value : Plaid::TransferType?)
      raise ArgumentError.new("\"_type\" is required and cannot be null") if new_value.nil?
      unless new_value.nil?
        new_value.validate
      end

      @_type = new_value
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] amount Object to be assigned
    def amount=(new_value : String?)
      raise ArgumentError.new("\"amount\" is required and cannot be null") if new_value.nil?
      unless new_value.nil?
      end

      @amount = new_value
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] status Object to be assigned
    def status=(new_value : Plaid::TransferRecurringStatus?)
      raise ArgumentError.new("\"status\" is required and cannot be null") if new_value.nil?
      unless new_value.nil?
        new_value.validate
      end

      @status = new_value
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] network Object to be assigned
    def network=(new_value : Plaid::TransferNetwork?)
      raise ArgumentError.new("\"network\" is required and cannot be null") if new_value.nil?
      unless new_value.nil?
        new_value.validate
      end

      @network = new_value
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] origination_account_id Object to be assigned
    def origination_account_id=(new_value : String?)
      raise ArgumentError.new("\"origination_account_id\" is required and cannot be null") if new_value.nil?
      unless new_value.nil?
      end

      @origination_account_id = new_value
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] account_id Object to be assigned
    def account_id=(new_value : String?)
      raise ArgumentError.new("\"account_id\" is required and cannot be null") if new_value.nil?
      unless new_value.nil?
      end

      @account_id = new_value
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] funding_account_id Object to be assigned
    def funding_account_id=(new_value : String?)
      raise ArgumentError.new("\"funding_account_id\" is required and cannot be null") if new_value.nil?
      unless new_value.nil?
      end

      @funding_account_id = new_value
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] iso_currency_code Object to be assigned
    def iso_currency_code=(new_value : String?)
      raise ArgumentError.new("\"iso_currency_code\" is required and cannot be null") if new_value.nil?
      unless new_value.nil?
      end

      @iso_currency_code = new_value
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] description Object to be assigned
    def description=(new_value : String?)
      raise ArgumentError.new("\"description\" is required and cannot be null") if new_value.nil?
      unless new_value.nil?
      end

      @description = new_value
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] transfer_ids Object to be assigned
    def transfer_ids=(new_value : Array(String)?)
      raise ArgumentError.new("\"transfer_ids\" is required and cannot be null") if new_value.nil?
      unless new_value.nil?
      end

      @transfer_ids = new_value
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] user Object to be assigned
    def user=(new_value : TransferUserInResponse?)
      raise ArgumentError.new("\"user\" is required and cannot be null") if new_value.nil?
      unless new_value.nil?
      end

      @user = new_value
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] schedule Object to be assigned
    def schedule=(new_value : Plaid::TransferRecurringSchedule?)
      raise ArgumentError.new("\"schedule\" is required and cannot be null") if new_value.nil?
      unless new_value.nil?
        new_value.validate if new_value.is_a?(OpenApi::Validatable)
      end

      @schedule = new_value
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] test_clock_id Object to be assigned
    def test_clock_id=(new_value : String?)
      unless new_value.nil?
      end

      @test_clock_id = new_value
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] ach_class Object to be assigned
    def ach_class=(new_value : Plaid::ACHClass?)
      unless new_value.nil?
        new_value.validate
      end

      @ach_class = new_value
    end

    # Generates #hash and #== methods from all fields
    # #== @return [Bool]
    # #hash calculates hash code according to all attributes.
    # #hash @return [UInt64] Hash code
    def_equals_and_hash(@recurring_transfer_id, @created, @next_origination_date, @_type, @amount, @status, @network, @origination_account_id, @account_id, @funding_account_id, @iso_currency_code, @description, @transfer_ids, @user, @schedule, @test_clock_id, @test_clock_id_present, @ach_class)
  end
end
