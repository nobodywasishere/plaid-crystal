#  The Plaid API
#
# The Plaid REST API. Please see https://plaid.com/docs/api for more details.
#
# The version of the OpenAPI document: 2020-09-14_1.474.3
#
# Generated by: https://openapi-generator.tech
#

require "../../core"

require "./risk_signal_document_status"

module Plaid
  # Object containing metadata for the document
  class RiskSignalDocumentReference
    include JSON::Serializable
    include JSON::Serializable::Unmapped
    include OpenApi::Validatable
    include OpenApi::Json

    # Optional Properties

    # An identifier of the document referenced by the document metadata.
    @[JSON::Field(key: "document_id", type: String?, default: nil, required: false, nullable: true, emit_null: true, presence: true, ignore_serialize: document_id.nil? && !document_id_present?)]
    getter document_id : String? = nil

    @[JSON::Field(ignore: true)]
    property? document_id_present : Bool = false

    # The name of the document
    @[JSON::Field(key: "document_name", type: String?, default: nil, required: false, nullable: false, emit_null: false)]
    getter document_name : String? = nil

    @[JSON::Field(key: "status", type: Plaid::RiskSignalDocumentStatus?, default: nil, required: false, nullable: false, emit_null: false)]
    getter status : Plaid::RiskSignalDocumentStatus? = nil

    # Initializes the object
    # @param [Hash] attributes Model attributes in the form of hash
    def initialize(
      *,
      # Optional properties
      @document_id : String? = nil,
      @document_name : String? = nil,
      @status : Plaid::RiskSignalDocumentStatus? = nil
    )
    end

    # Show invalid properties with the reasons. Usually used together with valid?
    # @return Array for valid properties with the reasons
    def list_invalid_properties : Array(String)
      invalid_properties = Array(String).new

      unless (_document_id = @document_id).nil?
      end
      unless (_document_name = @document_name).nil?
      end
      unless (_status = @status).nil?
        invalid_properties.push(_status.error_message) if !_status.valid?
      end
      invalid_properties
    end

    # Check to see if the all the properties in the model are valid
    # @return true if the model is valid
    def valid? : Bool
      unless (_document_id = @document_id).nil?
      end

      unless (_document_name = @document_name).nil?
      end

      unless (_status = @status).nil?
        return false if !_status.valid?
      end

      true
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] document_id Object to be assigned
    def document_id=(new_value : String?)
      unless new_value.nil?
      end

      @document_id = new_value
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] document_name Object to be assigned
    def document_name=(new_value : String?)
      unless new_value.nil?
      end

      @document_name = new_value
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] status Object to be assigned
    def status=(new_value : Plaid::RiskSignalDocumentStatus?)
      unless new_value.nil?
        new_value.validate
      end

      @status = new_value
    end

    # Generates #hash and #== methods from all fields
    # #== @return [Bool]
    # #hash calculates hash code according to all attributes.
    # #hash @return [UInt64] Hash code
    def_equals_and_hash(@document_id, @document_id_present, @document_name, @status)
  end
end
