#  The Plaid API
#
# The Plaid REST API. Please see https://plaid.com/docs/api for more details.
#
# The version of the OpenAPI document: 2020-09-14_1.474.3
#
# Generated by: https://openapi-generator.tech
#

require "../../core"

require "./party_individual"
require "./roles"
require "./taxpayer_identifiers"

module Plaid
  # A collection of information about a single party to a transaction. Included direct participants like the borrower and seller as well as indirect participants such as the flood certificate provider.
  class Party
    include JSON::Serializable
    include JSON::Serializable::Unmapped
    include OpenApi::Validatable
    include OpenApi::Json

    # Required Properties

    @[JSON::Field(key: "INDIVIDUAL", type: PartyIndividual?, default: nil, required: true, nullable: false, emit_null: false)]
    getter individual : PartyIndividual? = nil

    @[JSON::Field(key: "ROLES", type: Roles?, default: nil, required: true, nullable: false, emit_null: false)]
    getter roles : Roles? = nil

    @[JSON::Field(key: "TAXPAYER_IDENTIFIERS", type: TaxpayerIdentifiers?, default: nil, required: true, nullable: false, emit_null: false)]
    getter taxpayer_identifiers : TaxpayerIdentifiers? = nil

    # End of Required Properties

    # Initializes the object
    # @param [Hash] attributes Model attributes in the form of hash
    def initialize(
      *,
      # Required properties
      @individual : PartyIndividual? = nil,
      @roles : Roles? = nil,
      @taxpayer_identifiers : TaxpayerIdentifiers? = nil
    )
    end

    # Show invalid properties with the reasons. Usually used together with valid?
    # @return Array for valid properties with the reasons
    def list_invalid_properties : Array(String)
      invalid_properties = Array(String).new

      invalid_properties.push("\"individual\" is required and cannot be null") if @individual.nil?

      unless (_individual = @individual).nil?
      end
      invalid_properties.push("\"roles\" is required and cannot be null") if @roles.nil?

      unless (_roles = @roles).nil?
      end
      invalid_properties.push("\"taxpayer_identifiers\" is required and cannot be null") if @taxpayer_identifiers.nil?

      unless (_taxpayer_identifiers = @taxpayer_identifiers).nil?
      end
      invalid_properties
    end

    # Check to see if the all the properties in the model are valid
    # @return true if the model is valid
    def valid? : Bool
      return false if @individual.nil?
      unless (_individual = @individual).nil?
      end

      return false if @roles.nil?
      unless (_roles = @roles).nil?
      end

      return false if @taxpayer_identifiers.nil?
      unless (_taxpayer_identifiers = @taxpayer_identifiers).nil?
      end

      true
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] individual Object to be assigned
    def individual=(new_value : PartyIndividual?)
      raise ArgumentError.new("\"individual\" is required and cannot be null") if new_value.nil?
      unless new_value.nil?
      end

      @individual = new_value
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] roles Object to be assigned
    def roles=(new_value : Roles?)
      raise ArgumentError.new("\"roles\" is required and cannot be null") if new_value.nil?
      unless new_value.nil?
      end

      @roles = new_value
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] taxpayer_identifiers Object to be assigned
    def taxpayer_identifiers=(new_value : TaxpayerIdentifiers?)
      raise ArgumentError.new("\"taxpayer_identifiers\" is required and cannot be null") if new_value.nil?
      unless new_value.nil?
      end

      @taxpayer_identifiers = new_value
    end

    # Generates #hash and #== methods from all fields
    # #== @return [Bool]
    # #hash calculates hash code according to all attributes.
    # #hash @return [UInt64] Hash code
    def_equals_and_hash(@individual, @roles, @taxpayer_identifiers)
  end
end
