#  The Plaid API
#
# The Plaid REST API. Please see https://plaid.com/docs/api for more details.
#
# The version of the OpenAPI document: 2020-09-14_1.474.3
#
# Generated by: https://openapi-generator.tech
#

require "../../core"

module Plaid
  # Contains details about a security
  class Security
    include JSON::Serializable
    include JSON::Serializable::Unmapped
    include OpenApi::Validatable
    include OpenApi::Json

    # Required Properties

    # A unique, Plaid-specific identifier for the security, used to associate securities with holdings. Like all Plaid identifiers, the `security_id` is case sensitive. The `security_id` may change if inherent details of the security change due to a corporate action, for example, in the event of a ticker symbol change or CUSIP change.
    @[JSON::Field(key: "security_id", type: String?, default: nil, required: true, nullable: false, emit_null: false)]
    getter security_id : String? = nil

    # 12-character ISIN, a globally unique securities identifier. A verified CUSIP Global Services license is required to receive this data. This field will be null by default for new customers, and null for existing customers starting March 12, 2024. If you would like access to this field, please start the verification process [here](https://docs.google.com/forms/d/e/1FAIpQLSd9asHEYEfmf8fxJTHZTAfAzW4dugsnSu-HS2J51f1mxwd6Sw/viewform).
    @[JSON::Field(key: "isin", type: String?, default: nil, required: true, nullable: true, emit_null: true)]
    getter isin : String? = nil

    # 9-character CUSIP, an identifier assigned to North American securities. A verified CUSIP Global Services license is required to receive this data. This field will be null by default for new customers, and null for existing customers starting March 12, 2024. If you would like access to this field, please start the verification process [here](https://docs.google.com/forms/d/e/1FAIpQLSd9asHEYEfmf8fxJTHZTAfAzW4dugsnSu-HS2J51f1mxwd6Sw/viewform).
    @[JSON::Field(key: "cusip", type: String?, default: nil, required: true, nullable: true, emit_null: true)]
    getter cusip : String? = nil

    # 7-character SEDOL, an identifier assigned to securities in the UK.
    @[JSON::Field(key: "sedol", type: String?, default: nil, required: true, nullable: true, emit_null: true)]
    getter sedol : String? = nil

    # An identifier given to the security by the institution
    @[JSON::Field(key: "institution_security_id", type: String?, default: nil, required: true, nullable: true, emit_null: true)]
    getter institution_security_id : String? = nil

    # If `institution_security_id` is present, this field indicates the Plaid `institution_id` of the institution to whom the identifier belongs.
    @[JSON::Field(key: "institution_id", type: String?, default: nil, required: true, nullable: true, emit_null: true)]
    getter institution_id : String? = nil

    # In certain cases, Plaid will provide the ID of another security whose performance resembles this security, typically when the original security has low volume, or when a private security can be modeled with a publicly traded security.
    @[JSON::Field(key: "proxy_security_id", type: String?, default: nil, required: true, nullable: true, emit_null: true)]
    getter proxy_security_id : String? = nil

    # A descriptive name for the security, suitable for display.
    @[JSON::Field(key: "name", type: String?, default: nil, required: true, nullable: true, emit_null: true)]
    getter name : String? = nil

    # The securityâ€™s trading symbol for publicly traded securities, and otherwise a short identifier if available.
    @[JSON::Field(key: "ticker_symbol", type: String?, default: nil, required: true, nullable: true, emit_null: true)]
    getter ticker_symbol : String? = nil

    # Indicates that a security is a highly liquid asset and can be treated like cash.
    @[JSON::Field(key: "is_cash_equivalent", type: Bool?, default: nil, required: true, nullable: true, emit_null: true)]
    getter is_cash_equivalent : Bool? = nil

    # The security type of the holding. Valid security types are:  `cash`: Cash, currency, and money market funds  `cryptocurrency`: Digital or virtual currencies  `derivative`: Options, warrants, and other derivative instruments  `equity`: Domestic and foreign equities  `etf`: Multi-asset exchange-traded investment funds  `fixed income`: Bonds and certificates of deposit (CDs)  `loan`: Loans and loan receivables  `mutual fund`: Open- and closed-end vehicles pooling funds of multiple investors  `other`: Unknown or other investment types
    @[JSON::Field(key: "type", type: String?, default: nil, required: true, nullable: true, emit_null: true)]
    getter _type : String? = nil

    # Price of the security at the close of the previous trading session. Null for non-public securities.  If the security is a foreign currency this field will be updated daily and will be priced in USD.  If the security is a cryptocurrency, this field will be updated multiple times a day. As crypto prices can fluctuate quickly and data may become stale sooner than other asset classes, refer to `update_datetime` with the time when the price was last updated.
    @[JSON::Field(key: "close_price", type: Float64?, default: nil, required: true, nullable: true, emit_null: true)]
    getter close_price : Float64? = nil

    # Date for which `close_price` is accurate. Always `null` if `close_price` is `null`.
    @[JSON::Field(key: "close_price_as_of", type: Time?, default: nil, required: true, nullable: true, emit_null: true, converter: Time::ISO8601DateConverter)]
    getter close_price_as_of : Time? = nil

    # The ISO-4217 currency code of the price given. Always `null` if `unofficial_currency_code` is non-`null`.
    @[JSON::Field(key: "iso_currency_code", type: String?, default: nil, required: true, nullable: true, emit_null: true)]
    getter iso_currency_code : String? = nil

    # The unofficial currency code associated with the security. Always `null` if `iso_currency_code` is non-`null`. Unofficial currency codes are used for currencies that do not have official ISO currency codes, such as cryptocurrencies and the currencies of certain countries.  See the [currency code schema](https://plaid.com/docs/api/accounts#currency-code-schema) for a full listing of supported `iso_currency_code`s.
    @[JSON::Field(key: "unofficial_currency_code", type: String?, default: nil, required: true, nullable: true, emit_null: true)]
    getter unofficial_currency_code : String? = nil

    # End of Required Properties

    # Optional Properties

    # Date and time at which `close_price` is accurate, in ISO 8601 format (YYYY-MM-DDTHH:mm:ssZ). Always `null` if `close_price` is `null`.
    @[JSON::Field(key: "update_datetime", type: Time?, default: nil, required: false, nullable: true, emit_null: true, presence: true, ignore_serialize: update_datetime.nil? && !update_datetime_present?, converter: Time::RFC3339Converter)]
    getter update_datetime : Time? = nil

    @[JSON::Field(ignore: true)]
    property? update_datetime_present : Bool = false

    # Initializes the object
    # @param [Hash] attributes Model attributes in the form of hash
    def initialize(
      *,
      # Required properties
      @security_id : String? = nil,
      @isin : String? = nil,
      @cusip : String? = nil,
      @sedol : String? = nil,
      @institution_security_id : String? = nil,
      @institution_id : String? = nil,
      @proxy_security_id : String? = nil,
      @name : String? = nil,
      @ticker_symbol : String? = nil,
      @is_cash_equivalent : Bool? = nil,
      @_type : String? = nil,
      @close_price : Float64? = nil,
      @close_price_as_of : Time? = nil,
      @iso_currency_code : String? = nil,
      @unofficial_currency_code : String? = nil,
      # Optional properties
      @update_datetime : Time? = nil
    )
    end

    # Show invalid properties with the reasons. Usually used together with valid?
    # @return Array for valid properties with the reasons
    def list_invalid_properties : Array(String)
      invalid_properties = Array(String).new

      invalid_properties.push("\"security_id\" is required and cannot be null") if @security_id.nil?

      unless (_security_id = @security_id).nil?
      end
      unless (_isin = @isin).nil?
      end
      unless (_cusip = @cusip).nil?
      end
      unless (_sedol = @sedol).nil?
      end
      unless (_institution_security_id = @institution_security_id).nil?
      end
      unless (_institution_id = @institution_id).nil?
      end
      unless (_proxy_security_id = @proxy_security_id).nil?
      end
      unless (_name = @name).nil?
      end
      unless (_ticker_symbol = @ticker_symbol).nil?
      end
      unless (_is_cash_equivalent = @is_cash_equivalent).nil?
      end
      unless (__type = @_type).nil?
      end
      unless (_close_price = @close_price).nil?
      end
      unless (_close_price_as_of = @close_price_as_of).nil?
      end
      unless (_iso_currency_code = @iso_currency_code).nil?
      end
      unless (_unofficial_currency_code = @unofficial_currency_code).nil?
      end
      unless (_update_datetime = @update_datetime).nil?
      end
      invalid_properties
    end

    # Check to see if the all the properties in the model are valid
    # @return true if the model is valid
    def valid? : Bool
      return false if @security_id.nil?
      unless (_security_id = @security_id).nil?
      end

      unless (_isin = @isin).nil?
      end

      unless (_cusip = @cusip).nil?
      end

      unless (_sedol = @sedol).nil?
      end

      unless (_institution_security_id = @institution_security_id).nil?
      end

      unless (_institution_id = @institution_id).nil?
      end

      unless (_proxy_security_id = @proxy_security_id).nil?
      end

      unless (_name = @name).nil?
      end

      unless (_ticker_symbol = @ticker_symbol).nil?
      end

      unless (_is_cash_equivalent = @is_cash_equivalent).nil?
      end

      unless (__type = @_type).nil?
      end

      unless (_close_price = @close_price).nil?
      end

      unless (_close_price_as_of = @close_price_as_of).nil?
      end

      unless (_iso_currency_code = @iso_currency_code).nil?
      end

      unless (_unofficial_currency_code = @unofficial_currency_code).nil?
      end

      unless (_update_datetime = @update_datetime).nil?
      end

      true
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] security_id Object to be assigned
    def security_id=(new_value : String?)
      raise ArgumentError.new("\"security_id\" is required and cannot be null") if new_value.nil?
      unless new_value.nil?
      end

      @security_id = new_value
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] isin Object to be assigned
    def isin=(new_value : String?)
      unless new_value.nil?
      end

      @isin = new_value
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] cusip Object to be assigned
    def cusip=(new_value : String?)
      unless new_value.nil?
      end

      @cusip = new_value
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] sedol Object to be assigned
    def sedol=(new_value : String?)
      unless new_value.nil?
      end

      @sedol = new_value
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] institution_security_id Object to be assigned
    def institution_security_id=(new_value : String?)
      unless new_value.nil?
      end

      @institution_security_id = new_value
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] institution_id Object to be assigned
    def institution_id=(new_value : String?)
      unless new_value.nil?
      end

      @institution_id = new_value
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] proxy_security_id Object to be assigned
    def proxy_security_id=(new_value : String?)
      unless new_value.nil?
      end

      @proxy_security_id = new_value
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] name Object to be assigned
    def name=(new_value : String?)
      unless new_value.nil?
      end

      @name = new_value
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] ticker_symbol Object to be assigned
    def ticker_symbol=(new_value : String?)
      unless new_value.nil?
      end

      @ticker_symbol = new_value
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] is_cash_equivalent Object to be assigned
    def is_cash_equivalent=(new_value : Bool?)
      unless new_value.nil?
      end

      @is_cash_equivalent = new_value
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] _type Object to be assigned
    def _type=(new_value : String?)
      unless new_value.nil?
      end

      @_type = new_value
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] close_price Object to be assigned
    def close_price=(new_value : Float64?)
      unless new_value.nil?
      end

      @close_price = new_value
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] close_price_as_of Object to be assigned
    def close_price_as_of=(new_value : Time?)
      unless new_value.nil?
      end

      @close_price_as_of = new_value
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] iso_currency_code Object to be assigned
    def iso_currency_code=(new_value : String?)
      unless new_value.nil?
      end

      @iso_currency_code = new_value
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] unofficial_currency_code Object to be assigned
    def unofficial_currency_code=(new_value : String?)
      unless new_value.nil?
      end

      @unofficial_currency_code = new_value
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] update_datetime Object to be assigned
    def update_datetime=(new_value : Time?)
      unless new_value.nil?
      end

      @update_datetime = new_value
    end

    # Generates #hash and #== methods from all fields
    # #== @return [Bool]
    # #hash calculates hash code according to all attributes.
    # #hash @return [UInt64] Hash code
    def_equals_and_hash(@security_id, @isin, @cusip, @sedol, @institution_security_id, @institution_id, @proxy_security_id, @name, @ticker_symbol, @is_cash_equivalent, @_type, @close_price, @close_price_as_of, @iso_currency_code, @unofficial_currency_code, @update_datetime, @update_datetime_present)
  end
end
