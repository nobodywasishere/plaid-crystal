#  The Plaid API
#
# The Plaid REST API. Please see https://plaid.com/docs/api for more details.
#
# The version of the OpenAPI document: 2020-09-14_1.474.3
#
# Generated by: https://openapi-generator.tech
#

require "../../core"

require "./health_incident"
require "./product_status"

module Plaid
  # The status of an institution is determined by the health of its Item logins, Transactions updates, Investments updates, Liabilities updates, Auth requests, Balance requests, Identity requests, Investments requests, and Liabilities requests. A login attempt is conducted during the initial Item add in Link. If there is not enough traffic to accurately calculate an institution's status, Plaid will return null rather than potentially inaccurate data.  Institution status is accessible in the Dashboard and via the API using the `/institutions/get_by_id` endpoint with the `include_status` option set to true. Note that institution status is not available in the Sandbox environment.
  class InstitutionStatus
    include JSON::Serializable
    include JSON::Serializable::Unmapped
    include OpenApi::Validatable
    include OpenApi::Json

    # Optional Properties

    @[JSON::Field(key: "item_logins", type: ProductStatus?, default: nil, required: false, nullable: true, emit_null: true, presence: true, ignore_serialize: item_logins.nil? && !item_logins_present?)]
    getter item_logins : ProductStatus? = nil

    @[JSON::Field(ignore: true)]
    property? item_logins_present : Bool = false

    @[JSON::Field(key: "transactions_updates", type: ProductStatus?, default: nil, required: false, nullable: true, emit_null: true, presence: true, ignore_serialize: transactions_updates.nil? && !transactions_updates_present?)]
    getter transactions_updates : ProductStatus? = nil

    @[JSON::Field(ignore: true)]
    property? transactions_updates_present : Bool = false

    @[JSON::Field(key: "auth", type: ProductStatus?, default: nil, required: false, nullable: true, emit_null: true, presence: true, ignore_serialize: auth.nil? && !auth_present?)]
    getter auth : ProductStatus? = nil

    @[JSON::Field(ignore: true)]
    property? auth_present : Bool = false

    @[JSON::Field(key: "identity", type: ProductStatus?, default: nil, required: false, nullable: true, emit_null: true, presence: true, ignore_serialize: identity.nil? && !identity_present?)]
    getter identity : ProductStatus? = nil

    @[JSON::Field(ignore: true)]
    property? identity_present : Bool = false

    @[JSON::Field(key: "investments_updates", type: ProductStatus?, default: nil, required: false, nullable: true, emit_null: true, presence: true, ignore_serialize: investments_updates.nil? && !investments_updates_present?)]
    getter investments_updates : ProductStatus? = nil

    @[JSON::Field(ignore: true)]
    property? investments_updates_present : Bool = false

    @[JSON::Field(key: "liabilities_updates", type: ProductStatus?, default: nil, required: false, nullable: true, emit_null: true, presence: true, ignore_serialize: liabilities_updates.nil? && !liabilities_updates_present?)]
    getter liabilities_updates : ProductStatus? = nil

    @[JSON::Field(ignore: true)]
    property? liabilities_updates_present : Bool = false

    @[JSON::Field(key: "liabilities", type: ProductStatus?, default: nil, required: false, nullable: true, emit_null: true, presence: true, ignore_serialize: liabilities.nil? && !liabilities_present?)]
    getter liabilities : ProductStatus? = nil

    @[JSON::Field(ignore: true)]
    property? liabilities_present : Bool = false

    @[JSON::Field(key: "investments", type: ProductStatus?, default: nil, required: false, nullable: true, emit_null: true, presence: true, ignore_serialize: investments.nil? && !investments_present?)]
    getter investments : ProductStatus? = nil

    @[JSON::Field(ignore: true)]
    property? investments_present : Bool = false

    # Details of recent health incidents associated with the institution.
    @[JSON::Field(key: "health_incidents", type: Array(HealthIncident)?, default: nil, required: false, nullable: true, emit_null: true, presence: true, ignore_serialize: health_incidents.nil? && !health_incidents_present?)]
    getter health_incidents : Array(HealthIncident)? = nil

    @[JSON::Field(ignore: true)]
    property? health_incidents_present : Bool = false

    # Initializes the object
    # @param [Hash] attributes Model attributes in the form of hash
    def initialize(
      *,
      # Optional properties
      @item_logins : ProductStatus? = nil,
      @transactions_updates : ProductStatus? = nil,
      @auth : ProductStatus? = nil,
      @identity : ProductStatus? = nil,
      @investments_updates : ProductStatus? = nil,
      @liabilities_updates : ProductStatus? = nil,
      @liabilities : ProductStatus? = nil,
      @investments : ProductStatus? = nil,
      @health_incidents : Array(HealthIncident)? = nil
    )
    end

    # Show invalid properties with the reasons. Usually used together with valid?
    # @return Array for valid properties with the reasons
    def list_invalid_properties : Array(String)
      invalid_properties = Array(String).new

      unless (_item_logins = @item_logins).nil?
      end
      unless (_transactions_updates = @transactions_updates).nil?
      end
      unless (_auth = @auth).nil?
      end
      unless (_identity = @identity).nil?
      end
      unless (_investments_updates = @investments_updates).nil?
      end
      unless (_liabilities_updates = @liabilities_updates).nil?
      end
      unless (_liabilities = @liabilities).nil?
      end
      unless (_investments = @investments).nil?
      end
      unless (_health_incidents = @health_incidents).nil?
      end
      invalid_properties
    end

    # Check to see if the all the properties in the model are valid
    # @return true if the model is valid
    def valid? : Bool
      unless (_item_logins = @item_logins).nil?
      end

      unless (_transactions_updates = @transactions_updates).nil?
      end

      unless (_auth = @auth).nil?
      end

      unless (_identity = @identity).nil?
      end

      unless (_investments_updates = @investments_updates).nil?
      end

      unless (_liabilities_updates = @liabilities_updates).nil?
      end

      unless (_liabilities = @liabilities).nil?
      end

      unless (_investments = @investments).nil?
      end

      unless (_health_incidents = @health_incidents).nil?
      end

      true
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] item_logins Object to be assigned
    def item_logins=(new_value : ProductStatus?)
      unless new_value.nil?
      end

      @item_logins = new_value
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] transactions_updates Object to be assigned
    def transactions_updates=(new_value : ProductStatus?)
      unless new_value.nil?
      end

      @transactions_updates = new_value
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] auth Object to be assigned
    def auth=(new_value : ProductStatus?)
      unless new_value.nil?
      end

      @auth = new_value
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] identity Object to be assigned
    def identity=(new_value : ProductStatus?)
      unless new_value.nil?
      end

      @identity = new_value
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] investments_updates Object to be assigned
    def investments_updates=(new_value : ProductStatus?)
      unless new_value.nil?
      end

      @investments_updates = new_value
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] liabilities_updates Object to be assigned
    def liabilities_updates=(new_value : ProductStatus?)
      unless new_value.nil?
      end

      @liabilities_updates = new_value
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] liabilities Object to be assigned
    def liabilities=(new_value : ProductStatus?)
      unless new_value.nil?
      end

      @liabilities = new_value
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] investments Object to be assigned
    def investments=(new_value : ProductStatus?)
      unless new_value.nil?
      end

      @investments = new_value
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] health_incidents Object to be assigned
    def health_incidents=(new_value : Array(HealthIncident)?)
      unless new_value.nil?
      end

      @health_incidents = new_value
    end

    # Generates #hash and #== methods from all fields
    # #== @return [Bool]
    # #hash calculates hash code according to all attributes.
    # #hash @return [UInt64] Hash code
    def_equals_and_hash(@item_logins, @item_logins_present, @transactions_updates, @transactions_updates_present, @auth, @auth_present, @identity, @identity_present, @investments_updates, @investments_updates_present, @liabilities_updates, @liabilities_updates_present, @liabilities, @liabilities_present, @investments, @investments_present, @health_incidents, @health_incidents_present)
  end
end
