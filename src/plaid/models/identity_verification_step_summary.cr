#  The Plaid API
#
# The Plaid REST API. Please see https://plaid.com/docs/api for more details.
#
# The version of the OpenAPI document: 2020-09-14_1.474.3
#
# Generated by: https://openapi-generator.tech
#

require "../../core"

require "./identity_verification_step_status"

module Plaid
  # Each step will be one of the following values:   `active` - This step is the user's current step. They are either in the process of completing this step, or they recently closed their Identity Verification attempt while in the middle of this step. Only one step will be marked as `active` at any given point.  `success` - The Identity Verification attempt has completed this step.  `failed` - The user failed this step. This can either call the user to fail the session as a whole, or cause them to fallback to another step depending on how the Identity Verification template is configured. A failed step does not imply a failed session.  `waiting_for_prerequisite` - The user needs to complete another step first, before they progress to this step. This step may never run, depending on if the user fails an earlier step or if the step is only run as a fallback.  `not_applicable` - This step will not be run for this session.  `skipped` - The retry instructions that created this Identity Verification attempt specified that this step should be skipped.  `expired` - This step had not yet been completed when the Identity Verification attempt as a whole expired.  `canceled` - The Identity Verification attempt was canceled before the user completed this step.  `pending_review` - The Identity Verification attempt template was configured to perform a screening that had one or more hits needing review.  `manually_approved` - The step was manually overridden to pass by a team member in the dashboard.  `manually_rejected` - The step was manually overridden to fail by a team member in the dashboard.
  class IdentityVerificationStepSummary
    include JSON::Serializable
    include JSON::Serializable::Unmapped
    include OpenApi::Validatable
    include OpenApi::Json

    # Required Properties

    @[JSON::Field(key: "accept_tos", type: Plaid::IdentityVerificationStepStatus?, default: nil, required: true, nullable: false, emit_null: false)]
    getter accept_tos : Plaid::IdentityVerificationStepStatus? = nil

    @[JSON::Field(key: "verify_sms", type: Plaid::IdentityVerificationStepStatus?, default: nil, required: true, nullable: false, emit_null: false)]
    getter verify_sms : Plaid::IdentityVerificationStepStatus? = nil

    @[JSON::Field(key: "kyc_check", type: Plaid::IdentityVerificationStepStatus?, default: nil, required: true, nullable: false, emit_null: false)]
    getter kyc_check : Plaid::IdentityVerificationStepStatus? = nil

    @[JSON::Field(key: "documentary_verification", type: Plaid::IdentityVerificationStepStatus?, default: nil, required: true, nullable: false, emit_null: false)]
    getter documentary_verification : Plaid::IdentityVerificationStepStatus? = nil

    @[JSON::Field(key: "selfie_check", type: Plaid::IdentityVerificationStepStatus?, default: nil, required: true, nullable: false, emit_null: false)]
    getter selfie_check : Plaid::IdentityVerificationStepStatus? = nil

    @[JSON::Field(key: "watchlist_screening", type: Plaid::IdentityVerificationStepStatus?, default: nil, required: true, nullable: false, emit_null: false)]
    getter watchlist_screening : Plaid::IdentityVerificationStepStatus? = nil

    @[JSON::Field(key: "risk_check", type: Plaid::IdentityVerificationStepStatus?, default: nil, required: true, nullable: false, emit_null: false)]
    getter risk_check : Plaid::IdentityVerificationStepStatus? = nil

    # End of Required Properties

    # Initializes the object
    # @param [Hash] attributes Model attributes in the form of hash
    def initialize(
      *,
      # Required properties
      @accept_tos : Plaid::IdentityVerificationStepStatus? = nil,
      @verify_sms : Plaid::IdentityVerificationStepStatus? = nil,
      @kyc_check : Plaid::IdentityVerificationStepStatus? = nil,
      @documentary_verification : Plaid::IdentityVerificationStepStatus? = nil,
      @selfie_check : Plaid::IdentityVerificationStepStatus? = nil,
      @watchlist_screening : Plaid::IdentityVerificationStepStatus? = nil,
      @risk_check : Plaid::IdentityVerificationStepStatus? = nil
    )
    end

    # Show invalid properties with the reasons. Usually used together with valid?
    # @return Array for valid properties with the reasons
    def list_invalid_properties : Array(String)
      invalid_properties = Array(String).new

      invalid_properties.push("\"accept_tos\" is required and cannot be null") if @accept_tos.nil?

      unless (_accept_tos = @accept_tos).nil?
        invalid_properties.push(_accept_tos.error_message) if !_accept_tos.valid?
      end
      invalid_properties.push("\"verify_sms\" is required and cannot be null") if @verify_sms.nil?

      unless (_verify_sms = @verify_sms).nil?
        invalid_properties.push(_verify_sms.error_message) if !_verify_sms.valid?
      end
      invalid_properties.push("\"kyc_check\" is required and cannot be null") if @kyc_check.nil?

      unless (_kyc_check = @kyc_check).nil?
        invalid_properties.push(_kyc_check.error_message) if !_kyc_check.valid?
      end
      invalid_properties.push("\"documentary_verification\" is required and cannot be null") if @documentary_verification.nil?

      unless (_documentary_verification = @documentary_verification).nil?
        invalid_properties.push(_documentary_verification.error_message) if !_documentary_verification.valid?
      end
      invalid_properties.push("\"selfie_check\" is required and cannot be null") if @selfie_check.nil?

      unless (_selfie_check = @selfie_check).nil?
        invalid_properties.push(_selfie_check.error_message) if !_selfie_check.valid?
      end
      invalid_properties.push("\"watchlist_screening\" is required and cannot be null") if @watchlist_screening.nil?

      unless (_watchlist_screening = @watchlist_screening).nil?
        invalid_properties.push(_watchlist_screening.error_message) if !_watchlist_screening.valid?
      end
      invalid_properties.push("\"risk_check\" is required and cannot be null") if @risk_check.nil?

      unless (_risk_check = @risk_check).nil?
        invalid_properties.push(_risk_check.error_message) if !_risk_check.valid?
      end
      invalid_properties
    end

    # Check to see if the all the properties in the model are valid
    # @return true if the model is valid
    def valid? : Bool
      return false if @accept_tos.nil?
      unless (_accept_tos = @accept_tos).nil?
        return false if !_accept_tos.valid?
      end

      return false if @verify_sms.nil?
      unless (_verify_sms = @verify_sms).nil?
        return false if !_verify_sms.valid?
      end

      return false if @kyc_check.nil?
      unless (_kyc_check = @kyc_check).nil?
        return false if !_kyc_check.valid?
      end

      return false if @documentary_verification.nil?
      unless (_documentary_verification = @documentary_verification).nil?
        return false if !_documentary_verification.valid?
      end

      return false if @selfie_check.nil?
      unless (_selfie_check = @selfie_check).nil?
        return false if !_selfie_check.valid?
      end

      return false if @watchlist_screening.nil?
      unless (_watchlist_screening = @watchlist_screening).nil?
        return false if !_watchlist_screening.valid?
      end

      return false if @risk_check.nil?
      unless (_risk_check = @risk_check).nil?
        return false if !_risk_check.valid?
      end

      true
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] accept_tos Object to be assigned
    def accept_tos=(new_value : Plaid::IdentityVerificationStepStatus?)
      raise ArgumentError.new("\"accept_tos\" is required and cannot be null") if new_value.nil?
      unless new_value.nil?
        new_value.validate
      end

      @accept_tos = new_value
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] verify_sms Object to be assigned
    def verify_sms=(new_value : Plaid::IdentityVerificationStepStatus?)
      raise ArgumentError.new("\"verify_sms\" is required and cannot be null") if new_value.nil?
      unless new_value.nil?
        new_value.validate
      end

      @verify_sms = new_value
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] kyc_check Object to be assigned
    def kyc_check=(new_value : Plaid::IdentityVerificationStepStatus?)
      raise ArgumentError.new("\"kyc_check\" is required and cannot be null") if new_value.nil?
      unless new_value.nil?
        new_value.validate
      end

      @kyc_check = new_value
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] documentary_verification Object to be assigned
    def documentary_verification=(new_value : Plaid::IdentityVerificationStepStatus?)
      raise ArgumentError.new("\"documentary_verification\" is required and cannot be null") if new_value.nil?
      unless new_value.nil?
        new_value.validate
      end

      @documentary_verification = new_value
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] selfie_check Object to be assigned
    def selfie_check=(new_value : Plaid::IdentityVerificationStepStatus?)
      raise ArgumentError.new("\"selfie_check\" is required and cannot be null") if new_value.nil?
      unless new_value.nil?
        new_value.validate
      end

      @selfie_check = new_value
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] watchlist_screening Object to be assigned
    def watchlist_screening=(new_value : Plaid::IdentityVerificationStepStatus?)
      raise ArgumentError.new("\"watchlist_screening\" is required and cannot be null") if new_value.nil?
      unless new_value.nil?
        new_value.validate
      end

      @watchlist_screening = new_value
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] risk_check Object to be assigned
    def risk_check=(new_value : Plaid::IdentityVerificationStepStatus?)
      raise ArgumentError.new("\"risk_check\" is required and cannot be null") if new_value.nil?
      unless new_value.nil?
        new_value.validate
      end

      @risk_check = new_value
    end

    # Generates #hash and #== methods from all fields
    # #== @return [Bool]
    # #hash calculates hash code according to all attributes.
    # #hash @return [UInt64] Hash code
    def_equals_and_hash(@accept_tos, @verify_sms, @kyc_check, @documentary_verification, @selfie_check, @watchlist_screening, @risk_check)
  end
end
