#  The Plaid API
#
# The Plaid REST API. Please see https://plaid.com/docs/api for more details.
#
# The version of the OpenAPI document: 2020-09-14_1.474.3
#
# Generated by: https://openapi-generator.tech
#

require "../../core"

require "./personal_finance_category"
require "./recurring_transaction_frequency"
require "./transaction_stream_amount"
require "./transaction_stream_status"

module Plaid
  # A grouping of related transactions
  class TransactionStream
    include JSON::Serializable
    include JSON::Serializable::Unmapped
    include OpenApi::Validatable
    include OpenApi::Json

    # Required Properties

    # The ID of the account to which the stream belongs
    @[JSON::Field(key: "account_id", type: String?, default: nil, required: true, nullable: false, emit_null: false)]
    getter account_id : String? = nil

    # A unique id for the stream
    @[JSON::Field(key: "stream_id", type: String?, default: nil, required: true, nullable: false, emit_null: false)]
    getter stream_id : String? = nil

    # A hierarchical array of the categories to which this transaction belongs. See [Categories](https://plaid.com/docs/api/products/transactions/#categoriesget).  All implementations are encouraged to use the new `personal_finance_category` instead of `category`. `personal_finance_category` provides more meaningful categorization and greater accuracy.
    @[JSON::Field(key: "category", type: Array(String)?, default: nil, required: true, nullable: false, emit_null: false)]
    getter category : Array(String)? = nil

    # The ID of the category to which this transaction belongs. See [Categories](https://plaid.com/docs/api/products/transactions/#categoriesget).  All implementations are encouraged to use the new `personal_finance_category` instead of `category`. `personal_finance_category` provides more meaningful categorization and greater accuracy.
    @[JSON::Field(key: "category_id", type: String?, default: nil, required: true, nullable: false, emit_null: false)]
    getter category_id : String? = nil

    # A description of the transaction stream.
    @[JSON::Field(key: "description", type: String?, default: nil, required: true, nullable: false, emit_null: false)]
    getter description : String? = nil

    # The merchant associated with the transaction stream.
    @[JSON::Field(key: "merchant_name", type: String?, default: nil, required: true, nullable: true, emit_null: true)]
    getter merchant_name : String? = nil

    # The posted date of the earliest transaction in the stream.
    @[JSON::Field(key: "first_date", type: Time?, default: nil, required: true, nullable: false, emit_null: false, converter: Time::ISO8601DateConverter)]
    getter first_date : Time? = nil

    # The posted date of the latest transaction in the stream.
    @[JSON::Field(key: "last_date", type: Time?, default: nil, required: true, nullable: false, emit_null: false, converter: Time::ISO8601DateConverter)]
    getter last_date : Time? = nil

    @[JSON::Field(key: "frequency", type: Plaid::RecurringTransactionFrequency?, default: nil, required: true, nullable: false, emit_null: false)]
    getter frequency : Plaid::RecurringTransactionFrequency? = nil

    # An array of Plaid transaction IDs belonging to the stream, sorted by posted date.
    @[JSON::Field(key: "transaction_ids", type: Array(String)?, default: nil, required: true, nullable: false, emit_null: false)]
    getter transaction_ids : Array(String)? = nil

    @[JSON::Field(key: "average_amount", type: TransactionStreamAmount?, default: nil, required: true, nullable: false, emit_null: false)]
    getter average_amount : TransactionStreamAmount? = nil

    @[JSON::Field(key: "last_amount", type: TransactionStreamAmount?, default: nil, required: true, nullable: false, emit_null: false)]
    getter last_amount : TransactionStreamAmount? = nil

    # Indicates whether the transaction stream is still live.
    @[JSON::Field(key: "is_active", type: Bool?, default: nil, required: true, nullable: false, emit_null: false)]
    getter is_active : Bool? = nil

    @[JSON::Field(key: "status", type: Plaid::TransactionStreamStatus?, default: nil, required: true, nullable: false, emit_null: false)]
    getter status : Plaid::TransactionStreamStatus? = nil

    # This will be set to `true` if the stream has been modified by request to a `/transactions/recurring/streams` endpoint. It will be `false` for all other streams.
    @[JSON::Field(key: "is_user_modified", type: Bool?, default: nil, required: true, nullable: false, emit_null: false)]
    getter is_user_modified : Bool? = nil

    # End of Required Properties

    # Optional Properties

    @[JSON::Field(key: "personal_finance_category", type: PersonalFinanceCategory?, default: nil, required: false, nullable: true, emit_null: true, presence: true, ignore_serialize: personal_finance_category.nil? && !personal_finance_category_present?)]
    getter personal_finance_category : PersonalFinanceCategory? = nil

    @[JSON::Field(ignore: true)]
    property? personal_finance_category_present : Bool = false

    # The date of the most recent user modification. This will only be set if `is_user_modified` is `true`.
    @[JSON::Field(key: "last_user_modified_date", type: Time?, default: nil, required: false, nullable: false, emit_null: false, converter: Time::ISO8601DateConverter)]
    getter last_user_modified_date : Time? = nil

    # Initializes the object
    # @param [Hash] attributes Model attributes in the form of hash
    def initialize(
      *,
      # Required properties
      @account_id : String? = nil,
      @stream_id : String? = nil,
      @category : Array(String)? = nil,
      @category_id : String? = nil,
      @description : String? = nil,
      @merchant_name : String? = nil,
      @first_date : Time? = nil,
      @last_date : Time? = nil,
      @frequency : Plaid::RecurringTransactionFrequency? = nil,
      @transaction_ids : Array(String)? = nil,
      @average_amount : TransactionStreamAmount? = nil,
      @last_amount : TransactionStreamAmount? = nil,
      @is_active : Bool? = nil,
      @status : Plaid::TransactionStreamStatus? = nil,
      @is_user_modified : Bool? = nil,
      # Optional properties
      @personal_finance_category : PersonalFinanceCategory? = nil,
      @last_user_modified_date : Time? = nil
    )
    end

    # Show invalid properties with the reasons. Usually used together with valid?
    # @return Array for valid properties with the reasons
    def list_invalid_properties : Array(String)
      invalid_properties = Array(String).new

      invalid_properties.push("\"account_id\" is required and cannot be null") if @account_id.nil?

      unless (_account_id = @account_id).nil?
      end
      invalid_properties.push("\"stream_id\" is required and cannot be null") if @stream_id.nil?

      unless (_stream_id = @stream_id).nil?
      end
      invalid_properties.push("\"category\" is required and cannot be null") if @category.nil?

      unless (_category = @category).nil?
      end
      invalid_properties.push("\"category_id\" is required and cannot be null") if @category_id.nil?

      unless (_category_id = @category_id).nil?
      end
      invalid_properties.push("\"description\" is required and cannot be null") if @description.nil?

      unless (_description = @description).nil?
      end
      unless (_merchant_name = @merchant_name).nil?
      end
      invalid_properties.push("\"first_date\" is required and cannot be null") if @first_date.nil?

      unless (_first_date = @first_date).nil?
      end
      invalid_properties.push("\"last_date\" is required and cannot be null") if @last_date.nil?

      unless (_last_date = @last_date).nil?
      end
      invalid_properties.push("\"frequency\" is required and cannot be null") if @frequency.nil?

      unless (_frequency = @frequency).nil?
        invalid_properties.push(_frequency.error_message) if !_frequency.valid?
      end
      invalid_properties.push("\"transaction_ids\" is required and cannot be null") if @transaction_ids.nil?

      unless (_transaction_ids = @transaction_ids).nil?
      end
      invalid_properties.push("\"average_amount\" is required and cannot be null") if @average_amount.nil?

      unless (_average_amount = @average_amount).nil?
      end
      invalid_properties.push("\"last_amount\" is required and cannot be null") if @last_amount.nil?

      unless (_last_amount = @last_amount).nil?
      end
      invalid_properties.push("\"is_active\" is required and cannot be null") if @is_active.nil?

      unless (_is_active = @is_active).nil?
      end
      invalid_properties.push("\"status\" is required and cannot be null") if @status.nil?

      unless (_status = @status).nil?
        invalid_properties.push(_status.error_message) if !_status.valid?
      end
      invalid_properties.push("\"is_user_modified\" is required and cannot be null") if @is_user_modified.nil?

      unless (_is_user_modified = @is_user_modified).nil?
      end
      unless (_personal_finance_category = @personal_finance_category).nil?
      end
      unless (_last_user_modified_date = @last_user_modified_date).nil?
      end
      invalid_properties
    end

    # Check to see if the all the properties in the model are valid
    # @return true if the model is valid
    def valid? : Bool
      return false if @account_id.nil?
      unless (_account_id = @account_id).nil?
      end

      return false if @stream_id.nil?
      unless (_stream_id = @stream_id).nil?
      end

      return false if @category.nil?
      unless (_category = @category).nil?
      end

      return false if @category_id.nil?
      unless (_category_id = @category_id).nil?
      end

      return false if @description.nil?
      unless (_description = @description).nil?
      end

      unless (_merchant_name = @merchant_name).nil?
      end

      return false if @first_date.nil?
      unless (_first_date = @first_date).nil?
      end

      return false if @last_date.nil?
      unless (_last_date = @last_date).nil?
      end

      return false if @frequency.nil?
      unless (_frequency = @frequency).nil?
        return false if !_frequency.valid?
      end

      return false if @transaction_ids.nil?
      unless (_transaction_ids = @transaction_ids).nil?
      end

      return false if @average_amount.nil?
      unless (_average_amount = @average_amount).nil?
      end

      return false if @last_amount.nil?
      unless (_last_amount = @last_amount).nil?
      end

      return false if @is_active.nil?
      unless (_is_active = @is_active).nil?
      end

      return false if @status.nil?
      unless (_status = @status).nil?
        return false if !_status.valid?
      end

      return false if @is_user_modified.nil?
      unless (_is_user_modified = @is_user_modified).nil?
      end

      unless (_personal_finance_category = @personal_finance_category).nil?
      end

      unless (_last_user_modified_date = @last_user_modified_date).nil?
      end

      true
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] account_id Object to be assigned
    def account_id=(new_value : String?)
      raise ArgumentError.new("\"account_id\" is required and cannot be null") if new_value.nil?
      unless new_value.nil?
      end

      @account_id = new_value
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] stream_id Object to be assigned
    def stream_id=(new_value : String?)
      raise ArgumentError.new("\"stream_id\" is required and cannot be null") if new_value.nil?
      unless new_value.nil?
      end

      @stream_id = new_value
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] category Object to be assigned
    def category=(new_value : Array(String)?)
      raise ArgumentError.new("\"category\" is required and cannot be null") if new_value.nil?
      unless new_value.nil?
      end

      @category = new_value
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] category_id Object to be assigned
    def category_id=(new_value : String?)
      raise ArgumentError.new("\"category_id\" is required and cannot be null") if new_value.nil?
      unless new_value.nil?
      end

      @category_id = new_value
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] description Object to be assigned
    def description=(new_value : String?)
      raise ArgumentError.new("\"description\" is required and cannot be null") if new_value.nil?
      unless new_value.nil?
      end

      @description = new_value
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] merchant_name Object to be assigned
    def merchant_name=(new_value : String?)
      unless new_value.nil?
      end

      @merchant_name = new_value
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] first_date Object to be assigned
    def first_date=(new_value : Time?)
      raise ArgumentError.new("\"first_date\" is required and cannot be null") if new_value.nil?
      unless new_value.nil?
      end

      @first_date = new_value
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] last_date Object to be assigned
    def last_date=(new_value : Time?)
      raise ArgumentError.new("\"last_date\" is required and cannot be null") if new_value.nil?
      unless new_value.nil?
      end

      @last_date = new_value
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] frequency Object to be assigned
    def frequency=(new_value : Plaid::RecurringTransactionFrequency?)
      raise ArgumentError.new("\"frequency\" is required and cannot be null") if new_value.nil?
      unless new_value.nil?
        new_value.validate
      end

      @frequency = new_value
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] transaction_ids Object to be assigned
    def transaction_ids=(new_value : Array(String)?)
      raise ArgumentError.new("\"transaction_ids\" is required and cannot be null") if new_value.nil?
      unless new_value.nil?
      end

      @transaction_ids = new_value
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] average_amount Object to be assigned
    def average_amount=(new_value : TransactionStreamAmount?)
      raise ArgumentError.new("\"average_amount\" is required and cannot be null") if new_value.nil?
      unless new_value.nil?
      end

      @average_amount = new_value
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] last_amount Object to be assigned
    def last_amount=(new_value : TransactionStreamAmount?)
      raise ArgumentError.new("\"last_amount\" is required and cannot be null") if new_value.nil?
      unless new_value.nil?
      end

      @last_amount = new_value
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] is_active Object to be assigned
    def is_active=(new_value : Bool?)
      raise ArgumentError.new("\"is_active\" is required and cannot be null") if new_value.nil?
      unless new_value.nil?
      end

      @is_active = new_value
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] status Object to be assigned
    def status=(new_value : Plaid::TransactionStreamStatus?)
      raise ArgumentError.new("\"status\" is required and cannot be null") if new_value.nil?
      unless new_value.nil?
        new_value.validate
      end

      @status = new_value
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] is_user_modified Object to be assigned
    def is_user_modified=(new_value : Bool?)
      raise ArgumentError.new("\"is_user_modified\" is required and cannot be null") if new_value.nil?
      unless new_value.nil?
      end

      @is_user_modified = new_value
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] personal_finance_category Object to be assigned
    def personal_finance_category=(new_value : PersonalFinanceCategory?)
      unless new_value.nil?
      end

      @personal_finance_category = new_value
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] last_user_modified_date Object to be assigned
    def last_user_modified_date=(new_value : Time?)
      unless new_value.nil?
      end

      @last_user_modified_date = new_value
    end

    # Generates #hash and #== methods from all fields
    # #== @return [Bool]
    # #hash calculates hash code according to all attributes.
    # #hash @return [UInt64] Hash code
    def_equals_and_hash(@account_id, @stream_id, @category, @category_id, @description, @merchant_name, @first_date, @last_date, @frequency, @transaction_ids, @average_amount, @last_amount, @is_active, @status, @is_user_modified, @personal_finance_category, @personal_finance_category_present, @last_user_modified_date)
  end
end
