#  The Plaid API
#
# The Plaid REST API. Please see https://plaid.com/docs/api for more details.
#
# The version of the OpenAPI document: 2020-09-14_1.474.3
#
# Generated by: https://openapi-generator.tech
#

require "../../core"

require "./transfer_authorization_decision"
require "./transfer_authorization_decision_rationale"
require "./transfer_authorization_guarantee_decision"
require "./transfer_authorization_guarantee_decision_rationale"
require "./transfer_authorization_payment_risk"
require "./transfer_authorization_proposed_transfer"

module Plaid
  # Contains the authorization decision for a proposed transfer.
  class TransferAuthorization
    include JSON::Serializable
    include JSON::Serializable::Unmapped
    include OpenApi::Validatable
    include OpenApi::Json

    # Required Properties

    # Plaidâ€™s unique identifier for a transfer authorization.
    @[JSON::Field(key: "id", type: String?, default: nil, required: true, nullable: false, emit_null: false)]
    getter id : String? = nil

    # The datetime representing when the authorization was created, in the format `2006-01-02T15:04:05Z`.
    @[JSON::Field(key: "created", type: Time?, default: nil, required: true, nullable: false, emit_null: false, converter: Time::RFC3339Converter)]
    getter created : Time? = nil

    @[JSON::Field(key: "decision", type: Plaid::TransferAuthorizationDecision?, default: nil, required: true, nullable: false, emit_null: false)]
    getter decision : Plaid::TransferAuthorizationDecision? = nil

    @[JSON::Field(key: "decision_rationale", type: TransferAuthorizationDecisionRationale?, default: nil, required: true, nullable: true, emit_null: true)]
    getter decision_rationale : TransferAuthorizationDecisionRationale? = nil

    @[JSON::Field(key: "guarantee_decision", type: Plaid::TransferAuthorizationGuaranteeDecision?, default: nil, required: true, nullable: true, emit_null: true)]
    getter guarantee_decision : Plaid::TransferAuthorizationGuaranteeDecision? = nil

    @[JSON::Field(key: "guarantee_decision_rationale", type: TransferAuthorizationGuaranteeDecisionRationale?, default: nil, required: true, nullable: true, emit_null: true)]
    getter guarantee_decision_rationale : TransferAuthorizationGuaranteeDecisionRationale? = nil

    @[JSON::Field(key: "payment_risk", type: TransferAuthorizationPaymentRisk?, default: nil, required: true, nullable: true, emit_null: true)]
    getter payment_risk : TransferAuthorizationPaymentRisk? = nil

    @[JSON::Field(key: "proposed_transfer", type: TransferAuthorizationProposedTransfer?, default: nil, required: true, nullable: false, emit_null: false)]
    getter proposed_transfer : TransferAuthorizationProposedTransfer? = nil

    # End of Required Properties

    # Initializes the object
    # @param [Hash] attributes Model attributes in the form of hash
    def initialize(
      *,
      # Required properties
      @id : String? = nil,
      @created : Time? = nil,
      @decision : Plaid::TransferAuthorizationDecision? = nil,
      @decision_rationale : TransferAuthorizationDecisionRationale? = nil,
      @guarantee_decision : Plaid::TransferAuthorizationGuaranteeDecision? = nil,
      @guarantee_decision_rationale : TransferAuthorizationGuaranteeDecisionRationale? = nil,
      @payment_risk : TransferAuthorizationPaymentRisk? = nil,
      @proposed_transfer : TransferAuthorizationProposedTransfer? = nil
    )
    end

    # Show invalid properties with the reasons. Usually used together with valid?
    # @return Array for valid properties with the reasons
    def list_invalid_properties : Array(String)
      invalid_properties = Array(String).new

      invalid_properties.push("\"id\" is required and cannot be null") if @id.nil?

      unless (_id = @id).nil?
      end
      invalid_properties.push("\"created\" is required and cannot be null") if @created.nil?

      unless (_created = @created).nil?
      end
      invalid_properties.push("\"decision\" is required and cannot be null") if @decision.nil?

      unless (_decision = @decision).nil?
        invalid_properties.push(_decision.error_message) if !_decision.valid?
      end
      unless (_decision_rationale = @decision_rationale).nil?
      end
      unless (_guarantee_decision = @guarantee_decision).nil?
        invalid_properties.push(_guarantee_decision.error_message) if !_guarantee_decision.valid?
      end
      unless (_guarantee_decision_rationale = @guarantee_decision_rationale).nil?
      end
      unless (_payment_risk = @payment_risk).nil?
      end
      invalid_properties.push("\"proposed_transfer\" is required and cannot be null") if @proposed_transfer.nil?

      unless (_proposed_transfer = @proposed_transfer).nil?
      end
      invalid_properties
    end

    # Check to see if the all the properties in the model are valid
    # @return true if the model is valid
    def valid? : Bool
      return false if @id.nil?
      unless (_id = @id).nil?
      end

      return false if @created.nil?
      unless (_created = @created).nil?
      end

      return false if @decision.nil?
      unless (_decision = @decision).nil?
        return false if !_decision.valid?
      end

      unless (_decision_rationale = @decision_rationale).nil?
      end

      unless (_guarantee_decision = @guarantee_decision).nil?
        return false if !_guarantee_decision.valid?
      end

      unless (_guarantee_decision_rationale = @guarantee_decision_rationale).nil?
      end

      unless (_payment_risk = @payment_risk).nil?
      end

      return false if @proposed_transfer.nil?
      unless (_proposed_transfer = @proposed_transfer).nil?
      end

      true
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] id Object to be assigned
    def id=(new_value : String?)
      raise ArgumentError.new("\"id\" is required and cannot be null") if new_value.nil?
      unless new_value.nil?
      end

      @id = new_value
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] created Object to be assigned
    def created=(new_value : Time?)
      raise ArgumentError.new("\"created\" is required and cannot be null") if new_value.nil?
      unless new_value.nil?
      end

      @created = new_value
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] decision Object to be assigned
    def decision=(new_value : Plaid::TransferAuthorizationDecision?)
      raise ArgumentError.new("\"decision\" is required and cannot be null") if new_value.nil?
      unless new_value.nil?
        new_value.validate
      end

      @decision = new_value
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] decision_rationale Object to be assigned
    def decision_rationale=(new_value : TransferAuthorizationDecisionRationale?)
      unless new_value.nil?
      end

      @decision_rationale = new_value
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] guarantee_decision Object to be assigned
    def guarantee_decision=(new_value : Plaid::TransferAuthorizationGuaranteeDecision?)
      unless new_value.nil?
        new_value.validate
      end

      @guarantee_decision = new_value
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] guarantee_decision_rationale Object to be assigned
    def guarantee_decision_rationale=(new_value : TransferAuthorizationGuaranteeDecisionRationale?)
      unless new_value.nil?
      end

      @guarantee_decision_rationale = new_value
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] payment_risk Object to be assigned
    def payment_risk=(new_value : TransferAuthorizationPaymentRisk?)
      unless new_value.nil?
      end

      @payment_risk = new_value
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] proposed_transfer Object to be assigned
    def proposed_transfer=(new_value : TransferAuthorizationProposedTransfer?)
      raise ArgumentError.new("\"proposed_transfer\" is required and cannot be null") if new_value.nil?
      unless new_value.nil?
      end

      @proposed_transfer = new_value
    end

    # Generates #hash and #== methods from all fields
    # #== @return [Bool]
    # #hash calculates hash code according to all attributes.
    # #hash @return [UInt64] Hash code
    def_equals_and_hash(@id, @created, @decision, @decision_rationale, @guarantee_decision, @guarantee_decision_rationale, @payment_risk, @proposed_transfer)
  end
end
