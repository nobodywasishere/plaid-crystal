#  The Plaid API
#
# The Plaid REST API. Please see https://plaid.com/docs/api for more details.
#
# The version of the OpenAPI document: 2020-09-14_1.474.3
#
# Generated by: https://openapi-generator.tech
#

require "../../core"

require "./pay"

module Plaid
  # An object representing employment details found on a paystub.
  class EmploymentDetails
    include JSON::Serializable
    include JSON::Serializable::Unmapped
    include OpenApi::Validatable
    include OpenApi::Json

    # Optional Properties

    @[JSON::Field(key: "annual_salary", type: Pay?, default: nil, required: false, nullable: false, emit_null: false)]
    getter annual_salary : Pay? = nil

    # Date on which the employee was hired, in the YYYY-MM-DD format.
    @[JSON::Field(key: "hire_date", type: Time?, default: nil, required: false, nullable: true, emit_null: true, presence: true, ignore_serialize: hire_date.nil? && !hire_date_present?, converter: Time::ISO8601DateConverter)]
    getter hire_date : Time? = nil

    @[JSON::Field(ignore: true)]
    property? hire_date_present : Bool = false

    # Initializes the object
    # @param [Hash] attributes Model attributes in the form of hash
    def initialize(
      *,
      # Optional properties
      @annual_salary : Pay? = nil,
      @hire_date : Time? = nil
    )
    end

    # Show invalid properties with the reasons. Usually used together with valid?
    # @return Array for valid properties with the reasons
    def list_invalid_properties : Array(String)
      invalid_properties = Array(String).new

      unless (_annual_salary = @annual_salary).nil?
      end
      unless (_hire_date = @hire_date).nil?
      end
      invalid_properties
    end

    # Check to see if the all the properties in the model are valid
    # @return true if the model is valid
    def valid? : Bool
      unless (_annual_salary = @annual_salary).nil?
      end

      unless (_hire_date = @hire_date).nil?
      end

      true
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] annual_salary Object to be assigned
    def annual_salary=(new_value : Pay?)
      unless new_value.nil?
      end

      @annual_salary = new_value
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] hire_date Object to be assigned
    def hire_date=(new_value : Time?)
      unless new_value.nil?
      end

      @hire_date = new_value
    end

    # Generates #hash and #== methods from all fields
    # #== @return [Bool]
    # #hash calculates hash code according to all attributes.
    # #hash @return [UInt64] Hash code
    def_equals_and_hash(@annual_salary, @hire_date, @hire_date_present)
  end
end
