#  The Plaid API
#
# The Plaid REST API. Please see https://plaid.com/docs/api for more details.
#
# The version of the OpenAPI document: 2020-09-14_1.474.3
#
# Generated by: https://openapi-generator.tech
#

require "../../core"

require "./account_subtype"
require "./holdings_override"
require "./income_override"
require "./inflow_model"
require "./investments_transactions_override"
require "./liability_override"
require "./meta"
require "./numbers"
require "./override_account_type"
require "./owner_override"
require "./transaction_override"

module Plaid
  # Data to use to set values of test accounts. Some values cannot be specified in the schema and will instead will be calculated from other test data in order to achieve more consistent, realistic test data.
  class OverrideAccounts
    include JSON::Serializable
    include JSON::Serializable::Unmapped
    include OpenApi::Validatable
    include OpenApi::Json

    # Required Properties

    @[JSON::Field(key: "type", type: Plaid::OverrideAccountType?, default: nil, required: true, nullable: false, emit_null: false)]
    getter _type : Plaid::OverrideAccountType? = nil

    @[JSON::Field(key: "subtype", type: Plaid::AccountSubtype?, default: nil, required: true, nullable: true, emit_null: true)]
    getter subtype : Plaid::AccountSubtype? = nil

    # If provided, the account will start with this amount as the current balance.
    @[JSON::Field(key: "starting_balance", type: Float64?, default: nil, required: true, nullable: false, emit_null: false)]
    getter starting_balance : Float64? = nil

    # If provided, the account will always have this amount as its  available balance, regardless of current balance or changes in transactions over time.
    @[JSON::Field(key: "force_available_balance", type: Float64?, default: nil, required: true, nullable: false, emit_null: false)]
    getter force_available_balance : Float64? = nil

    # ISO-4217 currency code. If provided, the account will be denominated in the given currency. Transactions will also be in this currency by default.
    @[JSON::Field(key: "currency", type: String?, default: nil, required: true, nullable: false, emit_null: false)]
    getter currency : String? = nil

    @[JSON::Field(key: "meta", type: Meta?, default: nil, required: true, nullable: false, emit_null: false)]
    getter meta : Meta? = nil

    @[JSON::Field(key: "numbers", type: Numbers?, default: nil, required: true, nullable: false, emit_null: false)]
    getter numbers : Numbers? = nil

    # Specify the list of transactions on the account.
    @[JSON::Field(key: "transactions", type: Array(TransactionOverride)?, default: nil, required: true, nullable: false, emit_null: false)]
    getter transactions : Array(TransactionOverride)? = nil

    @[JSON::Field(key: "identity", type: OwnerOverride?, default: nil, required: true, nullable: false, emit_null: false)]
    getter identity : OwnerOverride? = nil

    @[JSON::Field(key: "liability", type: LiabilityOverride?, default: nil, required: true, nullable: false, emit_null: false)]
    getter liability : LiabilityOverride? = nil

    @[JSON::Field(key: "inflow_model", type: InflowModel?, default: nil, required: true, nullable: false, emit_null: false)]
    getter inflow_model : InflowModel? = nil

    # End of Required Properties

    # Optional Properties

    @[JSON::Field(key: "holdings", type: Plaid::HoldingsOverride?, default: nil, required: false, nullable: false, emit_null: false)]
    getter holdings : Plaid::HoldingsOverride? = nil

    @[JSON::Field(key: "investment_transactions", type: Plaid::InvestmentsTransactionsOverride?, default: nil, required: false, nullable: false, emit_null: false)]
    getter investment_transactions : Plaid::InvestmentsTransactionsOverride? = nil

    @[JSON::Field(key: "income", type: Plaid::IncomeOverride?, default: nil, required: false, nullable: false, emit_null: false)]
    getter income : Plaid::IncomeOverride? = nil

    # Initializes the object
    # @param [Hash] attributes Model attributes in the form of hash
    def initialize(
      *,
      # Required properties
      @_type : Plaid::OverrideAccountType? = nil,
      @subtype : Plaid::AccountSubtype? = nil,
      @starting_balance : Float64? = nil,
      @force_available_balance : Float64? = nil,
      @currency : String? = nil,
      @meta : Meta? = nil,
      @numbers : Numbers? = nil,
      @transactions : Array(TransactionOverride)? = nil,
      @identity : OwnerOverride? = nil,
      @liability : LiabilityOverride? = nil,
      @inflow_model : InflowModel? = nil,
      # Optional properties
      @holdings : Plaid::HoldingsOverride? = nil,
      @investment_transactions : Plaid::InvestmentsTransactionsOverride? = nil,
      @income : Plaid::IncomeOverride? = nil
    )
    end

    # Show invalid properties with the reasons. Usually used together with valid?
    # @return Array for valid properties with the reasons
    def list_invalid_properties : Array(String)
      invalid_properties = Array(String).new

      invalid_properties.push("\"_type\" is required and cannot be null") if @_type.nil?

      unless (__type = @_type).nil?
        invalid_properties.push(__type.error_message) if !__type.valid?
      end
      unless (_subtype = @subtype).nil?
        invalid_properties.push(_subtype.error_message) if !_subtype.valid?
      end
      invalid_properties.push("\"starting_balance\" is required and cannot be null") if @starting_balance.nil?

      unless (_starting_balance = @starting_balance).nil?
      end
      invalid_properties.push("\"force_available_balance\" is required and cannot be null") if @force_available_balance.nil?

      unless (_force_available_balance = @force_available_balance).nil?
      end
      invalid_properties.push("\"currency\" is required and cannot be null") if @currency.nil?

      unless (_currency = @currency).nil?
      end
      invalid_properties.push("\"meta\" is required and cannot be null") if @meta.nil?

      unless (_meta = @meta).nil?
      end
      invalid_properties.push("\"numbers\" is required and cannot be null") if @numbers.nil?

      unless (_numbers = @numbers).nil?
      end
      invalid_properties.push("\"transactions\" is required and cannot be null") if @transactions.nil?

      unless (_transactions = @transactions).nil?
      end
      invalid_properties.push("\"identity\" is required and cannot be null") if @identity.nil?

      unless (_identity = @identity).nil?
      end
      invalid_properties.push("\"liability\" is required and cannot be null") if @liability.nil?

      unless (_liability = @liability).nil?
      end
      invalid_properties.push("\"inflow_model\" is required and cannot be null") if @inflow_model.nil?

      unless (_inflow_model = @inflow_model).nil?
      end
      unless (_holdings = @holdings).nil?
        invalid_properties.concat(_holdings.list_invalid_properties_for("holdings")) if _holdings.is_a?(OpenApi::Validatable)
      end
      unless (_investment_transactions = @investment_transactions).nil?
        invalid_properties.concat(_investment_transactions.list_invalid_properties_for("investment_transactions")) if _investment_transactions.is_a?(OpenApi::Validatable)
      end
      unless (_income = @income).nil?
        invalid_properties.concat(_income.list_invalid_properties_for("income")) if _income.is_a?(OpenApi::Validatable)
      end
      invalid_properties
    end

    # Check to see if the all the properties in the model are valid
    # @return true if the model is valid
    def valid? : Bool
      return false if @_type.nil?
      unless (__type = @_type).nil?
        return false if !__type.valid?
      end

      unless (_subtype = @subtype).nil?
        return false if !_subtype.valid?
      end

      return false if @starting_balance.nil?
      unless (_starting_balance = @starting_balance).nil?
      end

      return false if @force_available_balance.nil?
      unless (_force_available_balance = @force_available_balance).nil?
      end

      return false if @currency.nil?
      unless (_currency = @currency).nil?
      end

      return false if @meta.nil?
      unless (_meta = @meta).nil?
      end

      return false if @numbers.nil?
      unless (_numbers = @numbers).nil?
      end

      return false if @transactions.nil?
      unless (_transactions = @transactions).nil?
      end

      return false if @identity.nil?
      unless (_identity = @identity).nil?
      end

      return false if @liability.nil?
      unless (_liability = @liability).nil?
      end

      return false if @inflow_model.nil?
      unless (_inflow_model = @inflow_model).nil?
      end

      unless (_holdings = @holdings).nil?
        return false if _holdings.is_a?(OpenApi::Validatable) && !_holdings.valid?
      end

      unless (_investment_transactions = @investment_transactions).nil?
        return false if _investment_transactions.is_a?(OpenApi::Validatable) && !_investment_transactions.valid?
      end

      unless (_income = @income).nil?
        return false if _income.is_a?(OpenApi::Validatable) && !_income.valid?
      end

      true
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] _type Object to be assigned
    def _type=(new_value : Plaid::OverrideAccountType?)
      raise ArgumentError.new("\"_type\" is required and cannot be null") if new_value.nil?
      unless new_value.nil?
        new_value.validate
      end

      @_type = new_value
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] subtype Object to be assigned
    def subtype=(new_value : Plaid::AccountSubtype?)
      unless new_value.nil?
        new_value.validate
      end

      @subtype = new_value
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] starting_balance Object to be assigned
    def starting_balance=(new_value : Float64?)
      raise ArgumentError.new("\"starting_balance\" is required and cannot be null") if new_value.nil?
      unless new_value.nil?
      end

      @starting_balance = new_value
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] force_available_balance Object to be assigned
    def force_available_balance=(new_value : Float64?)
      raise ArgumentError.new("\"force_available_balance\" is required and cannot be null") if new_value.nil?
      unless new_value.nil?
      end

      @force_available_balance = new_value
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] currency Object to be assigned
    def currency=(new_value : String?)
      raise ArgumentError.new("\"currency\" is required and cannot be null") if new_value.nil?
      unless new_value.nil?
      end

      @currency = new_value
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] meta Object to be assigned
    def meta=(new_value : Meta?)
      raise ArgumentError.new("\"meta\" is required and cannot be null") if new_value.nil?
      unless new_value.nil?
      end

      @meta = new_value
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] numbers Object to be assigned
    def numbers=(new_value : Numbers?)
      raise ArgumentError.new("\"numbers\" is required and cannot be null") if new_value.nil?
      unless new_value.nil?
      end

      @numbers = new_value
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] transactions Object to be assigned
    def transactions=(new_value : Array(TransactionOverride)?)
      raise ArgumentError.new("\"transactions\" is required and cannot be null") if new_value.nil?
      unless new_value.nil?
      end

      @transactions = new_value
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] identity Object to be assigned
    def identity=(new_value : OwnerOverride?)
      raise ArgumentError.new("\"identity\" is required and cannot be null") if new_value.nil?
      unless new_value.nil?
      end

      @identity = new_value
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] liability Object to be assigned
    def liability=(new_value : LiabilityOverride?)
      raise ArgumentError.new("\"liability\" is required and cannot be null") if new_value.nil?
      unless new_value.nil?
      end

      @liability = new_value
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] inflow_model Object to be assigned
    def inflow_model=(new_value : InflowModel?)
      raise ArgumentError.new("\"inflow_model\" is required and cannot be null") if new_value.nil?
      unless new_value.nil?
      end

      @inflow_model = new_value
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] holdings Object to be assigned
    def holdings=(new_value : Plaid::HoldingsOverride?)
      unless new_value.nil?
        new_value.validate if new_value.is_a?(OpenApi::Validatable)
      end

      @holdings = new_value
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] investment_transactions Object to be assigned
    def investment_transactions=(new_value : Plaid::InvestmentsTransactionsOverride?)
      unless new_value.nil?
        new_value.validate if new_value.is_a?(OpenApi::Validatable)
      end

      @investment_transactions = new_value
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] income Object to be assigned
    def income=(new_value : Plaid::IncomeOverride?)
      unless new_value.nil?
        new_value.validate if new_value.is_a?(OpenApi::Validatable)
      end

      @income = new_value
    end

    # Generates #hash and #== methods from all fields
    # #== @return [Bool]
    # #hash calculates hash code according to all attributes.
    # #hash @return [UInt64] Hash code
    def_equals_and_hash(@_type, @subtype, @starting_balance, @force_available_balance, @currency, @meta, @numbers, @transactions, @identity, @liability, @inflow_model, @holdings, @investment_transactions, @income)
  end
end
