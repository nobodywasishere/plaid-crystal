#  The Plaid API
#
# The Plaid REST API. Please see https://plaid.com/docs/api for more details.
#
# The version of the OpenAPI document: 2020-09-14_1.474.3
#
# Generated by: https://openapi-generator.tech
#

require "../../core"

require "./security_override"

module Plaid
  # Specify the list of investments transactions on the account.
  class InvestmentsTransactionsOverride
    include JSON::Serializable
    include JSON::Serializable::Unmapped
    include OpenApi::Validatable
    include OpenApi::Json

    # Required Properties

    # Posting date for the transaction. Must be formatted as an [ISO 8601](https://wikipedia.org/wiki/ISO_8601) date.
    @[JSON::Field(key: "date", type: Time?, default: nil, required: true, nullable: false, emit_null: false, converter: Time::ISO8601DateConverter)]
    getter date : Time? = nil

    # The institution's description of the transaction.
    @[JSON::Field(key: "name", type: String?, default: nil, required: true, nullable: false, emit_null: false)]
    getter name : String? = nil

    # The number of units of the security involved in this transaction. Must be positive if the type is a buy and negative if the type is a sell.
    @[JSON::Field(key: "quantity", type: Float64?, default: nil, required: true, nullable: false, emit_null: false)]
    getter quantity : Float64? = nil

    # The price of the security at which this transaction occurred.
    @[JSON::Field(key: "price", type: Float64?, default: nil, required: true, nullable: false, emit_null: false)]
    getter price : Float64? = nil

    # The type of the investment transaction. Possible values are: `buy`: Buying an investment `sell`: Selling an investment `cash`: Activity that modifies a cash position `fee`: A fee on the account `transfer`: Activity that modifies a position, but not through buy/sell activity e.g. options exercise, portfolio transfer
    @[JSON::Field(key: "type", type: String?, default: nil, required: true, nullable: false, emit_null: false)]
    getter _type : String? = nil

    # Either a valid `iso_currency_code` or `unofficial_currency_code`
    @[JSON::Field(key: "currency", type: String?, default: nil, required: true, nullable: false, emit_null: false)]
    getter currency : String? = nil

    # End of Required Properties

    # Optional Properties

    # The combined value of all fees applied to this transaction.
    @[JSON::Field(key: "fees", type: Float64?, default: nil, required: false, nullable: false, emit_null: false)]
    getter fees : Float64? = nil

    @[JSON::Field(key: "security", type: Plaid::SecurityOverride?, default: nil, required: false, nullable: false, emit_null: false)]
    getter security : Plaid::SecurityOverride? = nil

    # Initializes the object
    # @param [Hash] attributes Model attributes in the form of hash
    def initialize(
      *,
      # Required properties
      @date : Time? = nil,
      @name : String? = nil,
      @quantity : Float64? = nil,
      @price : Float64? = nil,
      @_type : String? = nil,
      @currency : String? = nil,
      # Optional properties
      @fees : Float64? = nil,
      @security : Plaid::SecurityOverride? = nil
    )
    end

    # Show invalid properties with the reasons. Usually used together with valid?
    # @return Array for valid properties with the reasons
    def list_invalid_properties : Array(String)
      invalid_properties = Array(String).new

      invalid_properties.push("\"date\" is required and cannot be null") if @date.nil?

      unless (_date = @date).nil?
      end
      invalid_properties.push("\"name\" is required and cannot be null") if @name.nil?

      unless (_name = @name).nil?
      end
      invalid_properties.push("\"quantity\" is required and cannot be null") if @quantity.nil?

      unless (_quantity = @quantity).nil?
      end
      invalid_properties.push("\"price\" is required and cannot be null") if @price.nil?

      unless (_price = @price).nil?
      end
      invalid_properties.push("\"_type\" is required and cannot be null") if @_type.nil?

      unless (__type = @_type).nil?
      end
      invalid_properties.push("\"currency\" is required and cannot be null") if @currency.nil?

      unless (_currency = @currency).nil?
      end
      unless (_fees = @fees).nil?
      end
      unless (_security = @security).nil?
        invalid_properties.concat(_security.list_invalid_properties_for("security")) if _security.is_a?(OpenApi::Validatable)
      end
      invalid_properties
    end

    # Check to see if the all the properties in the model are valid
    # @return true if the model is valid
    def valid? : Bool
      return false if @date.nil?
      unless (_date = @date).nil?
      end

      return false if @name.nil?
      unless (_name = @name).nil?
      end

      return false if @quantity.nil?
      unless (_quantity = @quantity).nil?
      end

      return false if @price.nil?
      unless (_price = @price).nil?
      end

      return false if @_type.nil?
      unless (__type = @_type).nil?
      end

      return false if @currency.nil?
      unless (_currency = @currency).nil?
      end

      unless (_fees = @fees).nil?
      end

      unless (_security = @security).nil?
        return false if _security.is_a?(OpenApi::Validatable) && !_security.valid?
      end

      true
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] date Object to be assigned
    def date=(new_value : Time?)
      raise ArgumentError.new("\"date\" is required and cannot be null") if new_value.nil?
      unless new_value.nil?
      end

      @date = new_value
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] name Object to be assigned
    def name=(new_value : String?)
      raise ArgumentError.new("\"name\" is required and cannot be null") if new_value.nil?
      unless new_value.nil?
      end

      @name = new_value
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] quantity Object to be assigned
    def quantity=(new_value : Float64?)
      raise ArgumentError.new("\"quantity\" is required and cannot be null") if new_value.nil?
      unless new_value.nil?
      end

      @quantity = new_value
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] price Object to be assigned
    def price=(new_value : Float64?)
      raise ArgumentError.new("\"price\" is required and cannot be null") if new_value.nil?
      unless new_value.nil?
      end

      @price = new_value
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] _type Object to be assigned
    def _type=(new_value : String?)
      raise ArgumentError.new("\"_type\" is required and cannot be null") if new_value.nil?
      unless new_value.nil?
      end

      @_type = new_value
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] currency Object to be assigned
    def currency=(new_value : String?)
      raise ArgumentError.new("\"currency\" is required and cannot be null") if new_value.nil?
      unless new_value.nil?
      end

      @currency = new_value
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] fees Object to be assigned
    def fees=(new_value : Float64?)
      unless new_value.nil?
      end

      @fees = new_value
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] security Object to be assigned
    def security=(new_value : Plaid::SecurityOverride?)
      unless new_value.nil?
        new_value.validate if new_value.is_a?(OpenApi::Validatable)
      end

      @security = new_value
    end

    # Generates #hash and #== methods from all fields
    # #== @return [Bool]
    # #hash calculates hash code according to all attributes.
    # #hash @return [UInt64] Hash code
    def_equals_and_hash(@date, @name, @quantity, @price, @_type, @currency, @fees, @security)
  end
end
