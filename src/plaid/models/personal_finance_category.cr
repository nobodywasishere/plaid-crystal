#  The Plaid API
#
# The Plaid REST API. Please see https://plaid.com/docs/api for more details.
#
# The version of the OpenAPI document: 2020-09-14_1.474.3
#
# Generated by: https://openapi-generator.tech
#

require "../../core"

module Plaid
  # Information describing the intent of the transaction. Most relevant for personal finance use cases, but not limited to such use cases.  See the [`taxonomy CSV file`](https://plaid.com/documents/transactions-personal-finance-category-taxonomy.csv) for a full list of personal finance categories. If you are migrating to personal finance categories from the legacy categories, also refer to the [`migration guide`](https://plaid.com/docs/transactions/pfc-migration/).
  class PersonalFinanceCategory
    include JSON::Serializable
    include JSON::Serializable::Unmapped
    include OpenApi::Validatable
    include OpenApi::Json

    # Required Properties

    # A high level category that communicates the broad category of the transaction.
    @[JSON::Field(key: "primary", type: String?, default: nil, required: true, nullable: false, emit_null: false)]
    getter primary : String? = nil

    # A granular category conveying the transaction's intent. This field can also be used as a unique identifier for the category.
    @[JSON::Field(key: "detailed", type: String?, default: nil, required: true, nullable: false, emit_null: false)]
    getter detailed : String? = nil

    # End of Required Properties

    # Optional Properties

    # A description of how confident we are that the provided categories accurately describe the transaction intent.  `VERY_HIGH`: We are more than 98% confident that this category reflects the intent of the transaction. `HIGH`: We are more than 90% confident that this category reflects the intent of the transaction. `MEDIUM`: We are moderately confident that this category reflects the intent of the transaction. `LOW`: This category may reflect the intent, but there may be other categories that are more accurate. `UNKNOWN`: We donâ€™t know the confidence level for this category.
    @[JSON::Field(key: "confidence_level", type: String?, default: nil, required: false, nullable: true, emit_null: true, presence: true, ignore_serialize: confidence_level.nil? && !confidence_level_present?)]
    getter confidence_level : String? = nil

    @[JSON::Field(ignore: true)]
    property? confidence_level_present : Bool = false

    # Initializes the object
    # @param [Hash] attributes Model attributes in the form of hash
    def initialize(
      *,
      # Required properties
      @primary : String? = nil,
      @detailed : String? = nil,
      # Optional properties
      @confidence_level : String? = nil
    )
    end

    # Show invalid properties with the reasons. Usually used together with valid?
    # @return Array for valid properties with the reasons
    def list_invalid_properties : Array(String)
      invalid_properties = Array(String).new

      invalid_properties.push("\"primary\" is required and cannot be null") if @primary.nil?

      unless (_primary = @primary).nil?
      end
      invalid_properties.push("\"detailed\" is required and cannot be null") if @detailed.nil?

      unless (_detailed = @detailed).nil?
      end
      unless (_confidence_level = @confidence_level).nil?
      end
      invalid_properties
    end

    # Check to see if the all the properties in the model are valid
    # @return true if the model is valid
    def valid? : Bool
      return false if @primary.nil?
      unless (_primary = @primary).nil?
      end

      return false if @detailed.nil?
      unless (_detailed = @detailed).nil?
      end

      unless (_confidence_level = @confidence_level).nil?
      end

      true
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] primary Object to be assigned
    def primary=(new_value : String?)
      raise ArgumentError.new("\"primary\" is required and cannot be null") if new_value.nil?
      unless new_value.nil?
      end

      @primary = new_value
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] detailed Object to be assigned
    def detailed=(new_value : String?)
      raise ArgumentError.new("\"detailed\" is required and cannot be null") if new_value.nil?
      unless new_value.nil?
      end

      @detailed = new_value
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] confidence_level Object to be assigned
    def confidence_level=(new_value : String?)
      unless new_value.nil?
      end

      @confidence_level = new_value
    end

    # Generates #hash and #== methods from all fields
    # #== @return [Bool]
    # #hash calculates hash code according to all attributes.
    # #hash @return [UInt64] Hash code
    def_equals_and_hash(@primary, @detailed, @confidence_level, @confidence_level_present)
  end
end
