#  The Plaid API
#
# The Plaid REST API. Please see https://plaid.com/docs/api for more details.
#
# The version of the OpenAPI document: 2020-09-14_1.474.3
#
# Generated by: https://openapi-generator.tech
#

require "../../core"

require "./deductions"
require "./earnings"
require "./employee"
require "./employment_details"
require "./income_breakdown"
require "./net_pay"
require "./pay_period_details"
require "./paystub_details"
require "./paystub_employer"
require "./paystub_ytd_details"

module Plaid
  # An object representing data extracted from the end user's paystub.
  class Paystub
    include JSON::Serializable
    include JSON::Serializable::Unmapped
    include OpenApi::Validatable
    include OpenApi::Json

    # Required Properties

    @[JSON::Field(key: "deductions", type: Deductions?, default: nil, required: true, nullable: false, emit_null: false)]
    getter deductions : Deductions? = nil

    # An identifier of the document referenced by the document metadata.
    @[JSON::Field(key: "doc_id", type: String?, default: nil, required: true, nullable: false, emit_null: false)]
    getter doc_id : String? = nil

    @[JSON::Field(key: "earnings", type: Earnings?, default: nil, required: true, nullable: false, emit_null: false)]
    getter earnings : Earnings? = nil

    @[JSON::Field(key: "employee", type: Employee?, default: nil, required: true, nullable: false, emit_null: false)]
    getter employee : Employee? = nil

    @[JSON::Field(key: "employer", type: PaystubEmployer?, default: nil, required: true, nullable: false, emit_null: false)]
    getter employer : PaystubEmployer? = nil

    @[JSON::Field(key: "net_pay", type: NetPay?, default: nil, required: true, nullable: false, emit_null: false)]
    getter net_pay : NetPay? = nil

    @[JSON::Field(key: "pay_period_details", type: PayPeriodDetails?, default: nil, required: true, nullable: false, emit_null: false)]
    getter pay_period_details : PayPeriodDetails? = nil

    # End of Required Properties

    # Optional Properties

    @[JSON::Field(key: "employment_details", type: EmploymentDetails?, default: nil, required: false, nullable: false, emit_null: false)]
    getter employment_details : EmploymentDetails? = nil

    @[JSON::Field(key: "paystub_details", type: PaystubDetails?, default: nil, required: false, nullable: false, emit_null: false)]
    getter paystub_details : PaystubDetails? = nil

    @[JSON::Field(key: "income_breakdown", type: Array(IncomeBreakdown)?, default: nil, required: false, nullable: false, emit_null: false)]
    getter income_breakdown : Array(IncomeBreakdown)? = nil

    @[JSON::Field(key: "ytd_earnings", type: PaystubYTDDetails?, default: nil, required: false, nullable: false, emit_null: false)]
    getter ytd_earnings : PaystubYTDDetails? = nil

    # Initializes the object
    # @param [Hash] attributes Model attributes in the form of hash
    def initialize(
      *,
      # Required properties
      @deductions : Deductions? = nil,
      @doc_id : String? = nil,
      @earnings : Earnings? = nil,
      @employee : Employee? = nil,
      @employer : PaystubEmployer? = nil,
      @net_pay : NetPay? = nil,
      @pay_period_details : PayPeriodDetails? = nil,
      # Optional properties
      @employment_details : EmploymentDetails? = nil,
      @paystub_details : PaystubDetails? = nil,
      @income_breakdown : Array(IncomeBreakdown)? = nil,
      @ytd_earnings : PaystubYTDDetails? = nil
    )
    end

    # Show invalid properties with the reasons. Usually used together with valid?
    # @return Array for valid properties with the reasons
    def list_invalid_properties : Array(String)
      invalid_properties = Array(String).new

      invalid_properties.push("\"deductions\" is required and cannot be null") if @deductions.nil?

      unless (_deductions = @deductions).nil?
      end
      invalid_properties.push("\"doc_id\" is required and cannot be null") if @doc_id.nil?

      unless (_doc_id = @doc_id).nil?
      end
      invalid_properties.push("\"earnings\" is required and cannot be null") if @earnings.nil?

      unless (_earnings = @earnings).nil?
      end
      invalid_properties.push("\"employee\" is required and cannot be null") if @employee.nil?

      unless (_employee = @employee).nil?
      end
      invalid_properties.push("\"employer\" is required and cannot be null") if @employer.nil?

      unless (_employer = @employer).nil?
      end
      invalid_properties.push("\"net_pay\" is required and cannot be null") if @net_pay.nil?

      unless (_net_pay = @net_pay).nil?
      end
      invalid_properties.push("\"pay_period_details\" is required and cannot be null") if @pay_period_details.nil?

      unless (_pay_period_details = @pay_period_details).nil?
      end
      unless (_employment_details = @employment_details).nil?
      end
      unless (_paystub_details = @paystub_details).nil?
      end
      unless (_income_breakdown = @income_breakdown).nil?
      end
      unless (_ytd_earnings = @ytd_earnings).nil?
      end
      invalid_properties
    end

    # Check to see if the all the properties in the model are valid
    # @return true if the model is valid
    def valid? : Bool
      return false if @deductions.nil?
      unless (_deductions = @deductions).nil?
      end

      return false if @doc_id.nil?
      unless (_doc_id = @doc_id).nil?
      end

      return false if @earnings.nil?
      unless (_earnings = @earnings).nil?
      end

      return false if @employee.nil?
      unless (_employee = @employee).nil?
      end

      return false if @employer.nil?
      unless (_employer = @employer).nil?
      end

      return false if @net_pay.nil?
      unless (_net_pay = @net_pay).nil?
      end

      return false if @pay_period_details.nil?
      unless (_pay_period_details = @pay_period_details).nil?
      end

      unless (_employment_details = @employment_details).nil?
      end

      unless (_paystub_details = @paystub_details).nil?
      end

      unless (_income_breakdown = @income_breakdown).nil?
      end

      unless (_ytd_earnings = @ytd_earnings).nil?
      end

      true
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] deductions Object to be assigned
    def deductions=(new_value : Deductions?)
      raise ArgumentError.new("\"deductions\" is required and cannot be null") if new_value.nil?
      unless new_value.nil?
      end

      @deductions = new_value
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] doc_id Object to be assigned
    def doc_id=(new_value : String?)
      raise ArgumentError.new("\"doc_id\" is required and cannot be null") if new_value.nil?
      unless new_value.nil?
      end

      @doc_id = new_value
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] earnings Object to be assigned
    def earnings=(new_value : Earnings?)
      raise ArgumentError.new("\"earnings\" is required and cannot be null") if new_value.nil?
      unless new_value.nil?
      end

      @earnings = new_value
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] employee Object to be assigned
    def employee=(new_value : Employee?)
      raise ArgumentError.new("\"employee\" is required and cannot be null") if new_value.nil?
      unless new_value.nil?
      end

      @employee = new_value
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] employer Object to be assigned
    def employer=(new_value : PaystubEmployer?)
      raise ArgumentError.new("\"employer\" is required and cannot be null") if new_value.nil?
      unless new_value.nil?
      end

      @employer = new_value
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] net_pay Object to be assigned
    def net_pay=(new_value : NetPay?)
      raise ArgumentError.new("\"net_pay\" is required and cannot be null") if new_value.nil?
      unless new_value.nil?
      end

      @net_pay = new_value
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] pay_period_details Object to be assigned
    def pay_period_details=(new_value : PayPeriodDetails?)
      raise ArgumentError.new("\"pay_period_details\" is required and cannot be null") if new_value.nil?
      unless new_value.nil?
      end

      @pay_period_details = new_value
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] employment_details Object to be assigned
    def employment_details=(new_value : EmploymentDetails?)
      unless new_value.nil?
      end

      @employment_details = new_value
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] paystub_details Object to be assigned
    def paystub_details=(new_value : PaystubDetails?)
      unless new_value.nil?
      end

      @paystub_details = new_value
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] income_breakdown Object to be assigned
    def income_breakdown=(new_value : Array(IncomeBreakdown)?)
      unless new_value.nil?
      end

      @income_breakdown = new_value
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] ytd_earnings Object to be assigned
    def ytd_earnings=(new_value : PaystubYTDDetails?)
      unless new_value.nil?
      end

      @ytd_earnings = new_value
    end

    # Generates #hash and #== methods from all fields
    # #== @return [Bool]
    # #hash calculates hash code according to all attributes.
    # #hash @return [UInt64] Hash code
    def_equals_and_hash(@deductions, @doc_id, @earnings, @employee, @employer, @net_pay, @pay_period_details, @employment_details, @paystub_details, @income_breakdown, @ytd_earnings)
  end
end
