#  The Plaid API
#
# The Plaid REST API. Please see https://plaid.com/docs/api for more details.
#
# The version of the OpenAPI document: 2020-09-14_1.474.3
#
# Generated by: https://openapi-generator.tech
#

require "../../core"

require "./document_risk_signal"
require "./document_risk_summary"
require "./risk_signal_document_reference"

module Plaid
  # Object containing all risk signals and relevant metadata for a single document
  class SingleDocumentRiskSignal
    include JSON::Serializable
    include JSON::Serializable::Unmapped
    include OpenApi::Validatable
    include OpenApi::Json

    # Required Properties

    @[JSON::Field(key: "document_reference", type: RiskSignalDocumentReference?, default: nil, required: true, nullable: false, emit_null: false)]
    getter document_reference : RiskSignalDocumentReference? = nil

    # Array of attributes that indicate whether or not there is fraud risk with a document
    @[JSON::Field(key: "risk_signals", type: Array(DocumentRiskSignal)?, default: nil, required: true, nullable: false, emit_null: false)]
    getter risk_signals : Array(DocumentRiskSignal)? = nil

    @[JSON::Field(key: "risk_summary", type: DocumentRiskSummary?, default: nil, required: true, nullable: false, emit_null: false)]
    getter risk_summary : DocumentRiskSummary? = nil

    # End of Required Properties

    # Initializes the object
    # @param [Hash] attributes Model attributes in the form of hash
    def initialize(
      *,
      # Required properties
      @document_reference : RiskSignalDocumentReference? = nil,
      @risk_signals : Array(DocumentRiskSignal)? = nil,
      @risk_summary : DocumentRiskSummary? = nil
    )
    end

    # Show invalid properties with the reasons. Usually used together with valid?
    # @return Array for valid properties with the reasons
    def list_invalid_properties : Array(String)
      invalid_properties = Array(String).new

      invalid_properties.push("\"document_reference\" is required and cannot be null") if @document_reference.nil?

      unless (_document_reference = @document_reference).nil?
      end
      invalid_properties.push("\"risk_signals\" is required and cannot be null") if @risk_signals.nil?

      unless (_risk_signals = @risk_signals).nil?
      end
      invalid_properties.push("\"risk_summary\" is required and cannot be null") if @risk_summary.nil?

      unless (_risk_summary = @risk_summary).nil?
      end
      invalid_properties
    end

    # Check to see if the all the properties in the model are valid
    # @return true if the model is valid
    def valid? : Bool
      return false if @document_reference.nil?
      unless (_document_reference = @document_reference).nil?
      end

      return false if @risk_signals.nil?
      unless (_risk_signals = @risk_signals).nil?
      end

      return false if @risk_summary.nil?
      unless (_risk_summary = @risk_summary).nil?
      end

      true
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] document_reference Object to be assigned
    def document_reference=(new_value : RiskSignalDocumentReference?)
      raise ArgumentError.new("\"document_reference\" is required and cannot be null") if new_value.nil?
      unless new_value.nil?
      end

      @document_reference = new_value
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] risk_signals Object to be assigned
    def risk_signals=(new_value : Array(DocumentRiskSignal)?)
      raise ArgumentError.new("\"risk_signals\" is required and cannot be null") if new_value.nil?
      unless new_value.nil?
      end

      @risk_signals = new_value
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] risk_summary Object to be assigned
    def risk_summary=(new_value : DocumentRiskSummary?)
      raise ArgumentError.new("\"risk_summary\" is required and cannot be null") if new_value.nil?
      unless new_value.nil?
      end

      @risk_summary = new_value
    end

    # Generates #hash and #== methods from all fields
    # #== @return [Bool]
    # #hash calculates hash code according to all attributes.
    # #hash @return [UInt64] Hash code
    def_equals_and_hash(@document_reference, @risk_signals, @risk_summary)
  end
end
