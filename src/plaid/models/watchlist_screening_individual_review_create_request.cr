#  The Plaid API
#
# The Plaid REST API. Please see https://plaid.com/docs/api for more details.
#
# The version of the OpenAPI document: 2020-09-14_1.474.3
#
# Generated by: https://openapi-generator.tech
#

require "../../core"

module Plaid
  # Request input for creating a screening review
  class WatchlistScreeningIndividualReviewCreateRequest
    include JSON::Serializable
    include JSON::Serializable::Unmapped
    include OpenApi::Validatable
    include OpenApi::Json

    # Required Properties

    # Hits to mark as a true positive after thorough manual review. These hits will never recur or be updated once dismissed. In most cases, confirmed hits indicate that the customer should be rejected.
    @[JSON::Field(key: "confirmed_hits", type: Array(String)?, default: nil, required: true, nullable: false, emit_null: false)]
    getter confirmed_hits : Array(String)? = nil

    # Hits to mark as a false positive after thorough manual review. These hits will never recur or be updated once dismissed.
    @[JSON::Field(key: "dismissed_hits", type: Array(String)?, default: nil, required: true, nullable: false, emit_null: false)]
    getter dismissed_hits : Array(String)? = nil

    # ID of the associated screening.
    @[JSON::Field(key: "watchlist_screening_id", type: String?, default: nil, required: true, nullable: false, emit_null: false)]
    getter watchlist_screening_id : String? = nil

    # End of Required Properties

    # Optional Properties

    # A comment submitted by a team member as part of reviewing a watchlist screening.
    @[JSON::Field(key: "comment", type: String?, default: nil, required: false, nullable: true, emit_null: true, presence: true, ignore_serialize: comment.nil? && !comment_present?)]
    getter comment : String? = nil
    MIN_LENGTH_FOR_COMMENT = 1

    @[JSON::Field(ignore: true)]
    property? comment_present : Bool = false

    # Your Plaid API `client_id`. The `client_id` is required and may be provided either in the `PLAID-CLIENT-ID` header or as part of a request body.
    @[JSON::Field(key: "client_id", type: String?, default: nil, required: false, nullable: false, emit_null: false)]
    getter client_id : String? = nil

    # Your Plaid API `secret`. The `secret` is required and may be provided either in the `PLAID-SECRET` header or as part of a request body.
    @[JSON::Field(key: "secret", type: String?, default: nil, required: false, nullable: false, emit_null: false)]
    getter secret : String? = nil

    # Initializes the object
    # @param [Hash] attributes Model attributes in the form of hash
    def initialize(
      *,
      # Required properties
      @confirmed_hits : Array(String)? = nil,
      @dismissed_hits : Array(String)? = nil,
      @watchlist_screening_id : String? = nil,
      # Optional properties
      @comment : String? = nil,
      @client_id : String? = nil,
      @secret : String? = nil
    )
    end

    # Show invalid properties with the reasons. Usually used together with valid?
    # @return Array for valid properties with the reasons
    def list_invalid_properties : Array(String)
      invalid_properties = Array(String).new

      invalid_properties.push("\"confirmed_hits\" is required and cannot be null") if @confirmed_hits.nil?

      unless (_confirmed_hits = @confirmed_hits).nil?
      end
      invalid_properties.push("\"dismissed_hits\" is required and cannot be null") if @dismissed_hits.nil?

      unless (_dismissed_hits = @dismissed_hits).nil?
      end
      invalid_properties.push("\"watchlist_screening_id\" is required and cannot be null") if @watchlist_screening_id.nil?

      unless (_watchlist_screening_id = @watchlist_screening_id).nil?
      end
      unless (_comment = @comment).nil?
        if min_length_error = OpenApi::PrimitiveValidator.min_length_error("comment", _comment.to_s.size, MIN_LENGTH_FOR_COMMENT)
          invalid_properties.push(min_length_error)
        end
      end
      unless (_client_id = @client_id).nil?
      end
      unless (_secret = @secret).nil?
      end
      invalid_properties
    end

    # Check to see if the all the properties in the model are valid
    # @return true if the model is valid
    def valid? : Bool
      return false if @confirmed_hits.nil?
      unless (_confirmed_hits = @confirmed_hits).nil?
      end

      return false if @dismissed_hits.nil?
      unless (_dismissed_hits = @dismissed_hits).nil?
      end

      return false if @watchlist_screening_id.nil?
      unless (_watchlist_screening_id = @watchlist_screening_id).nil?
      end

      unless (_comment = @comment).nil?
        return false if _comment.to_s.size < MIN_LENGTH_FOR_COMMENT
      end

      unless (_client_id = @client_id).nil?
      end

      unless (_secret = @secret).nil?
      end

      true
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] confirmed_hits Object to be assigned
    def confirmed_hits=(new_value : Array(String)?)
      raise ArgumentError.new("\"confirmed_hits\" is required and cannot be null") if new_value.nil?
      unless new_value.nil?
      end

      @confirmed_hits = new_value
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] dismissed_hits Object to be assigned
    def dismissed_hits=(new_value : Array(String)?)
      raise ArgumentError.new("\"dismissed_hits\" is required and cannot be null") if new_value.nil?
      unless new_value.nil?
      end

      @dismissed_hits = new_value
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] watchlist_screening_id Object to be assigned
    def watchlist_screening_id=(new_value : String?)
      raise ArgumentError.new("\"watchlist_screening_id\" is required and cannot be null") if new_value.nil?
      unless new_value.nil?
      end

      @watchlist_screening_id = new_value
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] comment Object to be assigned
    def comment=(new_value : String?)
      unless new_value.nil?
        OpenApi::PrimitiveValidator.validate_min_length("comment", new_value.to_s.size, MIN_LENGTH_FOR_COMMENT)
      end

      @comment = new_value
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] client_id Object to be assigned
    def client_id=(new_value : String?)
      unless new_value.nil?
      end

      @client_id = new_value
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] secret Object to be assigned
    def secret=(new_value : String?)
      unless new_value.nil?
      end

      @secret = new_value
    end

    # Generates #hash and #== methods from all fields
    # #== @return [Bool]
    # #hash calculates hash code according to all attributes.
    # #hash @return [UInt64] Hash code
    def_equals_and_hash(@confirmed_hits, @dismissed_hits, @watchlist_screening_id, @comment, @comment_present, @client_id, @secret)
  end
end
