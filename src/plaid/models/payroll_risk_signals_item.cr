#  The Plaid API
#
# The Plaid REST API. Please see https://plaid.com/docs/api for more details.
#
# The version of the OpenAPI document: 2020-09-14_1.474.3
#
# Generated by: https://openapi-generator.tech
#

require "../../core"

require "./document_risk_signals_object"

module Plaid
  # Object containing fraud risk data pertaining to the Item linked as part of the verification.
  class PayrollRiskSignalsItem
    include JSON::Serializable
    include JSON::Serializable::Unmapped
    include OpenApi::Validatable
    include OpenApi::Json

    # Required Properties

    # The `item_id` of the Item associated with this webhook, warning, or error
    @[JSON::Field(key: "item_id", type: String?, default: nil, required: true, nullable: false, emit_null: false)]
    getter item_id : String? = nil

    # Array of payroll income document authenticity data retrieved for each of the user's accounts.
    @[JSON::Field(key: "verification_risk_signals", type: Array(DocumentRiskSignalsObject)?, default: nil, required: true, nullable: false, emit_null: false)]
    getter verification_risk_signals : Array(DocumentRiskSignalsObject)? = nil

    # End of Required Properties

    # Initializes the object
    # @param [Hash] attributes Model attributes in the form of hash
    def initialize(
      *,
      # Required properties
      @item_id : String? = nil,
      @verification_risk_signals : Array(DocumentRiskSignalsObject)? = nil
    )
    end

    # Show invalid properties with the reasons. Usually used together with valid?
    # @return Array for valid properties with the reasons
    def list_invalid_properties : Array(String)
      invalid_properties = Array(String).new

      invalid_properties.push("\"item_id\" is required and cannot be null") if @item_id.nil?

      unless (_item_id = @item_id).nil?
      end
      invalid_properties.push("\"verification_risk_signals\" is required and cannot be null") if @verification_risk_signals.nil?

      unless (_verification_risk_signals = @verification_risk_signals).nil?
      end
      invalid_properties
    end

    # Check to see if the all the properties in the model are valid
    # @return true if the model is valid
    def valid? : Bool
      return false if @item_id.nil?
      unless (_item_id = @item_id).nil?
      end

      return false if @verification_risk_signals.nil?
      unless (_verification_risk_signals = @verification_risk_signals).nil?
      end

      true
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] item_id Object to be assigned
    def item_id=(new_value : String?)
      raise ArgumentError.new("\"item_id\" is required and cannot be null") if new_value.nil?
      unless new_value.nil?
      end

      @item_id = new_value
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] verification_risk_signals Object to be assigned
    def verification_risk_signals=(new_value : Array(DocumentRiskSignalsObject)?)
      raise ArgumentError.new("\"verification_risk_signals\" is required and cannot be null") if new_value.nil?
      unless new_value.nil?
      end

      @verification_risk_signals = new_value
    end

    # Generates #hash and #== methods from all fields
    # #== @return [Bool]
    # #hash calculates hash code according to all attributes.
    # #hash @return [UInt64] Hash code
    def_equals_and_hash(@item_id, @verification_risk_signals)
  end
end
