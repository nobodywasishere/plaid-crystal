#  The Plaid API
#
# The Plaid REST API. Please see https://plaid.com/docs/api for more details.
#
# The version of the OpenAPI document: 2020-09-14_1.474.3
#
# Generated by: https://openapi-generator.tech
#

require "../../core"

module Plaid
  # An account attached to the connected Item.
  class LinkSessionSuccessMetadataAccount
    include JSON::Serializable
    include JSON::Serializable::Unmapped
    include OpenApi::Validatable
    include OpenApi::Json

    # Optional Properties

    # The Plaid `account_id`
    @[JSON::Field(key: "id", type: String?, default: nil, required: false, nullable: false, emit_null: false)]
    getter id : String? = nil

    # The official account name
    @[JSON::Field(key: "name", type: String?, default: nil, required: false, nullable: false, emit_null: false)]
    getter name : String? = nil

    # The last 2-4 alphanumeric characters of an account's official account number. Note that the mask may be non-unique between an Item's accounts. It may also not match the mask that the bank displays to the user.
    @[JSON::Field(key: "mask", type: String?, default: nil, required: false, nullable: true, emit_null: true, presence: true, ignore_serialize: mask.nil? && !mask_present?)]
    getter mask : String? = nil

    @[JSON::Field(ignore: true)]
    property? mask_present : Bool = false

    # The account type. See the [Account schema](/docs/api/accounts#account-type-schema) for a full list of possible values
    @[JSON::Field(key: "type", type: String?, default: nil, required: false, nullable: false, emit_null: false)]
    getter _type : String? = nil

    # The account subtype. See the [Account schema](/docs/api/accounts#account-type-schema) for a full list of possible values
    @[JSON::Field(key: "subtype", type: String?, default: nil, required: false, nullable: false, emit_null: false)]
    getter subtype : String? = nil

    # Indicates an Item's micro-deposit-based verification status. Possible values are:  `pending_automatic_verification`: The Item is pending automatic verification  `pending_manual_verification`: The Item is pending manual micro-deposit verification. Items remain in this state until the user successfully verifies the two amounts.  `automatically_verified`: The Item has successfully been automatically verified  `manually_verified`: The Item has successfully been manually verified  `verification_expired`: Plaid was unable to automatically verify the deposit within 7 calendar days and will no longer attempt to validate the Item. Users may retry by submitting their information again through Link.  `verification_failed`: The Item failed manual micro-deposit verification because the user exhausted all 3 verification attempts. Users may retry by submitting their information again through Link.  `database_matched`: The Item has successfully been verified using Plaid's data sources. Note: Database Match is currently a beta feature, please contact your account manager for more information.  `null`: micro-deposit-based verification is not being used for the Item.
    @[JSON::Field(key: "verification_status", type: String?, default: nil, required: false, nullable: true, emit_null: true, presence: true, ignore_serialize: verification_status.nil? && !verification_status_present?)]
    getter verification_status : String? = nil

    @[JSON::Field(ignore: true)]
    property? verification_status_present : Bool = false

    # If micro-deposit verification is being used, indicates whether the account being verified is a `business` or `personal` account.
    @[JSON::Field(key: "class_type", type: String?, default: nil, required: false, nullable: true, emit_null: true, presence: true, ignore_serialize: class_type.nil? && !class_type_present?)]
    getter class_type : String? = nil

    @[JSON::Field(ignore: true)]
    property? class_type_present : Bool = false

    # Initializes the object
    # @param [Hash] attributes Model attributes in the form of hash
    def initialize(
      *,
      # Optional properties
      @id : String? = nil,
      @name : String? = nil,
      @mask : String? = nil,
      @_type : String? = nil,
      @subtype : String? = nil,
      @verification_status : String? = nil,
      @class_type : String? = nil
    )
    end

    # Show invalid properties with the reasons. Usually used together with valid?
    # @return Array for valid properties with the reasons
    def list_invalid_properties : Array(String)
      invalid_properties = Array(String).new

      unless (_id = @id).nil?
      end
      unless (_name = @name).nil?
      end
      unless (_mask = @mask).nil?
      end
      unless (__type = @_type).nil?
      end
      unless (_subtype = @subtype).nil?
      end
      unless (_verification_status = @verification_status).nil?
      end
      unless (_class_type = @class_type).nil?
      end
      invalid_properties
    end

    # Check to see if the all the properties in the model are valid
    # @return true if the model is valid
    def valid? : Bool
      unless (_id = @id).nil?
      end

      unless (_name = @name).nil?
      end

      unless (_mask = @mask).nil?
      end

      unless (__type = @_type).nil?
      end

      unless (_subtype = @subtype).nil?
      end

      unless (_verification_status = @verification_status).nil?
      end

      unless (_class_type = @class_type).nil?
      end

      true
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] id Object to be assigned
    def id=(new_value : String?)
      unless new_value.nil?
      end

      @id = new_value
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] name Object to be assigned
    def name=(new_value : String?)
      unless new_value.nil?
      end

      @name = new_value
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] mask Object to be assigned
    def mask=(new_value : String?)
      unless new_value.nil?
      end

      @mask = new_value
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] _type Object to be assigned
    def _type=(new_value : String?)
      unless new_value.nil?
      end

      @_type = new_value
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] subtype Object to be assigned
    def subtype=(new_value : String?)
      unless new_value.nil?
      end

      @subtype = new_value
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] verification_status Object to be assigned
    def verification_status=(new_value : String?)
      unless new_value.nil?
      end

      @verification_status = new_value
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] class_type Object to be assigned
    def class_type=(new_value : String?)
      unless new_value.nil?
      end

      @class_type = new_value
    end

    # Generates #hash and #== methods from all fields
    # #== @return [Bool]
    # #hash calculates hash code according to all attributes.
    # #hash @return [UInt64] Hash code
    def_equals_and_hash(@id, @name, @mask, @mask_present, @_type, @subtype, @verification_status, @verification_status_present, @class_type, @class_type_present)
  end
end
