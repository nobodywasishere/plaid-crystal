#  The Plaid API
#
# The Plaid REST API. Please see https://plaid.com/docs/api for more details.
#
# The version of the OpenAPI document: 2020-09-14_1.474.3
#
# Generated by: https://openapi-generator.tech
#

require "../../core"

require "./w2"

module Plaid
  # Data about an official document used to report the user's income to the IRS.
  class Taxform
    include JSON::Serializable
    include JSON::Serializable::Unmapped
    include OpenApi::Validatable
    include OpenApi::Json

    # Required Properties

    # The type of tax document. Currently, the only supported value is `w2`.
    @[JSON::Field(key: "document_type", type: String?, default: nil, required: true, nullable: false, emit_null: false)]
    getter document_type : String? = nil

    # End of Required Properties

    # Optional Properties

    # An identifier of the document referenced by the document metadata.
    @[JSON::Field(key: "doc_id", type: String?, default: nil, required: false, nullable: false, emit_null: false)]
    getter doc_id : String? = nil

    @[JSON::Field(key: "w2", type: W2?, default: nil, required: false, nullable: false, emit_null: false)]
    getter w2 : W2? = nil

    # Initializes the object
    # @param [Hash] attributes Model attributes in the form of hash
    def initialize(
      *,
      # Required properties
      @document_type : String? = nil,
      # Optional properties
      @doc_id : String? = nil,
      @w2 : W2? = nil
    )
    end

    # Show invalid properties with the reasons. Usually used together with valid?
    # @return Array for valid properties with the reasons
    def list_invalid_properties : Array(String)
      invalid_properties = Array(String).new

      invalid_properties.push("\"document_type\" is required and cannot be null") if @document_type.nil?

      unless (_document_type = @document_type).nil?
      end
      unless (_doc_id = @doc_id).nil?
      end
      unless (_w2 = @w2).nil?
      end
      invalid_properties
    end

    # Check to see if the all the properties in the model are valid
    # @return true if the model is valid
    def valid? : Bool
      return false if @document_type.nil?
      unless (_document_type = @document_type).nil?
      end

      unless (_doc_id = @doc_id).nil?
      end

      unless (_w2 = @w2).nil?
      end

      true
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] document_type Object to be assigned
    def document_type=(new_value : String?)
      raise ArgumentError.new("\"document_type\" is required and cannot be null") if new_value.nil?
      unless new_value.nil?
      end

      @document_type = new_value
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] doc_id Object to be assigned
    def doc_id=(new_value : String?)
      unless new_value.nil?
      end

      @doc_id = new_value
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] w2 Object to be assigned
    def w2=(new_value : W2?)
      unless new_value.nil?
      end

      @w2 = new_value
    end

    # Generates #hash and #== methods from all fields
    # #== @return [Bool]
    # #hash calculates hash code according to all attributes.
    # #hash @return [UInt64] Hash code
    def_equals_and_hash(@document_type, @doc_id, @w2)
  end
end
