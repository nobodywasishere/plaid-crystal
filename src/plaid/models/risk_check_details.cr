#  The Plaid API
#
# The Plaid REST API. Please see https://plaid.com/docs/api for more details.
#
# The version of the OpenAPI document: 2020-09-14_1.474.3
#
# Generated by: https://openapi-generator.tech
#

require "../../core"

require "./identity_verification_step_status"
require "./risk_check_behavior"
require "./risk_check_device"
require "./risk_check_email"
require "./risk_check_identity_abuse_signals"
require "./risk_check_phone"

module Plaid
  # Additional information for the `risk_check` step.
  class RiskCheckDetails
    include JSON::Serializable
    include JSON::Serializable::Unmapped
    include OpenApi::Validatable
    include OpenApi::Json

    # Required Properties

    @[JSON::Field(key: "status", type: Plaid::IdentityVerificationStepStatus?, default: nil, required: true, nullable: false, emit_null: false)]
    getter status : Plaid::IdentityVerificationStepStatus? = nil

    @[JSON::Field(key: "behavior", type: RiskCheckBehavior?, default: nil, required: true, nullable: true, emit_null: true)]
    getter behavior : RiskCheckBehavior? = nil

    @[JSON::Field(key: "email", type: RiskCheckEmail?, default: nil, required: true, nullable: true, emit_null: true)]
    getter email : RiskCheckEmail? = nil

    @[JSON::Field(key: "phone", type: RiskCheckPhone?, default: nil, required: true, nullable: true, emit_null: true)]
    getter phone : RiskCheckPhone? = nil

    # Array of result summary objects specifying values for `device` attributes of risk check.
    @[JSON::Field(key: "devices", type: Array(RiskCheckDevice)?, default: nil, required: true, nullable: false, emit_null: false)]
    getter devices : Array(RiskCheckDevice)? = nil

    @[JSON::Field(key: "identity_abuse_signals", type: RiskCheckIdentityAbuseSignals?, default: nil, required: true, nullable: true, emit_null: true)]
    getter identity_abuse_signals : RiskCheckIdentityAbuseSignals? = nil

    # End of Required Properties

    # Initializes the object
    # @param [Hash] attributes Model attributes in the form of hash
    def initialize(
      *,
      # Required properties
      @status : Plaid::IdentityVerificationStepStatus? = nil,
      @behavior : RiskCheckBehavior? = nil,
      @email : RiskCheckEmail? = nil,
      @phone : RiskCheckPhone? = nil,
      @devices : Array(RiskCheckDevice)? = nil,
      @identity_abuse_signals : RiskCheckIdentityAbuseSignals? = nil
    )
    end

    # Show invalid properties with the reasons. Usually used together with valid?
    # @return Array for valid properties with the reasons
    def list_invalid_properties : Array(String)
      invalid_properties = Array(String).new

      invalid_properties.push("\"status\" is required and cannot be null") if @status.nil?

      unless (_status = @status).nil?
        invalid_properties.push(_status.error_message) if !_status.valid?
      end
      unless (_behavior = @behavior).nil?
      end
      unless (_email = @email).nil?
      end
      unless (_phone = @phone).nil?
      end
      invalid_properties.push("\"devices\" is required and cannot be null") if @devices.nil?

      unless (_devices = @devices).nil?
      end
      unless (_identity_abuse_signals = @identity_abuse_signals).nil?
      end
      invalid_properties
    end

    # Check to see if the all the properties in the model are valid
    # @return true if the model is valid
    def valid? : Bool
      return false if @status.nil?
      unless (_status = @status).nil?
        return false if !_status.valid?
      end

      unless (_behavior = @behavior).nil?
      end

      unless (_email = @email).nil?
      end

      unless (_phone = @phone).nil?
      end

      return false if @devices.nil?
      unless (_devices = @devices).nil?
      end

      unless (_identity_abuse_signals = @identity_abuse_signals).nil?
      end

      true
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] status Object to be assigned
    def status=(new_value : Plaid::IdentityVerificationStepStatus?)
      raise ArgumentError.new("\"status\" is required and cannot be null") if new_value.nil?
      unless new_value.nil?
        new_value.validate
      end

      @status = new_value
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] behavior Object to be assigned
    def behavior=(new_value : RiskCheckBehavior?)
      unless new_value.nil?
      end

      @behavior = new_value
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] email Object to be assigned
    def email=(new_value : RiskCheckEmail?)
      unless new_value.nil?
      end

      @email = new_value
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] phone Object to be assigned
    def phone=(new_value : RiskCheckPhone?)
      unless new_value.nil?
      end

      @phone = new_value
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] devices Object to be assigned
    def devices=(new_value : Array(RiskCheckDevice)?)
      raise ArgumentError.new("\"devices\" is required and cannot be null") if new_value.nil?
      unless new_value.nil?
      end

      @devices = new_value
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] identity_abuse_signals Object to be assigned
    def identity_abuse_signals=(new_value : RiskCheckIdentityAbuseSignals?)
      unless new_value.nil?
      end

      @identity_abuse_signals = new_value
    end

    # Generates #hash and #== methods from all fields
    # #== @return [Bool]
    # #hash calculates hash code according to all attributes.
    # #hash @return [UInt64] Hash code
    def_equals_and_hash(@status, @behavior, @email, @phone, @devices, @identity_abuse_signals)
  end
end
