#  The Plaid API
#
# The Plaid REST API. Please see https://plaid.com/docs/api for more details.
#
# The version of the OpenAPI document: 2020-09-14_1.474.3
#
# Generated by: https://openapi-generator.tech
#

require "../../core"

require "./pay"
require "./total_canonical_description"

module Plaid
  # An object representing both the current pay period and year to date amount for a category.
  class Total
    include JSON::Serializable
    include JSON::Serializable::Unmapped
    include OpenApi::Validatable
    include OpenApi::Json

    # Optional Properties

    @[JSON::Field(key: "canonical_description", type: Plaid::TotalCanonicalDescription?, default: nil, required: false, nullable: true, emit_null: true, presence: true, ignore_serialize: canonical_description.nil? && !canonical_description_present?)]
    getter canonical_description : Plaid::TotalCanonicalDescription? = nil

    @[JSON::Field(ignore: true)]
    property? canonical_description_present : Bool = false

    # Text of the line item as printed on the paystub.
    @[JSON::Field(key: "description", type: String?, default: nil, required: false, nullable: true, emit_null: true, presence: true, ignore_serialize: description.nil? && !description_present?)]
    getter description : String? = nil

    @[JSON::Field(ignore: true)]
    property? description_present : Bool = false

    @[JSON::Field(key: "current_pay", type: Pay?, default: nil, required: false, nullable: false, emit_null: false)]
    getter current_pay : Pay? = nil

    @[JSON::Field(key: "ytd_pay", type: Pay?, default: nil, required: false, nullable: false, emit_null: false)]
    getter ytd_pay : Pay? = nil

    # Initializes the object
    # @param [Hash] attributes Model attributes in the form of hash
    def initialize(
      *,
      # Optional properties
      @canonical_description : Plaid::TotalCanonicalDescription? = nil,
      @description : String? = nil,
      @current_pay : Pay? = nil,
      @ytd_pay : Pay? = nil
    )
    end

    # Show invalid properties with the reasons. Usually used together with valid?
    # @return Array for valid properties with the reasons
    def list_invalid_properties : Array(String)
      invalid_properties = Array(String).new

      unless (_canonical_description = @canonical_description).nil?
        invalid_properties.push(_canonical_description.error_message) if !_canonical_description.valid?
      end
      unless (_description = @description).nil?
      end
      unless (_current_pay = @current_pay).nil?
      end
      unless (_ytd_pay = @ytd_pay).nil?
      end
      invalid_properties
    end

    # Check to see if the all the properties in the model are valid
    # @return true if the model is valid
    def valid? : Bool
      unless (_canonical_description = @canonical_description).nil?
        return false if !_canonical_description.valid?
      end

      unless (_description = @description).nil?
      end

      unless (_current_pay = @current_pay).nil?
      end

      unless (_ytd_pay = @ytd_pay).nil?
      end

      true
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] canonical_description Object to be assigned
    def canonical_description=(new_value : Plaid::TotalCanonicalDescription?)
      unless new_value.nil?
        new_value.validate
      end

      @canonical_description = new_value
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] description Object to be assigned
    def description=(new_value : String?)
      unless new_value.nil?
      end

      @description = new_value
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] current_pay Object to be assigned
    def current_pay=(new_value : Pay?)
      unless new_value.nil?
      end

      @current_pay = new_value
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] ytd_pay Object to be assigned
    def ytd_pay=(new_value : Pay?)
      unless new_value.nil?
      end

      @ytd_pay = new_value
    end

    # Generates #hash and #== methods from all fields
    # #== @return [Bool]
    # #hash calculates hash code according to all attributes.
    # #hash @return [UInt64] Hash code
    def_equals_and_hash(@canonical_description, @canonical_description_present, @description, @description_present, @current_pay, @ytd_pay)
  end
end
