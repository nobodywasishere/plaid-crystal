#  The Plaid API
#
# The Plaid REST API. Please see https://plaid.com/docs/api for more details.
#
# The version of the OpenAPI document: 2020-09-14_1.474.3
#
# Generated by: https://openapi-generator.tech
#

require "../../core"

require "./ach_class"
require "./bank_transfer_network"
require "./bank_transfer_type"
require "./bank_transfer_user"

module Plaid
  # Defines the request schema for `/processor/bank_transfer/create`
  class ProcessorBankTransferCreateRequest
    include JSON::Serializable
    include JSON::Serializable::Unmapped
    include OpenApi::Validatable
    include OpenApi::Json

    # Required Properties

    # A random key provided by the client, per unique bank transfer. Maximum of 50 characters.  The API supports idempotency for safely retrying requests without accidentally performing the same operation twice. For example, if a request to create a bank transfer fails due to a network connection error, you can retry the request with the same idempotency key to guarantee that only a single bank transfer is created.
    @[JSON::Field(key: "idempotency_key", type: String?, default: nil, required: true, nullable: false, emit_null: false)]
    getter idempotency_key : String? = nil
    MAX_LENGTH_FOR_IDEMPOTENCY_KEY = 50

    # The processor token obtained from the Plaid integration partner. Processor tokens are in the format: `processor-<environment>-<identifier>`
    @[JSON::Field(key: "processor_token", type: String?, default: nil, required: true, nullable: false, emit_null: false)]
    getter processor_token : String? = nil

    @[JSON::Field(key: "type", type: Plaid::BankTransferType?, default: nil, required: true, nullable: false, emit_null: false)]
    getter _type : Plaid::BankTransferType? = nil

    @[JSON::Field(key: "network", type: Plaid::BankTransferNetwork?, default: nil, required: true, nullable: false, emit_null: false)]
    getter network : Plaid::BankTransferNetwork? = nil

    # The amount of the bank transfer (decimal string with two digits of precision e.g. \"10.00\").
    @[JSON::Field(key: "amount", type: String?, default: nil, required: true, nullable: false, emit_null: false)]
    getter amount : String? = nil

    # The currency of the transfer amount – should be set to \"USD\".
    @[JSON::Field(key: "iso_currency_code", type: String?, default: nil, required: true, nullable: false, emit_null: false)]
    getter iso_currency_code : String? = nil

    # The transfer description. Maximum of 10 characters.
    @[JSON::Field(key: "description", type: String?, default: nil, required: true, nullable: false, emit_null: false)]
    getter description : String? = nil
    MAX_LENGTH_FOR_DESCRIPTION = 10

    @[JSON::Field(key: "user", type: BankTransferUser?, default: nil, required: true, nullable: false, emit_null: false)]
    getter user : BankTransferUser? = nil

    # End of Required Properties

    # Optional Properties

    # Your Plaid API `client_id`. The `client_id` is required and may be provided either in the `PLAID-CLIENT-ID` header or as part of a request body.
    @[JSON::Field(key: "client_id", type: String?, default: nil, required: false, nullable: false, emit_null: false)]
    getter client_id : String? = nil

    # Your Plaid API `secret`. The `secret` is required and may be provided either in the `PLAID-SECRET` header or as part of a request body.
    @[JSON::Field(key: "secret", type: String?, default: nil, required: false, nullable: false, emit_null: false)]
    getter secret : String? = nil

    @[JSON::Field(key: "ach_class", type: Plaid::ACHClass?, default: nil, required: false, nullable: false, emit_null: false)]
    getter ach_class : Plaid::ACHClass? = nil

    # An arbitrary string provided by the client for storage with the bank transfer. May be up to 100 characters.
    @[JSON::Field(key: "custom_tag", type: String?, default: nil, required: false, nullable: true, emit_null: true, presence: true, ignore_serialize: custom_tag.nil? && !custom_tag_present?)]
    getter custom_tag : String? = nil
    MAX_LENGTH_FOR_CUSTOM_TAG = 100

    @[JSON::Field(ignore: true)]
    property? custom_tag_present : Bool = false

    # The Metadata object is a mapping of client-provided string fields to any string value. The following limitations apply: The JSON values must be Strings (no nested JSON objects allowed) Only ASCII characters may be used Maximum of 50 key/value pairs Maximum key length of 40 characters Maximum value length of 500 characters
    @[JSON::Field(key: "metadata", type: Hash(String, String)?, default: nil, required: false, nullable: true, emit_null: true, presence: true, ignore_serialize: metadata.nil? && !metadata_present?)]
    getter metadata : Hash(String, String)? = nil
    MAX_ITEMS_FOR_METADATA = 50

    @[JSON::Field(ignore: true)]
    property? metadata_present : Bool = false

    # Plaid’s unique identifier for the origination account for this transfer. If you have more than one origination account, this value must be specified.
    @[JSON::Field(key: "origination_account_id", type: String?, default: nil, required: false, nullable: true, emit_null: true, presence: true, ignore_serialize: origination_account_id.nil? && !origination_account_id_present?)]
    getter origination_account_id : String? = nil

    @[JSON::Field(ignore: true)]
    property? origination_account_id_present : Bool = false

    # Initializes the object
    # @param [Hash] attributes Model attributes in the form of hash
    def initialize(
      *,
      # Required properties
      @idempotency_key : String? = nil,
      @processor_token : String? = nil,
      @_type : Plaid::BankTransferType? = nil,
      @network : Plaid::BankTransferNetwork? = nil,
      @amount : String? = nil,
      @iso_currency_code : String? = nil,
      @description : String? = nil,
      @user : BankTransferUser? = nil,
      # Optional properties
      @client_id : String? = nil,
      @secret : String? = nil,
      @ach_class : Plaid::ACHClass? = nil,
      @custom_tag : String? = nil,
      @metadata : Hash(String, String)? = nil,
      @origination_account_id : String? = nil
    )
    end

    # Show invalid properties with the reasons. Usually used together with valid?
    # @return Array for valid properties with the reasons
    def list_invalid_properties : Array(String)
      invalid_properties = Array(String).new

      invalid_properties.push("\"idempotency_key\" is required and cannot be null") if @idempotency_key.nil?

      unless (_idempotency_key = @idempotency_key).nil?
        if max_length_error = OpenApi::PrimitiveValidator.max_length_error("idempotency_key", _idempotency_key.to_s.size, MAX_LENGTH_FOR_IDEMPOTENCY_KEY)
          invalid_properties.push(max_length_error)
        end
      end
      invalid_properties.push("\"processor_token\" is required and cannot be null") if @processor_token.nil?

      unless (_processor_token = @processor_token).nil?
      end
      invalid_properties.push("\"_type\" is required and cannot be null") if @_type.nil?

      unless (__type = @_type).nil?
        invalid_properties.push(__type.error_message) if !__type.valid?
      end
      invalid_properties.push("\"network\" is required and cannot be null") if @network.nil?

      unless (_network = @network).nil?
        invalid_properties.push(_network.error_message) if !_network.valid?
      end
      invalid_properties.push("\"amount\" is required and cannot be null") if @amount.nil?

      unless (_amount = @amount).nil?
      end
      invalid_properties.push("\"iso_currency_code\" is required and cannot be null") if @iso_currency_code.nil?

      unless (_iso_currency_code = @iso_currency_code).nil?
      end
      invalid_properties.push("\"description\" is required and cannot be null") if @description.nil?

      unless (_description = @description).nil?
        if max_length_error = OpenApi::PrimitiveValidator.max_length_error("description", _description.to_s.size, MAX_LENGTH_FOR_DESCRIPTION)
          invalid_properties.push(max_length_error)
        end
      end
      invalid_properties.push("\"user\" is required and cannot be null") if @user.nil?

      unless (_user = @user).nil?
      end
      unless (_client_id = @client_id).nil?
      end
      unless (_secret = @secret).nil?
      end
      unless (_ach_class = @ach_class).nil?
        invalid_properties.push(_ach_class.error_message) if !_ach_class.valid?
      end
      unless (_custom_tag = @custom_tag).nil?
        if max_length_error = OpenApi::PrimitiveValidator.max_length_error("custom_tag", _custom_tag.to_s.size, MAX_LENGTH_FOR_CUSTOM_TAG)
          invalid_properties.push(max_length_error)
        end
      end
      unless (_metadata = @metadata).nil?
        if max_items_error = OpenApi::PrimitiveValidator.max_items_error("metadata", _metadata.size, MAX_ITEMS_FOR_METADATA)
          invalid_properties.push(max_items_error)
        end
      end
      unless (_origination_account_id = @origination_account_id).nil?
      end
      invalid_properties
    end

    # Check to see if the all the properties in the model are valid
    # @return true if the model is valid
    def valid? : Bool
      return false if @idempotency_key.nil?
      unless (_idempotency_key = @idempotency_key).nil?
        return false if _idempotency_key.to_s.size > MAX_LENGTH_FOR_IDEMPOTENCY_KEY
      end

      return false if @processor_token.nil?
      unless (_processor_token = @processor_token).nil?
      end

      return false if @_type.nil?
      unless (__type = @_type).nil?
        return false if !__type.valid?
      end

      return false if @network.nil?
      unless (_network = @network).nil?
        return false if !_network.valid?
      end

      return false if @amount.nil?
      unless (_amount = @amount).nil?
      end

      return false if @iso_currency_code.nil?
      unless (_iso_currency_code = @iso_currency_code).nil?
      end

      return false if @description.nil?
      unless (_description = @description).nil?
        return false if _description.to_s.size > MAX_LENGTH_FOR_DESCRIPTION
      end

      return false if @user.nil?
      unless (_user = @user).nil?
      end

      unless (_client_id = @client_id).nil?
      end

      unless (_secret = @secret).nil?
      end

      unless (_ach_class = @ach_class).nil?
        return false if !_ach_class.valid?
      end

      unless (_custom_tag = @custom_tag).nil?
        return false if _custom_tag.to_s.size > MAX_LENGTH_FOR_CUSTOM_TAG
      end

      unless (_metadata = @metadata).nil?
        return false if _metadata.size > MAX_ITEMS_FOR_METADATA
      end

      unless (_origination_account_id = @origination_account_id).nil?
      end

      true
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] idempotency_key Object to be assigned
    def idempotency_key=(new_value : String?)
      raise ArgumentError.new("\"idempotency_key\" is required and cannot be null") if new_value.nil?
      unless new_value.nil?
        OpenApi::PrimitiveValidator.validate_max_length("idempotency_key", new_value.to_s.size, MAX_LENGTH_FOR_IDEMPOTENCY_KEY)
      end

      @idempotency_key = new_value
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] processor_token Object to be assigned
    def processor_token=(new_value : String?)
      raise ArgumentError.new("\"processor_token\" is required and cannot be null") if new_value.nil?
      unless new_value.nil?
      end

      @processor_token = new_value
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] _type Object to be assigned
    def _type=(new_value : Plaid::BankTransferType?)
      raise ArgumentError.new("\"_type\" is required and cannot be null") if new_value.nil?
      unless new_value.nil?
        new_value.validate
      end

      @_type = new_value
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] network Object to be assigned
    def network=(new_value : Plaid::BankTransferNetwork?)
      raise ArgumentError.new("\"network\" is required and cannot be null") if new_value.nil?
      unless new_value.nil?
        new_value.validate
      end

      @network = new_value
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] amount Object to be assigned
    def amount=(new_value : String?)
      raise ArgumentError.new("\"amount\" is required and cannot be null") if new_value.nil?
      unless new_value.nil?
      end

      @amount = new_value
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] iso_currency_code Object to be assigned
    def iso_currency_code=(new_value : String?)
      raise ArgumentError.new("\"iso_currency_code\" is required and cannot be null") if new_value.nil?
      unless new_value.nil?
      end

      @iso_currency_code = new_value
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] description Object to be assigned
    def description=(new_value : String?)
      raise ArgumentError.new("\"description\" is required and cannot be null") if new_value.nil?
      unless new_value.nil?
        OpenApi::PrimitiveValidator.validate_max_length("description", new_value.to_s.size, MAX_LENGTH_FOR_DESCRIPTION)
      end

      @description = new_value
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] user Object to be assigned
    def user=(new_value : BankTransferUser?)
      raise ArgumentError.new("\"user\" is required and cannot be null") if new_value.nil?
      unless new_value.nil?
      end

      @user = new_value
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] client_id Object to be assigned
    def client_id=(new_value : String?)
      unless new_value.nil?
      end

      @client_id = new_value
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] secret Object to be assigned
    def secret=(new_value : String?)
      unless new_value.nil?
      end

      @secret = new_value
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] ach_class Object to be assigned
    def ach_class=(new_value : Plaid::ACHClass?)
      unless new_value.nil?
        new_value.validate
      end

      @ach_class = new_value
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] custom_tag Object to be assigned
    def custom_tag=(new_value : String?)
      unless new_value.nil?
        OpenApi::PrimitiveValidator.validate_max_length("custom_tag", new_value.to_s.size, MAX_LENGTH_FOR_CUSTOM_TAG)
      end

      @custom_tag = new_value
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] metadata Object to be assigned
    def metadata=(new_value : Hash(String, String)?)
      unless new_value.nil?
        OpenApi::PrimitiveValidator.validate_max_items("metadata", new_value.size, MAX_ITEMS_FOR_METADATA)
      end

      @metadata = new_value
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] origination_account_id Object to be assigned
    def origination_account_id=(new_value : String?)
      unless new_value.nil?
      end

      @origination_account_id = new_value
    end

    # Generates #hash and #== methods from all fields
    # #== @return [Bool]
    # #hash calculates hash code according to all attributes.
    # #hash @return [UInt64] Hash code
    def_equals_and_hash(@idempotency_key, @processor_token, @_type, @network, @amount, @iso_currency_code, @description, @user, @client_id, @secret, @ach_class, @custom_tag, @custom_tag_present, @metadata, @metadata_present, @origination_account_id, @origination_account_id_present)
  end
end
