#  The Plaid API
#
# The Plaid REST API. Please see https://plaid.com/docs/api for more details.
#
# The version of the OpenAPI document: 2020-09-14_1.474.3
#
# Generated by: https://openapi-generator.tech
#

require "../../core"

module Plaid
  # Specifies options for initializing Link for use with the Payment Initiation (Europe) product. This field is required if `payment_initiation` is included in the `products` array. Either `payment_id` or `consent_id` must be provided.
  class LinkTokenCreateRequestPaymentInitiation
    include JSON::Serializable
    include JSON::Serializable::Unmapped
    include OpenApi::Validatable
    include OpenApi::Json

    # Optional Properties

    # The `payment_id` provided by the `/payment_initiation/payment/create` endpoint.
    @[JSON::Field(key: "payment_id", type: String?, default: nil, required: false, nullable: false, emit_null: false)]
    getter payment_id : String? = nil

    # The `consent_id` provided by the `/payment_initiation/consent/create` endpoint.
    @[JSON::Field(key: "consent_id", type: String?, default: nil, required: false, nullable: false, emit_null: false)]
    getter consent_id : String? = nil

    # Initializes the object
    # @param [Hash] attributes Model attributes in the form of hash
    def initialize(
      *,
      # Optional properties
      @payment_id : String? = nil,
      @consent_id : String? = nil
    )
    end

    # Show invalid properties with the reasons. Usually used together with valid?
    # @return Array for valid properties with the reasons
    def list_invalid_properties : Array(String)
      invalid_properties = Array(String).new

      unless (_payment_id = @payment_id).nil?
      end
      unless (_consent_id = @consent_id).nil?
      end
      invalid_properties
    end

    # Check to see if the all the properties in the model are valid
    # @return true if the model is valid
    def valid? : Bool
      unless (_payment_id = @payment_id).nil?
      end

      unless (_consent_id = @consent_id).nil?
      end

      true
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] payment_id Object to be assigned
    def payment_id=(new_value : String?)
      unless new_value.nil?
      end

      @payment_id = new_value
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] consent_id Object to be assigned
    def consent_id=(new_value : String?)
      unless new_value.nil?
      end

      @consent_id = new_value
    end

    # Generates #hash and #== methods from all fields
    # #== @return [Bool]
    # #hash calculates hash code according to all attributes.
    # #hash @return [UInt64] Hash code
    def_equals_and_hash(@payment_id, @consent_id)
  end
end
