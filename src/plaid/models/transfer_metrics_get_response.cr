#  The Plaid API
#
# The Plaid REST API. Please see https://plaid.com/docs/api for more details.
#
# The version of the OpenAPI document: 2020-09-14_1.474.3
#
# Generated by: https://openapi-generator.tech
#

require "../../core"

module Plaid
  # Defines the response schema for `/transfer/metrics/get`
  class TransferMetricsGetResponse
    include JSON::Serializable
    include JSON::Serializable::Unmapped
    include OpenApi::Validatable
    include OpenApi::Json

    # Required Properties

    # A unique identifier for the request, which can be used for troubleshooting. This identifier, like all Plaid identifiers, is case sensitive.
    @[JSON::Field(key: "request_id", type: String?, default: nil, required: true, nullable: false, emit_null: false)]
    getter request_id : String? = nil

    # Sum of dollar amount of debit transfers in last 24 hours (decimal string with two digits of precision e.g. \"10.00\").
    @[JSON::Field(key: "daily_debit_transfer_volume", type: String?, default: nil, required: true, nullable: false, emit_null: false)]
    getter daily_debit_transfer_volume : String? = nil

    # Sum of dollar amount of credit transfers in last 24 hours (decimal string with two digits of precision e.g. \"10.00\").
    @[JSON::Field(key: "daily_credit_transfer_volume", type: String?, default: nil, required: true, nullable: false, emit_null: false)]
    getter daily_credit_transfer_volume : String? = nil

    # Sum of dollar amount of credit and debit transfers in current calendar month (decimal string with two digits of precision e.g. \"10.00\").
    @[JSON::Field(key: "monthly_transfer_volume", type: String?, default: nil, required: true, nullable: false, emit_null: false)]
    getter monthly_transfer_volume : String? = nil

    # Sum of dollar amount of debit transfers in current calendar month (decimal string with two digits of precision e.g. \"10.00\").
    @[JSON::Field(key: "monthly_debit_transfer_volume", type: String?, default: nil, required: true, nullable: false, emit_null: false)]
    getter monthly_debit_transfer_volume : String? = nil

    # Sum of dollar amount of credit transfers in current calendar month (decimal string with two digits of precision e.g. \"10.00\").
    @[JSON::Field(key: "monthly_credit_transfer_volume", type: String?, default: nil, required: true, nullable: false, emit_null: false)]
    getter monthly_credit_transfer_volume : String? = nil

    # The currency of the dollar amount, e.g. \"USD\".
    @[JSON::Field(key: "iso_currency_code", type: String?, default: nil, required: true, nullable: false, emit_null: false)]
    getter iso_currency_code : String? = nil

    # End of Required Properties

    # Initializes the object
    # @param [Hash] attributes Model attributes in the form of hash
    def initialize(
      *,
      # Required properties
      @request_id : String? = nil,
      @daily_debit_transfer_volume : String? = nil,
      @daily_credit_transfer_volume : String? = nil,
      @monthly_transfer_volume : String? = nil,
      @monthly_debit_transfer_volume : String? = nil,
      @monthly_credit_transfer_volume : String? = nil,
      @iso_currency_code : String? = nil
    )
    end

    # Show invalid properties with the reasons. Usually used together with valid?
    # @return Array for valid properties with the reasons
    def list_invalid_properties : Array(String)
      invalid_properties = Array(String).new

      invalid_properties.push("\"request_id\" is required and cannot be null") if @request_id.nil?

      unless (_request_id = @request_id).nil?
      end
      invalid_properties.push("\"daily_debit_transfer_volume\" is required and cannot be null") if @daily_debit_transfer_volume.nil?

      unless (_daily_debit_transfer_volume = @daily_debit_transfer_volume).nil?
      end
      invalid_properties.push("\"daily_credit_transfer_volume\" is required and cannot be null") if @daily_credit_transfer_volume.nil?

      unless (_daily_credit_transfer_volume = @daily_credit_transfer_volume).nil?
      end
      invalid_properties.push("\"monthly_transfer_volume\" is required and cannot be null") if @monthly_transfer_volume.nil?

      unless (_monthly_transfer_volume = @monthly_transfer_volume).nil?
      end
      invalid_properties.push("\"monthly_debit_transfer_volume\" is required and cannot be null") if @monthly_debit_transfer_volume.nil?

      unless (_monthly_debit_transfer_volume = @monthly_debit_transfer_volume).nil?
      end
      invalid_properties.push("\"monthly_credit_transfer_volume\" is required and cannot be null") if @monthly_credit_transfer_volume.nil?

      unless (_monthly_credit_transfer_volume = @monthly_credit_transfer_volume).nil?
      end
      invalid_properties.push("\"iso_currency_code\" is required and cannot be null") if @iso_currency_code.nil?

      unless (_iso_currency_code = @iso_currency_code).nil?
      end
      invalid_properties
    end

    # Check to see if the all the properties in the model are valid
    # @return true if the model is valid
    def valid? : Bool
      return false if @request_id.nil?
      unless (_request_id = @request_id).nil?
      end

      return false if @daily_debit_transfer_volume.nil?
      unless (_daily_debit_transfer_volume = @daily_debit_transfer_volume).nil?
      end

      return false if @daily_credit_transfer_volume.nil?
      unless (_daily_credit_transfer_volume = @daily_credit_transfer_volume).nil?
      end

      return false if @monthly_transfer_volume.nil?
      unless (_monthly_transfer_volume = @monthly_transfer_volume).nil?
      end

      return false if @monthly_debit_transfer_volume.nil?
      unless (_monthly_debit_transfer_volume = @monthly_debit_transfer_volume).nil?
      end

      return false if @monthly_credit_transfer_volume.nil?
      unless (_monthly_credit_transfer_volume = @monthly_credit_transfer_volume).nil?
      end

      return false if @iso_currency_code.nil?
      unless (_iso_currency_code = @iso_currency_code).nil?
      end

      true
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] request_id Object to be assigned
    def request_id=(new_value : String?)
      raise ArgumentError.new("\"request_id\" is required and cannot be null") if new_value.nil?
      unless new_value.nil?
      end

      @request_id = new_value
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] daily_debit_transfer_volume Object to be assigned
    def daily_debit_transfer_volume=(new_value : String?)
      raise ArgumentError.new("\"daily_debit_transfer_volume\" is required and cannot be null") if new_value.nil?
      unless new_value.nil?
      end

      @daily_debit_transfer_volume = new_value
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] daily_credit_transfer_volume Object to be assigned
    def daily_credit_transfer_volume=(new_value : String?)
      raise ArgumentError.new("\"daily_credit_transfer_volume\" is required and cannot be null") if new_value.nil?
      unless new_value.nil?
      end

      @daily_credit_transfer_volume = new_value
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] monthly_transfer_volume Object to be assigned
    def monthly_transfer_volume=(new_value : String?)
      raise ArgumentError.new("\"monthly_transfer_volume\" is required and cannot be null") if new_value.nil?
      unless new_value.nil?
      end

      @monthly_transfer_volume = new_value
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] monthly_debit_transfer_volume Object to be assigned
    def monthly_debit_transfer_volume=(new_value : String?)
      raise ArgumentError.new("\"monthly_debit_transfer_volume\" is required and cannot be null") if new_value.nil?
      unless new_value.nil?
      end

      @monthly_debit_transfer_volume = new_value
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] monthly_credit_transfer_volume Object to be assigned
    def monthly_credit_transfer_volume=(new_value : String?)
      raise ArgumentError.new("\"monthly_credit_transfer_volume\" is required and cannot be null") if new_value.nil?
      unless new_value.nil?
      end

      @monthly_credit_transfer_volume = new_value
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] iso_currency_code Object to be assigned
    def iso_currency_code=(new_value : String?)
      raise ArgumentError.new("\"iso_currency_code\" is required and cannot be null") if new_value.nil?
      unless new_value.nil?
      end

      @iso_currency_code = new_value
    end

    # Generates #hash and #== methods from all fields
    # #== @return [Bool]
    # #hash calculates hash code according to all attributes.
    # #hash @return [UInt64] Hash code
    def_equals_and_hash(@request_id, @daily_debit_transfer_volume, @daily_credit_transfer_volume, @monthly_transfer_volume, @monthly_debit_transfer_volume, @monthly_credit_transfer_volume, @iso_currency_code)
  end
end
