#  The Plaid API
#
# The Plaid REST API. Please see https://plaid.com/docs/api for more details.
#
# The version of the OpenAPI document: 2020-09-14_1.474.3
#
# Generated by: https://openapi-generator.tech
#

require "../../core"

require "./scopes_nullable"

module Plaid
  # Describes the connected application for a particular end user.
  class ConnectedApplication
    include JSON::Serializable
    include JSON::Serializable::Unmapped
    include OpenApi::Validatable
    include OpenApi::Json

    # Required Properties

    # This field will map to the application ID that is returned from /item/application/list, or provided to the institution in an oauth redirect.
    @[JSON::Field(key: "application_id", type: String?, default: nil, required: true, nullable: false, emit_null: false)]
    getter application_id : String? = nil

    # The name of the application
    @[JSON::Field(key: "name", type: String?, default: nil, required: true, nullable: false, emit_null: false)]
    getter name : String? = nil

    # The date this application was linked in [ISO 8601](https://wikipedia.org/wiki/ISO_8601) (YYYY-MM-DD) format in UTC.
    @[JSON::Field(key: "created_at", type: Time?, default: nil, required: true, nullable: false, emit_null: false, converter: Time::RFC3339Converter)]
    getter created_at : Time? = nil

    # End of Required Properties

    # Optional Properties

    # A human-readable name of the application for display purposes
    @[JSON::Field(key: "display_name", type: String?, default: nil, required: false, nullable: true, emit_null: true, presence: true, ignore_serialize: display_name.nil? && !display_name_present?)]
    getter display_name : String? = nil

    @[JSON::Field(ignore: true)]
    property? display_name_present : Bool = false

    # A URL that links to the application logo image.
    @[JSON::Field(key: "logo_url", type: String?, default: nil, required: false, nullable: true, emit_null: true, presence: true, ignore_serialize: logo_url.nil? && !logo_url_present?)]
    getter logo_url : String? = nil

    @[JSON::Field(ignore: true)]
    property? logo_url_present : Bool = false

    # The URL for the application's website
    @[JSON::Field(key: "application_url", type: String?, default: nil, required: false, nullable: true, emit_null: true, presence: true, ignore_serialize: application_url.nil? && !application_url_present?)]
    getter application_url : String? = nil

    @[JSON::Field(ignore: true)]
    property? application_url_present : Bool = false

    # A string provided by the connected app stating why they use their respective enabled products.
    @[JSON::Field(key: "reason_for_access", type: String?, default: nil, required: false, nullable: true, emit_null: true, presence: true, ignore_serialize: reason_for_access.nil? && !reason_for_access_present?)]
    getter reason_for_access : String? = nil

    @[JSON::Field(ignore: true)]
    property? reason_for_access_present : Bool = false

    @[JSON::Field(key: "scopes", type: Plaid::ScopesNullable?, default: nil, required: false, nullable: true, emit_null: true, presence: true, ignore_serialize: scopes.nil? && !scopes_present?)]
    getter scopes : Plaid::ScopesNullable? = nil

    @[JSON::Field(ignore: true)]
    property? scopes_present : Bool = false

    # Initializes the object
    # @param [Hash] attributes Model attributes in the form of hash
    def initialize(
      *,
      # Required properties
      @application_id : String? = nil,
      @name : String? = nil,
      @created_at : Time? = nil,
      # Optional properties
      @display_name : String? = nil,
      @logo_url : String? = nil,
      @application_url : String? = nil,
      @reason_for_access : String? = nil,
      @scopes : Plaid::ScopesNullable? = nil
    )
    end

    # Show invalid properties with the reasons. Usually used together with valid?
    # @return Array for valid properties with the reasons
    def list_invalid_properties : Array(String)
      invalid_properties = Array(String).new

      invalid_properties.push("\"application_id\" is required and cannot be null") if @application_id.nil?

      unless (_application_id = @application_id).nil?
      end
      invalid_properties.push("\"name\" is required and cannot be null") if @name.nil?

      unless (_name = @name).nil?
      end
      invalid_properties.push("\"created_at\" is required and cannot be null") if @created_at.nil?

      unless (_created_at = @created_at).nil?
      end
      unless (_display_name = @display_name).nil?
      end
      unless (_logo_url = @logo_url).nil?
      end
      unless (_application_url = @application_url).nil?
      end
      unless (_reason_for_access = @reason_for_access).nil?
      end
      unless (_scopes = @scopes).nil?
        invalid_properties.concat(_scopes.list_invalid_properties_for("scopes")) if _scopes.is_a?(OpenApi::Validatable)
      end
      invalid_properties
    end

    # Check to see if the all the properties in the model are valid
    # @return true if the model is valid
    def valid? : Bool
      return false if @application_id.nil?
      unless (_application_id = @application_id).nil?
      end

      return false if @name.nil?
      unless (_name = @name).nil?
      end

      return false if @created_at.nil?
      unless (_created_at = @created_at).nil?
      end

      unless (_display_name = @display_name).nil?
      end

      unless (_logo_url = @logo_url).nil?
      end

      unless (_application_url = @application_url).nil?
      end

      unless (_reason_for_access = @reason_for_access).nil?
      end

      unless (_scopes = @scopes).nil?
        return false if _scopes.is_a?(OpenApi::Validatable) && !_scopes.valid?
      end

      true
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] application_id Object to be assigned
    def application_id=(new_value : String?)
      raise ArgumentError.new("\"application_id\" is required and cannot be null") if new_value.nil?
      unless new_value.nil?
      end

      @application_id = new_value
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] name Object to be assigned
    def name=(new_value : String?)
      raise ArgumentError.new("\"name\" is required and cannot be null") if new_value.nil?
      unless new_value.nil?
      end

      @name = new_value
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] created_at Object to be assigned
    def created_at=(new_value : Time?)
      raise ArgumentError.new("\"created_at\" is required and cannot be null") if new_value.nil?
      unless new_value.nil?
      end

      @created_at = new_value
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] display_name Object to be assigned
    def display_name=(new_value : String?)
      unless new_value.nil?
      end

      @display_name = new_value
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] logo_url Object to be assigned
    def logo_url=(new_value : String?)
      unless new_value.nil?
      end

      @logo_url = new_value
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] application_url Object to be assigned
    def application_url=(new_value : String?)
      unless new_value.nil?
      end

      @application_url = new_value
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] reason_for_access Object to be assigned
    def reason_for_access=(new_value : String?)
      unless new_value.nil?
      end

      @reason_for_access = new_value
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] scopes Object to be assigned
    def scopes=(new_value : Plaid::ScopesNullable?)
      unless new_value.nil?
        new_value.validate if new_value.is_a?(OpenApi::Validatable)
      end

      @scopes = new_value
    end

    # Generates #hash and #== methods from all fields
    # #== @return [Bool]
    # #hash calculates hash code according to all attributes.
    # #hash @return [UInt64] Hash code
    def_equals_and_hash(@application_id, @name, @created_at, @display_name, @display_name_present, @logo_url, @logo_url_present, @application_url, @application_url_present, @reason_for_access, @reason_for_access_present, @scopes, @scopes_present)
  end
end
