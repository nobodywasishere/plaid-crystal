#  The Plaid API
#
# The Plaid REST API. Please see https://plaid.com/docs/api for more details.
#
# The version of the OpenAPI document: 2020-09-14_1.474.3
#
# Generated by: https://openapi-generator.tech
#

require "../../core"

module Plaid
  # An object containing a set of ids related to an employee
  class PlatformIds
    include JSON::Serializable
    include JSON::Serializable::Unmapped
    include OpenApi::Validatable
    include OpenApi::Json

    # Optional Properties

    # The ID of an employee as given by their employer
    @[JSON::Field(key: "employee_id", type: String?, default: nil, required: false, nullable: true, emit_null: true, presence: true, ignore_serialize: employee_id.nil? && !employee_id_present?)]
    getter employee_id : String? = nil

    @[JSON::Field(ignore: true)]
    property? employee_id_present : Bool = false

    # The ID of an employee as given by their payroll
    @[JSON::Field(key: "payroll_id", type: String?, default: nil, required: false, nullable: true, emit_null: true, presence: true, ignore_serialize: payroll_id.nil? && !payroll_id_present?)]
    getter payroll_id : String? = nil

    @[JSON::Field(ignore: true)]
    property? payroll_id_present : Bool = false

    # The ID of the position of the employee
    @[JSON::Field(key: "position_id", type: String?, default: nil, required: false, nullable: true, emit_null: true, presence: true, ignore_serialize: position_id.nil? && !position_id_present?)]
    getter position_id : String? = nil

    @[JSON::Field(ignore: true)]
    property? position_id_present : Bool = false

    # Initializes the object
    # @param [Hash] attributes Model attributes in the form of hash
    def initialize(
      *,
      # Optional properties
      @employee_id : String? = nil,
      @payroll_id : String? = nil,
      @position_id : String? = nil
    )
    end

    # Show invalid properties with the reasons. Usually used together with valid?
    # @return Array for valid properties with the reasons
    def list_invalid_properties : Array(String)
      invalid_properties = Array(String).new

      unless (_employee_id = @employee_id).nil?
      end
      unless (_payroll_id = @payroll_id).nil?
      end
      unless (_position_id = @position_id).nil?
      end
      invalid_properties
    end

    # Check to see if the all the properties in the model are valid
    # @return true if the model is valid
    def valid? : Bool
      unless (_employee_id = @employee_id).nil?
      end

      unless (_payroll_id = @payroll_id).nil?
      end

      unless (_position_id = @position_id).nil?
      end

      true
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] employee_id Object to be assigned
    def employee_id=(new_value : String?)
      unless new_value.nil?
      end

      @employee_id = new_value
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] payroll_id Object to be assigned
    def payroll_id=(new_value : String?)
      unless new_value.nil?
      end

      @payroll_id = new_value
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] position_id Object to be assigned
    def position_id=(new_value : String?)
      unless new_value.nil?
      end

      @position_id = new_value
    end

    # Generates #hash and #== methods from all fields
    # #== @return [Bool]
    # #hash calculates hash code according to all attributes.
    # #hash @return [UInt64] Hash code
    def_equals_and_hash(@employee_id, @employee_id_present, @payroll_id, @payroll_id_present, @position_id, @position_id_present)
  end
end
