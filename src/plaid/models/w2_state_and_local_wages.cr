#  The Plaid API
#
# The Plaid REST API. Please see https://plaid.com/docs/api for more details.
#
# The version of the OpenAPI document: 2020-09-14_1.474.3
#
# Generated by: https://openapi-generator.tech
#

require "../../core"

module Plaid
  # W2 state and local wages
  class W2StateAndLocalWages
    include JSON::Serializable
    include JSON::Serializable::Unmapped
    include OpenApi::Validatable
    include OpenApi::Json

    # Optional Properties

    # State associated with the wage.
    @[JSON::Field(key: "state", type: String?, default: nil, required: false, nullable: true, emit_null: true, presence: true, ignore_serialize: state.nil? && !state_present?)]
    getter state : String? = nil

    @[JSON::Field(ignore: true)]
    property? state_present : Bool = false

    # State identification number of the employer.
    @[JSON::Field(key: "employer_state_id_number", type: String?, default: nil, required: false, nullable: true, emit_null: true, presence: true, ignore_serialize: employer_state_id_number.nil? && !employer_state_id_number_present?)]
    getter employer_state_id_number : String? = nil

    @[JSON::Field(ignore: true)]
    property? employer_state_id_number_present : Bool = false

    # Wages and tips from the specified state.
    @[JSON::Field(key: "state_wages_tips", type: String?, default: nil, required: false, nullable: true, emit_null: true, presence: true, ignore_serialize: state_wages_tips.nil? && !state_wages_tips_present?)]
    getter state_wages_tips : String? = nil

    @[JSON::Field(ignore: true)]
    property? state_wages_tips_present : Bool = false

    # Income tax from the specified state.
    @[JSON::Field(key: "state_income_tax", type: String?, default: nil, required: false, nullable: true, emit_null: true, presence: true, ignore_serialize: state_income_tax.nil? && !state_income_tax_present?)]
    getter state_income_tax : String? = nil

    @[JSON::Field(ignore: true)]
    property? state_income_tax_present : Bool = false

    # Wages and tips from the locality.
    @[JSON::Field(key: "local_wages_tips", type: String?, default: nil, required: false, nullable: true, emit_null: true, presence: true, ignore_serialize: local_wages_tips.nil? && !local_wages_tips_present?)]
    getter local_wages_tips : String? = nil

    @[JSON::Field(ignore: true)]
    property? local_wages_tips_present : Bool = false

    # Income tax from the locality.
    @[JSON::Field(key: "local_income_tax", type: String?, default: nil, required: false, nullable: true, emit_null: true, presence: true, ignore_serialize: local_income_tax.nil? && !local_income_tax_present?)]
    getter local_income_tax : String? = nil

    @[JSON::Field(ignore: true)]
    property? local_income_tax_present : Bool = false

    # Name of the locality.
    @[JSON::Field(key: "locality_name", type: String?, default: nil, required: false, nullable: true, emit_null: true, presence: true, ignore_serialize: locality_name.nil? && !locality_name_present?)]
    getter locality_name : String? = nil

    @[JSON::Field(ignore: true)]
    property? locality_name_present : Bool = false

    # Initializes the object
    # @param [Hash] attributes Model attributes in the form of hash
    def initialize(
      *,
      # Optional properties
      @state : String? = nil,
      @employer_state_id_number : String? = nil,
      @state_wages_tips : String? = nil,
      @state_income_tax : String? = nil,
      @local_wages_tips : String? = nil,
      @local_income_tax : String? = nil,
      @locality_name : String? = nil
    )
    end

    # Show invalid properties with the reasons. Usually used together with valid?
    # @return Array for valid properties with the reasons
    def list_invalid_properties : Array(String)
      invalid_properties = Array(String).new

      unless (_state = @state).nil?
      end
      unless (_employer_state_id_number = @employer_state_id_number).nil?
      end
      unless (_state_wages_tips = @state_wages_tips).nil?
      end
      unless (_state_income_tax = @state_income_tax).nil?
      end
      unless (_local_wages_tips = @local_wages_tips).nil?
      end
      unless (_local_income_tax = @local_income_tax).nil?
      end
      unless (_locality_name = @locality_name).nil?
      end
      invalid_properties
    end

    # Check to see if the all the properties in the model are valid
    # @return true if the model is valid
    def valid? : Bool
      unless (_state = @state).nil?
      end

      unless (_employer_state_id_number = @employer_state_id_number).nil?
      end

      unless (_state_wages_tips = @state_wages_tips).nil?
      end

      unless (_state_income_tax = @state_income_tax).nil?
      end

      unless (_local_wages_tips = @local_wages_tips).nil?
      end

      unless (_local_income_tax = @local_income_tax).nil?
      end

      unless (_locality_name = @locality_name).nil?
      end

      true
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] state Object to be assigned
    def state=(new_value : String?)
      unless new_value.nil?
      end

      @state = new_value
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] employer_state_id_number Object to be assigned
    def employer_state_id_number=(new_value : String?)
      unless new_value.nil?
      end

      @employer_state_id_number = new_value
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] state_wages_tips Object to be assigned
    def state_wages_tips=(new_value : String?)
      unless new_value.nil?
      end

      @state_wages_tips = new_value
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] state_income_tax Object to be assigned
    def state_income_tax=(new_value : String?)
      unless new_value.nil?
      end

      @state_income_tax = new_value
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] local_wages_tips Object to be assigned
    def local_wages_tips=(new_value : String?)
      unless new_value.nil?
      end

      @local_wages_tips = new_value
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] local_income_tax Object to be assigned
    def local_income_tax=(new_value : String?)
      unless new_value.nil?
      end

      @local_income_tax = new_value
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] locality_name Object to be assigned
    def locality_name=(new_value : String?)
      unless new_value.nil?
      end

      @locality_name = new_value
    end

    # Generates #hash and #== methods from all fields
    # #== @return [Bool]
    # #hash calculates hash code according to all attributes.
    # #hash @return [UInt64] Hash code
    def_equals_and_hash(@state, @state_present, @employer_state_id_number, @employer_state_id_number_present, @state_wages_tips, @state_wages_tips_present, @state_income_tax, @state_income_tax_present, @local_wages_tips, @local_wages_tips_present, @local_income_tax, @local_income_tax_present, @locality_name, @locality_name_present)
  end
end
