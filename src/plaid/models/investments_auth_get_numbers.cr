#  The Plaid API
#
# The Plaid REST API. Please see https://plaid.com/docs/api for more details.
#
# The version of the OpenAPI document: 2020-09-14_1.474.3
#
# Generated by: https://openapi-generator.tech
#

require "../../core"

require "./numbers_acats"
require "./numbers_aton"

module Plaid
  # Identifying information for transferring holdings to an investments account.
  class InvestmentsAuthGetNumbers
    include JSON::Serializable
    include JSON::Serializable::Unmapped
    include OpenApi::Validatable
    include OpenApi::Json

    # Optional Properties

    @[JSON::Field(key: "acats", type: Array(NumbersACATS)?, default: nil, required: false, nullable: false, emit_null: false)]
    getter acats : Array(NumbersACATS)? = nil

    @[JSON::Field(key: "aton", type: Array(NumbersATON)?, default: nil, required: false, nullable: false, emit_null: false)]
    getter aton : Array(NumbersATON)? = nil

    # Initializes the object
    # @param [Hash] attributes Model attributes in the form of hash
    def initialize(
      *,
      # Optional properties
      @acats : Array(NumbersACATS)? = nil,
      @aton : Array(NumbersATON)? = nil
    )
    end

    # Show invalid properties with the reasons. Usually used together with valid?
    # @return Array for valid properties with the reasons
    def list_invalid_properties : Array(String)
      invalid_properties = Array(String).new

      unless (_acats = @acats).nil?
      end
      unless (_aton = @aton).nil?
      end
      invalid_properties
    end

    # Check to see if the all the properties in the model are valid
    # @return true if the model is valid
    def valid? : Bool
      unless (_acats = @acats).nil?
      end

      unless (_aton = @aton).nil?
      end

      true
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] acats Object to be assigned
    def acats=(new_value : Array(NumbersACATS)?)
      unless new_value.nil?
      end

      @acats = new_value
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] aton Object to be assigned
    def aton=(new_value : Array(NumbersATON)?)
      unless new_value.nil?
      end

      @aton = new_value
    end

    # Generates #hash and #== methods from all fields
    # #== @return [Bool]
    # #hash calculates hash code according to all attributes.
    # #hash @return [UInt64] Hash code
    def_equals_and_hash(@acats, @aton)
  end
end
