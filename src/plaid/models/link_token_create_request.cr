#  The Plaid API
#
# The Plaid REST API. Please see https://plaid.com/docs/api for more details.
#
# The version of the OpenAPI document: 2020-09-14_1.474.3
#
# Generated by: https://openapi-generator.tech
#

require "../../core"

require "./consumer_report_permissible_purpose"
require "./country_code"
require "./link_token_account_filters"
require "./link_token_create_card_switch"
require "./link_token_create_hosted_link"
require "./link_token_create_institution_data"
require "./link_token_create_request_auth"
require "./link_token_create_request_base_report"
require "./link_token_create_request_deposit_switch"
require "./link_token_create_request_employment"
require "./link_token_create_request_identity_verification"
require "./link_token_create_request_income_verification"
require "./link_token_create_request_payment_initiation"
require "./link_token_create_request_statements"
require "./link_token_create_request_transfer"
require "./link_token_create_request_update"
require "./link_token_create_request_user"
require "./link_token_eu_config"
require "./link_token_investments"
require "./link_token_investments_auth"
require "./link_token_transactions"
require "./products"

module Plaid
  # LinkTokenCreateRequest defines the request schema for `/link/token/create`
  class LinkTokenCreateRequest
    include JSON::Serializable
    include JSON::Serializable::Unmapped
    include OpenApi::Validatable
    include OpenApi::Json

    # Required Properties

    # The name of your application, as it should be displayed in Link. Maximum length of 30 characters. If a value longer than 30 characters is provided, Link will display \"This Application\" instead.
    @[JSON::Field(key: "client_name", type: String?, default: nil, required: true, nullable: false, emit_null: false)]
    getter client_name : String? = nil
    MIN_LENGTH_FOR_CLIENT_NAME = 1

    # The language that Link should be displayed in. When initializing with Identity Verification, this field is not used; for more details, see [Identity Verification supported languages](https://www.plaid.com/docs/identity-verification/#supported-languages).  Supported languages are: - Danish (`'da'`) - Dutch (`'nl'`) - English (`'en'`) - Estonian (`'et'`) - French (`'fr'`) - German (`'de'`) - Italian (`'it'`) - Latvian (`'lv'`) - Lithuanian (`'lt'`) - Norwegian (`'no'`) - Polish (`'pl'`) - Portuguese (`'pt'`) - Romanian (`'ro'`) - Spanish (`'es'`) - Swedish (`'sv'`)  When using a Link customization, the language configured here must match the setting in the customization, or the customization will not be applied.
    @[JSON::Field(key: "language", type: String?, default: nil, required: true, nullable: false, emit_null: false)]
    getter language : String? = nil
    MIN_LENGTH_FOR_LANGUAGE = 1

    # Specify an array of Plaid-supported country codes using the ISO-3166-1 alpha-2 country code standard. Institutions from all listed countries will be shown. For a complete mapping of supported products by country, see https://plaid.com/global/.  If using Identity Verification, `country_codes` should be set to the country where your company is based, not the country where your user is located. For all other products, `country_codes` represents the location of your user's financial institution.  If Link is launched with multiple country codes, only products that you are enabled for in all countries will be used by Link. Note that while all countries are enabled by default in Sandbox and Development, in Production only US and Canada are enabled by default. Access to European institutions requires additional compliance steps. To request access to European institutions in the Production environment, [file a product access Support ticket](https://dashboard.plaid.com/support/new/product-and-development/product-troubleshooting/request-product-access) via the Plaid dashboard. If you initialize with a European country code, your users will see the European consent panel during the Link flow.  If using a Link customization, make sure the country codes in the customization match those specified in `country_codes`, or the customization may not be applied.  If using the Auth features Instant Match, Same-day Micro-deposits, or Automated Micro-deposits, `country_codes` must be set to `['US']`.
    @[JSON::Field(key: "country_codes", type: Array(CountryCode)?, default: nil, required: true, nullable: false, emit_null: false)]
    getter country_codes : Array(CountryCode)? = nil
    MIN_ITEMS_FOR_COUNTRY_CODES = 1

    @[JSON::Field(key: "user", type: Plaid::LinkTokenCreateRequestUser?, default: nil, required: true, nullable: false, emit_null: false)]
    getter user : Plaid::LinkTokenCreateRequestUser? = nil

    # End of Required Properties

    # Optional Properties

    # Your Plaid API `client_id`. The `client_id` is required and may be provided either in the `PLAID-CLIENT-ID` header or as part of a request body.
    @[JSON::Field(key: "client_id", type: String?, default: nil, required: false, nullable: false, emit_null: false)]
    getter client_id : String? = nil

    # Your Plaid API `secret`. The `secret` is required and may be provided either in the `PLAID-SECRET` header or as part of a request body.
    @[JSON::Field(key: "secret", type: String?, default: nil, required: false, nullable: false, emit_null: false)]
    getter secret : String? = nil

    # List of Plaid product(s) you wish to use. If launching Link in update mode, should be omitted (unless you are using update mode to add Income or Assets to an Item); required otherwise.  `balance` is *not* a valid value, the Balance product does not require explicit initialization and will automatically be initialized when any other product is initialized.  The products specified here will determine which institutions will be available to your users in Link. Only institutions that support *all* requested products can be selected; a if a user attempts to select an institution that does not support a listed product, a \"Connectivity not supported\" error message will appear in Link. To maximize the number of institutions available, initialize Link with the minimal product set required for your use case. Additional products can be included via the [`optional_products`](https://plaid.com/docs/api/tokens/#link-token-create-request-optional-products) or  [`required_if_supported_products`](https://plaid.com/docs/api/tokens/#link-token-create-request-required-if-supported-products) fields, or can be initialized by calling the endpoint after obtaining an access token. For details and exceptions, see [Choosing when to initialize products](https://plaid.com/docs/link/initializing-products/).  Note that, unless you have opted to disable Instant Match support, institutions that support Instant Match will also be shown in Link if `auth` is specified as a product, even though these institutions do not contain `auth` in their product array.  In Production, you will be billed for each product that you specify when initializing Link. Note that a product cannot be removed from an Item once the Item has been initialized with that product. To stop billing on an Item for subscription-based products, such as Liabilities, Investments, and Transactions, remove the Item via `/item/remove`.
    @[JSON::Field(key: "products", type: Array(Products)?, default: nil, required: false, nullable: true, emit_null: true, presence: true, ignore_serialize: products.nil? && !products_present?)]
    getter products : Array(Products)? = nil

    @[JSON::Field(ignore: true)]
    property? products_present : Bool = false

    # List of Plaid product(s) you wish to use only if the institution and account(s) selected by the user support the product. Institutions that do not support these products will still be shown in Link. The products will only be extracted and billed if the user selects an institution and account type that supports them.  There should be no overlap between this array and the `products`, `optional_products`, or `additional_consented_products` arrays. The `products` array must have at least one product.  For more details on using this feature, see [Required if Supported Products](https://www.plaid.com/docs/link/initializing-products/#required-if-supported-products).
    @[JSON::Field(key: "required_if_supported_products", type: Array(Products)?, default: nil, required: false, nullable: true, emit_null: true, presence: true, ignore_serialize: required_if_supported_products.nil? && !required_if_supported_products_present?)]
    getter required_if_supported_products : Array(Products)? = nil

    @[JSON::Field(ignore: true)]
    property? required_if_supported_products_present : Bool = false

    # List of Plaid product(s) that you may wish to use but that are not required for your use case. Plaid will attempt to fetch data for these products on a best-effort basis, and failure to support these products will not affect Item creation.  There should be no overlap between this array and the `products`, `required_if_supported_products`, or `additional_consented_products` arrays. The `products` array must have at least one product.  For more details on using this feature, see [Optional Products](https://www.plaid.com/docs/link/initializing-products/#optional-products).
    @[JSON::Field(key: "optional_products", type: Array(Products)?, default: nil, required: false, nullable: true, emit_null: true, presence: true, ignore_serialize: optional_products.nil? && !optional_products_present?)]
    getter optional_products : Array(Products)? = nil

    @[JSON::Field(ignore: true)]
    property? optional_products_present : Bool = false

    # (Beta) This field has no effect unless you are participating in the [Data Transparency](https://plaid.com/docs/link/data-transparency-messaging-migration-guide) beta program. List of additional Plaid product(s) you wish to collect consent for. These products will not be billed until you start using them by calling the relevant endpoints.  `balance` is *not* a valid value, the Balance product does not require explicit initialization and will automatically have consent collected.  Institutions that do not support these products will still be shown in Link.  There should be no overlap between this array and the `products` or `required_if_supported_products` arrays.
    @[JSON::Field(key: "additional_consented_products", type: Array(Products)?, default: nil, required: false, nullable: true, emit_null: true, presence: true, ignore_serialize: additional_consented_products.nil? && !additional_consented_products_present?)]
    getter additional_consented_products : Array(Products)? = nil

    @[JSON::Field(ignore: true)]
    property? additional_consented_products_present : Bool = false

    # The destination URL to which any webhooks should be sent. Note that webhooks for Payment Initiation (e-wallet transactions only), Transfer, Bank Transfer (including Auth micro-deposit notification webhooks) and Identity Verification are configured via the Dashboard instead.
    @[JSON::Field(key: "webhook", type: String?, default: nil, required: false, nullable: false, emit_null: false)]
    getter webhook : String? = nil

    # The `access_token` associated with the Item to update or reference, used when updating, modifying, or accessing an existing `access_token`. Used when launching Link in update mode, when completing the Same-day (manual) Micro-deposit flow, or (optionally) when initializing Link for a returning user as part of the Transfer UI flow.
    @[JSON::Field(key: "access_token", type: String?, default: nil, required: false, nullable: true, emit_null: true, presence: true, ignore_serialize: access_token.nil? && !access_token_present?)]
    getter access_token : String? = nil
    MIN_LENGTH_FOR_ACCESS_TOKEN = 1

    @[JSON::Field(ignore: true)]
    property? access_token_present : Bool = false

    # A list of access tokens associated with the items to update in Link update mode for the Assets product. Using this instead of the `access_token` field allows the updating of multiple items at once. This feature is in closed beta, please contact your account manager for more info.
    @[JSON::Field(key: "access_tokens", type: Array(String)?, default: nil, required: false, nullable: false, emit_null: false)]
    getter access_tokens : Array(String)? = nil

    # The name of the Link customization from the Plaid Dashboard to be applied to Link. If not specified, the `default` customization will be used. When using a Link customization, the language in the customization must match the language selected via the `language` parameter, and the countries in the customization should match the country codes selected via `country_codes`.
    @[JSON::Field(key: "link_customization_name", type: String?, default: nil, required: false, nullable: false, emit_null: false)]
    getter link_customization_name : String? = nil

    # A URI indicating the destination where a user should be forwarded after completing the Link flow; used to support OAuth authentication flows when launching Link in the browser or via a webview. The `redirect_uri` should not contain any query parameters. When used in Production or Development, must be an https URI. To specify any subdomain, use `*` as a wildcard character, e.g. `https://*.example.com/oauth.html`. Note that any redirect URI must also be added to the Allowed redirect URIs list in the [developer dashboard](https://dashboard.plaid.com/team/api). If initializing on Android, `android_package_name` must be specified instead and `redirect_uri` should be left blank.
    @[JSON::Field(key: "redirect_uri", type: String?, default: nil, required: false, nullable: false, emit_null: false)]
    getter redirect_uri : String? = nil

    # The name of your app's Android package. Required if using the `link_token` to initialize Link on Android. Any package name specified here must also be added to the Allowed Android package names setting on the [developer dashboard](https://dashboard.plaid.com/team/api). When creating a `link_token` for initializing Link on other platforms, `android_package_name` must be left blank and `redirect_uri` should be used instead.
    @[JSON::Field(key: "android_package_name", type: String?, default: nil, required: false, nullable: false, emit_null: false)]
    getter android_package_name : String? = nil

    @[JSON::Field(key: "institution_data", type: Plaid::LinkTokenCreateInstitutionData?, default: nil, required: false, nullable: false, emit_null: false)]
    getter institution_data : Plaid::LinkTokenCreateInstitutionData? = nil

    @[JSON::Field(key: "card_switch", type: Plaid::LinkTokenCreateCardSwitch?, default: nil, required: false, nullable: false, emit_null: false)]
    getter card_switch : Plaid::LinkTokenCreateCardSwitch? = nil

    @[JSON::Field(key: "account_filters", type: LinkTokenAccountFilters?, default: nil, required: false, nullable: false, emit_null: false)]
    getter account_filters : LinkTokenAccountFilters? = nil

    @[JSON::Field(key: "eu_config", type: Plaid::LinkTokenEUConfig?, default: nil, required: false, nullable: false, emit_null: false)]
    getter eu_config : Plaid::LinkTokenEUConfig? = nil

    # Used for certain Europe-only configurations, as well as certain legacy use cases in other regions.
    @[JSON::Field(key: "institution_id", type: String?, default: nil, required: false, nullable: false, emit_null: false)]
    getter institution_id : String? = nil

    @[JSON::Field(key: "payment_initiation", type: Plaid::LinkTokenCreateRequestPaymentInitiation?, default: nil, required: false, nullable: false, emit_null: false)]
    getter payment_initiation : Plaid::LinkTokenCreateRequestPaymentInitiation? = nil

    @[JSON::Field(key: "deposit_switch", type: Plaid::LinkTokenCreateRequestDepositSwitch?, default: nil, required: false, nullable: false, emit_null: false)]
    getter deposit_switch : Plaid::LinkTokenCreateRequestDepositSwitch? = nil

    @[JSON::Field(key: "employment", type: Plaid::LinkTokenCreateRequestEmployment?, default: nil, required: false, nullable: false, emit_null: false)]
    getter employment : Plaid::LinkTokenCreateRequestEmployment? = nil

    @[JSON::Field(key: "income_verification", type: Plaid::LinkTokenCreateRequestIncomeVerification?, default: nil, required: false, nullable: false, emit_null: false)]
    getter income_verification : Plaid::LinkTokenCreateRequestIncomeVerification? = nil

    @[JSON::Field(key: "base_report", type: Plaid::LinkTokenCreateRequestBaseReport?, default: nil, required: false, nullable: false, emit_null: false)]
    getter base_report : Plaid::LinkTokenCreateRequestBaseReport? = nil

    @[JSON::Field(key: "consumer_report_permissible_purpose", type: Plaid::ConsumerReportPermissiblePurpose?, default: nil, required: false, nullable: false, emit_null: false)]
    getter consumer_report_permissible_purpose : Plaid::ConsumerReportPermissiblePurpose? = nil

    @[JSON::Field(key: "auth", type: Plaid::LinkTokenCreateRequestAuth?, default: nil, required: false, nullable: false, emit_null: false)]
    getter auth : Plaid::LinkTokenCreateRequestAuth? = nil

    @[JSON::Field(key: "transfer", type: Plaid::LinkTokenCreateRequestTransfer?, default: nil, required: false, nullable: false, emit_null: false)]
    getter transfer : Plaid::LinkTokenCreateRequestTransfer? = nil

    @[JSON::Field(key: "update", type: Plaid::LinkTokenCreateRequestUpdate?, default: nil, required: false, nullable: false, emit_null: false)]
    getter update : Plaid::LinkTokenCreateRequestUpdate? = nil

    @[JSON::Field(key: "identity_verification", type: Plaid::LinkTokenCreateRequestIdentityVerification?, default: nil, required: false, nullable: false, emit_null: false)]
    getter identity_verification : Plaid::LinkTokenCreateRequestIdentityVerification? = nil

    @[JSON::Field(key: "statements", type: Plaid::LinkTokenCreateRequestStatements?, default: nil, required: false, nullable: false, emit_null: false)]
    getter statements : Plaid::LinkTokenCreateRequestStatements? = nil

    # A user token generated using `/user/create`. Any Item created during the Link session will be associated with the user.
    @[JSON::Field(key: "user_token", type: String?, default: nil, required: false, nullable: false, emit_null: false)]
    getter user_token : String? = nil

    @[JSON::Field(key: "investments", type: Plaid::LinkTokenInvestments?, default: nil, required: false, nullable: false, emit_null: false)]
    getter investments : Plaid::LinkTokenInvestments? = nil

    @[JSON::Field(key: "investments_auth", type: Plaid::LinkTokenInvestmentsAuth?, default: nil, required: false, nullable: false, emit_null: false)]
    getter investments_auth : Plaid::LinkTokenInvestmentsAuth? = nil

    @[JSON::Field(key: "hosted_link", type: LinkTokenCreateHostedLink?, default: nil, required: false, nullable: false, emit_null: false)]
    getter hosted_link : LinkTokenCreateHostedLink? = nil

    @[JSON::Field(key: "transactions", type: Plaid::LinkTokenTransactions?, default: nil, required: false, nullable: false, emit_null: false)]
    getter transactions : Plaid::LinkTokenTransactions? = nil

    # If `true`, request a CRA connection. Defaults to `false`.
    @[JSON::Field(key: "cra_enabled", type: Bool?, default: nil, required: false, nullable: false, emit_null: false)]
    getter cra_enabled : Bool? = nil

    # Initializes the object
    # @param [Hash] attributes Model attributes in the form of hash
    def initialize(
      *,
      # Required properties
      @client_name : String? = nil,
      @language : String? = nil,
      @country_codes : Array(CountryCode)? = nil,
      @user : Plaid::LinkTokenCreateRequestUser? = nil,
      # Optional properties
      @client_id : String? = nil,
      @secret : String? = nil,
      @products : Array(Products)? = nil,
      @required_if_supported_products : Array(Products)? = nil,
      @optional_products : Array(Products)? = nil,
      @additional_consented_products : Array(Products)? = nil,
      @webhook : String? = nil,
      @access_token : String? = nil,
      @access_tokens : Array(String)? = nil,
      @link_customization_name : String? = nil,
      @redirect_uri : String? = nil,
      @android_package_name : String? = nil,
      @institution_data : Plaid::LinkTokenCreateInstitutionData? = nil,
      @card_switch : Plaid::LinkTokenCreateCardSwitch? = nil,
      @account_filters : LinkTokenAccountFilters? = nil,
      @eu_config : Plaid::LinkTokenEUConfig? = nil,
      @institution_id : String? = nil,
      @payment_initiation : Plaid::LinkTokenCreateRequestPaymentInitiation? = nil,
      @deposit_switch : Plaid::LinkTokenCreateRequestDepositSwitch? = nil,
      @employment : Plaid::LinkTokenCreateRequestEmployment? = nil,
      @income_verification : Plaid::LinkTokenCreateRequestIncomeVerification? = nil,
      @base_report : Plaid::LinkTokenCreateRequestBaseReport? = nil,
      @consumer_report_permissible_purpose : Plaid::ConsumerReportPermissiblePurpose? = nil,
      @auth : Plaid::LinkTokenCreateRequestAuth? = nil,
      @transfer : Plaid::LinkTokenCreateRequestTransfer? = nil,
      @update : Plaid::LinkTokenCreateRequestUpdate? = nil,
      @identity_verification : Plaid::LinkTokenCreateRequestIdentityVerification? = nil,
      @statements : Plaid::LinkTokenCreateRequestStatements? = nil,
      @user_token : String? = nil,
      @investments : Plaid::LinkTokenInvestments? = nil,
      @investments_auth : Plaid::LinkTokenInvestmentsAuth? = nil,
      @hosted_link : LinkTokenCreateHostedLink? = nil,
      @transactions : Plaid::LinkTokenTransactions? = nil,
      @cra_enabled : Bool? = nil
    )
    end

    # Show invalid properties with the reasons. Usually used together with valid?
    # @return Array for valid properties with the reasons
    def list_invalid_properties : Array(String)
      invalid_properties = Array(String).new

      invalid_properties.push("\"client_name\" is required and cannot be null") if @client_name.nil?

      unless (_client_name = @client_name).nil?
        if min_length_error = OpenApi::PrimitiveValidator.min_length_error("client_name", _client_name.to_s.size, MIN_LENGTH_FOR_CLIENT_NAME)
          invalid_properties.push(min_length_error)
        end
      end
      invalid_properties.push("\"language\" is required and cannot be null") if @language.nil?

      unless (_language = @language).nil?
        if min_length_error = OpenApi::PrimitiveValidator.min_length_error("language", _language.to_s.size, MIN_LENGTH_FOR_LANGUAGE)
          invalid_properties.push(min_length_error)
        end
      end
      invalid_properties.push("\"country_codes\" is required and cannot be null") if @country_codes.nil?

      unless (_country_codes = @country_codes).nil?
        if min_items_error = OpenApi::PrimitiveValidator.min_items_error("country_codes", _country_codes.size, MIN_ITEMS_FOR_COUNTRY_CODES)
          invalid_properties.push(min_items_error)
        end
      end
      invalid_properties.push("\"user\" is required and cannot be null") if @user.nil?

      unless (_user = @user).nil?
        invalid_properties.concat(_user.list_invalid_properties_for("user")) if _user.is_a?(OpenApi::Validatable)
      end
      unless (_client_id = @client_id).nil?
      end
      unless (_secret = @secret).nil?
      end
      unless (_products = @products).nil?
      end
      unless (_required_if_supported_products = @required_if_supported_products).nil?
      end
      unless (_optional_products = @optional_products).nil?
      end
      unless (_additional_consented_products = @additional_consented_products).nil?
      end
      unless (_webhook = @webhook).nil?
      end
      unless (_access_token = @access_token).nil?
        if min_length_error = OpenApi::PrimitiveValidator.min_length_error("access_token", _access_token.to_s.size, MIN_LENGTH_FOR_ACCESS_TOKEN)
          invalid_properties.push(min_length_error)
        end
      end
      unless (_access_tokens = @access_tokens).nil?
      end
      unless (_link_customization_name = @link_customization_name).nil?
      end
      unless (_redirect_uri = @redirect_uri).nil?
      end
      unless (_android_package_name = @android_package_name).nil?
      end
      unless (_institution_data = @institution_data).nil?
        invalid_properties.concat(_institution_data.list_invalid_properties_for("institution_data")) if _institution_data.is_a?(OpenApi::Validatable)
      end
      unless (_card_switch = @card_switch).nil?
        invalid_properties.concat(_card_switch.list_invalid_properties_for("card_switch")) if _card_switch.is_a?(OpenApi::Validatable)
      end
      unless (_account_filters = @account_filters).nil?
      end
      unless (_eu_config = @eu_config).nil?
        invalid_properties.concat(_eu_config.list_invalid_properties_for("eu_config")) if _eu_config.is_a?(OpenApi::Validatable)
      end
      unless (_institution_id = @institution_id).nil?
      end
      unless (_payment_initiation = @payment_initiation).nil?
        invalid_properties.concat(_payment_initiation.list_invalid_properties_for("payment_initiation")) if _payment_initiation.is_a?(OpenApi::Validatable)
      end
      unless (_deposit_switch = @deposit_switch).nil?
        invalid_properties.concat(_deposit_switch.list_invalid_properties_for("deposit_switch")) if _deposit_switch.is_a?(OpenApi::Validatable)
      end
      unless (_employment = @employment).nil?
        invalid_properties.concat(_employment.list_invalid_properties_for("employment")) if _employment.is_a?(OpenApi::Validatable)
      end
      unless (_income_verification = @income_verification).nil?
        invalid_properties.concat(_income_verification.list_invalid_properties_for("income_verification")) if _income_verification.is_a?(OpenApi::Validatable)
      end
      unless (_base_report = @base_report).nil?
        invalid_properties.concat(_base_report.list_invalid_properties_for("base_report")) if _base_report.is_a?(OpenApi::Validatable)
      end
      unless (_consumer_report_permissible_purpose = @consumer_report_permissible_purpose).nil?
        invalid_properties.push(_consumer_report_permissible_purpose.error_message) if !_consumer_report_permissible_purpose.valid?
      end
      unless (_auth = @auth).nil?
        invalid_properties.concat(_auth.list_invalid_properties_for("auth")) if _auth.is_a?(OpenApi::Validatable)
      end
      unless (_transfer = @transfer).nil?
        invalid_properties.concat(_transfer.list_invalid_properties_for("transfer")) if _transfer.is_a?(OpenApi::Validatable)
      end
      unless (_update = @update).nil?
        invalid_properties.concat(_update.list_invalid_properties_for("update")) if _update.is_a?(OpenApi::Validatable)
      end
      unless (_identity_verification = @identity_verification).nil?
        invalid_properties.concat(_identity_verification.list_invalid_properties_for("identity_verification")) if _identity_verification.is_a?(OpenApi::Validatable)
      end
      unless (_statements = @statements).nil?
        invalid_properties.concat(_statements.list_invalid_properties_for("statements")) if _statements.is_a?(OpenApi::Validatable)
      end
      unless (_user_token = @user_token).nil?
      end
      unless (_investments = @investments).nil?
        invalid_properties.concat(_investments.list_invalid_properties_for("investments")) if _investments.is_a?(OpenApi::Validatable)
      end
      unless (_investments_auth = @investments_auth).nil?
        invalid_properties.concat(_investments_auth.list_invalid_properties_for("investments_auth")) if _investments_auth.is_a?(OpenApi::Validatable)
      end
      unless (_hosted_link = @hosted_link).nil?
      end
      unless (_transactions = @transactions).nil?
        invalid_properties.concat(_transactions.list_invalid_properties_for("transactions")) if _transactions.is_a?(OpenApi::Validatable)
      end
      unless (_cra_enabled = @cra_enabled).nil?
      end
      invalid_properties
    end

    # Check to see if the all the properties in the model are valid
    # @return true if the model is valid
    def valid? : Bool
      return false if @client_name.nil?
      unless (_client_name = @client_name).nil?
        return false if _client_name.to_s.size < MIN_LENGTH_FOR_CLIENT_NAME
      end

      return false if @language.nil?
      unless (_language = @language).nil?
        return false if _language.to_s.size < MIN_LENGTH_FOR_LANGUAGE
      end

      return false if @country_codes.nil?
      unless (_country_codes = @country_codes).nil?
        return false if _country_codes.size < MIN_ITEMS_FOR_COUNTRY_CODES
      end

      return false if @user.nil?
      unless (_user = @user).nil?
        return false if _user.is_a?(OpenApi::Validatable) && !_user.valid?
      end

      unless (_client_id = @client_id).nil?
      end

      unless (_secret = @secret).nil?
      end

      unless (_products = @products).nil?
      end

      unless (_required_if_supported_products = @required_if_supported_products).nil?
      end

      unless (_optional_products = @optional_products).nil?
      end

      unless (_additional_consented_products = @additional_consented_products).nil?
      end

      unless (_webhook = @webhook).nil?
      end

      unless (_access_token = @access_token).nil?
        return false if _access_token.to_s.size < MIN_LENGTH_FOR_ACCESS_TOKEN
      end

      unless (_access_tokens = @access_tokens).nil?
      end

      unless (_link_customization_name = @link_customization_name).nil?
      end

      unless (_redirect_uri = @redirect_uri).nil?
      end

      unless (_android_package_name = @android_package_name).nil?
      end

      unless (_institution_data = @institution_data).nil?
        return false if _institution_data.is_a?(OpenApi::Validatable) && !_institution_data.valid?
      end

      unless (_card_switch = @card_switch).nil?
        return false if _card_switch.is_a?(OpenApi::Validatable) && !_card_switch.valid?
      end

      unless (_account_filters = @account_filters).nil?
      end

      unless (_eu_config = @eu_config).nil?
        return false if _eu_config.is_a?(OpenApi::Validatable) && !_eu_config.valid?
      end

      unless (_institution_id = @institution_id).nil?
      end

      unless (_payment_initiation = @payment_initiation).nil?
        return false if _payment_initiation.is_a?(OpenApi::Validatable) && !_payment_initiation.valid?
      end

      unless (_deposit_switch = @deposit_switch).nil?
        return false if _deposit_switch.is_a?(OpenApi::Validatable) && !_deposit_switch.valid?
      end

      unless (_employment = @employment).nil?
        return false if _employment.is_a?(OpenApi::Validatable) && !_employment.valid?
      end

      unless (_income_verification = @income_verification).nil?
        return false if _income_verification.is_a?(OpenApi::Validatable) && !_income_verification.valid?
      end

      unless (_base_report = @base_report).nil?
        return false if _base_report.is_a?(OpenApi::Validatable) && !_base_report.valid?
      end

      unless (_consumer_report_permissible_purpose = @consumer_report_permissible_purpose).nil?
        return false if !_consumer_report_permissible_purpose.valid?
      end

      unless (_auth = @auth).nil?
        return false if _auth.is_a?(OpenApi::Validatable) && !_auth.valid?
      end

      unless (_transfer = @transfer).nil?
        return false if _transfer.is_a?(OpenApi::Validatable) && !_transfer.valid?
      end

      unless (_update = @update).nil?
        return false if _update.is_a?(OpenApi::Validatable) && !_update.valid?
      end

      unless (_identity_verification = @identity_verification).nil?
        return false if _identity_verification.is_a?(OpenApi::Validatable) && !_identity_verification.valid?
      end

      unless (_statements = @statements).nil?
        return false if _statements.is_a?(OpenApi::Validatable) && !_statements.valid?
      end

      unless (_user_token = @user_token).nil?
      end

      unless (_investments = @investments).nil?
        return false if _investments.is_a?(OpenApi::Validatable) && !_investments.valid?
      end

      unless (_investments_auth = @investments_auth).nil?
        return false if _investments_auth.is_a?(OpenApi::Validatable) && !_investments_auth.valid?
      end

      unless (_hosted_link = @hosted_link).nil?
      end

      unless (_transactions = @transactions).nil?
        return false if _transactions.is_a?(OpenApi::Validatable) && !_transactions.valid?
      end

      unless (_cra_enabled = @cra_enabled).nil?
      end

      true
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] client_name Object to be assigned
    def client_name=(new_value : String?)
      raise ArgumentError.new("\"client_name\" is required and cannot be null") if new_value.nil?
      unless new_value.nil?
        OpenApi::PrimitiveValidator.validate_min_length("client_name", new_value.to_s.size, MIN_LENGTH_FOR_CLIENT_NAME)
      end

      @client_name = new_value
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] language Object to be assigned
    def language=(new_value : String?)
      raise ArgumentError.new("\"language\" is required and cannot be null") if new_value.nil?
      unless new_value.nil?
        OpenApi::PrimitiveValidator.validate_min_length("language", new_value.to_s.size, MIN_LENGTH_FOR_LANGUAGE)
      end

      @language = new_value
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] country_codes Object to be assigned
    def country_codes=(new_value : Array(CountryCode)?)
      raise ArgumentError.new("\"country_codes\" is required and cannot be null") if new_value.nil?
      unless new_value.nil?
        OpenApi::PrimitiveValidator.validate_min_items("country_codes", new_value.size, MIN_ITEMS_FOR_COUNTRY_CODES)
      end

      @country_codes = new_value
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] user Object to be assigned
    def user=(new_value : Plaid::LinkTokenCreateRequestUser?)
      raise ArgumentError.new("\"user\" is required and cannot be null") if new_value.nil?
      unless new_value.nil?
        new_value.validate if new_value.is_a?(OpenApi::Validatable)
      end

      @user = new_value
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] client_id Object to be assigned
    def client_id=(new_value : String?)
      unless new_value.nil?
      end

      @client_id = new_value
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] secret Object to be assigned
    def secret=(new_value : String?)
      unless new_value.nil?
      end

      @secret = new_value
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] products Object to be assigned
    def products=(new_value : Array(Products)?)
      unless new_value.nil?
      end

      @products = new_value
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] required_if_supported_products Object to be assigned
    def required_if_supported_products=(new_value : Array(Products)?)
      unless new_value.nil?
      end

      @required_if_supported_products = new_value
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] optional_products Object to be assigned
    def optional_products=(new_value : Array(Products)?)
      unless new_value.nil?
      end

      @optional_products = new_value
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] additional_consented_products Object to be assigned
    def additional_consented_products=(new_value : Array(Products)?)
      unless new_value.nil?
      end

      @additional_consented_products = new_value
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] webhook Object to be assigned
    def webhook=(new_value : String?)
      unless new_value.nil?
      end

      @webhook = new_value
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] access_token Object to be assigned
    def access_token=(new_value : String?)
      unless new_value.nil?
        OpenApi::PrimitiveValidator.validate_min_length("access_token", new_value.to_s.size, MIN_LENGTH_FOR_ACCESS_TOKEN)
      end

      @access_token = new_value
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] access_tokens Object to be assigned
    def access_tokens=(new_value : Array(String)?)
      unless new_value.nil?
      end

      @access_tokens = new_value
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] link_customization_name Object to be assigned
    def link_customization_name=(new_value : String?)
      unless new_value.nil?
      end

      @link_customization_name = new_value
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] redirect_uri Object to be assigned
    def redirect_uri=(new_value : String?)
      unless new_value.nil?
      end

      @redirect_uri = new_value
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] android_package_name Object to be assigned
    def android_package_name=(new_value : String?)
      unless new_value.nil?
      end

      @android_package_name = new_value
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] institution_data Object to be assigned
    def institution_data=(new_value : Plaid::LinkTokenCreateInstitutionData?)
      unless new_value.nil?
        new_value.validate if new_value.is_a?(OpenApi::Validatable)
      end

      @institution_data = new_value
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] card_switch Object to be assigned
    def card_switch=(new_value : Plaid::LinkTokenCreateCardSwitch?)
      unless new_value.nil?
        new_value.validate if new_value.is_a?(OpenApi::Validatable)
      end

      @card_switch = new_value
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] account_filters Object to be assigned
    def account_filters=(new_value : LinkTokenAccountFilters?)
      unless new_value.nil?
      end

      @account_filters = new_value
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] eu_config Object to be assigned
    def eu_config=(new_value : Plaid::LinkTokenEUConfig?)
      unless new_value.nil?
        new_value.validate if new_value.is_a?(OpenApi::Validatable)
      end

      @eu_config = new_value
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] institution_id Object to be assigned
    def institution_id=(new_value : String?)
      unless new_value.nil?
      end

      @institution_id = new_value
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] payment_initiation Object to be assigned
    def payment_initiation=(new_value : Plaid::LinkTokenCreateRequestPaymentInitiation?)
      unless new_value.nil?
        new_value.validate if new_value.is_a?(OpenApi::Validatable)
      end

      @payment_initiation = new_value
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] deposit_switch Object to be assigned
    def deposit_switch=(new_value : Plaid::LinkTokenCreateRequestDepositSwitch?)
      unless new_value.nil?
        new_value.validate if new_value.is_a?(OpenApi::Validatable)
      end

      @deposit_switch = new_value
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] employment Object to be assigned
    def employment=(new_value : Plaid::LinkTokenCreateRequestEmployment?)
      unless new_value.nil?
        new_value.validate if new_value.is_a?(OpenApi::Validatable)
      end

      @employment = new_value
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] income_verification Object to be assigned
    def income_verification=(new_value : Plaid::LinkTokenCreateRequestIncomeVerification?)
      unless new_value.nil?
        new_value.validate if new_value.is_a?(OpenApi::Validatable)
      end

      @income_verification = new_value
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] base_report Object to be assigned
    def base_report=(new_value : Plaid::LinkTokenCreateRequestBaseReport?)
      unless new_value.nil?
        new_value.validate if new_value.is_a?(OpenApi::Validatable)
      end

      @base_report = new_value
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] consumer_report_permissible_purpose Object to be assigned
    def consumer_report_permissible_purpose=(new_value : Plaid::ConsumerReportPermissiblePurpose?)
      unless new_value.nil?
        new_value.validate
      end

      @consumer_report_permissible_purpose = new_value
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] auth Object to be assigned
    def auth=(new_value : Plaid::LinkTokenCreateRequestAuth?)
      unless new_value.nil?
        new_value.validate if new_value.is_a?(OpenApi::Validatable)
      end

      @auth = new_value
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] transfer Object to be assigned
    def transfer=(new_value : Plaid::LinkTokenCreateRequestTransfer?)
      unless new_value.nil?
        new_value.validate if new_value.is_a?(OpenApi::Validatable)
      end

      @transfer = new_value
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] update Object to be assigned
    def update=(new_value : Plaid::LinkTokenCreateRequestUpdate?)
      unless new_value.nil?
        new_value.validate if new_value.is_a?(OpenApi::Validatable)
      end

      @update = new_value
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] identity_verification Object to be assigned
    def identity_verification=(new_value : Plaid::LinkTokenCreateRequestIdentityVerification?)
      unless new_value.nil?
        new_value.validate if new_value.is_a?(OpenApi::Validatable)
      end

      @identity_verification = new_value
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] statements Object to be assigned
    def statements=(new_value : Plaid::LinkTokenCreateRequestStatements?)
      unless new_value.nil?
        new_value.validate if new_value.is_a?(OpenApi::Validatable)
      end

      @statements = new_value
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] user_token Object to be assigned
    def user_token=(new_value : String?)
      unless new_value.nil?
      end

      @user_token = new_value
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] investments Object to be assigned
    def investments=(new_value : Plaid::LinkTokenInvestments?)
      unless new_value.nil?
        new_value.validate if new_value.is_a?(OpenApi::Validatable)
      end

      @investments = new_value
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] investments_auth Object to be assigned
    def investments_auth=(new_value : Plaid::LinkTokenInvestmentsAuth?)
      unless new_value.nil?
        new_value.validate if new_value.is_a?(OpenApi::Validatable)
      end

      @investments_auth = new_value
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] hosted_link Object to be assigned
    def hosted_link=(new_value : LinkTokenCreateHostedLink?)
      unless new_value.nil?
      end

      @hosted_link = new_value
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] transactions Object to be assigned
    def transactions=(new_value : Plaid::LinkTokenTransactions?)
      unless new_value.nil?
        new_value.validate if new_value.is_a?(OpenApi::Validatable)
      end

      @transactions = new_value
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] cra_enabled Object to be assigned
    def cra_enabled=(new_value : Bool?)
      unless new_value.nil?
      end

      @cra_enabled = new_value
    end

    # Generates #hash and #== methods from all fields
    # #== @return [Bool]
    # #hash calculates hash code according to all attributes.
    # #hash @return [UInt64] Hash code
    def_equals_and_hash(@client_name, @language, @country_codes, @user, @client_id, @secret, @products, @products_present, @required_if_supported_products, @required_if_supported_products_present, @optional_products, @optional_products_present, @additional_consented_products, @additional_consented_products_present, @webhook, @access_token, @access_token_present, @access_tokens, @link_customization_name, @redirect_uri, @android_package_name, @institution_data, @card_switch, @account_filters, @eu_config, @institution_id, @payment_initiation, @deposit_switch, @employment, @income_verification, @base_report, @consumer_report_permissible_purpose, @auth, @transfer, @update, @identity_verification, @statements, @user_token, @investments, @investments_auth, @hosted_link, @transactions, @cra_enabled)
  end
end
