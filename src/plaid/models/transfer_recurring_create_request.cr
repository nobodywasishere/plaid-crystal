#  The Plaid API
#
# The Plaid REST API. Please see https://plaid.com/docs/api for more details.
#
# The version of the OpenAPI document: 2020-09-14_1.474.3
#
# Generated by: https://openapi-generator.tech
#

require "../../core"

require "./ach_class"
require "./transfer_device"
require "./transfer_network"
require "./transfer_recurring_schedule"
require "./transfer_type"
require "./transfer_user_in_request"

module Plaid
  # Defines the request schema for `/transfer/recurring/create`
  class TransferRecurringCreateRequest
    include JSON::Serializable
    include JSON::Serializable::Unmapped
    include OpenApi::Validatable
    include OpenApi::Json

    # Required Properties

    # The Plaid `access_token` for the account that will be debited or credited.
    @[JSON::Field(key: "access_token", type: String?, default: nil, required: true, nullable: false, emit_null: false)]
    getter access_token : String? = nil

    # A random key provided by the client, per unique recurring transfer. Maximum of 50 characters.  The API supports idempotency for safely retrying requests without accidentally performing the same operation twice. For example, if a request to create a recurring fails due to a network connection error, you can retry the request with the same idempotency key to guarantee that only a single recurring transfer is created.
    @[JSON::Field(key: "idempotency_key", type: String?, default: nil, required: true, nullable: false, emit_null: false)]
    getter idempotency_key : String? = nil
    MAX_LENGTH_FOR_IDEMPOTENCY_KEY = 50

    # The Plaid `account_id` corresponding to the end-user account that will be debited or credited.
    @[JSON::Field(key: "account_id", type: String?, default: nil, required: true, nullable: false, emit_null: false)]
    getter account_id : String? = nil

    @[JSON::Field(key: "type", type: Plaid::TransferType?, default: nil, required: true, nullable: false, emit_null: false)]
    getter _type : Plaid::TransferType? = nil

    @[JSON::Field(key: "network", type: Plaid::TransferNetwork?, default: nil, required: true, nullable: false, emit_null: false)]
    getter network : Plaid::TransferNetwork? = nil

    # The amount of the transfer (decimal string with two digits of precision e.g. \"10.00\"). When calling `/transfer/authorization/create`, specify the maximum amount to authorize. When calling `/transfer/create`, specify the exact amount of the transfer, up to a maximum of the amount authorized. If this field is left blank when calling `/transfer/create`, the maximum amount authorized in the `authorization_id` will be sent.
    @[JSON::Field(key: "amount", type: String?, default: nil, required: true, nullable: false, emit_null: false)]
    getter amount : String? = nil

    # The description of the recurring transfer.
    @[JSON::Field(key: "description", type: String?, default: nil, required: true, nullable: false, emit_null: false)]
    getter description : String? = nil

    @[JSON::Field(key: "schedule", type: Plaid::TransferRecurringSchedule?, default: nil, required: true, nullable: false, emit_null: false)]
    getter schedule : Plaid::TransferRecurringSchedule? = nil

    @[JSON::Field(key: "user", type: Plaid::TransferUserInRequest?, default: nil, required: true, nullable: false, emit_null: false)]
    getter user : Plaid::TransferUserInRequest? = nil

    # End of Required Properties

    # Optional Properties

    # Your Plaid API `client_id`. The `client_id` is required and may be provided either in the `PLAID-CLIENT-ID` header or as part of a request body.
    @[JSON::Field(key: "client_id", type: String?, default: nil, required: false, nullable: false, emit_null: false)]
    getter client_id : String? = nil

    # Your Plaid API `secret`. The `secret` is required and may be provided either in the `PLAID-SECRET` header or as part of a request body.
    @[JSON::Field(key: "secret", type: String?, default: nil, required: false, nullable: false, emit_null: false)]
    getter secret : String? = nil

    # Specify the account used to fund the transfer. Customers can find a list of `funding_account_id`s in the Accounts page of your Plaid Dashboard, under the \"Account ID\" column. If this field is left blank, it will default to the default `funding_account_id` specified during onboarding.
    @[JSON::Field(key: "funding_account_id", type: String?, default: nil, required: false, nullable: true, emit_null: true, presence: true, ignore_serialize: funding_account_id.nil? && !funding_account_id_present?)]
    getter funding_account_id : String? = nil

    @[JSON::Field(ignore: true)]
    property? funding_account_id_present : Bool = false

    @[JSON::Field(key: "ach_class", type: Plaid::ACHClass?, default: nil, required: false, nullable: false, emit_null: false)]
    getter ach_class : Plaid::ACHClass? = nil

    # If the end user is initiating the specific transfer themselves via an interactive UI, this should be `true`; for automatic recurring payments where the end user is not actually initiating each individual transfer, it should be `false`.
    @[JSON::Field(key: "user_present", type: Bool?, default: nil, required: false, nullable: true, emit_null: true, presence: true, ignore_serialize: user_present.nil? && !user_present_present?)]
    getter user_present : Bool? = nil

    @[JSON::Field(ignore: true)]
    property? user_present_present : Bool = false

    # The currency of the transfer amount. The default value is \"USD\".
    @[JSON::Field(key: "iso_currency_code", type: String?, default: nil, required: false, nullable: false, emit_null: false)]
    getter iso_currency_code : String? = nil

    # Plaidâ€™s unique identifier for a test clock. This field may only be used when using `sandbox` environment. If provided, the created `recurring_transfer` is associated with the `test_clock`. New originations are automatically generated when the associated `test_clock` advances.
    @[JSON::Field(key: "test_clock_id", type: String?, default: nil, required: false, nullable: true, emit_null: true, presence: true, ignore_serialize: test_clock_id.nil? && !test_clock_id_present?)]
    getter test_clock_id : String? = nil

    @[JSON::Field(ignore: true)]
    property? test_clock_id_present : Bool = false

    @[JSON::Field(key: "device", type: TransferDevice?, default: nil, required: false, nullable: false, emit_null: false)]
    getter device : TransferDevice? = nil

    # Initializes the object
    # @param [Hash] attributes Model attributes in the form of hash
    def initialize(
      *,
      # Required properties
      @access_token : String? = nil,
      @idempotency_key : String? = nil,
      @account_id : String? = nil,
      @_type : Plaid::TransferType? = nil,
      @network : Plaid::TransferNetwork? = nil,
      @amount : String? = nil,
      @description : String? = nil,
      @schedule : Plaid::TransferRecurringSchedule? = nil,
      @user : Plaid::TransferUserInRequest? = nil,
      # Optional properties
      @client_id : String? = nil,
      @secret : String? = nil,
      @funding_account_id : String? = nil,
      @ach_class : Plaid::ACHClass? = nil,
      @user_present : Bool? = nil,
      @iso_currency_code : String? = nil,
      @test_clock_id : String? = nil,
      @device : TransferDevice? = nil
    )
    end

    # Show invalid properties with the reasons. Usually used together with valid?
    # @return Array for valid properties with the reasons
    def list_invalid_properties : Array(String)
      invalid_properties = Array(String).new

      invalid_properties.push("\"access_token\" is required and cannot be null") if @access_token.nil?

      unless (_access_token = @access_token).nil?
      end
      invalid_properties.push("\"idempotency_key\" is required and cannot be null") if @idempotency_key.nil?

      unless (_idempotency_key = @idempotency_key).nil?
        if max_length_error = OpenApi::PrimitiveValidator.max_length_error("idempotency_key", _idempotency_key.to_s.size, MAX_LENGTH_FOR_IDEMPOTENCY_KEY)
          invalid_properties.push(max_length_error)
        end
      end
      invalid_properties.push("\"account_id\" is required and cannot be null") if @account_id.nil?

      unless (_account_id = @account_id).nil?
      end
      invalid_properties.push("\"_type\" is required and cannot be null") if @_type.nil?

      unless (__type = @_type).nil?
        invalid_properties.push(__type.error_message) if !__type.valid?
      end
      invalid_properties.push("\"network\" is required and cannot be null") if @network.nil?

      unless (_network = @network).nil?
        invalid_properties.push(_network.error_message) if !_network.valid?
      end
      invalid_properties.push("\"amount\" is required and cannot be null") if @amount.nil?

      unless (_amount = @amount).nil?
      end
      invalid_properties.push("\"description\" is required and cannot be null") if @description.nil?

      unless (_description = @description).nil?
      end
      invalid_properties.push("\"schedule\" is required and cannot be null") if @schedule.nil?

      unless (_schedule = @schedule).nil?
        invalid_properties.concat(_schedule.list_invalid_properties_for("schedule")) if _schedule.is_a?(OpenApi::Validatable)
      end
      invalid_properties.push("\"user\" is required and cannot be null") if @user.nil?

      unless (_user = @user).nil?
        invalid_properties.concat(_user.list_invalid_properties_for("user")) if _user.is_a?(OpenApi::Validatable)
      end
      unless (_client_id = @client_id).nil?
      end
      unless (_secret = @secret).nil?
      end
      unless (_funding_account_id = @funding_account_id).nil?
      end
      unless (_ach_class = @ach_class).nil?
        invalid_properties.push(_ach_class.error_message) if !_ach_class.valid?
      end
      unless (_user_present = @user_present).nil?
      end
      unless (_iso_currency_code = @iso_currency_code).nil?
      end
      unless (_test_clock_id = @test_clock_id).nil?
      end
      unless (_device = @device).nil?
      end
      invalid_properties
    end

    # Check to see if the all the properties in the model are valid
    # @return true if the model is valid
    def valid? : Bool
      return false if @access_token.nil?
      unless (_access_token = @access_token).nil?
      end

      return false if @idempotency_key.nil?
      unless (_idempotency_key = @idempotency_key).nil?
        return false if _idempotency_key.to_s.size > MAX_LENGTH_FOR_IDEMPOTENCY_KEY
      end

      return false if @account_id.nil?
      unless (_account_id = @account_id).nil?
      end

      return false if @_type.nil?
      unless (__type = @_type).nil?
        return false if !__type.valid?
      end

      return false if @network.nil?
      unless (_network = @network).nil?
        return false if !_network.valid?
      end

      return false if @amount.nil?
      unless (_amount = @amount).nil?
      end

      return false if @description.nil?
      unless (_description = @description).nil?
      end

      return false if @schedule.nil?
      unless (_schedule = @schedule).nil?
        return false if _schedule.is_a?(OpenApi::Validatable) && !_schedule.valid?
      end

      return false if @user.nil?
      unless (_user = @user).nil?
        return false if _user.is_a?(OpenApi::Validatable) && !_user.valid?
      end

      unless (_client_id = @client_id).nil?
      end

      unless (_secret = @secret).nil?
      end

      unless (_funding_account_id = @funding_account_id).nil?
      end

      unless (_ach_class = @ach_class).nil?
        return false if !_ach_class.valid?
      end

      unless (_user_present = @user_present).nil?
      end

      unless (_iso_currency_code = @iso_currency_code).nil?
      end

      unless (_test_clock_id = @test_clock_id).nil?
      end

      unless (_device = @device).nil?
      end

      true
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] access_token Object to be assigned
    def access_token=(new_value : String?)
      raise ArgumentError.new("\"access_token\" is required and cannot be null") if new_value.nil?
      unless new_value.nil?
      end

      @access_token = new_value
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] idempotency_key Object to be assigned
    def idempotency_key=(new_value : String?)
      raise ArgumentError.new("\"idempotency_key\" is required and cannot be null") if new_value.nil?
      unless new_value.nil?
        OpenApi::PrimitiveValidator.validate_max_length("idempotency_key", new_value.to_s.size, MAX_LENGTH_FOR_IDEMPOTENCY_KEY)
      end

      @idempotency_key = new_value
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] account_id Object to be assigned
    def account_id=(new_value : String?)
      raise ArgumentError.new("\"account_id\" is required and cannot be null") if new_value.nil?
      unless new_value.nil?
      end

      @account_id = new_value
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] _type Object to be assigned
    def _type=(new_value : Plaid::TransferType?)
      raise ArgumentError.new("\"_type\" is required and cannot be null") if new_value.nil?
      unless new_value.nil?
        new_value.validate
      end

      @_type = new_value
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] network Object to be assigned
    def network=(new_value : Plaid::TransferNetwork?)
      raise ArgumentError.new("\"network\" is required and cannot be null") if new_value.nil?
      unless new_value.nil?
        new_value.validate
      end

      @network = new_value
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] amount Object to be assigned
    def amount=(new_value : String?)
      raise ArgumentError.new("\"amount\" is required and cannot be null") if new_value.nil?
      unless new_value.nil?
      end

      @amount = new_value
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] description Object to be assigned
    def description=(new_value : String?)
      raise ArgumentError.new("\"description\" is required and cannot be null") if new_value.nil?
      unless new_value.nil?
      end

      @description = new_value
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] schedule Object to be assigned
    def schedule=(new_value : Plaid::TransferRecurringSchedule?)
      raise ArgumentError.new("\"schedule\" is required and cannot be null") if new_value.nil?
      unless new_value.nil?
        new_value.validate if new_value.is_a?(OpenApi::Validatable)
      end

      @schedule = new_value
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] user Object to be assigned
    def user=(new_value : Plaid::TransferUserInRequest?)
      raise ArgumentError.new("\"user\" is required and cannot be null") if new_value.nil?
      unless new_value.nil?
        new_value.validate if new_value.is_a?(OpenApi::Validatable)
      end

      @user = new_value
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] client_id Object to be assigned
    def client_id=(new_value : String?)
      unless new_value.nil?
      end

      @client_id = new_value
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] secret Object to be assigned
    def secret=(new_value : String?)
      unless new_value.nil?
      end

      @secret = new_value
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] funding_account_id Object to be assigned
    def funding_account_id=(new_value : String?)
      unless new_value.nil?
      end

      @funding_account_id = new_value
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] ach_class Object to be assigned
    def ach_class=(new_value : Plaid::ACHClass?)
      unless new_value.nil?
        new_value.validate
      end

      @ach_class = new_value
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] user_present Object to be assigned
    def user_present=(new_value : Bool?)
      unless new_value.nil?
      end

      @user_present = new_value
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] iso_currency_code Object to be assigned
    def iso_currency_code=(new_value : String?)
      unless new_value.nil?
      end

      @iso_currency_code = new_value
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] test_clock_id Object to be assigned
    def test_clock_id=(new_value : String?)
      unless new_value.nil?
      end

      @test_clock_id = new_value
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] device Object to be assigned
    def device=(new_value : TransferDevice?)
      unless new_value.nil?
      end

      @device = new_value
    end

    # Generates #hash and #== methods from all fields
    # #== @return [Bool]
    # #hash calculates hash code according to all attributes.
    # #hash @return [UInt64] Hash code
    def_equals_and_hash(@access_token, @idempotency_key, @account_id, @_type, @network, @amount, @description, @schedule, @user, @client_id, @secret, @funding_account_id, @funding_account_id_present, @ach_class, @user_present, @user_present_present, @iso_currency_code, @test_clock_id, @test_clock_id_present, @device)
  end
end
