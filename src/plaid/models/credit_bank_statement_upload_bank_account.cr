#  The Plaid API
#
# The Plaid REST API. Please see https://plaid.com/docs/api for more details.
#
# The version of the OpenAPI document: 2020-09-14_1.474.3
#
# Generated by: https://openapi-generator.tech
#

require "../../core"

require "./credit_bank_statement_upload_account_owner"
require "./credit_bank_statement_upload_bank_account_period"

module Plaid
  # An object containing data about a user's bank account related to an uploaded bank statement.
  class CreditBankStatementUploadBankAccount
    include JSON::Serializable
    include JSON::Serializable::Unmapped
    include OpenApi::Validatable
    include OpenApi::Json

    # Required Properties

    # The name of the bank account
    @[JSON::Field(key: "name", type: String?, default: nil, required: true, nullable: true, emit_null: true)]
    getter name : String? = nil

    # The name of the bank institution.
    @[JSON::Field(key: "bank_name", type: String?, default: nil, required: true, nullable: true, emit_null: true)]
    getter bank_name : String? = nil

    # The type of the bank account.
    @[JSON::Field(key: "account_type", type: String?, default: nil, required: true, nullable: true, emit_null: true)]
    getter account_type : String? = nil

    # The bank account number.
    @[JSON::Field(key: "account_number", type: String?, default: nil, required: true, nullable: true, emit_null: true)]
    getter account_number : String? = nil

    @[JSON::Field(key: "owner", type: CreditBankStatementUploadAccountOwner?, default: nil, required: true, nullable: false, emit_null: false)]
    getter owner : CreditBankStatementUploadAccountOwner? = nil

    # An array of period objects, containing more data on the overall period of the statement.
    @[JSON::Field(key: "periods", type: Array(Plaid::CreditBankStatementUploadBankAccountPeriod)?, default: nil, required: true, nullable: false, emit_null: false)]
    getter periods : Array(Plaid::CreditBankStatementUploadBankAccountPeriod)? = nil

    # The unique id of the bank account
    @[JSON::Field(key: "account_id", type: String?, default: nil, required: true, nullable: true, emit_null: true)]
    getter account_id : String? = nil

    # End of Required Properties

    # Initializes the object
    # @param [Hash] attributes Model attributes in the form of hash
    def initialize(
      *,
      # Required properties
      @name : String? = nil,
      @bank_name : String? = nil,
      @account_type : String? = nil,
      @account_number : String? = nil,
      @owner : CreditBankStatementUploadAccountOwner? = nil,
      @periods : Array(Plaid::CreditBankStatementUploadBankAccountPeriod)? = nil,
      @account_id : String? = nil
    )
    end

    # Show invalid properties with the reasons. Usually used together with valid?
    # @return Array for valid properties with the reasons
    def list_invalid_properties : Array(String)
      invalid_properties = Array(String).new

      unless (_name = @name).nil?
      end
      unless (_bank_name = @bank_name).nil?
      end
      unless (_account_type = @account_type).nil?
      end
      unless (_account_number = @account_number).nil?
      end
      invalid_properties.push("\"owner\" is required and cannot be null") if @owner.nil?

      unless (_owner = @owner).nil?
      end
      invalid_properties.push("\"periods\" is required and cannot be null") if @periods.nil?

      unless (_periods = @periods).nil?
        invalid_properties.concat(OpenApi::ContainerValidator.list_invalid_properties_for(key: "periods", container: _periods)) if _periods.is_a?(Array)
      end
      unless (_account_id = @account_id).nil?
      end
      invalid_properties
    end

    # Check to see if the all the properties in the model are valid
    # @return true if the model is valid
    def valid? : Bool
      unless (_name = @name).nil?
      end

      unless (_bank_name = @bank_name).nil?
      end

      unless (_account_type = @account_type).nil?
      end

      unless (_account_number = @account_number).nil?
      end

      return false if @owner.nil?
      unless (_owner = @owner).nil?
      end

      return false if @periods.nil?
      unless (_periods = @periods).nil?
        return false if _periods.is_a?(Array) && !OpenApi::ContainerValidator.valid?(container: _periods)
      end

      unless (_account_id = @account_id).nil?
      end

      true
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] name Object to be assigned
    def name=(new_value : String?)
      unless new_value.nil?
      end

      @name = new_value
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] bank_name Object to be assigned
    def bank_name=(new_value : String?)
      unless new_value.nil?
      end

      @bank_name = new_value
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] account_type Object to be assigned
    def account_type=(new_value : String?)
      unless new_value.nil?
      end

      @account_type = new_value
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] account_number Object to be assigned
    def account_number=(new_value : String?)
      unless new_value.nil?
      end

      @account_number = new_value
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] owner Object to be assigned
    def owner=(new_value : CreditBankStatementUploadAccountOwner?)
      raise ArgumentError.new("\"owner\" is required and cannot be null") if new_value.nil?
      unless new_value.nil?
      end

      @owner = new_value
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] periods Object to be assigned
    def periods=(new_value : Array(Plaid::CreditBankStatementUploadBankAccountPeriod)?)
      raise ArgumentError.new("\"periods\" is required and cannot be null") if new_value.nil?
      unless new_value.nil?
        OpenApi::ContainerValidator.validate(container: new_value) if new_value.is_a?(Array)
      end

      @periods = new_value
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] account_id Object to be assigned
    def account_id=(new_value : String?)
      unless new_value.nil?
      end

      @account_id = new_value
    end

    # Generates #hash and #== methods from all fields
    # #== @return [Bool]
    # #hash calculates hash code according to all attributes.
    # #hash @return [UInt64] Hash code
    def_equals_and_hash(@name, @bank_name, @account_type, @account_number, @owner, @periods, @account_id)
  end
end
