#  The Plaid API
#
# The Plaid REST API. Please see https://plaid.com/docs/api for more details.
#
# The version of the OpenAPI document: 2020-09-14_1.474.3
#
# Generated by: https://openapi-generator.tech
#

require "../../core"

module Plaid
  # PaymentInitiationPaymentListRequest defines the request schema for `/payment_initiation/payment/list`
  class PaymentInitiationPaymentListRequest
    include JSON::Serializable
    include JSON::Serializable::Unmapped
    include OpenApi::Validatable
    include OpenApi::Json

    # Optional Properties

    # Your Plaid API `client_id`. The `client_id` is required and may be provided either in the `PLAID-CLIENT-ID` header or as part of a request body.
    @[JSON::Field(key: "client_id", type: String?, default: nil, required: false, nullable: false, emit_null: false)]
    getter client_id : String? = nil

    # Your Plaid API `secret`. The `secret` is required and may be provided either in the `PLAID-SECRET` header or as part of a request body.
    @[JSON::Field(key: "secret", type: String?, default: nil, required: false, nullable: false, emit_null: false)]
    getter secret : String? = nil

    # The maximum number of payments to return. If `count` is not specified, a maximum of 10 payments will be returned, beginning with the most recent payment before the cursor (if specified).
    @[JSON::Field(key: "count", type: Int32?, default: 10, required: false, nullable: true, emit_null: true, presence: true, ignore_serialize: count.nil? && !count_present?)]
    getter count : Int32? = 10
    MAX_FOR_COUNT = Int32.new("200")
    MIN_FOR_COUNT = Int32.new("1")

    @[JSON::Field(ignore: true)]
    property? count_present : Bool = false

    # A string in RFC 3339 format (i.e. \"2019-12-06T22:35:49Z\"). Only payments created before the cursor will be returned.
    @[JSON::Field(key: "cursor", type: Time?, default: nil, required: false, nullable: true, emit_null: true, presence: true, ignore_serialize: cursor.nil? && !cursor_present?, converter: Time::RFC3339Converter)]
    getter cursor : Time? = nil

    @[JSON::Field(ignore: true)]
    property? cursor_present : Bool = false

    # The consent ID. If specified, only payments, executed using this consent, will be returned.
    @[JSON::Field(key: "consent_id", type: String?, default: nil, required: false, nullable: true, emit_null: true, presence: true, ignore_serialize: consent_id.nil? && !consent_id_present?)]
    getter consent_id : String? = nil

    @[JSON::Field(ignore: true)]
    property? consent_id_present : Bool = false

    # Initializes the object
    # @param [Hash] attributes Model attributes in the form of hash
    def initialize(
      *,
      # Optional properties
      @client_id : String? = nil,
      @secret : String? = nil,
      @count : Int32? = 10,
      @cursor : Time? = nil,
      @consent_id : String? = nil
    )
    end

    # Show invalid properties with the reasons. Usually used together with valid?
    # @return Array for valid properties with the reasons
    def list_invalid_properties : Array(String)
      invalid_properties = Array(String).new

      unless (_client_id = @client_id).nil?
      end
      unless (_secret = @secret).nil?
      end
      unless (_count = @count).nil?
        if max_number_error = OpenApi::PrimitiveValidator.max_number_error("count", _count, MAX_FOR_COUNT)
          invalid_properties.push(max_number_error)
        end

        if min_number_error = OpenApi::PrimitiveValidator.min_number_error("count", _count, MIN_FOR_COUNT)
          invalid_properties.push(min_number_error)
        end
      end
      unless (_cursor = @cursor).nil?
      end
      unless (_consent_id = @consent_id).nil?
      end
      invalid_properties
    end

    # Check to see if the all the properties in the model are valid
    # @return true if the model is valid
    def valid? : Bool
      unless (_client_id = @client_id).nil?
      end

      unless (_secret = @secret).nil?
      end

      unless (_count = @count).nil?
        return false if _count > MAX_FOR_COUNT
        return false if _count < MIN_FOR_COUNT
      end

      unless (_cursor = @cursor).nil?
      end

      unless (_consent_id = @consent_id).nil?
      end

      true
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] client_id Object to be assigned
    def client_id=(new_value : String?)
      unless new_value.nil?
      end

      @client_id = new_value
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] secret Object to be assigned
    def secret=(new_value : String?)
      unless new_value.nil?
      end

      @secret = new_value
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] count Object to be assigned
    def count=(new_value : Int32?)
      unless new_value.nil?
        OpenApi::PrimitiveValidator.validate_max_number("count", new_value, MAX_FOR_COUNT)
        OpenApi::PrimitiveValidator.validate_min_number("count", new_value, MIN_FOR_COUNT)
      end

      @count = new_value
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] cursor Object to be assigned
    def cursor=(new_value : Time?)
      unless new_value.nil?
      end

      @cursor = new_value
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] consent_id Object to be assigned
    def consent_id=(new_value : String?)
      unless new_value.nil?
      end

      @consent_id = new_value
    end

    # Generates #hash and #== methods from all fields
    # #== @return [Bool]
    # #hash calculates hash code according to all attributes.
    # #hash @return [UInt64] Hash code
    def_equals_and_hash(@client_id, @secret, @count, @count_present, @cursor, @cursor_present, @consent_id, @consent_id_present)
  end
end
