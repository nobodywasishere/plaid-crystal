#  The Plaid API
#
# The Plaid REST API. Please see https://plaid.com/docs/api for more details.
#
# The version of the OpenAPI document: 2020-09-14_1.474.3
#
# Generated by: https://openapi-generator.tech
#

require "../../core"

require "./payment_consent_max_payment_amount"
require "./payment_consent_periodic_amount"
require "./payment_consent_valid_date_time"

module Plaid
  # Limitations that will be applied to payments initiated using the payment consent.
  class PaymentInitiationConsentConstraints
    include JSON::Serializable
    include JSON::Serializable::Unmapped
    include OpenApi::Validatable
    include OpenApi::Json

    # Required Properties

    @[JSON::Field(key: "max_payment_amount", type: Plaid::PaymentConsentMaxPaymentAmount?, default: nil, required: true, nullable: false, emit_null: false)]
    getter max_payment_amount : Plaid::PaymentConsentMaxPaymentAmount? = nil

    # A list of amount limitations per period of time.
    @[JSON::Field(key: "periodic_amounts", type: Array(Plaid::PaymentConsentPeriodicAmount)?, default: nil, required: true, nullable: false, emit_null: false)]
    getter periodic_amounts : Array(Plaid::PaymentConsentPeriodicAmount)? = nil
    MIN_ITEMS_FOR_PERIODIC_AMOUNTS = 1

    # End of Required Properties

    # Optional Properties

    @[JSON::Field(key: "valid_date_time", type: Plaid::PaymentConsentValidDateTime?, default: nil, required: false, nullable: true, emit_null: true, presence: true, ignore_serialize: valid_date_time.nil? && !valid_date_time_present?)]
    getter valid_date_time : Plaid::PaymentConsentValidDateTime? = nil

    @[JSON::Field(ignore: true)]
    property? valid_date_time_present : Bool = false

    # Initializes the object
    # @param [Hash] attributes Model attributes in the form of hash
    def initialize(
      *,
      # Required properties
      @max_payment_amount : Plaid::PaymentConsentMaxPaymentAmount? = nil,
      @periodic_amounts : Array(Plaid::PaymentConsentPeriodicAmount)? = nil,
      # Optional properties
      @valid_date_time : Plaid::PaymentConsentValidDateTime? = nil
    )
    end

    # Show invalid properties with the reasons. Usually used together with valid?
    # @return Array for valid properties with the reasons
    def list_invalid_properties : Array(String)
      invalid_properties = Array(String).new

      invalid_properties.push("\"max_payment_amount\" is required and cannot be null") if @max_payment_amount.nil?

      unless (_max_payment_amount = @max_payment_amount).nil?
        invalid_properties.concat(_max_payment_amount.list_invalid_properties_for("max_payment_amount")) if _max_payment_amount.is_a?(OpenApi::Validatable)
      end
      invalid_properties.push("\"periodic_amounts\" is required and cannot be null") if @periodic_amounts.nil?

      unless (_periodic_amounts = @periodic_amounts).nil?
        invalid_properties.concat(OpenApi::ContainerValidator.list_invalid_properties_for(key: "periodic_amounts", container: _periodic_amounts)) if _periodic_amounts.is_a?(Array)

        if min_items_error = OpenApi::PrimitiveValidator.min_items_error("periodic_amounts", _periodic_amounts.size, MIN_ITEMS_FOR_PERIODIC_AMOUNTS)
          invalid_properties.push(min_items_error)
        end
      end
      unless (_valid_date_time = @valid_date_time).nil?
        invalid_properties.concat(_valid_date_time.list_invalid_properties_for("valid_date_time")) if _valid_date_time.is_a?(OpenApi::Validatable)
      end
      invalid_properties
    end

    # Check to see if the all the properties in the model are valid
    # @return true if the model is valid
    def valid? : Bool
      return false if @max_payment_amount.nil?
      unless (_max_payment_amount = @max_payment_amount).nil?
        return false if _max_payment_amount.is_a?(OpenApi::Validatable) && !_max_payment_amount.valid?
      end

      return false if @periodic_amounts.nil?
      unless (_periodic_amounts = @periodic_amounts).nil?
        return false if _periodic_amounts.is_a?(Array) && !OpenApi::ContainerValidator.valid?(container: _periodic_amounts)
        return false if _periodic_amounts.size < MIN_ITEMS_FOR_PERIODIC_AMOUNTS
      end

      unless (_valid_date_time = @valid_date_time).nil?
        return false if _valid_date_time.is_a?(OpenApi::Validatable) && !_valid_date_time.valid?
      end

      true
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] max_payment_amount Object to be assigned
    def max_payment_amount=(new_value : Plaid::PaymentConsentMaxPaymentAmount?)
      raise ArgumentError.new("\"max_payment_amount\" is required and cannot be null") if new_value.nil?
      unless new_value.nil?
        new_value.validate if new_value.is_a?(OpenApi::Validatable)
      end

      @max_payment_amount = new_value
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] periodic_amounts Object to be assigned
    def periodic_amounts=(new_value : Array(Plaid::PaymentConsentPeriodicAmount)?)
      raise ArgumentError.new("\"periodic_amounts\" is required and cannot be null") if new_value.nil?
      unless new_value.nil?
        OpenApi::ContainerValidator.validate(container: new_value) if new_value.is_a?(Array)
        OpenApi::PrimitiveValidator.validate_min_items("periodic_amounts", new_value.size, MIN_ITEMS_FOR_PERIODIC_AMOUNTS)
      end

      @periodic_amounts = new_value
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] valid_date_time Object to be assigned
    def valid_date_time=(new_value : Plaid::PaymentConsentValidDateTime?)
      unless new_value.nil?
        new_value.validate if new_value.is_a?(OpenApi::Validatable)
      end

      @valid_date_time = new_value
    end

    # Generates #hash and #== methods from all fields
    # #== @return [Bool]
    # #hash calculates hash code according to all attributes.
    # #hash @return [UInt64] Hash code
    def_equals_and_hash(@max_payment_amount, @periodic_amounts, @valid_date_time, @valid_date_time_present)
  end
end
