#  The Plaid API
#
# The Plaid REST API. Please see https://plaid.com/docs/api for more details.
#
# The version of the OpenAPI document: 2020-09-14_1.474.3
#
# Generated by: https://openapi-generator.tech
#

require "../../core"

require "./fdx_content_types"
require "./fdx_hateoas_link_action"

module Plaid
  # REST application constraint (Hypermedia As The Engine Of Application State)
  class FDXHateoasLink
    include JSON::Serializable
    include JSON::Serializable::Unmapped
    include OpenApi::Validatable
    include OpenApi::Json

    # Required Properties

    # URL to invoke the action on the resource
    @[JSON::Field(key: "href", type: String?, default: nil, required: true, nullable: false, emit_null: false)]
    getter href : String? = nil

    # End of Required Properties

    # Optional Properties

    @[JSON::Field(key: "action", type: Plaid::FDXHateoasLinkAction?, default: nil, required: false, nullable: false, emit_null: false)]
    getter action : Plaid::FDXHateoasLinkAction? = nil

    # Relation of this link to its containing entity, as defined by and with many example relation values at [IETF RFC5988](https://datatracker.ietf.org/doc/html/rfc5988)
    @[JSON::Field(key: "rel", type: String?, default: nil, required: false, nullable: false, emit_null: false)]
    getter rel : String? = nil

    # Content-types that can be used in the Accept header
    @[JSON::Field(key: "types", type: Array(FDXContentTypes)?, default: nil, required: false, nullable: false, emit_null: false)]
    getter types : Array(FDXContentTypes)? = nil

    # Initializes the object
    # @param [Hash] attributes Model attributes in the form of hash
    def initialize(
      *,
      # Required properties
      @href : String? = nil,
      # Optional properties
      @action : Plaid::FDXHateoasLinkAction? = nil,
      @rel : String? = nil,
      @types : Array(FDXContentTypes)? = nil
    )
    end

    # Show invalid properties with the reasons. Usually used together with valid?
    # @return Array for valid properties with the reasons
    def list_invalid_properties : Array(String)
      invalid_properties = Array(String).new

      invalid_properties.push("\"href\" is required and cannot be null") if @href.nil?

      unless (_href = @href).nil?
      end
      unless (_action = @action).nil?
        invalid_properties.push(_action.error_message) if !_action.valid?
      end
      unless (_rel = @rel).nil?
      end
      unless (_types = @types).nil?
      end
      invalid_properties
    end

    # Check to see if the all the properties in the model are valid
    # @return true if the model is valid
    def valid? : Bool
      return false if @href.nil?
      unless (_href = @href).nil?
      end

      unless (_action = @action).nil?
        return false if !_action.valid?
      end

      unless (_rel = @rel).nil?
      end

      unless (_types = @types).nil?
      end

      true
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] href Object to be assigned
    def href=(new_value : String?)
      raise ArgumentError.new("\"href\" is required and cannot be null") if new_value.nil?
      unless new_value.nil?
      end

      @href = new_value
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] action Object to be assigned
    def action=(new_value : Plaid::FDXHateoasLinkAction?)
      unless new_value.nil?
        new_value.validate
      end

      @action = new_value
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] rel Object to be assigned
    def rel=(new_value : String?)
      unless new_value.nil?
      end

      @rel = new_value
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] types Object to be assigned
    def types=(new_value : Array(FDXContentTypes)?)
      unless new_value.nil?
      end

      @types = new_value
    end

    # Generates #hash and #== methods from all fields
    # #== @return [Bool]
    # #hash calculates hash code according to all attributes.
    # #hash @return [UInt64] Hash code
    def_equals_and_hash(@href, @action, @rel, @types)
  end
end
