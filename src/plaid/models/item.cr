#  The Plaid API
#
# The Plaid REST API. Please see https://plaid.com/docs/api for more details.
#
# The version of the OpenAPI document: 2020-09-14_1.474.3
#
# Generated by: https://openapi-generator.tech
#

require "../../core"

require "./plaid_error"
require "./products"

module Plaid
  # Metadata about the Item.
  class Item
    include JSON::Serializable
    include JSON::Serializable::Unmapped
    include OpenApi::Validatable
    include OpenApi::Json

    # Required Properties

    # The Plaid Item ID. The `item_id` is always unique; linking the same account at the same institution twice will result in two Items with different `item_id` values. Like all Plaid identifiers, the `item_id` is case-sensitive.
    @[JSON::Field(key: "item_id", type: String?, default: nil, required: true, nullable: false, emit_null: false)]
    getter item_id : String? = nil

    # The URL registered to receive webhooks for the Item.
    @[JSON::Field(key: "webhook", type: String?, default: nil, required: true, nullable: true, emit_null: true)]
    getter webhook : String? = nil

    @[JSON::Field(key: "error", type: PlaidError?, default: nil, required: true, nullable: true, emit_null: true)]
    getter error : PlaidError? = nil

    # A list of products available for the Item that have not yet been accessed. The contents of this array will be mutually exclusive with `billed_products`.
    @[JSON::Field(key: "available_products", type: Array(Products)?, default: nil, required: true, nullable: false, emit_null: false)]
    getter available_products : Array(Products)? = nil

    # A list of products that have been billed for the Item. The contents of this array will be mutually exclusive with `available_products`. Note - `billed_products` is populated in all environments but only requests in Production are billed. Also note that products that are billed on a pay-per-call basis rather than a pay-per-Item basis, such as `balance`, will not appear here.
    @[JSON::Field(key: "billed_products", type: Array(Products)?, default: nil, required: true, nullable: false, emit_null: false)]
    getter billed_products : Array(Products)? = nil

    # The RFC 3339 timestamp after which the consent provided by the end user will expire. Upon consent expiration, the item will enter the `ITEM_LOGIN_REQUIRED` error state. To circumvent the `ITEM_LOGIN_REQUIRED` error and maintain continuous consent, the end user can reauthenticate via Linkâ€™s update mode in advance of the consent expiration time.  Note - This is only relevant for certain OAuth-based institutions. For all other institutions, this field will be null.
    @[JSON::Field(key: "consent_expiration_time", type: Time?, default: nil, required: true, nullable: true, emit_null: true, converter: Time::RFC3339Converter)]
    getter consent_expiration_time : Time? = nil

    # Indicates whether an Item requires user interaction to be updated, which can be the case for Items with some forms of two-factor authentication.  `background` - Item can be updated in the background  `user_present_required` - Item requires user interaction to be updated
    @[JSON::Field(key: "update_type", type: String?, default: nil, required: true, nullable: false, emit_null: false)]
    getter update_type : String? = nil
    ERROR_MESSAGE_FOR_UPDATE_TYPE = "invalid value for \"update_type\", must be one of [background, user_present_required]."
    VALID_VALUES_FOR_UPDATE_TYPE  = String.static_array("background", "user_present_required")

    # End of Required Properties

    # Optional Properties

    # The Plaid Institution ID associated with the Item. Field is `null` for Items created via Same Day Micro-deposits.
    @[JSON::Field(key: "institution_id", type: String?, default: nil, required: false, nullable: true, emit_null: true, presence: true, ignore_serialize: institution_id.nil? && !institution_id_present?)]
    getter institution_id : String? = nil

    @[JSON::Field(ignore: true)]
    property? institution_id_present : Bool = false

    # A list of products added to the Item. In almost all cases, this will be the same as the `billed_products` field. For some products, it is possible for the product to be added to an Item but not yet billed (e.g. Assets, before `/asset_report/create` has been called, or Auth or Identity when added as Optional Products but before their endpoints have been called), in which case the product may appear in `products` but not in `billed_products`.
    @[JSON::Field(key: "products", type: Array(Products)?, default: nil, required: false, nullable: false, emit_null: false)]
    getter products : Array(Products)? = nil

    # A list of products that have gone through consent collection for the Item. Only present for those enabled in the [Data Transparency](https://plaid.com/docs/link/data-transparency-messaging-migration-guide) beta. If you are not enrolled in Data Transparency, this field is not used.
    @[JSON::Field(key: "consented_products", type: Array(Products)?, default: nil, required: false, nullable: false, emit_null: false)]
    getter consented_products : Array(Products)? = nil

    # Initializes the object
    # @param [Hash] attributes Model attributes in the form of hash
    def initialize(
      *,
      # Required properties
      @item_id : String? = nil,
      @webhook : String? = nil,
      @error : PlaidError? = nil,
      @available_products : Array(Products)? = nil,
      @billed_products : Array(Products)? = nil,
      @consent_expiration_time : Time? = nil,
      @update_type : String? = nil,
      # Optional properties
      @institution_id : String? = nil,
      @products : Array(Products)? = nil,
      @consented_products : Array(Products)? = nil
    )
    end

    # Show invalid properties with the reasons. Usually used together with valid?
    # @return Array for valid properties with the reasons
    def list_invalid_properties : Array(String)
      invalid_properties = Array(String).new

      invalid_properties.push("\"item_id\" is required and cannot be null") if @item_id.nil?

      unless (_item_id = @item_id).nil?
      end
      unless (_webhook = @webhook).nil?
      end
      unless (_error = @error).nil?
      end
      invalid_properties.push("\"available_products\" is required and cannot be null") if @available_products.nil?

      unless (_available_products = @available_products).nil?
      end
      invalid_properties.push("\"billed_products\" is required and cannot be null") if @billed_products.nil?

      unless (_billed_products = @billed_products).nil?
      end
      unless (_consent_expiration_time = @consent_expiration_time).nil?
      end
      invalid_properties.push("\"update_type\" is required and cannot be null") if @update_type.nil?

      unless (_update_type = @update_type).nil?
        invalid_properties.push(ERROR_MESSAGE_FOR_UPDATE_TYPE) unless OpenApi::EnumValidator.valid?(_update_type, VALID_VALUES_FOR_UPDATE_TYPE)
      end
      unless (_institution_id = @institution_id).nil?
      end
      unless (_products = @products).nil?
      end
      unless (_consented_products = @consented_products).nil?
      end
      invalid_properties
    end

    # Check to see if the all the properties in the model are valid
    # @return true if the model is valid
    def valid? : Bool
      return false if @item_id.nil?
      unless (_item_id = @item_id).nil?
      end

      unless (_webhook = @webhook).nil?
      end

      unless (_error = @error).nil?
      end

      return false if @available_products.nil?
      unless (_available_products = @available_products).nil?
      end

      return false if @billed_products.nil?
      unless (_billed_products = @billed_products).nil?
      end

      unless (_consent_expiration_time = @consent_expiration_time).nil?
      end

      return false if @update_type.nil?
      unless (_update_type = @update_type).nil?
        return false unless OpenApi::EnumValidator.valid?(_update_type, VALID_VALUES_FOR_UPDATE_TYPE)
      end

      unless (_institution_id = @institution_id).nil?
      end

      unless (_products = @products).nil?
      end

      unless (_consented_products = @consented_products).nil?
      end

      true
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] item_id Object to be assigned
    def item_id=(new_value : String?)
      raise ArgumentError.new("\"item_id\" is required and cannot be null") if new_value.nil?
      unless new_value.nil?
      end

      @item_id = new_value
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] webhook Object to be assigned
    def webhook=(new_value : String?)
      unless new_value.nil?
      end

      @webhook = new_value
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] error Object to be assigned
    def error=(new_value : PlaidError?)
      unless new_value.nil?
      end

      @error = new_value
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] available_products Object to be assigned
    def available_products=(new_value : Array(Products)?)
      raise ArgumentError.new("\"available_products\" is required and cannot be null") if new_value.nil?
      unless new_value.nil?
      end

      @available_products = new_value
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] billed_products Object to be assigned
    def billed_products=(new_value : Array(Products)?)
      raise ArgumentError.new("\"billed_products\" is required and cannot be null") if new_value.nil?
      unless new_value.nil?
      end

      @billed_products = new_value
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] consent_expiration_time Object to be assigned
    def consent_expiration_time=(new_value : Time?)
      unless new_value.nil?
      end

      @consent_expiration_time = new_value
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] update_type Object to be assigned
    def update_type=(new_value : String?)
      raise ArgumentError.new("\"update_type\" is required and cannot be null") if new_value.nil?
      unless new_value.nil?
        OpenApi::EnumValidator.validate("update_type", new_value, VALID_VALUES_FOR_UPDATE_TYPE)
      end

      @update_type = new_value
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] institution_id Object to be assigned
    def institution_id=(new_value : String?)
      unless new_value.nil?
      end

      @institution_id = new_value
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] products Object to be assigned
    def products=(new_value : Array(Products)?)
      unless new_value.nil?
      end

      @products = new_value
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] consented_products Object to be assigned
    def consented_products=(new_value : Array(Products)?)
      unless new_value.nil?
      end

      @consented_products = new_value
    end

    # Generates #hash and #== methods from all fields
    # #== @return [Bool]
    # #hash calculates hash code according to all attributes.
    # #hash @return [UInt64] Hash code
    def_equals_and_hash(@item_id, @webhook, @error, @available_products, @billed_products, @consent_expiration_time, @update_type, @institution_id, @institution_id_present, @products, @consented_products)
  end
end
