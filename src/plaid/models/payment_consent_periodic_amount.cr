#  The Plaid API
#
# The Plaid REST API. Please see https://plaid.com/docs/api for more details.
#
# The version of the OpenAPI document: 2020-09-14_1.474.3
#
# Generated by: https://openapi-generator.tech
#

require "../../core"

require "./payment_consent_periodic_alignment"
require "./payment_consent_periodic_amount_amount"
require "./payment_consent_periodic_interval"

module Plaid
  # Defines consent payments limitations per period.
  class PaymentConsentPeriodicAmount
    include JSON::Serializable
    include JSON::Serializable::Unmapped
    include OpenApi::Validatable
    include OpenApi::Json

    # Required Properties

    @[JSON::Field(key: "amount", type: Plaid::PaymentConsentPeriodicAmountAmount?, default: nil, required: true, nullable: false, emit_null: false)]
    getter amount : Plaid::PaymentConsentPeriodicAmountAmount? = nil

    @[JSON::Field(key: "interval", type: Plaid::PaymentConsentPeriodicInterval?, default: nil, required: true, nullable: false, emit_null: false)]
    getter interval : Plaid::PaymentConsentPeriodicInterval? = nil

    @[JSON::Field(key: "alignment", type: Plaid::PaymentConsentPeriodicAlignment?, default: nil, required: true, nullable: false, emit_null: false)]
    getter alignment : Plaid::PaymentConsentPeriodicAlignment? = nil

    # End of Required Properties

    # Initializes the object
    # @param [Hash] attributes Model attributes in the form of hash
    def initialize(
      *,
      # Required properties
      @amount : Plaid::PaymentConsentPeriodicAmountAmount? = nil,
      @interval : Plaid::PaymentConsentPeriodicInterval? = nil,
      @alignment : Plaid::PaymentConsentPeriodicAlignment? = nil
    )
    end

    # Show invalid properties with the reasons. Usually used together with valid?
    # @return Array for valid properties with the reasons
    def list_invalid_properties : Array(String)
      invalid_properties = Array(String).new

      invalid_properties.push("\"amount\" is required and cannot be null") if @amount.nil?

      unless (_amount = @amount).nil?
        invalid_properties.concat(_amount.list_invalid_properties_for("amount")) if _amount.is_a?(OpenApi::Validatable)
      end
      invalid_properties.push("\"interval\" is required and cannot be null") if @interval.nil?

      unless (_interval = @interval).nil?
        invalid_properties.push(_interval.error_message) if !_interval.valid?
      end
      invalid_properties.push("\"alignment\" is required and cannot be null") if @alignment.nil?

      unless (_alignment = @alignment).nil?
        invalid_properties.push(_alignment.error_message) if !_alignment.valid?
      end
      invalid_properties
    end

    # Check to see if the all the properties in the model are valid
    # @return true if the model is valid
    def valid? : Bool
      return false if @amount.nil?
      unless (_amount = @amount).nil?
        return false if _amount.is_a?(OpenApi::Validatable) && !_amount.valid?
      end

      return false if @interval.nil?
      unless (_interval = @interval).nil?
        return false if !_interval.valid?
      end

      return false if @alignment.nil?
      unless (_alignment = @alignment).nil?
        return false if !_alignment.valid?
      end

      true
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] amount Object to be assigned
    def amount=(new_value : Plaid::PaymentConsentPeriodicAmountAmount?)
      raise ArgumentError.new("\"amount\" is required and cannot be null") if new_value.nil?
      unless new_value.nil?
        new_value.validate if new_value.is_a?(OpenApi::Validatable)
      end

      @amount = new_value
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] interval Object to be assigned
    def interval=(new_value : Plaid::PaymentConsentPeriodicInterval?)
      raise ArgumentError.new("\"interval\" is required and cannot be null") if new_value.nil?
      unless new_value.nil?
        new_value.validate
      end

      @interval = new_value
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] alignment Object to be assigned
    def alignment=(new_value : Plaid::PaymentConsentPeriodicAlignment?)
      raise ArgumentError.new("\"alignment\" is required and cannot be null") if new_value.nil?
      unless new_value.nil?
        new_value.validate
      end

      @alignment = new_value
    end

    # Generates #hash and #== methods from all fields
    # #== @return [Bool]
    # #hash calculates hash code according to all attributes.
    # #hash @return [UInt64] Hash code
    def_equals_and_hash(@amount, @interval, @alignment)
  end
end
