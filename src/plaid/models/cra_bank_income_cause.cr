#  The Plaid API
#
# The Plaid REST API. Please see https://plaid.com/docs/api for more details.
#
# The version of the OpenAPI document: 2020-09-14_1.474.3
#
# Generated by: https://openapi-generator.tech
#

require "../../core"

require "./credit_bank_income_error_type"

module Plaid
  # An error object and associated `item_id` used to identify a specific Item and error when a batch operation operating on multiple Items has encountered an error in one of the Items.
  class CraBankIncomeCause
    include JSON::Serializable
    include JSON::Serializable::Unmapped
    include OpenApi::Validatable
    include OpenApi::Json

    # Required Properties

    @[JSON::Field(key: "error_type", type: Plaid::CreditBankIncomeErrorType?, default: nil, required: true, nullable: false, emit_null: false)]
    getter error_type : Plaid::CreditBankIncomeErrorType? = nil

    # We use standard HTTP response codes for success and failure notifications, and our errors are further classified by `error_type`. In general, 200 HTTP codes correspond to success, 40X codes are for developer- or user-related failures, and 50X codes are for Plaid-related issues. Error fields will be `null` if no error has occurred.
    @[JSON::Field(key: "error_code", type: String?, default: nil, required: true, nullable: false, emit_null: false)]
    getter error_code : String? = nil

    # A developer-friendly representation of the error code. This may change over time and is not safe for programmatic use.
    @[JSON::Field(key: "error_message", type: String?, default: nil, required: true, nullable: false, emit_null: false)]
    getter error_message : String? = nil

    # A user-friendly representation of the error code. null if the error is not related to user action. This may change over time and is not safe for programmatic use.
    @[JSON::Field(key: "display_message", type: String?, default: nil, required: true, nullable: false, emit_null: false)]
    getter display_message : String? = nil

    # End of Required Properties

    # Initializes the object
    # @param [Hash] attributes Model attributes in the form of hash
    def initialize(
      *,
      # Required properties
      @error_type : Plaid::CreditBankIncomeErrorType? = nil,
      @error_code : String? = nil,
      @error_message : String? = nil,
      @display_message : String? = nil
    )
    end

    # Show invalid properties with the reasons. Usually used together with valid?
    # @return Array for valid properties with the reasons
    def list_invalid_properties : Array(String)
      invalid_properties = Array(String).new

      invalid_properties.push("\"error_type\" is required and cannot be null") if @error_type.nil?

      unless (_error_type = @error_type).nil?
        invalid_properties.push(_error_type.error_message) if !_error_type.valid?
      end
      invalid_properties.push("\"error_code\" is required and cannot be null") if @error_code.nil?

      unless (_error_code = @error_code).nil?
      end
      invalid_properties.push("\"error_message\" is required and cannot be null") if @error_message.nil?

      unless (_error_message = @error_message).nil?
      end
      invalid_properties.push("\"display_message\" is required and cannot be null") if @display_message.nil?

      unless (_display_message = @display_message).nil?
      end
      invalid_properties
    end

    # Check to see if the all the properties in the model are valid
    # @return true if the model is valid
    def valid? : Bool
      return false if @error_type.nil?
      unless (_error_type = @error_type).nil?
        return false if !_error_type.valid?
      end

      return false if @error_code.nil?
      unless (_error_code = @error_code).nil?
      end

      return false if @error_message.nil?
      unless (_error_message = @error_message).nil?
      end

      return false if @display_message.nil?
      unless (_display_message = @display_message).nil?
      end

      true
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] error_type Object to be assigned
    def error_type=(new_value : Plaid::CreditBankIncomeErrorType?)
      raise ArgumentError.new("\"error_type\" is required and cannot be null") if new_value.nil?
      unless new_value.nil?
        new_value.validate
      end

      @error_type = new_value
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] error_code Object to be assigned
    def error_code=(new_value : String?)
      raise ArgumentError.new("\"error_code\" is required and cannot be null") if new_value.nil?
      unless new_value.nil?
      end

      @error_code = new_value
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] error_message Object to be assigned
    def error_message=(new_value : String?)
      raise ArgumentError.new("\"error_message\" is required and cannot be null") if new_value.nil?
      unless new_value.nil?
      end

      @error_message = new_value
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] display_message Object to be assigned
    def display_message=(new_value : String?)
      raise ArgumentError.new("\"display_message\" is required and cannot be null") if new_value.nil?
      unless new_value.nil?
      end

      @display_message = new_value
    end

    # Generates #hash and #== methods from all fields
    # #== @return [Bool]
    # #hash calculates hash code according to all attributes.
    # #hash @return [UInt64] Hash code
    def_equals_and_hash(@error_type, @error_code, @error_message, @display_message)
  end
end
