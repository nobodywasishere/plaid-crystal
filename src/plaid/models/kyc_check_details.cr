#  The Plaid API
#
# The Plaid REST API. Please see https://plaid.com/docs/api for more details.
#
# The version of the OpenAPI document: 2020-09-14_1.474.3
#
# Generated by: https://openapi-generator.tech
#

require "../../core"

require "./kyc_check_address_summary"
require "./kyc_check_date_of_birth_summary"
require "./kyc_check_id_number_summary"
require "./kyc_check_name_summary"
require "./kyc_check_phone_summary"

module Plaid
  # Additional information for the `kyc_check` step. This field will be `null` unless `steps.kyc_check` has reached a terminal state of either `success` or `failed`.
  class KYCCheckDetails
    include JSON::Serializable
    include JSON::Serializable::Unmapped
    include OpenApi::Validatable
    include OpenApi::Json

    # Required Properties

    # The outcome status for the associated Identity Verification attempt's `kyc_check` step. This field will always have the same value as `steps.kyc_check`.
    @[JSON::Field(key: "status", type: String?, default: nil, required: true, nullable: false, emit_null: false)]
    getter status : String? = nil

    @[JSON::Field(key: "address", type: KYCCheckAddressSummary?, default: nil, required: true, nullable: false, emit_null: false)]
    getter address : KYCCheckAddressSummary? = nil

    @[JSON::Field(key: "name", type: KYCCheckNameSummary?, default: nil, required: true, nullable: false, emit_null: false)]
    getter name : KYCCheckNameSummary? = nil

    @[JSON::Field(key: "date_of_birth", type: KYCCheckDateOfBirthSummary?, default: nil, required: true, nullable: false, emit_null: false)]
    getter date_of_birth : KYCCheckDateOfBirthSummary? = nil

    @[JSON::Field(key: "id_number", type: KYCCheckIDNumberSummary?, default: nil, required: true, nullable: false, emit_null: false)]
    getter id_number : KYCCheckIDNumberSummary? = nil

    @[JSON::Field(key: "phone_number", type: KYCCheckPhoneSummary?, default: nil, required: true, nullable: false, emit_null: false)]
    getter phone_number : KYCCheckPhoneSummary? = nil

    # End of Required Properties

    # Initializes the object
    # @param [Hash] attributes Model attributes in the form of hash
    def initialize(
      *,
      # Required properties
      @status : String? = nil,
      @address : KYCCheckAddressSummary? = nil,
      @name : KYCCheckNameSummary? = nil,
      @date_of_birth : KYCCheckDateOfBirthSummary? = nil,
      @id_number : KYCCheckIDNumberSummary? = nil,
      @phone_number : KYCCheckPhoneSummary? = nil
    )
    end

    # Show invalid properties with the reasons. Usually used together with valid?
    # @return Array for valid properties with the reasons
    def list_invalid_properties : Array(String)
      invalid_properties = Array(String).new

      invalid_properties.push("\"status\" is required and cannot be null") if @status.nil?

      unless (_status = @status).nil?
      end
      invalid_properties.push("\"address\" is required and cannot be null") if @address.nil?

      unless (_address = @address).nil?
      end
      invalid_properties.push("\"name\" is required and cannot be null") if @name.nil?

      unless (_name = @name).nil?
      end
      invalid_properties.push("\"date_of_birth\" is required and cannot be null") if @date_of_birth.nil?

      unless (_date_of_birth = @date_of_birth).nil?
      end
      invalid_properties.push("\"id_number\" is required and cannot be null") if @id_number.nil?

      unless (_id_number = @id_number).nil?
      end
      invalid_properties.push("\"phone_number\" is required and cannot be null") if @phone_number.nil?

      unless (_phone_number = @phone_number).nil?
      end
      invalid_properties
    end

    # Check to see if the all the properties in the model are valid
    # @return true if the model is valid
    def valid? : Bool
      return false if @status.nil?
      unless (_status = @status).nil?
      end

      return false if @address.nil?
      unless (_address = @address).nil?
      end

      return false if @name.nil?
      unless (_name = @name).nil?
      end

      return false if @date_of_birth.nil?
      unless (_date_of_birth = @date_of_birth).nil?
      end

      return false if @id_number.nil?
      unless (_id_number = @id_number).nil?
      end

      return false if @phone_number.nil?
      unless (_phone_number = @phone_number).nil?
      end

      true
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] status Object to be assigned
    def status=(new_value : String?)
      raise ArgumentError.new("\"status\" is required and cannot be null") if new_value.nil?
      unless new_value.nil?
      end

      @status = new_value
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] address Object to be assigned
    def address=(new_value : KYCCheckAddressSummary?)
      raise ArgumentError.new("\"address\" is required and cannot be null") if new_value.nil?
      unless new_value.nil?
      end

      @address = new_value
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] name Object to be assigned
    def name=(new_value : KYCCheckNameSummary?)
      raise ArgumentError.new("\"name\" is required and cannot be null") if new_value.nil?
      unless new_value.nil?
      end

      @name = new_value
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] date_of_birth Object to be assigned
    def date_of_birth=(new_value : KYCCheckDateOfBirthSummary?)
      raise ArgumentError.new("\"date_of_birth\" is required and cannot be null") if new_value.nil?
      unless new_value.nil?
      end

      @date_of_birth = new_value
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] id_number Object to be assigned
    def id_number=(new_value : KYCCheckIDNumberSummary?)
      raise ArgumentError.new("\"id_number\" is required and cannot be null") if new_value.nil?
      unless new_value.nil?
      end

      @id_number = new_value
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] phone_number Object to be assigned
    def phone_number=(new_value : KYCCheckPhoneSummary?)
      raise ArgumentError.new("\"phone_number\" is required and cannot be null") if new_value.nil?
      unless new_value.nil?
      end

      @phone_number = new_value
    end

    # Generates #hash and #== methods from all fields
    # #== @return [Bool]
    # #hash calculates hash code according to all attributes.
    # #hash @return [UInt64] Hash code
    def_equals_and_hash(@status, @address, @name, @date_of_birth, @id_number, @phone_number)
  end
end
