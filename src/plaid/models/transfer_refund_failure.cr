#  The Plaid API
#
# The Plaid REST API. Please see https://plaid.com/docs/api for more details.
#
# The version of the OpenAPI document: 2020-09-14_1.474.3
#
# Generated by: https://openapi-generator.tech
#

require "../../core"

module Plaid
  # The failure reason if the event type for a refund is `\"failed\"` or `\"returned\"`. Null value otherwise.
  class TransferRefundFailure
    include JSON::Serializable
    include JSON::Serializable::Unmapped
    include OpenApi::Validatable
    include OpenApi::Json

    # Optional Properties

    # The ACH return code, e.g. `R01`.  A return code will be provided if and only if the refund status is `returned`. For a full listing of ACH return codes, see [Transfer errors](https://plaid.com/docs/errors/transfer/#ach-return-codes).
    @[JSON::Field(key: "ach_return_code", type: String?, default: nil, required: false, nullable: true, emit_null: true, presence: true, ignore_serialize: ach_return_code.nil? && !ach_return_code_present?)]
    getter ach_return_code : String? = nil

    @[JSON::Field(ignore: true)]
    property? ach_return_code_present : Bool = false

    # A human-readable description of the reason for the failure or reversal.
    @[JSON::Field(key: "description", type: String?, default: nil, required: false, nullable: false, emit_null: false)]
    getter description : String? = nil

    # Initializes the object
    # @param [Hash] attributes Model attributes in the form of hash
    def initialize(
      *,
      # Optional properties
      @ach_return_code : String? = nil,
      @description : String? = nil
    )
    end

    # Show invalid properties with the reasons. Usually used together with valid?
    # @return Array for valid properties with the reasons
    def list_invalid_properties : Array(String)
      invalid_properties = Array(String).new

      unless (_ach_return_code = @ach_return_code).nil?
      end
      unless (_description = @description).nil?
      end
      invalid_properties
    end

    # Check to see if the all the properties in the model are valid
    # @return true if the model is valid
    def valid? : Bool
      unless (_ach_return_code = @ach_return_code).nil?
      end

      unless (_description = @description).nil?
      end

      true
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] ach_return_code Object to be assigned
    def ach_return_code=(new_value : String?)
      unless new_value.nil?
      end

      @ach_return_code = new_value
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] description Object to be assigned
    def description=(new_value : String?)
      unless new_value.nil?
      end

      @description = new_value
    end

    # Generates #hash and #== methods from all fields
    # #== @return [Bool]
    # #hash calculates hash code according to all attributes.
    # #hash @return [UInt64] Hash code
    def_equals_and_hash(@ach_return_code, @ach_return_code_present, @description)
  end
end
