#  The Plaid API
#
# The Plaid REST API. Please see https://plaid.com/docs/api for more details.
#
# The version of the OpenAPI document: 2020-09-14_1.474.3
#
# Generated by: https://openapi-generator.tech
#

require "../../core"

require "./action_state"
require "./activity_type"
require "./scopes_nullable"

module Plaid
  # Describes a consent activity.
  class Activity
    include JSON::Serializable
    include JSON::Serializable::Unmapped
    include OpenApi::Validatable
    include OpenApi::Json

    # Required Properties

    @[JSON::Field(key: "activity", type: Plaid::ActivityType?, default: nil, required: true, nullable: false, emit_null: false)]
    getter activity : Plaid::ActivityType? = nil

    # The date this activity was initiated [ISO 8601](https://wikipedia.org/wiki/ISO_8601) (YYYY-MM-DD) format in UTC.
    @[JSON::Field(key: "initiated_date", type: Time?, default: nil, required: true, nullable: false, emit_null: false, converter: Time::ISO8601DateConverter)]
    getter initiated_date : Time? = nil

    # A unique identifier for the activity
    @[JSON::Field(key: "id", type: String?, default: nil, required: true, nullable: false, emit_null: false)]
    getter id : String? = nil

    # Application ID of the client who initiated the activity.
    @[JSON::Field(key: "initiator", type: String?, default: nil, required: true, nullable: false, emit_null: false)]
    getter initiator : String? = nil

    @[JSON::Field(key: "state", type: Plaid::ActionState?, default: nil, required: true, nullable: false, emit_null: false)]
    getter state : Plaid::ActionState? = nil

    # End of Required Properties

    # Optional Properties

    # This field will map to the application ID that is returned from /item/application/list, or provided to the institution in an oauth redirect.
    @[JSON::Field(key: "target_application_id", type: String?, default: nil, required: false, nullable: false, emit_null: false)]
    getter target_application_id : String? = nil

    @[JSON::Field(key: "scopes", type: Plaid::ScopesNullable?, default: nil, required: false, nullable: true, emit_null: true, presence: true, ignore_serialize: scopes.nil? && !scopes_present?)]
    getter scopes : Plaid::ScopesNullable? = nil

    @[JSON::Field(ignore: true)]
    property? scopes_present : Bool = false

    # Initializes the object
    # @param [Hash] attributes Model attributes in the form of hash
    def initialize(
      *,
      # Required properties
      @activity : Plaid::ActivityType? = nil,
      @initiated_date : Time? = nil,
      @id : String? = nil,
      @initiator : String? = nil,
      @state : Plaid::ActionState? = nil,
      # Optional properties
      @target_application_id : String? = nil,
      @scopes : Plaid::ScopesNullable? = nil
    )
    end

    # Show invalid properties with the reasons. Usually used together with valid?
    # @return Array for valid properties with the reasons
    def list_invalid_properties : Array(String)
      invalid_properties = Array(String).new

      invalid_properties.push("\"activity\" is required and cannot be null") if @activity.nil?

      unless (_activity = @activity).nil?
        invalid_properties.push(_activity.error_message) if !_activity.valid?
      end
      invalid_properties.push("\"initiated_date\" is required and cannot be null") if @initiated_date.nil?

      unless (_initiated_date = @initiated_date).nil?
      end
      invalid_properties.push("\"id\" is required and cannot be null") if @id.nil?

      unless (_id = @id).nil?
      end
      invalid_properties.push("\"initiator\" is required and cannot be null") if @initiator.nil?

      unless (_initiator = @initiator).nil?
      end
      invalid_properties.push("\"state\" is required and cannot be null") if @state.nil?

      unless (_state = @state).nil?
        invalid_properties.push(_state.error_message) if !_state.valid?
      end
      unless (_target_application_id = @target_application_id).nil?
      end
      unless (_scopes = @scopes).nil?
        invalid_properties.concat(_scopes.list_invalid_properties_for("scopes")) if _scopes.is_a?(OpenApi::Validatable)
      end
      invalid_properties
    end

    # Check to see if the all the properties in the model are valid
    # @return true if the model is valid
    def valid? : Bool
      return false if @activity.nil?
      unless (_activity = @activity).nil?
        return false if !_activity.valid?
      end

      return false if @initiated_date.nil?
      unless (_initiated_date = @initiated_date).nil?
      end

      return false if @id.nil?
      unless (_id = @id).nil?
      end

      return false if @initiator.nil?
      unless (_initiator = @initiator).nil?
      end

      return false if @state.nil?
      unless (_state = @state).nil?
        return false if !_state.valid?
      end

      unless (_target_application_id = @target_application_id).nil?
      end

      unless (_scopes = @scopes).nil?
        return false if _scopes.is_a?(OpenApi::Validatable) && !_scopes.valid?
      end

      true
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] activity Object to be assigned
    def activity=(new_value : Plaid::ActivityType?)
      raise ArgumentError.new("\"activity\" is required and cannot be null") if new_value.nil?
      unless new_value.nil?
        new_value.validate
      end

      @activity = new_value
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] initiated_date Object to be assigned
    def initiated_date=(new_value : Time?)
      raise ArgumentError.new("\"initiated_date\" is required and cannot be null") if new_value.nil?
      unless new_value.nil?
      end

      @initiated_date = new_value
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] id Object to be assigned
    def id=(new_value : String?)
      raise ArgumentError.new("\"id\" is required and cannot be null") if new_value.nil?
      unless new_value.nil?
      end

      @id = new_value
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] initiator Object to be assigned
    def initiator=(new_value : String?)
      raise ArgumentError.new("\"initiator\" is required and cannot be null") if new_value.nil?
      unless new_value.nil?
      end

      @initiator = new_value
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] state Object to be assigned
    def state=(new_value : Plaid::ActionState?)
      raise ArgumentError.new("\"state\" is required and cannot be null") if new_value.nil?
      unless new_value.nil?
        new_value.validate
      end

      @state = new_value
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] target_application_id Object to be assigned
    def target_application_id=(new_value : String?)
      unless new_value.nil?
      end

      @target_application_id = new_value
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] scopes Object to be assigned
    def scopes=(new_value : Plaid::ScopesNullable?)
      unless new_value.nil?
        new_value.validate if new_value.is_a?(OpenApi::Validatable)
      end

      @scopes = new_value
    end

    # Generates #hash and #== methods from all fields
    # #== @return [Bool]
    # #hash calculates hash code according to all attributes.
    # #hash @return [UInt64] Hash code
    def_equals_and_hash(@activity, @initiated_date, @id, @initiator, @state, @target_application_id, @scopes, @scopes_present)
  end
end
