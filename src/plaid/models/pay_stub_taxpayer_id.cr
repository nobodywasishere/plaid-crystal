#  The Plaid API
#
# The Plaid REST API. Please see https://plaid.com/docs/api for more details.
#
# The version of the OpenAPI document: 2020-09-14_1.474.3
#
# Generated by: https://openapi-generator.tech
#

require "../../core"

module Plaid
  # Taxpayer ID of the individual receiving the paystub.
  class PayStubTaxpayerID
    include JSON::Serializable
    include JSON::Serializable::Unmapped
    include OpenApi::Validatable
    include OpenApi::Json

    # Required Properties

    # Type of ID, e.g. 'SSN'.
    @[JSON::Field(key: "id_type", type: String?, default: nil, required: true, nullable: true, emit_null: true)]
    getter id_type : String? = nil

    # ID mask; i.e. last 4 digits of the taxpayer ID.
    @[JSON::Field(key: "id_mask", type: String?, default: nil, required: true, nullable: true, emit_null: true)]
    getter id_mask : String? = nil

    # End of Required Properties

    # Initializes the object
    # @param [Hash] attributes Model attributes in the form of hash
    def initialize(
      *,
      # Required properties
      @id_type : String? = nil,
      @id_mask : String? = nil
    )
    end

    # Show invalid properties with the reasons. Usually used together with valid?
    # @return Array for valid properties with the reasons
    def list_invalid_properties : Array(String)
      invalid_properties = Array(String).new

      unless (_id_type = @id_type).nil?
      end
      unless (_id_mask = @id_mask).nil?
      end
      invalid_properties
    end

    # Check to see if the all the properties in the model are valid
    # @return true if the model is valid
    def valid? : Bool
      unless (_id_type = @id_type).nil?
      end

      unless (_id_mask = @id_mask).nil?
      end

      true
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] id_type Object to be assigned
    def id_type=(new_value : String?)
      unless new_value.nil?
      end

      @id_type = new_value
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] id_mask Object to be assigned
    def id_mask=(new_value : String?)
      unless new_value.nil?
      end

      @id_mask = new_value
    end

    # Generates #hash and #== methods from all fields
    # #== @return [Bool]
    # #hash calculates hash code according to all attributes.
    # #hash @return [UInt64] Hash code
    def_equals_and_hash(@id_type, @id_mask)
  end
end
