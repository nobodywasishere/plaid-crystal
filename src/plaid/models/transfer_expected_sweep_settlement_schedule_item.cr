#  The Plaid API
#
# The Plaid REST API. Please see https://plaid.com/docs/api for more details.
#
# The version of the OpenAPI document: 2020-09-14_1.474.3
#
# Generated by: https://openapi-generator.tech
#

require "../../core"

module Plaid
  # Defines an expected sweep date and amount.
  class TransferExpectedSweepSettlementScheduleItem
    include JSON::Serializable
    include JSON::Serializable::Unmapped
    include OpenApi::Validatable
    include OpenApi::Json

    # Required Properties

    # The settlement date of a sweep for this transfer.
    @[JSON::Field(key: "sweep_settlement_date", type: Time?, default: nil, required: true, nullable: false, emit_null: false, converter: Time::ISO8601DateConverter)]
    getter sweep_settlement_date : Time? = nil

    # The accumulated amount that has been swept by `sweep_settlement_date`.
    @[JSON::Field(key: "swept_settled_amount", type: String?, default: nil, required: true, nullable: false, emit_null: false)]
    getter swept_settled_amount : String? = nil

    # End of Required Properties

    # Initializes the object
    # @param [Hash] attributes Model attributes in the form of hash
    def initialize(
      *,
      # Required properties
      @sweep_settlement_date : Time? = nil,
      @swept_settled_amount : String? = nil
    )
    end

    # Show invalid properties with the reasons. Usually used together with valid?
    # @return Array for valid properties with the reasons
    def list_invalid_properties : Array(String)
      invalid_properties = Array(String).new

      invalid_properties.push("\"sweep_settlement_date\" is required and cannot be null") if @sweep_settlement_date.nil?

      unless (_sweep_settlement_date = @sweep_settlement_date).nil?
      end
      invalid_properties.push("\"swept_settled_amount\" is required and cannot be null") if @swept_settled_amount.nil?

      unless (_swept_settled_amount = @swept_settled_amount).nil?
      end
      invalid_properties
    end

    # Check to see if the all the properties in the model are valid
    # @return true if the model is valid
    def valid? : Bool
      return false if @sweep_settlement_date.nil?
      unless (_sweep_settlement_date = @sweep_settlement_date).nil?
      end

      return false if @swept_settled_amount.nil?
      unless (_swept_settled_amount = @swept_settled_amount).nil?
      end

      true
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] sweep_settlement_date Object to be assigned
    def sweep_settlement_date=(new_value : Time?)
      raise ArgumentError.new("\"sweep_settlement_date\" is required and cannot be null") if new_value.nil?
      unless new_value.nil?
      end

      @sweep_settlement_date = new_value
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] swept_settled_amount Object to be assigned
    def swept_settled_amount=(new_value : String?)
      raise ArgumentError.new("\"swept_settled_amount\" is required and cannot be null") if new_value.nil?
      unless new_value.nil?
      end

      @swept_settled_amount = new_value
    end

    # Generates #hash and #== methods from all fields
    # #== @return [Bool]
    # #hash calculates hash code according to all attributes.
    # #hash @return [UInt64] Hash code
    def_equals_and_hash(@sweep_settlement_date, @swept_settled_amount)
  end
end
