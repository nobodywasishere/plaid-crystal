#  The Plaid API
#
# The Plaid REST API. Please see https://plaid.com/docs/api for more details.
#
# The version of the OpenAPI document: 2020-09-14_1.474.3
#
# Generated by: https://openapi-generator.tech
#

require "../../core"

require "./deposit_switch_create_request_options"
require "./deposit_switch_target_account"
require "./deposit_switch_target_user"

module Plaid
  # DepositSwitchAltCreateRequest defines the request schema for `/deposit_switch/alt/create`
  class DepositSwitchAltCreateRequest
    include JSON::Serializable
    include JSON::Serializable::Unmapped
    include OpenApi::Validatable
    include OpenApi::Json

    # Required Properties

    @[JSON::Field(key: "target_account", type: DepositSwitchTargetAccount?, default: nil, required: true, nullable: false, emit_null: false)]
    getter target_account : DepositSwitchTargetAccount? = nil

    @[JSON::Field(key: "target_user", type: DepositSwitchTargetUser?, default: nil, required: true, nullable: false, emit_null: false)]
    getter target_user : DepositSwitchTargetUser? = nil

    # End of Required Properties

    # Optional Properties

    # Your Plaid API `client_id`. The `client_id` is required and may be provided either in the `PLAID-CLIENT-ID` header or as part of a request body.
    @[JSON::Field(key: "client_id", type: String?, default: nil, required: false, nullable: false, emit_null: false)]
    getter client_id : String? = nil

    # Your Plaid API `secret`. The `secret` is required and may be provided either in the `PLAID-SECRET` header or as part of a request body.
    @[JSON::Field(key: "secret", type: String?, default: nil, required: false, nullable: false, emit_null: false)]
    getter secret : String? = nil

    @[JSON::Field(key: "options", type: Plaid::DepositSwitchCreateRequestOptions?, default: nil, required: false, nullable: false, emit_null: false)]
    getter options : Plaid::DepositSwitchCreateRequestOptions? = nil

    # ISO-3166-1 alpha-2 country code standard.
    @[JSON::Field(key: "country_code", type: String?, default: nil, required: false, nullable: true, emit_null: true, presence: true, ignore_serialize: country_code.nil? && !country_code_present?)]
    getter country_code : String? = nil
    ERROR_MESSAGE_FOR_COUNTRY_CODE = "invalid value for \"country_code\", must be one of [US, CA]."
    VALID_VALUES_FOR_COUNTRY_CODE  = String.static_array("US", "CA")

    @[JSON::Field(ignore: true)]
    property? country_code_present : Bool = false

    # Initializes the object
    # @param [Hash] attributes Model attributes in the form of hash
    def initialize(
      *,
      # Required properties
      @target_account : DepositSwitchTargetAccount? = nil,
      @target_user : DepositSwitchTargetUser? = nil,
      # Optional properties
      @client_id : String? = nil,
      @secret : String? = nil,
      @options : Plaid::DepositSwitchCreateRequestOptions? = nil,
      @country_code : String? = nil
    )
    end

    # Show invalid properties with the reasons. Usually used together with valid?
    # @return Array for valid properties with the reasons
    def list_invalid_properties : Array(String)
      invalid_properties = Array(String).new

      invalid_properties.push("\"target_account\" is required and cannot be null") if @target_account.nil?

      unless (_target_account = @target_account).nil?
      end
      invalid_properties.push("\"target_user\" is required and cannot be null") if @target_user.nil?

      unless (_target_user = @target_user).nil?
      end
      unless (_client_id = @client_id).nil?
      end
      unless (_secret = @secret).nil?
      end
      unless (_options = @options).nil?
        invalid_properties.concat(_options.list_invalid_properties_for("options")) if _options.is_a?(OpenApi::Validatable)
      end
      unless (_country_code = @country_code).nil?
        invalid_properties.push(ERROR_MESSAGE_FOR_COUNTRY_CODE) unless OpenApi::EnumValidator.valid?(_country_code, VALID_VALUES_FOR_COUNTRY_CODE)
      end
      invalid_properties
    end

    # Check to see if the all the properties in the model are valid
    # @return true if the model is valid
    def valid? : Bool
      return false if @target_account.nil?
      unless (_target_account = @target_account).nil?
      end

      return false if @target_user.nil?
      unless (_target_user = @target_user).nil?
      end

      unless (_client_id = @client_id).nil?
      end

      unless (_secret = @secret).nil?
      end

      unless (_options = @options).nil?
        return false if _options.is_a?(OpenApi::Validatable) && !_options.valid?
      end

      unless (_country_code = @country_code).nil?
        return false unless OpenApi::EnumValidator.valid?(_country_code, VALID_VALUES_FOR_COUNTRY_CODE)
      end

      true
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] target_account Object to be assigned
    def target_account=(new_value : DepositSwitchTargetAccount?)
      raise ArgumentError.new("\"target_account\" is required and cannot be null") if new_value.nil?
      unless new_value.nil?
      end

      @target_account = new_value
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] target_user Object to be assigned
    def target_user=(new_value : DepositSwitchTargetUser?)
      raise ArgumentError.new("\"target_user\" is required and cannot be null") if new_value.nil?
      unless new_value.nil?
      end

      @target_user = new_value
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] client_id Object to be assigned
    def client_id=(new_value : String?)
      unless new_value.nil?
      end

      @client_id = new_value
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] secret Object to be assigned
    def secret=(new_value : String?)
      unless new_value.nil?
      end

      @secret = new_value
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] options Object to be assigned
    def options=(new_value : Plaid::DepositSwitchCreateRequestOptions?)
      unless new_value.nil?
        new_value.validate if new_value.is_a?(OpenApi::Validatable)
      end

      @options = new_value
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] country_code Object to be assigned
    def country_code=(new_value : String?)
      unless new_value.nil?
        OpenApi::EnumValidator.validate("country_code", new_value, VALID_VALUES_FOR_COUNTRY_CODE)
      end

      @country_code = new_value
    end

    # Generates #hash and #== methods from all fields
    # #== @return [Bool]
    # #hash calculates hash code according to all attributes.
    # #hash @return [UInt64] Hash code
    def_equals_and_hash(@target_account, @target_user, @client_id, @secret, @options, @country_code, @country_code_present)
  end
end
