#  The Plaid API
#
# The Plaid REST API. Please see https://plaid.com/docs/api for more details.
#
# The version of the OpenAPI document: 2020-09-14_1.474.3
#
# Generated by: https://openapi-generator.tech
#

require "../../core"

require "./selfie_analysis"
require "./selfie_capture"
require "./selfie_status"

module Plaid
  # Captures and analysis from a user's selfie.
  class SelfieCheckSelfie
    include JSON::Serializable
    include JSON::Serializable::Unmapped
    include OpenApi::Validatable
    include OpenApi::Json

    # Required Properties

    @[JSON::Field(key: "status", type: Plaid::SelfieStatus?, default: nil, required: true, nullable: false, emit_null: false)]
    getter status : Plaid::SelfieStatus? = nil

    # The `attempt` field begins with 1 and increments with each subsequent selfie upload.
    @[JSON::Field(key: "attempt", type: Int32?, default: nil, required: true, nullable: false, emit_null: false)]
    getter attempt : Int32? = nil

    @[JSON::Field(key: "capture", type: SelfieCapture?, default: nil, required: true, nullable: false, emit_null: false)]
    getter capture : SelfieCapture? = nil

    @[JSON::Field(key: "analysis", type: SelfieAnalysis?, default: nil, required: true, nullable: false, emit_null: false)]
    getter analysis : SelfieAnalysis? = nil

    # End of Required Properties

    # Initializes the object
    # @param [Hash] attributes Model attributes in the form of hash
    def initialize(
      *,
      # Required properties
      @status : Plaid::SelfieStatus? = nil,
      @attempt : Int32? = nil,
      @capture : SelfieCapture? = nil,
      @analysis : SelfieAnalysis? = nil
    )
    end

    # Show invalid properties with the reasons. Usually used together with valid?
    # @return Array for valid properties with the reasons
    def list_invalid_properties : Array(String)
      invalid_properties = Array(String).new

      invalid_properties.push("\"status\" is required and cannot be null") if @status.nil?

      unless (_status = @status).nil?
        invalid_properties.push(_status.error_message) if !_status.valid?
      end
      invalid_properties.push("\"attempt\" is required and cannot be null") if @attempt.nil?

      unless (_attempt = @attempt).nil?
      end
      invalid_properties.push("\"capture\" is required and cannot be null") if @capture.nil?

      unless (_capture = @capture).nil?
      end
      invalid_properties.push("\"analysis\" is required and cannot be null") if @analysis.nil?

      unless (_analysis = @analysis).nil?
      end
      invalid_properties
    end

    # Check to see if the all the properties in the model are valid
    # @return true if the model is valid
    def valid? : Bool
      return false if @status.nil?
      unless (_status = @status).nil?
        return false if !_status.valid?
      end

      return false if @attempt.nil?
      unless (_attempt = @attempt).nil?
      end

      return false if @capture.nil?
      unless (_capture = @capture).nil?
      end

      return false if @analysis.nil?
      unless (_analysis = @analysis).nil?
      end

      true
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] status Object to be assigned
    def status=(new_value : Plaid::SelfieStatus?)
      raise ArgumentError.new("\"status\" is required and cannot be null") if new_value.nil?
      unless new_value.nil?
        new_value.validate
      end

      @status = new_value
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] attempt Object to be assigned
    def attempt=(new_value : Int32?)
      raise ArgumentError.new("\"attempt\" is required and cannot be null") if new_value.nil?
      unless new_value.nil?
      end

      @attempt = new_value
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] capture Object to be assigned
    def capture=(new_value : SelfieCapture?)
      raise ArgumentError.new("\"capture\" is required and cannot be null") if new_value.nil?
      unless new_value.nil?
      end

      @capture = new_value
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] analysis Object to be assigned
    def analysis=(new_value : SelfieAnalysis?)
      raise ArgumentError.new("\"analysis\" is required and cannot be null") if new_value.nil?
      unless new_value.nil?
      end

      @analysis = new_value
    end

    # Generates #hash and #== methods from all fields
    # #== @return [Bool]
    # #hash calculates hash code according to all attributes.
    # #hash @return [UInt64] Hash code
    def_equals_and_hash(@status, @attempt, @capture, @analysis)
  end
end
