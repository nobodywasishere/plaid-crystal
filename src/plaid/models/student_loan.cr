#  The Plaid API
#
# The Plaid REST API. Please see https://plaid.com/docs/api for more details.
#
# The version of the OpenAPI document: 2020-09-14_1.474.3
#
# Generated by: https://openapi-generator.tech
#

require "../../core"

require "./pslf_status"
require "./servicer_address_data"
require "./student_loan_status"
require "./student_repayment_plan"

module Plaid
  # Contains details about a student loan account
  class StudentLoan
    include JSON::Serializable
    include JSON::Serializable::Unmapped
    include OpenApi::Validatable
    include OpenApi::Json

    # Required Properties

    # The ID of the account that this liability belongs to.
    @[JSON::Field(key: "account_id", type: String?, default: nil, required: true, nullable: true, emit_null: true)]
    getter account_id : String? = nil

    # The account number of the loan. For some institutions, this may be a masked version of the number (e.g., the last 4 digits instead of the entire number).
    @[JSON::Field(key: "account_number", type: String?, default: nil, required: true, nullable: true, emit_null: true)]
    getter account_number : String? = nil

    # The dates on which loaned funds were disbursed or will be disbursed. These are often in the past. Dates are returned in an [ISO 8601](https://wikipedia.org/wiki/ISO_8601) format (YYYY-MM-DD).
    @[JSON::Field(key: "disbursement_dates", type: Array(Time)?, default: nil, required: true, nullable: true, emit_null: true)]
    getter disbursement_dates : Array(Time)? = nil

    # The date when the student loan is expected to be paid off. Availability for this field is limited. Dates are returned in an [ISO 8601](https://wikipedia.org/wiki/ISO_8601) format (YYYY-MM-DD).
    @[JSON::Field(key: "expected_payoff_date", type: Time?, default: nil, required: true, nullable: true, emit_null: true, converter: Time::ISO8601DateConverter)]
    getter expected_payoff_date : Time? = nil

    # The guarantor of the student loan.
    @[JSON::Field(key: "guarantor", type: String?, default: nil, required: true, nullable: true, emit_null: true)]
    getter guarantor : String? = nil

    # The interest rate on the loan as a percentage.
    @[JSON::Field(key: "interest_rate_percentage", type: Float64?, default: nil, required: true, nullable: false, emit_null: false)]
    getter interest_rate_percentage : Float64? = nil

    # `true` if a payment is currently overdue. Availability for this field is limited.
    @[JSON::Field(key: "is_overdue", type: Bool?, default: nil, required: true, nullable: true, emit_null: true)]
    getter is_overdue : Bool? = nil

    # The amount of the last payment.
    @[JSON::Field(key: "last_payment_amount", type: Float64?, default: nil, required: true, nullable: true, emit_null: true)]
    getter last_payment_amount : Float64? = nil

    # The date of the last payment. Dates are returned in an [ISO 8601](https://wikipedia.org/wiki/ISO_8601) format (YYYY-MM-DD).
    @[JSON::Field(key: "last_payment_date", type: Time?, default: nil, required: true, nullable: true, emit_null: true, converter: Time::ISO8601DateConverter)]
    getter last_payment_date : Time? = nil

    # The date of the last statement. Dates are returned in an [ISO 8601](https://wikipedia.org/wiki/ISO_8601) format (YYYY-MM-DD).
    @[JSON::Field(key: "last_statement_issue_date", type: Time?, default: nil, required: true, nullable: true, emit_null: true, converter: Time::ISO8601DateConverter)]
    getter last_statement_issue_date : Time? = nil

    # The type of loan, e.g., \"Consolidation Loans\".
    @[JSON::Field(key: "loan_name", type: String?, default: nil, required: true, nullable: true, emit_null: true)]
    getter loan_name : String? = nil

    @[JSON::Field(key: "loan_status", type: StudentLoanStatus?, default: nil, required: true, nullable: false, emit_null: false)]
    getter loan_status : StudentLoanStatus? = nil

    # The minimum payment due for the next billing cycle. There are some exceptions: Some institutions require a minimum payment across all loans associated with an account number. Our API presents that same minimum payment amount on each loan. The institutions that do this are: Great Lakes ( `ins_116861`), Firstmark (`ins_116295`), Commonbond Firstmark Services (`ins_116950`), Nelnet (`ins_116528`), EdFinancial Services (`ins_116304`), Granite State (`ins_116308`), and Oklahoma Student Loan Authority (`ins_116945`). Firstmark (`ins_116295` ) and Navient (`ins_116248`) will display as $0 if there is an autopay program in effect.
    @[JSON::Field(key: "minimum_payment_amount", type: Float64?, default: nil, required: true, nullable: true, emit_null: true)]
    getter minimum_payment_amount : Float64? = nil

    # The due date for the next payment. The due date is `null` if a payment is not expected. A payment is not expected if `loan_status.type` is `deferment`, `in_school`, `consolidated`, `paid in full`, or `transferred`. Dates are returned in an [ISO 8601](https://wikipedia.org/wiki/ISO_8601) format (YYYY-MM-DD).
    @[JSON::Field(key: "next_payment_due_date", type: Time?, default: nil, required: true, nullable: true, emit_null: true, converter: Time::ISO8601DateConverter)]
    getter next_payment_due_date : Time? = nil

    # The date on which the loan was initially lent. Dates are returned in an [ISO 8601](https://wikipedia.org/wiki/ISO_8601) format (YYYY-MM-DD).
    @[JSON::Field(key: "origination_date", type: Time?, default: nil, required: true, nullable: true, emit_null: true, converter: Time::ISO8601DateConverter)]
    getter origination_date : Time? = nil

    # The original principal balance of the loan.
    @[JSON::Field(key: "origination_principal_amount", type: Float64?, default: nil, required: true, nullable: true, emit_null: true)]
    getter origination_principal_amount : Float64? = nil

    # The total dollar amount of the accrued interest balance. For Sallie Mae ( `ins_116944`), this amount is included in the current balance of the loan, so this field will return as `null`.
    @[JSON::Field(key: "outstanding_interest_amount", type: Float64?, default: nil, required: true, nullable: true, emit_null: true)]
    getter outstanding_interest_amount : Float64? = nil

    # The relevant account number that should be used to reference this loan for payments. In the majority of cases, `payment_reference_number` will match `account_number,` but in some institutions, such as Great Lakes (`ins_116861`), it will be different.
    @[JSON::Field(key: "payment_reference_number", type: String?, default: nil, required: true, nullable: true, emit_null: true)]
    getter payment_reference_number : String? = nil

    @[JSON::Field(key: "pslf_status", type: PSLFStatus?, default: nil, required: true, nullable: false, emit_null: false)]
    getter pslf_status : PSLFStatus? = nil

    @[JSON::Field(key: "repayment_plan", type: StudentRepaymentPlan?, default: nil, required: true, nullable: false, emit_null: false)]
    getter repayment_plan : StudentRepaymentPlan? = nil

    # The sequence number of the student loan. Heartland ECSI (`ins_116948`) does not make this field available.
    @[JSON::Field(key: "sequence_number", type: String?, default: nil, required: true, nullable: true, emit_null: true)]
    getter sequence_number : String? = nil

    @[JSON::Field(key: "servicer_address", type: ServicerAddressData?, default: nil, required: true, nullable: false, emit_null: false)]
    getter servicer_address : ServicerAddressData? = nil

    # The year to date (YTD) interest paid. Availability for this field is limited.
    @[JSON::Field(key: "ytd_interest_paid", type: Float64?, default: nil, required: true, nullable: true, emit_null: true)]
    getter ytd_interest_paid : Float64? = nil

    # The year to date (YTD) principal paid. Availability for this field is limited.
    @[JSON::Field(key: "ytd_principal_paid", type: Float64?, default: nil, required: true, nullable: true, emit_null: true)]
    getter ytd_principal_paid : Float64? = nil

    # End of Required Properties

    # Initializes the object
    # @param [Hash] attributes Model attributes in the form of hash
    def initialize(
      *,
      # Required properties
      @account_id : String? = nil,
      @account_number : String? = nil,
      @disbursement_dates : Array(Time)? = nil,
      @expected_payoff_date : Time? = nil,
      @guarantor : String? = nil,
      @interest_rate_percentage : Float64? = nil,
      @is_overdue : Bool? = nil,
      @last_payment_amount : Float64? = nil,
      @last_payment_date : Time? = nil,
      @last_statement_issue_date : Time? = nil,
      @loan_name : String? = nil,
      @loan_status : StudentLoanStatus? = nil,
      @minimum_payment_amount : Float64? = nil,
      @next_payment_due_date : Time? = nil,
      @origination_date : Time? = nil,
      @origination_principal_amount : Float64? = nil,
      @outstanding_interest_amount : Float64? = nil,
      @payment_reference_number : String? = nil,
      @pslf_status : PSLFStatus? = nil,
      @repayment_plan : StudentRepaymentPlan? = nil,
      @sequence_number : String? = nil,
      @servicer_address : ServicerAddressData? = nil,
      @ytd_interest_paid : Float64? = nil,
      @ytd_principal_paid : Float64? = nil
    )
    end

    # Show invalid properties with the reasons. Usually used together with valid?
    # @return Array for valid properties with the reasons
    def list_invalid_properties : Array(String)
      invalid_properties = Array(String).new

      unless (_account_id = @account_id).nil?
      end
      unless (_account_number = @account_number).nil?
      end
      unless (_disbursement_dates = @disbursement_dates).nil?
      end
      unless (_expected_payoff_date = @expected_payoff_date).nil?
      end
      unless (_guarantor = @guarantor).nil?
      end
      invalid_properties.push("\"interest_rate_percentage\" is required and cannot be null") if @interest_rate_percentage.nil?

      unless (_interest_rate_percentage = @interest_rate_percentage).nil?
      end
      unless (_is_overdue = @is_overdue).nil?
      end
      unless (_last_payment_amount = @last_payment_amount).nil?
      end
      unless (_last_payment_date = @last_payment_date).nil?
      end
      unless (_last_statement_issue_date = @last_statement_issue_date).nil?
      end
      unless (_loan_name = @loan_name).nil?
      end
      invalid_properties.push("\"loan_status\" is required and cannot be null") if @loan_status.nil?

      unless (_loan_status = @loan_status).nil?
      end
      unless (_minimum_payment_amount = @minimum_payment_amount).nil?
      end
      unless (_next_payment_due_date = @next_payment_due_date).nil?
      end
      unless (_origination_date = @origination_date).nil?
      end
      unless (_origination_principal_amount = @origination_principal_amount).nil?
      end
      unless (_outstanding_interest_amount = @outstanding_interest_amount).nil?
      end
      unless (_payment_reference_number = @payment_reference_number).nil?
      end
      invalid_properties.push("\"pslf_status\" is required and cannot be null") if @pslf_status.nil?

      unless (_pslf_status = @pslf_status).nil?
      end
      invalid_properties.push("\"repayment_plan\" is required and cannot be null") if @repayment_plan.nil?

      unless (_repayment_plan = @repayment_plan).nil?
      end
      unless (_sequence_number = @sequence_number).nil?
      end
      invalid_properties.push("\"servicer_address\" is required and cannot be null") if @servicer_address.nil?

      unless (_servicer_address = @servicer_address).nil?
      end
      unless (_ytd_interest_paid = @ytd_interest_paid).nil?
      end
      unless (_ytd_principal_paid = @ytd_principal_paid).nil?
      end
      invalid_properties
    end

    # Check to see if the all the properties in the model are valid
    # @return true if the model is valid
    def valid? : Bool
      unless (_account_id = @account_id).nil?
      end

      unless (_account_number = @account_number).nil?
      end

      unless (_disbursement_dates = @disbursement_dates).nil?
      end

      unless (_expected_payoff_date = @expected_payoff_date).nil?
      end

      unless (_guarantor = @guarantor).nil?
      end

      return false if @interest_rate_percentage.nil?
      unless (_interest_rate_percentage = @interest_rate_percentage).nil?
      end

      unless (_is_overdue = @is_overdue).nil?
      end

      unless (_last_payment_amount = @last_payment_amount).nil?
      end

      unless (_last_payment_date = @last_payment_date).nil?
      end

      unless (_last_statement_issue_date = @last_statement_issue_date).nil?
      end

      unless (_loan_name = @loan_name).nil?
      end

      return false if @loan_status.nil?
      unless (_loan_status = @loan_status).nil?
      end

      unless (_minimum_payment_amount = @minimum_payment_amount).nil?
      end

      unless (_next_payment_due_date = @next_payment_due_date).nil?
      end

      unless (_origination_date = @origination_date).nil?
      end

      unless (_origination_principal_amount = @origination_principal_amount).nil?
      end

      unless (_outstanding_interest_amount = @outstanding_interest_amount).nil?
      end

      unless (_payment_reference_number = @payment_reference_number).nil?
      end

      return false if @pslf_status.nil?
      unless (_pslf_status = @pslf_status).nil?
      end

      return false if @repayment_plan.nil?
      unless (_repayment_plan = @repayment_plan).nil?
      end

      unless (_sequence_number = @sequence_number).nil?
      end

      return false if @servicer_address.nil?
      unless (_servicer_address = @servicer_address).nil?
      end

      unless (_ytd_interest_paid = @ytd_interest_paid).nil?
      end

      unless (_ytd_principal_paid = @ytd_principal_paid).nil?
      end

      true
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] account_id Object to be assigned
    def account_id=(new_value : String?)
      unless new_value.nil?
      end

      @account_id = new_value
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] account_number Object to be assigned
    def account_number=(new_value : String?)
      unless new_value.nil?
      end

      @account_number = new_value
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] disbursement_dates Object to be assigned
    def disbursement_dates=(new_value : Array(Time)?)
      unless new_value.nil?
      end

      @disbursement_dates = new_value
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] expected_payoff_date Object to be assigned
    def expected_payoff_date=(new_value : Time?)
      unless new_value.nil?
      end

      @expected_payoff_date = new_value
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] guarantor Object to be assigned
    def guarantor=(new_value : String?)
      unless new_value.nil?
      end

      @guarantor = new_value
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] interest_rate_percentage Object to be assigned
    def interest_rate_percentage=(new_value : Float64?)
      raise ArgumentError.new("\"interest_rate_percentage\" is required and cannot be null") if new_value.nil?
      unless new_value.nil?
      end

      @interest_rate_percentage = new_value
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] is_overdue Object to be assigned
    def is_overdue=(new_value : Bool?)
      unless new_value.nil?
      end

      @is_overdue = new_value
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] last_payment_amount Object to be assigned
    def last_payment_amount=(new_value : Float64?)
      unless new_value.nil?
      end

      @last_payment_amount = new_value
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] last_payment_date Object to be assigned
    def last_payment_date=(new_value : Time?)
      unless new_value.nil?
      end

      @last_payment_date = new_value
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] last_statement_issue_date Object to be assigned
    def last_statement_issue_date=(new_value : Time?)
      unless new_value.nil?
      end

      @last_statement_issue_date = new_value
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] loan_name Object to be assigned
    def loan_name=(new_value : String?)
      unless new_value.nil?
      end

      @loan_name = new_value
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] loan_status Object to be assigned
    def loan_status=(new_value : StudentLoanStatus?)
      raise ArgumentError.new("\"loan_status\" is required and cannot be null") if new_value.nil?
      unless new_value.nil?
      end

      @loan_status = new_value
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] minimum_payment_amount Object to be assigned
    def minimum_payment_amount=(new_value : Float64?)
      unless new_value.nil?
      end

      @minimum_payment_amount = new_value
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] next_payment_due_date Object to be assigned
    def next_payment_due_date=(new_value : Time?)
      unless new_value.nil?
      end

      @next_payment_due_date = new_value
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] origination_date Object to be assigned
    def origination_date=(new_value : Time?)
      unless new_value.nil?
      end

      @origination_date = new_value
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] origination_principal_amount Object to be assigned
    def origination_principal_amount=(new_value : Float64?)
      unless new_value.nil?
      end

      @origination_principal_amount = new_value
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] outstanding_interest_amount Object to be assigned
    def outstanding_interest_amount=(new_value : Float64?)
      unless new_value.nil?
      end

      @outstanding_interest_amount = new_value
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] payment_reference_number Object to be assigned
    def payment_reference_number=(new_value : String?)
      unless new_value.nil?
      end

      @payment_reference_number = new_value
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] pslf_status Object to be assigned
    def pslf_status=(new_value : PSLFStatus?)
      raise ArgumentError.new("\"pslf_status\" is required and cannot be null") if new_value.nil?
      unless new_value.nil?
      end

      @pslf_status = new_value
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] repayment_plan Object to be assigned
    def repayment_plan=(new_value : StudentRepaymentPlan?)
      raise ArgumentError.new("\"repayment_plan\" is required and cannot be null") if new_value.nil?
      unless new_value.nil?
      end

      @repayment_plan = new_value
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] sequence_number Object to be assigned
    def sequence_number=(new_value : String?)
      unless new_value.nil?
      end

      @sequence_number = new_value
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] servicer_address Object to be assigned
    def servicer_address=(new_value : ServicerAddressData?)
      raise ArgumentError.new("\"servicer_address\" is required and cannot be null") if new_value.nil?
      unless new_value.nil?
      end

      @servicer_address = new_value
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] ytd_interest_paid Object to be assigned
    def ytd_interest_paid=(new_value : Float64?)
      unless new_value.nil?
      end

      @ytd_interest_paid = new_value
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] ytd_principal_paid Object to be assigned
    def ytd_principal_paid=(new_value : Float64?)
      unless new_value.nil?
      end

      @ytd_principal_paid = new_value
    end

    # Generates #hash and #== methods from all fields
    # #== @return [Bool]
    # #hash calculates hash code according to all attributes.
    # #hash @return [UInt64] Hash code
    def_equals_and_hash(@account_id, @account_number, @disbursement_dates, @expected_payoff_date, @guarantor, @interest_rate_percentage, @is_overdue, @last_payment_amount, @last_payment_date, @last_statement_issue_date, @loan_name, @loan_status, @minimum_payment_amount, @next_payment_due_date, @origination_date, @origination_principal_amount, @outstanding_interest_amount, @payment_reference_number, @pslf_status, @repayment_plan, @sequence_number, @servicer_address, @ytd_interest_paid, @ytd_principal_paid)
  end
end
