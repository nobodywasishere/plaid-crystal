#  The Plaid API
#
# The Plaid REST API. Please see https://plaid.com/docs/api for more details.
#
# The version of the OpenAPI document: 2020-09-14_1.474.3
#
# Generated by: https://openapi-generator.tech
#

require "../../core"

module Plaid
  # DepositSwitchGetResponse defines the response schema for `/deposit_switch/get`
  class DepositSwitchGetResponse
    include JSON::Serializable
    include JSON::Serializable::Unmapped
    include OpenApi::Validatable
    include OpenApi::Json

    # Required Properties

    # The ID of the deposit switch.
    @[JSON::Field(key: "deposit_switch_id", type: String?, default: nil, required: true, nullable: false, emit_null: false)]
    getter deposit_switch_id : String? = nil

    # The ID of the bank account the direct deposit was switched to.
    @[JSON::Field(key: "target_account_id", type: String?, default: nil, required: true, nullable: true, emit_null: true)]
    getter target_account_id : String? = nil

    # The ID of the Item the direct deposit was switched to.
    @[JSON::Field(key: "target_item_id", type: String?, default: nil, required: true, nullable: true, emit_null: true)]
    getter target_item_id : String? = nil

    #  The state, or status, of the deposit switch.  - `initialized` – The deposit switch has been initialized with the user entering the information required to submit the deposit switch request.  - `processing` – The deposit switch request has been submitted and is being processed.  - `completed` – The user's employer has fulfilled the deposit switch request.  - `error` – There was an error processing the deposit switch request.
    @[JSON::Field(key: "state", type: String?, default: nil, required: true, nullable: false, emit_null: false)]
    getter state : String? = nil
    ERROR_MESSAGE_FOR_STATE = "invalid value for \"state\", must be one of [initialized, processing, completed, error]."
    VALID_VALUES_FOR_STATE  = String.static_array("initialized", "processing", "completed", "error")

    # When `true`, user’s direct deposit goes to multiple banks. When false, user’s direct deposit only goes to the target account. Always `null` if the deposit switch has not been completed.
    @[JSON::Field(key: "account_has_multiple_allocations", type: Bool?, default: nil, required: true, nullable: true, emit_null: true)]
    getter account_has_multiple_allocations : Bool? = nil

    # When `true`, the target account is allocated the remainder of direct deposit after all other allocations have been deducted. When `false`, user’s direct deposit is allocated as a percent or amount. Always `null` if the deposit switch has not been completed.
    @[JSON::Field(key: "is_allocated_remainder", type: Bool?, default: nil, required: true, nullable: true, emit_null: true)]
    getter is_allocated_remainder : Bool? = nil

    # The percentage of direct deposit allocated to the target account. Always `null` if the target account is not allocated a percentage or if the deposit switch has not been completed or if `is_allocated_remainder` is true.
    @[JSON::Field(key: "percent_allocated", type: Float64?, default: nil, required: true, nullable: true, emit_null: true)]
    getter percent_allocated : Float64? = nil

    # The dollar amount of direct deposit allocated to the target account. Always `null` if the target account is not allocated an amount or if the deposit switch has not been completed.
    @[JSON::Field(key: "amount_allocated", type: Float64?, default: nil, required: true, nullable: true, emit_null: true)]
    getter amount_allocated : Float64? = nil

    # [ISO 8601](https://wikipedia.org/wiki/ISO_8601) date the deposit switch was created.
    @[JSON::Field(key: "date_created", type: Time?, default: nil, required: true, nullable: false, emit_null: false, converter: Time::ISO8601DateConverter)]
    getter date_created : Time? = nil

    # [ISO 8601](https://wikipedia.org/wiki/ISO_8601) date the deposit switch was completed. Always `null` if the deposit switch has not been completed.
    @[JSON::Field(key: "date_completed", type: Time?, default: nil, required: true, nullable: true, emit_null: true, converter: Time::ISO8601DateConverter)]
    getter date_completed : Time? = nil

    # A unique identifier for the request, which can be used for troubleshooting. This identifier, like all Plaid identifiers, is case sensitive.
    @[JSON::Field(key: "request_id", type: String?, default: nil, required: true, nullable: false, emit_null: false)]
    getter request_id : String? = nil

    # End of Required Properties

    # Optional Properties

    # The method used to make the deposit switch.  - `instant` – User instantly switched their direct deposit to a new or existing bank account by connecting their payroll or employer account.  - `mail` – User requested that Plaid contact their employer by mail to make the direct deposit switch.  - `pdf` – User generated a PDF or email to be sent to their employer with the information necessary to make the deposit switch.'
    @[JSON::Field(key: "switch_method", type: String?, default: nil, required: false, nullable: true, emit_null: true, presence: true, ignore_serialize: switch_method.nil? && !switch_method_present?)]
    getter switch_method : String? = nil
    ERROR_MESSAGE_FOR_SWITCH_METHOD = "invalid value for \"switch_method\", must be one of [instant, mail, pdf, null]."
    VALID_VALUES_FOR_SWITCH_METHOD  = String.static_array("instant", "mail", "pdf", "null")

    @[JSON::Field(ignore: true)]
    property? switch_method_present : Bool = false

    # The name of the employer selected by the user. If the user did not select an employer, the value returned is `null`.
    @[JSON::Field(key: "employer_name", type: String?, default: nil, required: false, nullable: true, emit_null: true, presence: true, ignore_serialize: employer_name.nil? && !employer_name_present?)]
    getter employer_name : String? = nil

    @[JSON::Field(ignore: true)]
    property? employer_name_present : Bool = false

    # The ID of the employer selected by the user. If the user did not select an employer, the value returned is `null`.
    @[JSON::Field(key: "employer_id", type: String?, default: nil, required: false, nullable: true, emit_null: true, presence: true, ignore_serialize: employer_id.nil? && !employer_id_present?)]
    getter employer_id : String? = nil

    @[JSON::Field(ignore: true)]
    property? employer_id_present : Bool = false

    # The name of the institution selected by the user. If the user did not select an institution, the value returned is `null`.
    @[JSON::Field(key: "institution_name", type: String?, default: nil, required: false, nullable: true, emit_null: true, presence: true, ignore_serialize: institution_name.nil? && !institution_name_present?)]
    getter institution_name : String? = nil

    @[JSON::Field(ignore: true)]
    property? institution_name_present : Bool = false

    # The ID of the institution selected by the user. If the user did not select an institution, the value returned is `null`.
    @[JSON::Field(key: "institution_id", type: String?, default: nil, required: false, nullable: true, emit_null: true, presence: true, ignore_serialize: institution_id.nil? && !institution_id_present?)]
    getter institution_id : String? = nil

    @[JSON::Field(ignore: true)]
    property? institution_id_present : Bool = false

    # Initializes the object
    # @param [Hash] attributes Model attributes in the form of hash
    def initialize(
      *,
      # Required properties
      @deposit_switch_id : String? = nil,
      @target_account_id : String? = nil,
      @target_item_id : String? = nil,
      @state : String? = nil,
      @account_has_multiple_allocations : Bool? = nil,
      @is_allocated_remainder : Bool? = nil,
      @percent_allocated : Float64? = nil,
      @amount_allocated : Float64? = nil,
      @date_created : Time? = nil,
      @date_completed : Time? = nil,
      @request_id : String? = nil,
      # Optional properties
      @switch_method : String? = nil,
      @employer_name : String? = nil,
      @employer_id : String? = nil,
      @institution_name : String? = nil,
      @institution_id : String? = nil
    )
    end

    # Show invalid properties with the reasons. Usually used together with valid?
    # @return Array for valid properties with the reasons
    def list_invalid_properties : Array(String)
      invalid_properties = Array(String).new

      invalid_properties.push("\"deposit_switch_id\" is required and cannot be null") if @deposit_switch_id.nil?

      unless (_deposit_switch_id = @deposit_switch_id).nil?
      end
      unless (_target_account_id = @target_account_id).nil?
      end
      unless (_target_item_id = @target_item_id).nil?
      end
      invalid_properties.push("\"state\" is required and cannot be null") if @state.nil?

      unless (_state = @state).nil?
        invalid_properties.push(ERROR_MESSAGE_FOR_STATE) unless OpenApi::EnumValidator.valid?(_state, VALID_VALUES_FOR_STATE)
      end
      unless (_account_has_multiple_allocations = @account_has_multiple_allocations).nil?
      end
      unless (_is_allocated_remainder = @is_allocated_remainder).nil?
      end
      unless (_percent_allocated = @percent_allocated).nil?
      end
      unless (_amount_allocated = @amount_allocated).nil?
      end
      invalid_properties.push("\"date_created\" is required and cannot be null") if @date_created.nil?

      unless (_date_created = @date_created).nil?
      end
      unless (_date_completed = @date_completed).nil?
      end
      invalid_properties.push("\"request_id\" is required and cannot be null") if @request_id.nil?

      unless (_request_id = @request_id).nil?
      end
      unless (_switch_method = @switch_method).nil?
        invalid_properties.push(ERROR_MESSAGE_FOR_SWITCH_METHOD) unless OpenApi::EnumValidator.valid?(_switch_method, VALID_VALUES_FOR_SWITCH_METHOD)
      end
      unless (_employer_name = @employer_name).nil?
      end
      unless (_employer_id = @employer_id).nil?
      end
      unless (_institution_name = @institution_name).nil?
      end
      unless (_institution_id = @institution_id).nil?
      end
      invalid_properties
    end

    # Check to see if the all the properties in the model are valid
    # @return true if the model is valid
    def valid? : Bool
      return false if @deposit_switch_id.nil?
      unless (_deposit_switch_id = @deposit_switch_id).nil?
      end

      unless (_target_account_id = @target_account_id).nil?
      end

      unless (_target_item_id = @target_item_id).nil?
      end

      return false if @state.nil?
      unless (_state = @state).nil?
        return false unless OpenApi::EnumValidator.valid?(_state, VALID_VALUES_FOR_STATE)
      end

      unless (_account_has_multiple_allocations = @account_has_multiple_allocations).nil?
      end

      unless (_is_allocated_remainder = @is_allocated_remainder).nil?
      end

      unless (_percent_allocated = @percent_allocated).nil?
      end

      unless (_amount_allocated = @amount_allocated).nil?
      end

      return false if @date_created.nil?
      unless (_date_created = @date_created).nil?
      end

      unless (_date_completed = @date_completed).nil?
      end

      return false if @request_id.nil?
      unless (_request_id = @request_id).nil?
      end

      unless (_switch_method = @switch_method).nil?
        return false unless OpenApi::EnumValidator.valid?(_switch_method, VALID_VALUES_FOR_SWITCH_METHOD)
      end

      unless (_employer_name = @employer_name).nil?
      end

      unless (_employer_id = @employer_id).nil?
      end

      unless (_institution_name = @institution_name).nil?
      end

      unless (_institution_id = @institution_id).nil?
      end

      true
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] deposit_switch_id Object to be assigned
    def deposit_switch_id=(new_value : String?)
      raise ArgumentError.new("\"deposit_switch_id\" is required and cannot be null") if new_value.nil?
      unless new_value.nil?
      end

      @deposit_switch_id = new_value
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] target_account_id Object to be assigned
    def target_account_id=(new_value : String?)
      unless new_value.nil?
      end

      @target_account_id = new_value
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] target_item_id Object to be assigned
    def target_item_id=(new_value : String?)
      unless new_value.nil?
      end

      @target_item_id = new_value
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] state Object to be assigned
    def state=(new_value : String?)
      raise ArgumentError.new("\"state\" is required and cannot be null") if new_value.nil?
      unless new_value.nil?
        OpenApi::EnumValidator.validate("state", new_value, VALID_VALUES_FOR_STATE)
      end

      @state = new_value
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] account_has_multiple_allocations Object to be assigned
    def account_has_multiple_allocations=(new_value : Bool?)
      unless new_value.nil?
      end

      @account_has_multiple_allocations = new_value
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] is_allocated_remainder Object to be assigned
    def is_allocated_remainder=(new_value : Bool?)
      unless new_value.nil?
      end

      @is_allocated_remainder = new_value
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] percent_allocated Object to be assigned
    def percent_allocated=(new_value : Float64?)
      unless new_value.nil?
      end

      @percent_allocated = new_value
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] amount_allocated Object to be assigned
    def amount_allocated=(new_value : Float64?)
      unless new_value.nil?
      end

      @amount_allocated = new_value
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] date_created Object to be assigned
    def date_created=(new_value : Time?)
      raise ArgumentError.new("\"date_created\" is required and cannot be null") if new_value.nil?
      unless new_value.nil?
      end

      @date_created = new_value
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] date_completed Object to be assigned
    def date_completed=(new_value : Time?)
      unless new_value.nil?
      end

      @date_completed = new_value
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] request_id Object to be assigned
    def request_id=(new_value : String?)
      raise ArgumentError.new("\"request_id\" is required and cannot be null") if new_value.nil?
      unless new_value.nil?
      end

      @request_id = new_value
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] switch_method Object to be assigned
    def switch_method=(new_value : String?)
      unless new_value.nil?
        OpenApi::EnumValidator.validate("switch_method", new_value, VALID_VALUES_FOR_SWITCH_METHOD)
      end

      @switch_method = new_value
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] employer_name Object to be assigned
    def employer_name=(new_value : String?)
      unless new_value.nil?
      end

      @employer_name = new_value
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] employer_id Object to be assigned
    def employer_id=(new_value : String?)
      unless new_value.nil?
      end

      @employer_id = new_value
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] institution_name Object to be assigned
    def institution_name=(new_value : String?)
      unless new_value.nil?
      end

      @institution_name = new_value
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] institution_id Object to be assigned
    def institution_id=(new_value : String?)
      unless new_value.nil?
      end

      @institution_id = new_value
    end

    # Generates #hash and #== methods from all fields
    # #== @return [Bool]
    # #hash calculates hash code according to all attributes.
    # #hash @return [UInt64] Hash code
    def_equals_and_hash(@deposit_switch_id, @target_account_id, @target_item_id, @state, @account_has_multiple_allocations, @is_allocated_remainder, @percent_allocated, @amount_allocated, @date_created, @date_completed, @request_id, @switch_method, @switch_method_present, @employer_name, @employer_name_present, @employer_id, @employer_id_present, @institution_name, @institution_name_present, @institution_id, @institution_id_present)
  end
end
