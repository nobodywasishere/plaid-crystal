#  The Plaid API
#
# The Plaid REST API. Please see https://plaid.com/docs/api for more details.
#
# The version of the OpenAPI document: 2020-09-14_1.474.3
#
# Generated by: https://openapi-generator.tech
#

require "../../core"

require "./payment_initiation_optional_restriction_bacs"
require "./payment_scheme"

module Plaid
  # Additional payment options
  class ExternalPaymentOptions
    include JSON::Serializable
    include JSON::Serializable::Unmapped
    include OpenApi::Validatable
    include OpenApi::Json

    # Optional Properties

    # When `true`, Plaid will attempt to request refund details from the payee's financial institution.  Support varies between financial institutions and will not always be available.  If refund details could be retrieved, they will be available in the `/payment_initiation/payment/get` response.
    @[JSON::Field(key: "request_refund_details", type: Bool?, default: nil, required: false, nullable: true, emit_null: true, presence: true, ignore_serialize: request_refund_details.nil? && !request_refund_details_present?)]
    getter request_refund_details : Bool? = nil

    @[JSON::Field(ignore: true)]
    property? request_refund_details_present : Bool = false

    # The International Bank Account Number (IBAN) for the payer's account. Where possible, the end user will be able to send payments only from the specified bank account if provided.
    @[JSON::Field(key: "iban", type: String?, default: nil, required: false, nullable: true, emit_null: true, presence: true, ignore_serialize: iban.nil? && !iban_present?)]
    getter iban : String? = nil
    MAX_LENGTH_FOR_IBAN = 34
    MIN_LENGTH_FOR_IBAN = 15

    @[JSON::Field(ignore: true)]
    property? iban_present : Bool = false

    @[JSON::Field(key: "bacs", type: Plaid::PaymentInitiationOptionalRestrictionBacs?, default: nil, required: false, nullable: true, emit_null: true, presence: true, ignore_serialize: bacs.nil? && !bacs_present?)]
    getter bacs : Plaid::PaymentInitiationOptionalRestrictionBacs? = nil

    @[JSON::Field(ignore: true)]
    property? bacs_present : Bool = false

    @[JSON::Field(key: "scheme", type: Plaid::PaymentScheme?, default: nil, required: false, nullable: true, emit_null: true, presence: true, ignore_serialize: scheme.nil? && !scheme_present?)]
    getter scheme : Plaid::PaymentScheme? = nil

    @[JSON::Field(ignore: true)]
    property? scheme_present : Bool = false

    # Initializes the object
    # @param [Hash] attributes Model attributes in the form of hash
    def initialize(
      *,
      # Optional properties
      @request_refund_details : Bool? = nil,
      @iban : String? = nil,
      @bacs : Plaid::PaymentInitiationOptionalRestrictionBacs? = nil,
      @scheme : Plaid::PaymentScheme? = nil
    )
    end

    # Show invalid properties with the reasons. Usually used together with valid?
    # @return Array for valid properties with the reasons
    def list_invalid_properties : Array(String)
      invalid_properties = Array(String).new

      unless (_request_refund_details = @request_refund_details).nil?
      end
      unless (_iban = @iban).nil?
        if max_length_error = OpenApi::PrimitiveValidator.max_length_error("iban", _iban.to_s.size, MAX_LENGTH_FOR_IBAN)
          invalid_properties.push(max_length_error)
        end

        if min_length_error = OpenApi::PrimitiveValidator.min_length_error("iban", _iban.to_s.size, MIN_LENGTH_FOR_IBAN)
          invalid_properties.push(min_length_error)
        end
      end
      unless (_bacs = @bacs).nil?
        invalid_properties.concat(_bacs.list_invalid_properties_for("bacs")) if _bacs.is_a?(OpenApi::Validatable)
      end
      unless (_scheme = @scheme).nil?
        invalid_properties.push(_scheme.error_message) if !_scheme.valid?
      end
      invalid_properties
    end

    # Check to see if the all the properties in the model are valid
    # @return true if the model is valid
    def valid? : Bool
      unless (_request_refund_details = @request_refund_details).nil?
      end

      unless (_iban = @iban).nil?
        return false if _iban.to_s.size > MAX_LENGTH_FOR_IBAN
        return false if _iban.to_s.size < MIN_LENGTH_FOR_IBAN
      end

      unless (_bacs = @bacs).nil?
        return false if _bacs.is_a?(OpenApi::Validatable) && !_bacs.valid?
      end

      unless (_scheme = @scheme).nil?
        return false if !_scheme.valid?
      end

      true
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] request_refund_details Object to be assigned
    def request_refund_details=(new_value : Bool?)
      unless new_value.nil?
      end

      @request_refund_details = new_value
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] iban Object to be assigned
    def iban=(new_value : String?)
      unless new_value.nil?
        OpenApi::PrimitiveValidator.validate_max_length("iban", new_value.to_s.size, MAX_LENGTH_FOR_IBAN)
        OpenApi::PrimitiveValidator.validate_min_length("iban", new_value.to_s.size, MIN_LENGTH_FOR_IBAN)
      end

      @iban = new_value
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] bacs Object to be assigned
    def bacs=(new_value : Plaid::PaymentInitiationOptionalRestrictionBacs?)
      unless new_value.nil?
        new_value.validate if new_value.is_a?(OpenApi::Validatable)
      end

      @bacs = new_value
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] scheme Object to be assigned
    def scheme=(new_value : Plaid::PaymentScheme?)
      unless new_value.nil?
        new_value.validate
      end

      @scheme = new_value
    end

    # Generates #hash and #== methods from all fields
    # #== @return [Bool]
    # #hash calculates hash code according to all attributes.
    # #hash @return [UInt64] Hash code
    def_equals_and_hash(@request_refund_details, @request_refund_details_present, @iban, @iban_present, @bacs, @bacs_present, @scheme, @scheme_present)
  end
end
