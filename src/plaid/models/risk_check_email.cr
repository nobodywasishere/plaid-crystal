#  The Plaid API
#
# The Plaid REST API. Please see https://plaid.com/docs/api for more details.
#
# The version of the OpenAPI document: 2020-09-14_1.474.3
#
# Generated by: https://openapi-generator.tech
#

require "../../core"

require "./risk_check_email_domain_is_custom"
require "./risk_check_email_domain_is_disposable"
require "./risk_check_email_domain_is_free_provider"
require "./risk_check_email_is_deliverable_status"
require "./risk_check_email_top_level_domain_is_suspicious"
require "./risk_check_linked_service"

module Plaid
  # Result summary object specifying values for `email` attributes of risk check.
  class RiskCheckEmail
    include JSON::Serializable
    include JSON::Serializable::Unmapped
    include OpenApi::Validatable
    include OpenApi::Json

    # Required Properties

    @[JSON::Field(key: "is_deliverable", type: Plaid::RiskCheckEmailIsDeliverableStatus?, default: nil, required: true, nullable: false, emit_null: false)]
    getter is_deliverable : Plaid::RiskCheckEmailIsDeliverableStatus? = nil

    # Count of all known breaches of this email address if known.
    @[JSON::Field(key: "breach_count", type: Int32?, default: nil, required: true, nullable: true, emit_null: true)]
    getter breach_count : Int32? = nil

    # A date in the format YYYY-MM-DD (RFC 3339 Section 5.6).
    @[JSON::Field(key: "first_breached_at", type: Time?, default: nil, required: true, nullable: true, emit_null: true, converter: Time::ISO8601DateConverter)]
    getter first_breached_at : Time? = nil

    # A date in the format YYYY-MM-DD (RFC 3339 Section 5.6).
    @[JSON::Field(key: "last_breached_at", type: Time?, default: nil, required: true, nullable: true, emit_null: true, converter: Time::ISO8601DateConverter)]
    getter last_breached_at : Time? = nil

    # A date in the format YYYY-MM-DD (RFC 3339 Section 5.6).
    @[JSON::Field(key: "domain_registered_at", type: Time?, default: nil, required: true, nullable: true, emit_null: true, converter: Time::ISO8601DateConverter)]
    getter domain_registered_at : Time? = nil

    @[JSON::Field(key: "domain_is_free_provider", type: Plaid::RiskCheckEmailDomainIsFreeProvider?, default: nil, required: true, nullable: false, emit_null: false)]
    getter domain_is_free_provider : Plaid::RiskCheckEmailDomainIsFreeProvider? = nil

    @[JSON::Field(key: "domain_is_custom", type: Plaid::RiskCheckEmailDomainIsCustom?, default: nil, required: true, nullable: false, emit_null: false)]
    getter domain_is_custom : Plaid::RiskCheckEmailDomainIsCustom? = nil

    @[JSON::Field(key: "domain_is_disposable", type: Plaid::RiskCheckEmailDomainIsDisposable?, default: nil, required: true, nullable: false, emit_null: false)]
    getter domain_is_disposable : Plaid::RiskCheckEmailDomainIsDisposable? = nil

    @[JSON::Field(key: "top_level_domain_is_suspicious", type: Plaid::RiskCheckEmailTopLevelDomainIsSuspicious?, default: nil, required: true, nullable: false, emit_null: false)]
    getter top_level_domain_is_suspicious : Plaid::RiskCheckEmailTopLevelDomainIsSuspicious? = nil

    # A list of online services where this email address has been detected to have accounts or other activity.
    @[JSON::Field(key: "linked_services", type: Array(RiskCheckLinkedService)?, default: nil, required: true, nullable: false, emit_null: false)]
    getter linked_services : Array(RiskCheckLinkedService)? = nil

    # End of Required Properties

    # Initializes the object
    # @param [Hash] attributes Model attributes in the form of hash
    def initialize(
      *,
      # Required properties
      @is_deliverable : Plaid::RiskCheckEmailIsDeliverableStatus? = nil,
      @breach_count : Int32? = nil,
      @first_breached_at : Time? = nil,
      @last_breached_at : Time? = nil,
      @domain_registered_at : Time? = nil,
      @domain_is_free_provider : Plaid::RiskCheckEmailDomainIsFreeProvider? = nil,
      @domain_is_custom : Plaid::RiskCheckEmailDomainIsCustom? = nil,
      @domain_is_disposable : Plaid::RiskCheckEmailDomainIsDisposable? = nil,
      @top_level_domain_is_suspicious : Plaid::RiskCheckEmailTopLevelDomainIsSuspicious? = nil,
      @linked_services : Array(RiskCheckLinkedService)? = nil
    )
    end

    # Show invalid properties with the reasons. Usually used together with valid?
    # @return Array for valid properties with the reasons
    def list_invalid_properties : Array(String)
      invalid_properties = Array(String).new

      invalid_properties.push("\"is_deliverable\" is required and cannot be null") if @is_deliverable.nil?

      unless (_is_deliverable = @is_deliverable).nil?
        invalid_properties.push(_is_deliverable.error_message) if !_is_deliverable.valid?
      end
      unless (_breach_count = @breach_count).nil?
      end
      unless (_first_breached_at = @first_breached_at).nil?
      end
      unless (_last_breached_at = @last_breached_at).nil?
      end
      unless (_domain_registered_at = @domain_registered_at).nil?
      end
      invalid_properties.push("\"domain_is_free_provider\" is required and cannot be null") if @domain_is_free_provider.nil?

      unless (_domain_is_free_provider = @domain_is_free_provider).nil?
        invalid_properties.push(_domain_is_free_provider.error_message) if !_domain_is_free_provider.valid?
      end
      invalid_properties.push("\"domain_is_custom\" is required and cannot be null") if @domain_is_custom.nil?

      unless (_domain_is_custom = @domain_is_custom).nil?
        invalid_properties.push(_domain_is_custom.error_message) if !_domain_is_custom.valid?
      end
      invalid_properties.push("\"domain_is_disposable\" is required and cannot be null") if @domain_is_disposable.nil?

      unless (_domain_is_disposable = @domain_is_disposable).nil?
        invalid_properties.push(_domain_is_disposable.error_message) if !_domain_is_disposable.valid?
      end
      invalid_properties.push("\"top_level_domain_is_suspicious\" is required and cannot be null") if @top_level_domain_is_suspicious.nil?

      unless (_top_level_domain_is_suspicious = @top_level_domain_is_suspicious).nil?
        invalid_properties.push(_top_level_domain_is_suspicious.error_message) if !_top_level_domain_is_suspicious.valid?
      end
      invalid_properties.push("\"linked_services\" is required and cannot be null") if @linked_services.nil?

      unless (_linked_services = @linked_services).nil?
      end
      invalid_properties
    end

    # Check to see if the all the properties in the model are valid
    # @return true if the model is valid
    def valid? : Bool
      return false if @is_deliverable.nil?
      unless (_is_deliverable = @is_deliverable).nil?
        return false if !_is_deliverable.valid?
      end

      unless (_breach_count = @breach_count).nil?
      end

      unless (_first_breached_at = @first_breached_at).nil?
      end

      unless (_last_breached_at = @last_breached_at).nil?
      end

      unless (_domain_registered_at = @domain_registered_at).nil?
      end

      return false if @domain_is_free_provider.nil?
      unless (_domain_is_free_provider = @domain_is_free_provider).nil?
        return false if !_domain_is_free_provider.valid?
      end

      return false if @domain_is_custom.nil?
      unless (_domain_is_custom = @domain_is_custom).nil?
        return false if !_domain_is_custom.valid?
      end

      return false if @domain_is_disposable.nil?
      unless (_domain_is_disposable = @domain_is_disposable).nil?
        return false if !_domain_is_disposable.valid?
      end

      return false if @top_level_domain_is_suspicious.nil?
      unless (_top_level_domain_is_suspicious = @top_level_domain_is_suspicious).nil?
        return false if !_top_level_domain_is_suspicious.valid?
      end

      return false if @linked_services.nil?
      unless (_linked_services = @linked_services).nil?
      end

      true
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] is_deliverable Object to be assigned
    def is_deliverable=(new_value : Plaid::RiskCheckEmailIsDeliverableStatus?)
      raise ArgumentError.new("\"is_deliverable\" is required and cannot be null") if new_value.nil?
      unless new_value.nil?
        new_value.validate
      end

      @is_deliverable = new_value
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] breach_count Object to be assigned
    def breach_count=(new_value : Int32?)
      unless new_value.nil?
      end

      @breach_count = new_value
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] first_breached_at Object to be assigned
    def first_breached_at=(new_value : Time?)
      unless new_value.nil?
      end

      @first_breached_at = new_value
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] last_breached_at Object to be assigned
    def last_breached_at=(new_value : Time?)
      unless new_value.nil?
      end

      @last_breached_at = new_value
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] domain_registered_at Object to be assigned
    def domain_registered_at=(new_value : Time?)
      unless new_value.nil?
      end

      @domain_registered_at = new_value
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] domain_is_free_provider Object to be assigned
    def domain_is_free_provider=(new_value : Plaid::RiskCheckEmailDomainIsFreeProvider?)
      raise ArgumentError.new("\"domain_is_free_provider\" is required and cannot be null") if new_value.nil?
      unless new_value.nil?
        new_value.validate
      end

      @domain_is_free_provider = new_value
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] domain_is_custom Object to be assigned
    def domain_is_custom=(new_value : Plaid::RiskCheckEmailDomainIsCustom?)
      raise ArgumentError.new("\"domain_is_custom\" is required and cannot be null") if new_value.nil?
      unless new_value.nil?
        new_value.validate
      end

      @domain_is_custom = new_value
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] domain_is_disposable Object to be assigned
    def domain_is_disposable=(new_value : Plaid::RiskCheckEmailDomainIsDisposable?)
      raise ArgumentError.new("\"domain_is_disposable\" is required and cannot be null") if new_value.nil?
      unless new_value.nil?
        new_value.validate
      end

      @domain_is_disposable = new_value
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] top_level_domain_is_suspicious Object to be assigned
    def top_level_domain_is_suspicious=(new_value : Plaid::RiskCheckEmailTopLevelDomainIsSuspicious?)
      raise ArgumentError.new("\"top_level_domain_is_suspicious\" is required and cannot be null") if new_value.nil?
      unless new_value.nil?
        new_value.validate
      end

      @top_level_domain_is_suspicious = new_value
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] linked_services Object to be assigned
    def linked_services=(new_value : Array(RiskCheckLinkedService)?)
      raise ArgumentError.new("\"linked_services\" is required and cannot be null") if new_value.nil?
      unless new_value.nil?
      end

      @linked_services = new_value
    end

    # Generates #hash and #== methods from all fields
    # #== @return [Bool]
    # #hash calculates hash code according to all attributes.
    # #hash @return [UInt64] Hash code
    def_equals_and_hash(@is_deliverable, @breach_count, @first_breached_at, @last_breached_at, @domain_registered_at, @domain_is_free_provider, @domain_is_custom, @domain_is_disposable, @top_level_domain_is_suspicious, @linked_services)
  end
end
