#  The Plaid API
#
# The Plaid REST API. Please see https://plaid.com/docs/api for more details.
#
# The version of the OpenAPI document: 2020-09-14_1.474.3
#
# Generated by: https://openapi-generator.tech
#

require "../../core"

module Plaid
  # An event that occurred while the user was going through Link
  class LinkEvent
    include JSON::Serializable
    include JSON::Serializable::Unmapped
    include OpenApi::Validatable
    include OpenApi::Json

    # Required Properties

    # Event name
    @[JSON::Field(key: "event_name", type: String?, default: nil, required: true, nullable: false, emit_null: false)]
    getter event_name : String? = nil

    # Timestamp in [ISO 8601](https://wikipedia.org/wiki/ISO_8601) format.
    @[JSON::Field(key: "timestamp", type: String?, default: nil, required: true, nullable: false, emit_null: false)]
    getter timestamp : String? = nil

    # UUID that can be used to deduplicate events
    @[JSON::Field(key: "event_id", type: String?, default: nil, required: true, nullable: false, emit_null: false)]
    getter event_id : String? = nil

    # End of Required Properties

    # Initializes the object
    # @param [Hash] attributes Model attributes in the form of hash
    def initialize(
      *,
      # Required properties
      @event_name : String? = nil,
      @timestamp : String? = nil,
      @event_id : String? = nil
    )
    end

    # Show invalid properties with the reasons. Usually used together with valid?
    # @return Array for valid properties with the reasons
    def list_invalid_properties : Array(String)
      invalid_properties = Array(String).new

      invalid_properties.push("\"event_name\" is required and cannot be null") if @event_name.nil?

      unless (_event_name = @event_name).nil?
      end
      invalid_properties.push("\"timestamp\" is required and cannot be null") if @timestamp.nil?

      unless (_timestamp = @timestamp).nil?
      end
      invalid_properties.push("\"event_id\" is required and cannot be null") if @event_id.nil?

      unless (_event_id = @event_id).nil?
      end
      invalid_properties
    end

    # Check to see if the all the properties in the model are valid
    # @return true if the model is valid
    def valid? : Bool
      return false if @event_name.nil?
      unless (_event_name = @event_name).nil?
      end

      return false if @timestamp.nil?
      unless (_timestamp = @timestamp).nil?
      end

      return false if @event_id.nil?
      unless (_event_id = @event_id).nil?
      end

      true
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] event_name Object to be assigned
    def event_name=(new_value : String?)
      raise ArgumentError.new("\"event_name\" is required and cannot be null") if new_value.nil?
      unless new_value.nil?
      end

      @event_name = new_value
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] timestamp Object to be assigned
    def timestamp=(new_value : String?)
      raise ArgumentError.new("\"timestamp\" is required and cannot be null") if new_value.nil?
      unless new_value.nil?
      end

      @timestamp = new_value
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] event_id Object to be assigned
    def event_id=(new_value : String?)
      raise ArgumentError.new("\"event_id\" is required and cannot be null") if new_value.nil?
      unless new_value.nil?
      end

      @event_id = new_value
    end

    # Generates #hash and #== methods from all fields
    # #== @return [Bool]
    # #hash calculates hash code according to all attributes.
    # #hash @return [UInt64] Hash code
    def_equals_and_hash(@event_name, @timestamp, @event_id)
  end
end
