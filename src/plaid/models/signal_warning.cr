#  The Plaid API
#
# The Plaid REST API. Please see https://plaid.com/docs/api for more details.
#
# The version of the OpenAPI document: 2020-09-14_1.474.3
#
# Generated by: https://openapi-generator.tech
#

require "../../core"

module Plaid
  # Conveys information about the errors causing missing or stale bank data used to construct the /signal/evaluate scores and response
  class SignalWarning
    include JSON::Serializable
    include JSON::Serializable::Unmapped
    include OpenApi::Validatable
    include OpenApi::Json

    # Optional Properties

    # A broad categorization of the warning. Safe for programmatic use.
    @[JSON::Field(key: "warning_type", type: String?, default: nil, required: false, nullable: false, emit_null: false)]
    getter warning_type : String? = nil

    # The warning code identifies a specific kind of warning that pertains to the error causing bank data to be missing. Safe for programmatic use. For more details on warning codes, please refer to Plaid standard error codes documentation. If you receive the `ITEM_LOGIN_REQUIRED` warning, we recommend re-authenticating your user by implementing Link's update mode. This will guide your user to fix their credentials, allowing Plaid to start fetching data again for future Signal requests.
    @[JSON::Field(key: "warning_code", type: String?, default: nil, required: false, nullable: false, emit_null: false)]
    getter warning_code : String? = nil

    # A developer-friendly representation of the warning type. This may change over time and is not safe for programmatic use.
    @[JSON::Field(key: "warning_message", type: String?, default: nil, required: false, nullable: false, emit_null: false)]
    getter warning_message : String? = nil

    # Initializes the object
    # @param [Hash] attributes Model attributes in the form of hash
    def initialize(
      *,
      # Optional properties
      @warning_type : String? = nil,
      @warning_code : String? = nil,
      @warning_message : String? = nil
    )
    end

    # Show invalid properties with the reasons. Usually used together with valid?
    # @return Array for valid properties with the reasons
    def list_invalid_properties : Array(String)
      invalid_properties = Array(String).new

      unless (_warning_type = @warning_type).nil?
      end
      unless (_warning_code = @warning_code).nil?
      end
      unless (_warning_message = @warning_message).nil?
      end
      invalid_properties
    end

    # Check to see if the all the properties in the model are valid
    # @return true if the model is valid
    def valid? : Bool
      unless (_warning_type = @warning_type).nil?
      end

      unless (_warning_code = @warning_code).nil?
      end

      unless (_warning_message = @warning_message).nil?
      end

      true
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] warning_type Object to be assigned
    def warning_type=(new_value : String?)
      unless new_value.nil?
      end

      @warning_type = new_value
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] warning_code Object to be assigned
    def warning_code=(new_value : String?)
      unless new_value.nil?
      end

      @warning_code = new_value
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] warning_message Object to be assigned
    def warning_message=(new_value : String?)
      unless new_value.nil?
      end

      @warning_message = new_value
    end

    # Generates #hash and #== methods from all fields
    # #== @return [Bool]
    # #hash calculates hash code according to all attributes.
    # #hash @return [UInt64] Hash code
    def_equals_and_hash(@warning_type, @warning_code, @warning_message)
  end
end
