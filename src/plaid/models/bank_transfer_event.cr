#  The Plaid API
#
# The Plaid REST API. Please see https://plaid.com/docs/api for more details.
#
# The version of the OpenAPI document: 2020-09-14_1.474.3
#
# Generated by: https://openapi-generator.tech
#

require "../../core"

require "./bank_transfer_direction"
require "./bank_transfer_event_type"
require "./bank_transfer_failure"
require "./bank_transfer_type"

module Plaid
  # Represents an event in the Bank Transfers API.
  class BankTransferEvent
    include JSON::Serializable
    include JSON::Serializable::Unmapped
    include OpenApi::Validatable
    include OpenApi::Json

    # Required Properties

    # Plaid’s unique identifier for this event. IDs are sequential unsigned 64-bit integers.
    @[JSON::Field(key: "event_id", type: Int32?, default: nil, required: true, nullable: false, emit_null: false)]
    getter event_id : Int32? = nil
    MIN_FOR_EVENT_ID = Int32.new("0")

    # The datetime when this event occurred. This will be of the form `2006-01-02T15:04:05Z`.
    @[JSON::Field(key: "timestamp", type: Time?, default: nil, required: true, nullable: false, emit_null: false, converter: Time::RFC3339Converter)]
    getter timestamp : Time? = nil

    @[JSON::Field(key: "event_type", type: Plaid::BankTransferEventType?, default: nil, required: true, nullable: false, emit_null: false)]
    getter event_type : Plaid::BankTransferEventType? = nil

    # The account ID associated with the bank transfer.
    @[JSON::Field(key: "account_id", type: String?, default: nil, required: true, nullable: false, emit_null: false)]
    getter account_id : String? = nil

    # Plaid’s unique identifier for a bank transfer.
    @[JSON::Field(key: "bank_transfer_id", type: String?, default: nil, required: true, nullable: false, emit_null: false)]
    getter bank_transfer_id : String? = nil

    # The ID of the origination account that this balance belongs to.
    @[JSON::Field(key: "origination_account_id", type: String?, default: nil, required: true, nullable: true, emit_null: true)]
    getter origination_account_id : String? = nil

    @[JSON::Field(key: "bank_transfer_type", type: Plaid::BankTransferType?, default: nil, required: true, nullable: false, emit_null: false)]
    getter bank_transfer_type : Plaid::BankTransferType? = nil

    # The bank transfer amount.
    @[JSON::Field(key: "bank_transfer_amount", type: String?, default: nil, required: true, nullable: false, emit_null: false)]
    getter bank_transfer_amount : String? = nil

    # The currency of the bank transfer amount.
    @[JSON::Field(key: "bank_transfer_iso_currency_code", type: String?, default: nil, required: true, nullable: false, emit_null: false)]
    getter bank_transfer_iso_currency_code : String? = nil

    @[JSON::Field(key: "failure_reason", type: BankTransferFailure?, default: nil, required: true, nullable: true, emit_null: true)]
    getter failure_reason : BankTransferFailure? = nil

    @[JSON::Field(key: "direction", type: Plaid::BankTransferDirection?, default: nil, required: true, nullable: true, emit_null: true)]
    getter direction : Plaid::BankTransferDirection? = nil

    # End of Required Properties

    # Initializes the object
    # @param [Hash] attributes Model attributes in the form of hash
    def initialize(
      *,
      # Required properties
      @event_id : Int32? = nil,
      @timestamp : Time? = nil,
      @event_type : Plaid::BankTransferEventType? = nil,
      @account_id : String? = nil,
      @bank_transfer_id : String? = nil,
      @origination_account_id : String? = nil,
      @bank_transfer_type : Plaid::BankTransferType? = nil,
      @bank_transfer_amount : String? = nil,
      @bank_transfer_iso_currency_code : String? = nil,
      @failure_reason : BankTransferFailure? = nil,
      @direction : Plaid::BankTransferDirection? = nil
    )
    end

    # Show invalid properties with the reasons. Usually used together with valid?
    # @return Array for valid properties with the reasons
    def list_invalid_properties : Array(String)
      invalid_properties = Array(String).new

      invalid_properties.push("\"event_id\" is required and cannot be null") if @event_id.nil?

      unless (_event_id = @event_id).nil?
        if min_number_error = OpenApi::PrimitiveValidator.min_number_error("event_id", _event_id, MIN_FOR_EVENT_ID)
          invalid_properties.push(min_number_error)
        end
      end
      invalid_properties.push("\"timestamp\" is required and cannot be null") if @timestamp.nil?

      unless (_timestamp = @timestamp).nil?
      end
      invalid_properties.push("\"event_type\" is required and cannot be null") if @event_type.nil?

      unless (_event_type = @event_type).nil?
        invalid_properties.push(_event_type.error_message) if !_event_type.valid?
      end
      invalid_properties.push("\"account_id\" is required and cannot be null") if @account_id.nil?

      unless (_account_id = @account_id).nil?
      end
      invalid_properties.push("\"bank_transfer_id\" is required and cannot be null") if @bank_transfer_id.nil?

      unless (_bank_transfer_id = @bank_transfer_id).nil?
      end
      unless (_origination_account_id = @origination_account_id).nil?
      end
      invalid_properties.push("\"bank_transfer_type\" is required and cannot be null") if @bank_transfer_type.nil?

      unless (_bank_transfer_type = @bank_transfer_type).nil?
        invalid_properties.push(_bank_transfer_type.error_message) if !_bank_transfer_type.valid?
      end
      invalid_properties.push("\"bank_transfer_amount\" is required and cannot be null") if @bank_transfer_amount.nil?

      unless (_bank_transfer_amount = @bank_transfer_amount).nil?
      end
      invalid_properties.push("\"bank_transfer_iso_currency_code\" is required and cannot be null") if @bank_transfer_iso_currency_code.nil?

      unless (_bank_transfer_iso_currency_code = @bank_transfer_iso_currency_code).nil?
      end
      unless (_failure_reason = @failure_reason).nil?
      end
      unless (_direction = @direction).nil?
        invalid_properties.push(_direction.error_message) if !_direction.valid?
      end
      invalid_properties
    end

    # Check to see if the all the properties in the model are valid
    # @return true if the model is valid
    def valid? : Bool
      return false if @event_id.nil?
      unless (_event_id = @event_id).nil?
        return false if _event_id < MIN_FOR_EVENT_ID
      end

      return false if @timestamp.nil?
      unless (_timestamp = @timestamp).nil?
      end

      return false if @event_type.nil?
      unless (_event_type = @event_type).nil?
        return false if !_event_type.valid?
      end

      return false if @account_id.nil?
      unless (_account_id = @account_id).nil?
      end

      return false if @bank_transfer_id.nil?
      unless (_bank_transfer_id = @bank_transfer_id).nil?
      end

      unless (_origination_account_id = @origination_account_id).nil?
      end

      return false if @bank_transfer_type.nil?
      unless (_bank_transfer_type = @bank_transfer_type).nil?
        return false if !_bank_transfer_type.valid?
      end

      return false if @bank_transfer_amount.nil?
      unless (_bank_transfer_amount = @bank_transfer_amount).nil?
      end

      return false if @bank_transfer_iso_currency_code.nil?
      unless (_bank_transfer_iso_currency_code = @bank_transfer_iso_currency_code).nil?
      end

      unless (_failure_reason = @failure_reason).nil?
      end

      unless (_direction = @direction).nil?
        return false if !_direction.valid?
      end

      true
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] event_id Object to be assigned
    def event_id=(new_value : Int32?)
      raise ArgumentError.new("\"event_id\" is required and cannot be null") if new_value.nil?
      unless new_value.nil?
        OpenApi::PrimitiveValidator.validate_min_number("event_id", new_value, MIN_FOR_EVENT_ID)
      end

      @event_id = new_value
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] timestamp Object to be assigned
    def timestamp=(new_value : Time?)
      raise ArgumentError.new("\"timestamp\" is required and cannot be null") if new_value.nil?
      unless new_value.nil?
      end

      @timestamp = new_value
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] event_type Object to be assigned
    def event_type=(new_value : Plaid::BankTransferEventType?)
      raise ArgumentError.new("\"event_type\" is required and cannot be null") if new_value.nil?
      unless new_value.nil?
        new_value.validate
      end

      @event_type = new_value
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] account_id Object to be assigned
    def account_id=(new_value : String?)
      raise ArgumentError.new("\"account_id\" is required and cannot be null") if new_value.nil?
      unless new_value.nil?
      end

      @account_id = new_value
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] bank_transfer_id Object to be assigned
    def bank_transfer_id=(new_value : String?)
      raise ArgumentError.new("\"bank_transfer_id\" is required and cannot be null") if new_value.nil?
      unless new_value.nil?
      end

      @bank_transfer_id = new_value
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] origination_account_id Object to be assigned
    def origination_account_id=(new_value : String?)
      unless new_value.nil?
      end

      @origination_account_id = new_value
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] bank_transfer_type Object to be assigned
    def bank_transfer_type=(new_value : Plaid::BankTransferType?)
      raise ArgumentError.new("\"bank_transfer_type\" is required and cannot be null") if new_value.nil?
      unless new_value.nil?
        new_value.validate
      end

      @bank_transfer_type = new_value
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] bank_transfer_amount Object to be assigned
    def bank_transfer_amount=(new_value : String?)
      raise ArgumentError.new("\"bank_transfer_amount\" is required and cannot be null") if new_value.nil?
      unless new_value.nil?
      end

      @bank_transfer_amount = new_value
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] bank_transfer_iso_currency_code Object to be assigned
    def bank_transfer_iso_currency_code=(new_value : String?)
      raise ArgumentError.new("\"bank_transfer_iso_currency_code\" is required and cannot be null") if new_value.nil?
      unless new_value.nil?
      end

      @bank_transfer_iso_currency_code = new_value
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] failure_reason Object to be assigned
    def failure_reason=(new_value : BankTransferFailure?)
      unless new_value.nil?
      end

      @failure_reason = new_value
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] direction Object to be assigned
    def direction=(new_value : Plaid::BankTransferDirection?)
      unless new_value.nil?
        new_value.validate
      end

      @direction = new_value
    end

    # Generates #hash and #== methods from all fields
    # #== @return [Bool]
    # #hash calculates hash code according to all attributes.
    # #hash @return [UInt64] Hash code
    def_equals_and_hash(@event_id, @timestamp, @event_type, @account_id, @bank_transfer_id, @origination_account_id, @bank_transfer_type, @bank_transfer_amount, @bank_transfer_iso_currency_code, @failure_reason, @direction)
  end
end
