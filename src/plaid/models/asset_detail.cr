#  The Plaid API
#
# The Plaid REST API. Please see https://plaid.com/docs/api for more details.
#
# The version of the OpenAPI document: 2020-09-14_1.474.3
#
# Generated by: https://openapi-generator.tech
#

require "../../core"

require "./asset_type"

module Plaid
  # Details about an asset.
  class AssetDetail
    include JSON::Serializable
    include JSON::Serializable::Unmapped
    include OpenApi::Validatable
    include OpenApi::Json

    # Required Properties

    # A vendor created unique Identifier.
    @[JSON::Field(key: "AssetUniqueIdentifier", type: String?, default: nil, required: true, nullable: false, emit_null: false)]
    getter asset_unique_identifier : String? = nil

    # A unique alphanumeric string identifying an asset.
    @[JSON::Field(key: "AssetAccountIdentifier", type: String?, default: nil, required: true, nullable: false, emit_null: false)]
    getter asset_account_identifier : String? = nil

    # Account Report As of Date / Create Date. Format YYYY-MM-DD
    @[JSON::Field(key: "AssetAsOfDate", type: String?, default: nil, required: true, nullable: false, emit_null: false)]
    getter asset_as_of_date : String? = nil

    # A text description that further defines the Asset. This could be used to describe the shares associated with the stocks, bonds or mutual funds, retirement funds or business owned that the borrower has disclosed (named) as an asset.
    @[JSON::Field(key: "AssetDescription", type: String?, default: nil, required: true, nullable: true, emit_null: true)]
    getter asset_description : String? = nil

    # Asset Account Available Balance.
    @[JSON::Field(key: "AssetAvailableBalanceAmount", type: Float64?, default: nil, required: true, nullable: false, emit_null: false)]
    getter asset_available_balance_amount : Float64? = nil

    # A vendor created unique Identifier
    @[JSON::Field(key: "AssetCurrentBalanceAmount", type: Float64?, default: nil, required: true, nullable: false, emit_null: false)]
    getter asset_current_balance_amount : Float64? = nil

    @[JSON::Field(key: "AssetType", type: Plaid::AssetType?, default: nil, required: true, nullable: false, emit_null: false)]
    getter asset_type : Plaid::AssetType? = nil

    # Additional Asset Decription some examples are Investment Tax-Deferred , Loan, 401K, 403B, Checking, Money Market, Credit Card,ROTH,529,Biller,ROLLOVER,CD,Savings,Investment Taxable, IRA, Mortgage, Line Of Credit.
    @[JSON::Field(key: "AssetTypeAdditionalDescription", type: String?, default: nil, required: true, nullable: true, emit_null: true)]
    getter asset_type_additional_description : String? = nil

    # The Number of days requested made to the Financial Institution. Example When looking for 3 months of data from the FI, pass in 90 days.
    @[JSON::Field(key: "AssetDaysRequestedCount", type: Int32?, default: nil, required: true, nullable: false, emit_null: false)]
    getter asset_days_requested_count : Int32? = nil

    # Ownership type of the asset account.
    @[JSON::Field(key: "AssetOwnershipType", type: String?, default: nil, required: true, nullable: true, emit_null: true)]
    getter asset_ownership_type : String? = nil

    # End of Required Properties

    # Initializes the object
    # @param [Hash] attributes Model attributes in the form of hash
    def initialize(
      *,
      # Required properties
      @asset_unique_identifier : String? = nil,
      @asset_account_identifier : String? = nil,
      @asset_as_of_date : String? = nil,
      @asset_description : String? = nil,
      @asset_available_balance_amount : Float64? = nil,
      @asset_current_balance_amount : Float64? = nil,
      @asset_type : Plaid::AssetType? = nil,
      @asset_type_additional_description : String? = nil,
      @asset_days_requested_count : Int32? = nil,
      @asset_ownership_type : String? = nil
    )
    end

    # Show invalid properties with the reasons. Usually used together with valid?
    # @return Array for valid properties with the reasons
    def list_invalid_properties : Array(String)
      invalid_properties = Array(String).new

      invalid_properties.push("\"asset_unique_identifier\" is required and cannot be null") if @asset_unique_identifier.nil?

      unless (_asset_unique_identifier = @asset_unique_identifier).nil?
      end
      invalid_properties.push("\"asset_account_identifier\" is required and cannot be null") if @asset_account_identifier.nil?

      unless (_asset_account_identifier = @asset_account_identifier).nil?
      end
      invalid_properties.push("\"asset_as_of_date\" is required and cannot be null") if @asset_as_of_date.nil?

      unless (_asset_as_of_date = @asset_as_of_date).nil?
      end
      unless (_asset_description = @asset_description).nil?
      end
      invalid_properties.push("\"asset_available_balance_amount\" is required and cannot be null") if @asset_available_balance_amount.nil?

      unless (_asset_available_balance_amount = @asset_available_balance_amount).nil?
      end
      invalid_properties.push("\"asset_current_balance_amount\" is required and cannot be null") if @asset_current_balance_amount.nil?

      unless (_asset_current_balance_amount = @asset_current_balance_amount).nil?
      end
      invalid_properties.push("\"asset_type\" is required and cannot be null") if @asset_type.nil?

      unless (_asset_type = @asset_type).nil?
        invalid_properties.push(_asset_type.error_message) if !_asset_type.valid?
      end
      unless (_asset_type_additional_description = @asset_type_additional_description).nil?
      end
      invalid_properties.push("\"asset_days_requested_count\" is required and cannot be null") if @asset_days_requested_count.nil?

      unless (_asset_days_requested_count = @asset_days_requested_count).nil?
      end
      unless (_asset_ownership_type = @asset_ownership_type).nil?
      end
      invalid_properties
    end

    # Check to see if the all the properties in the model are valid
    # @return true if the model is valid
    def valid? : Bool
      return false if @asset_unique_identifier.nil?
      unless (_asset_unique_identifier = @asset_unique_identifier).nil?
      end

      return false if @asset_account_identifier.nil?
      unless (_asset_account_identifier = @asset_account_identifier).nil?
      end

      return false if @asset_as_of_date.nil?
      unless (_asset_as_of_date = @asset_as_of_date).nil?
      end

      unless (_asset_description = @asset_description).nil?
      end

      return false if @asset_available_balance_amount.nil?
      unless (_asset_available_balance_amount = @asset_available_balance_amount).nil?
      end

      return false if @asset_current_balance_amount.nil?
      unless (_asset_current_balance_amount = @asset_current_balance_amount).nil?
      end

      return false if @asset_type.nil?
      unless (_asset_type = @asset_type).nil?
        return false if !_asset_type.valid?
      end

      unless (_asset_type_additional_description = @asset_type_additional_description).nil?
      end

      return false if @asset_days_requested_count.nil?
      unless (_asset_days_requested_count = @asset_days_requested_count).nil?
      end

      unless (_asset_ownership_type = @asset_ownership_type).nil?
      end

      true
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] asset_unique_identifier Object to be assigned
    def asset_unique_identifier=(new_value : String?)
      raise ArgumentError.new("\"asset_unique_identifier\" is required and cannot be null") if new_value.nil?
      unless new_value.nil?
      end

      @asset_unique_identifier = new_value
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] asset_account_identifier Object to be assigned
    def asset_account_identifier=(new_value : String?)
      raise ArgumentError.new("\"asset_account_identifier\" is required and cannot be null") if new_value.nil?
      unless new_value.nil?
      end

      @asset_account_identifier = new_value
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] asset_as_of_date Object to be assigned
    def asset_as_of_date=(new_value : String?)
      raise ArgumentError.new("\"asset_as_of_date\" is required and cannot be null") if new_value.nil?
      unless new_value.nil?
      end

      @asset_as_of_date = new_value
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] asset_description Object to be assigned
    def asset_description=(new_value : String?)
      unless new_value.nil?
      end

      @asset_description = new_value
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] asset_available_balance_amount Object to be assigned
    def asset_available_balance_amount=(new_value : Float64?)
      raise ArgumentError.new("\"asset_available_balance_amount\" is required and cannot be null") if new_value.nil?
      unless new_value.nil?
      end

      @asset_available_balance_amount = new_value
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] asset_current_balance_amount Object to be assigned
    def asset_current_balance_amount=(new_value : Float64?)
      raise ArgumentError.new("\"asset_current_balance_amount\" is required and cannot be null") if new_value.nil?
      unless new_value.nil?
      end

      @asset_current_balance_amount = new_value
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] asset_type Object to be assigned
    def asset_type=(new_value : Plaid::AssetType?)
      raise ArgumentError.new("\"asset_type\" is required and cannot be null") if new_value.nil?
      unless new_value.nil?
        new_value.validate
      end

      @asset_type = new_value
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] asset_type_additional_description Object to be assigned
    def asset_type_additional_description=(new_value : String?)
      unless new_value.nil?
      end

      @asset_type_additional_description = new_value
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] asset_days_requested_count Object to be assigned
    def asset_days_requested_count=(new_value : Int32?)
      raise ArgumentError.new("\"asset_days_requested_count\" is required and cannot be null") if new_value.nil?
      unless new_value.nil?
      end

      @asset_days_requested_count = new_value
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] asset_ownership_type Object to be assigned
    def asset_ownership_type=(new_value : String?)
      unless new_value.nil?
      end

      @asset_ownership_type = new_value
    end

    # Generates #hash and #== methods from all fields
    # #== @return [Bool]
    # #hash calculates hash code according to all attributes.
    # #hash @return [UInt64] Hash code
    def_equals_and_hash(@asset_unique_identifier, @asset_account_identifier, @asset_as_of_date, @asset_description, @asset_available_balance_amount, @asset_current_balance_amount, @asset_type, @asset_type_additional_description, @asset_days_requested_count, @asset_ownership_type)
  end
end
