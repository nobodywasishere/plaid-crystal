#  The Plaid API
#
# The Plaid REST API. Please see https://plaid.com/docs/api for more details.
#
# The version of the OpenAPI document: 2020-09-14_1.474.3
#
# Generated by: https://openapi-generator.tech
#

require "../../core"

require "./address_data"

module Plaid
  # ConsumerReportUserIdentity defines the user identity data collected for consumer report purpose. This field is required to be set if you later use the created user for consumer report purpose.
  class ConsumerReportUserIdentity
    include JSON::Serializable
    include JSON::Serializable::Unmapped
    include OpenApi::Validatable
    include OpenApi::Json

    # Required Properties

    # The user's first name
    @[JSON::Field(key: "first_name", type: String?, default: nil, required: true, nullable: false, emit_null: false)]
    getter first_name : String? = nil

    # The user's last name
    @[JSON::Field(key: "last_name", type: String?, default: nil, required: true, nullable: false, emit_null: false)]
    getter last_name : String? = nil

    # The user's phone numbers. The format of phone number will be validated and for better normalization, it is expected to be in E.164 format +{countrycode}{number}, for example `+14151234567`.
    @[JSON::Field(key: "phone_numbers", type: Array(String)?, default: nil, required: true, nullable: false, emit_null: false)]
    getter phone_numbers : Array(String)? = nil

    # The user's emails
    @[JSON::Field(key: "emails", type: Array(String)?, default: nil, required: true, nullable: false, emit_null: false)]
    getter emails : Array(String)? = nil

    @[JSON::Field(key: "primary_address", type: AddressData?, default: nil, required: true, nullable: false, emit_null: false)]
    getter primary_address : AddressData? = nil

    # End of Required Properties

    # Initializes the object
    # @param [Hash] attributes Model attributes in the form of hash
    def initialize(
      *,
      # Required properties
      @first_name : String? = nil,
      @last_name : String? = nil,
      @phone_numbers : Array(String)? = nil,
      @emails : Array(String)? = nil,
      @primary_address : AddressData? = nil
    )
    end

    # Show invalid properties with the reasons. Usually used together with valid?
    # @return Array for valid properties with the reasons
    def list_invalid_properties : Array(String)
      invalid_properties = Array(String).new

      invalid_properties.push("\"first_name\" is required and cannot be null") if @first_name.nil?

      unless (_first_name = @first_name).nil?
      end
      invalid_properties.push("\"last_name\" is required and cannot be null") if @last_name.nil?

      unless (_last_name = @last_name).nil?
      end
      invalid_properties.push("\"phone_numbers\" is required and cannot be null") if @phone_numbers.nil?

      unless (_phone_numbers = @phone_numbers).nil?
      end
      invalid_properties.push("\"emails\" is required and cannot be null") if @emails.nil?

      unless (_emails = @emails).nil?
      end
      invalid_properties.push("\"primary_address\" is required and cannot be null") if @primary_address.nil?

      unless (_primary_address = @primary_address).nil?
      end
      invalid_properties
    end

    # Check to see if the all the properties in the model are valid
    # @return true if the model is valid
    def valid? : Bool
      return false if @first_name.nil?
      unless (_first_name = @first_name).nil?
      end

      return false if @last_name.nil?
      unless (_last_name = @last_name).nil?
      end

      return false if @phone_numbers.nil?
      unless (_phone_numbers = @phone_numbers).nil?
      end

      return false if @emails.nil?
      unless (_emails = @emails).nil?
      end

      return false if @primary_address.nil?
      unless (_primary_address = @primary_address).nil?
      end

      true
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] first_name Object to be assigned
    def first_name=(new_value : String?)
      raise ArgumentError.new("\"first_name\" is required and cannot be null") if new_value.nil?
      unless new_value.nil?
      end

      @first_name = new_value
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] last_name Object to be assigned
    def last_name=(new_value : String?)
      raise ArgumentError.new("\"last_name\" is required and cannot be null") if new_value.nil?
      unless new_value.nil?
      end

      @last_name = new_value
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] phone_numbers Object to be assigned
    def phone_numbers=(new_value : Array(String)?)
      raise ArgumentError.new("\"phone_numbers\" is required and cannot be null") if new_value.nil?
      unless new_value.nil?
      end

      @phone_numbers = new_value
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] emails Object to be assigned
    def emails=(new_value : Array(String)?)
      raise ArgumentError.new("\"emails\" is required and cannot be null") if new_value.nil?
      unless new_value.nil?
      end

      @emails = new_value
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] primary_address Object to be assigned
    def primary_address=(new_value : AddressData?)
      raise ArgumentError.new("\"primary_address\" is required and cannot be null") if new_value.nil?
      unless new_value.nil?
      end

      @primary_address = new_value
    end

    # Generates #hash and #== methods from all fields
    # #== @return [Bool]
    # #hash calculates hash code according to all attributes.
    # #hash @return [UInt64] Hash code
    def_equals_and_hash(@first_name, @last_name, @phone_numbers, @emails, @primary_address)
  end
end
