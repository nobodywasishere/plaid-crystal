#  The Plaid API
#
# The Plaid REST API. Please see https://plaid.com/docs/api for more details.
#
# The version of the OpenAPI document: 2020-09-14_1.474.3
#
# Generated by: https://openapi-generator.tech
#

require "../../core"

module Plaid
  # This information is public. Users of your app will see this information when managing connections between your app and their bank accounts in Plaid Portal. Defaults to partner's customer support info if omitted.
  class PartnerEndCustomerCustomerSupportInfo
    include JSON::Serializable
    include JSON::Serializable::Unmapped
    include OpenApi::Validatable
    include OpenApi::Json

    # Optional Properties

    @[JSON::Field(key: "email", type: String?, default: nil, required: false, nullable: false, emit_null: false)]
    getter email : String? = nil

    @[JSON::Field(key: "phone_number", type: String?, default: nil, required: false, nullable: false, emit_null: false)]
    getter phone_number : String? = nil

    @[JSON::Field(key: "contact_url", type: String?, default: nil, required: false, nullable: false, emit_null: false)]
    getter contact_url : String? = nil

    @[JSON::Field(key: "link_update_url", type: String?, default: nil, required: false, nullable: false, emit_null: false)]
    getter link_update_url : String? = nil

    # Initializes the object
    # @param [Hash] attributes Model attributes in the form of hash
    def initialize(
      *,
      # Optional properties
      @email : String? = nil,
      @phone_number : String? = nil,
      @contact_url : String? = nil,
      @link_update_url : String? = nil
    )
    end

    # Show invalid properties with the reasons. Usually used together with valid?
    # @return Array for valid properties with the reasons
    def list_invalid_properties : Array(String)
      invalid_properties = Array(String).new

      unless (_email = @email).nil?
      end
      unless (_phone_number = @phone_number).nil?
      end
      unless (_contact_url = @contact_url).nil?
      end
      unless (_link_update_url = @link_update_url).nil?
      end
      invalid_properties
    end

    # Check to see if the all the properties in the model are valid
    # @return true if the model is valid
    def valid? : Bool
      unless (_email = @email).nil?
      end

      unless (_phone_number = @phone_number).nil?
      end

      unless (_contact_url = @contact_url).nil?
      end

      unless (_link_update_url = @link_update_url).nil?
      end

      true
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] email Object to be assigned
    def email=(new_value : String?)
      unless new_value.nil?
      end

      @email = new_value
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] phone_number Object to be assigned
    def phone_number=(new_value : String?)
      unless new_value.nil?
      end

      @phone_number = new_value
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] contact_url Object to be assigned
    def contact_url=(new_value : String?)
      unless new_value.nil?
      end

      @contact_url = new_value
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] link_update_url Object to be assigned
    def link_update_url=(new_value : String?)
      unless new_value.nil?
      end

      @link_update_url = new_value
    end

    # Generates #hash and #== methods from all fields
    # #== @return [Bool]
    # #hash calculates hash code according to all attributes.
    # #hash @return [UInt64] Hash code
    def_equals_and_hash(@email, @phone_number, @contact_url, @link_update_url)
  end
end
