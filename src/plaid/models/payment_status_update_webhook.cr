#  The Plaid API
#
# The Plaid REST API. Please see https://plaid.com/docs/api for more details.
#
# The version of the OpenAPI document: 2020-09-14_1.474.3
#
# Generated by: https://openapi-generator.tech
#

require "../../core"

require "./payment_initiation_payment_status"
require "./plaid_error"
require "./webhook_environment_values"

module Plaid
  # Fired when the status of a payment has changed.
  class PaymentStatusUpdateWebhook
    include JSON::Serializable
    include JSON::Serializable::Unmapped
    include OpenApi::Validatable
    include OpenApi::Json

    # Required Properties

    # `PAYMENT_INITIATION`
    @[JSON::Field(key: "webhook_type", type: String?, default: nil, required: true, nullable: false, emit_null: false)]
    getter webhook_type : String? = nil

    # `PAYMENT_STATUS_UPDATE`
    @[JSON::Field(key: "webhook_code", type: String?, default: nil, required: true, nullable: false, emit_null: false)]
    getter webhook_code : String? = nil

    # The `payment_id` for the payment being updated
    @[JSON::Field(key: "payment_id", type: String?, default: nil, required: true, nullable: false, emit_null: false)]
    getter payment_id : String? = nil

    @[JSON::Field(key: "new_payment_status", type: Plaid::PaymentInitiationPaymentStatus?, default: nil, required: true, nullable: false, emit_null: false)]
    getter new_payment_status : Plaid::PaymentInitiationPaymentStatus? = nil

    @[JSON::Field(key: "old_payment_status", type: Plaid::PaymentInitiationPaymentStatus?, default: nil, required: true, nullable: false, emit_null: false)]
    getter old_payment_status : Plaid::PaymentInitiationPaymentStatus? = nil

    # The original value of the reference when creating the payment.
    @[JSON::Field(key: "original_reference", type: String?, default: nil, required: true, nullable: true, emit_null: true)]
    getter original_reference : String? = nil

    # The original value of the `start_date` provided during the creation of a standing order. If the payment is not a standing order, this field will be `null`.
    @[JSON::Field(key: "original_start_date", type: Time?, default: nil, required: true, nullable: true, emit_null: true, converter: Time::ISO8601DateConverter)]
    getter original_start_date : Time? = nil

    # The start date sent to the bank after adjusting for holidays or weekends.  Will be provided in [ISO 8601](https://wikipedia.org/wiki/ISO_8601) format (YYYY-MM-DD). If the start date did not require adjustment, or if the payment is not a standing order, this field will be `null`.
    @[JSON::Field(key: "adjusted_start_date", type: Time?, default: nil, required: true, nullable: true, emit_null: true, converter: Time::ISO8601DateConverter)]
    getter adjusted_start_date : Time? = nil

    # The timestamp of the update, in [ISO 8601](https://wikipedia.org/wiki/ISO_8601) format, e.g. `\"2017-09-14T14:42:19.350Z\"`
    @[JSON::Field(key: "timestamp", type: Time?, default: nil, required: true, nullable: false, emit_null: false, converter: Time::RFC3339Converter)]
    getter timestamp : Time? = nil

    @[JSON::Field(key: "environment", type: Plaid::WebhookEnvironmentValues?, default: nil, required: true, nullable: false, emit_null: false)]
    getter environment : Plaid::WebhookEnvironmentValues? = nil

    # End of Required Properties

    # Optional Properties

    # The transaction ID that this payment is associated with, if any. This is present only when a payment was initiated using virtual accounts.
    @[JSON::Field(key: "transaction_id", type: String?, default: nil, required: false, nullable: true, emit_null: true, presence: true, ignore_serialize: transaction_id.nil? && !transaction_id_present?)]
    getter transaction_id : String? = nil

    @[JSON::Field(ignore: true)]
    property? transaction_id_present : Bool = false

    # The value of the reference sent to the bank after adjustment to pass bank validation rules.
    @[JSON::Field(key: "adjusted_reference", type: String?, default: nil, required: false, nullable: true, emit_null: true, presence: true, ignore_serialize: adjusted_reference.nil? && !adjusted_reference_present?)]
    getter adjusted_reference : String? = nil

    @[JSON::Field(ignore: true)]
    property? adjusted_reference_present : Bool = false

    @[JSON::Field(key: "error", type: PlaidError?, default: nil, required: false, nullable: true, emit_null: true, presence: true, ignore_serialize: error.nil? && !error_present?)]
    getter error : PlaidError? = nil

    @[JSON::Field(ignore: true)]
    property? error_present : Bool = false

    # Initializes the object
    # @param [Hash] attributes Model attributes in the form of hash
    def initialize(
      *,
      # Required properties
      @webhook_type : String? = nil,
      @webhook_code : String? = nil,
      @payment_id : String? = nil,
      @new_payment_status : Plaid::PaymentInitiationPaymentStatus? = nil,
      @old_payment_status : Plaid::PaymentInitiationPaymentStatus? = nil,
      @original_reference : String? = nil,
      @original_start_date : Time? = nil,
      @adjusted_start_date : Time? = nil,
      @timestamp : Time? = nil,
      @environment : Plaid::WebhookEnvironmentValues? = nil,
      # Optional properties
      @transaction_id : String? = nil,
      @adjusted_reference : String? = nil,
      @error : PlaidError? = nil
    )
    end

    # Show invalid properties with the reasons. Usually used together with valid?
    # @return Array for valid properties with the reasons
    def list_invalid_properties : Array(String)
      invalid_properties = Array(String).new

      invalid_properties.push("\"webhook_type\" is required and cannot be null") if @webhook_type.nil?

      unless (_webhook_type = @webhook_type).nil?
      end
      invalid_properties.push("\"webhook_code\" is required and cannot be null") if @webhook_code.nil?

      unless (_webhook_code = @webhook_code).nil?
      end
      invalid_properties.push("\"payment_id\" is required and cannot be null") if @payment_id.nil?

      unless (_payment_id = @payment_id).nil?
      end
      invalid_properties.push("\"new_payment_status\" is required and cannot be null") if @new_payment_status.nil?

      unless (_new_payment_status = @new_payment_status).nil?
        invalid_properties.push(_new_payment_status.error_message) if !_new_payment_status.valid?
      end
      invalid_properties.push("\"old_payment_status\" is required and cannot be null") if @old_payment_status.nil?

      unless (_old_payment_status = @old_payment_status).nil?
        invalid_properties.push(_old_payment_status.error_message) if !_old_payment_status.valid?
      end
      unless (_original_reference = @original_reference).nil?
      end
      unless (_original_start_date = @original_start_date).nil?
      end
      unless (_adjusted_start_date = @adjusted_start_date).nil?
      end
      invalid_properties.push("\"timestamp\" is required and cannot be null") if @timestamp.nil?

      unless (_timestamp = @timestamp).nil?
      end
      invalid_properties.push("\"environment\" is required and cannot be null") if @environment.nil?

      unless (_environment = @environment).nil?
        invalid_properties.push(_environment.error_message) if !_environment.valid?
      end
      unless (_transaction_id = @transaction_id).nil?
      end
      unless (_adjusted_reference = @adjusted_reference).nil?
      end
      unless (_error = @error).nil?
      end
      invalid_properties
    end

    # Check to see if the all the properties in the model are valid
    # @return true if the model is valid
    def valid? : Bool
      return false if @webhook_type.nil?
      unless (_webhook_type = @webhook_type).nil?
      end

      return false if @webhook_code.nil?
      unless (_webhook_code = @webhook_code).nil?
      end

      return false if @payment_id.nil?
      unless (_payment_id = @payment_id).nil?
      end

      return false if @new_payment_status.nil?
      unless (_new_payment_status = @new_payment_status).nil?
        return false if !_new_payment_status.valid?
      end

      return false if @old_payment_status.nil?
      unless (_old_payment_status = @old_payment_status).nil?
        return false if !_old_payment_status.valid?
      end

      unless (_original_reference = @original_reference).nil?
      end

      unless (_original_start_date = @original_start_date).nil?
      end

      unless (_adjusted_start_date = @adjusted_start_date).nil?
      end

      return false if @timestamp.nil?
      unless (_timestamp = @timestamp).nil?
      end

      return false if @environment.nil?
      unless (_environment = @environment).nil?
        return false if !_environment.valid?
      end

      unless (_transaction_id = @transaction_id).nil?
      end

      unless (_adjusted_reference = @adjusted_reference).nil?
      end

      unless (_error = @error).nil?
      end

      true
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] webhook_type Object to be assigned
    def webhook_type=(new_value : String?)
      raise ArgumentError.new("\"webhook_type\" is required and cannot be null") if new_value.nil?
      unless new_value.nil?
      end

      @webhook_type = new_value
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] webhook_code Object to be assigned
    def webhook_code=(new_value : String?)
      raise ArgumentError.new("\"webhook_code\" is required and cannot be null") if new_value.nil?
      unless new_value.nil?
      end

      @webhook_code = new_value
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] payment_id Object to be assigned
    def payment_id=(new_value : String?)
      raise ArgumentError.new("\"payment_id\" is required and cannot be null") if new_value.nil?
      unless new_value.nil?
      end

      @payment_id = new_value
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] new_payment_status Object to be assigned
    def new_payment_status=(new_value : Plaid::PaymentInitiationPaymentStatus?)
      raise ArgumentError.new("\"new_payment_status\" is required and cannot be null") if new_value.nil?
      unless new_value.nil?
        new_value.validate
      end

      @new_payment_status = new_value
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] old_payment_status Object to be assigned
    def old_payment_status=(new_value : Plaid::PaymentInitiationPaymentStatus?)
      raise ArgumentError.new("\"old_payment_status\" is required and cannot be null") if new_value.nil?
      unless new_value.nil?
        new_value.validate
      end

      @old_payment_status = new_value
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] original_reference Object to be assigned
    def original_reference=(new_value : String?)
      unless new_value.nil?
      end

      @original_reference = new_value
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] original_start_date Object to be assigned
    def original_start_date=(new_value : Time?)
      unless new_value.nil?
      end

      @original_start_date = new_value
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] adjusted_start_date Object to be assigned
    def adjusted_start_date=(new_value : Time?)
      unless new_value.nil?
      end

      @adjusted_start_date = new_value
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] timestamp Object to be assigned
    def timestamp=(new_value : Time?)
      raise ArgumentError.new("\"timestamp\" is required and cannot be null") if new_value.nil?
      unless new_value.nil?
      end

      @timestamp = new_value
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] environment Object to be assigned
    def environment=(new_value : Plaid::WebhookEnvironmentValues?)
      raise ArgumentError.new("\"environment\" is required and cannot be null") if new_value.nil?
      unless new_value.nil?
        new_value.validate
      end

      @environment = new_value
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] transaction_id Object to be assigned
    def transaction_id=(new_value : String?)
      unless new_value.nil?
      end

      @transaction_id = new_value
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] adjusted_reference Object to be assigned
    def adjusted_reference=(new_value : String?)
      unless new_value.nil?
      end

      @adjusted_reference = new_value
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] error Object to be assigned
    def error=(new_value : PlaidError?)
      unless new_value.nil?
      end

      @error = new_value
    end

    # Generates #hash and #== methods from all fields
    # #== @return [Bool]
    # #hash calculates hash code according to all attributes.
    # #hash @return [UInt64] Hash code
    def_equals_and_hash(@webhook_type, @webhook_code, @payment_id, @new_payment_status, @old_payment_status, @original_reference, @original_start_date, @adjusted_start_date, @timestamp, @environment, @transaction_id, @transaction_id_present, @adjusted_reference, @adjusted_reference_present, @error, @error_present)
  end
end
