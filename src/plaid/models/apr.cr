#  The Plaid API
#
# The Plaid REST API. Please see https://plaid.com/docs/api for more details.
#
# The version of the OpenAPI document: 2020-09-14_1.474.3
#
# Generated by: https://openapi-generator.tech
#

require "../../core"

module Plaid
  # Information about the APR on the account.
  class APR
    include JSON::Serializable
    include JSON::Serializable::Unmapped
    include OpenApi::Validatable
    include OpenApi::Json

    # Required Properties

    # Annual Percentage Rate applied.
    @[JSON::Field(key: "apr_percentage", type: Float64?, default: nil, required: true, nullable: false, emit_null: false)]
    getter apr_percentage : Float64? = nil

    # The type of balance to which the APR applies.
    @[JSON::Field(key: "apr_type", type: String?, default: nil, required: true, nullable: false, emit_null: false)]
    getter apr_type : String? = nil
    ERROR_MESSAGE_FOR_APR_TYPE = "invalid value for \"apr_type\", must be one of [balance_transfer_apr, cash_apr, purchase_apr, special]."
    VALID_VALUES_FOR_APR_TYPE  = String.static_array("balance_transfer_apr", "cash_apr", "purchase_apr", "special")

    # Amount of money that is subjected to the APR if a balance was carried beyond payment due date. How it is calculated can vary by card issuer. It is often calculated as an average daily balance.
    @[JSON::Field(key: "balance_subject_to_apr", type: Float64?, default: nil, required: true, nullable: true, emit_null: true)]
    getter balance_subject_to_apr : Float64? = nil

    # Amount of money charged due to interest from last statement.
    @[JSON::Field(key: "interest_charge_amount", type: Float64?, default: nil, required: true, nullable: true, emit_null: true)]
    getter interest_charge_amount : Float64? = nil

    # End of Required Properties

    # Initializes the object
    # @param [Hash] attributes Model attributes in the form of hash
    def initialize(
      *,
      # Required properties
      @apr_percentage : Float64? = nil,
      @apr_type : String? = nil,
      @balance_subject_to_apr : Float64? = nil,
      @interest_charge_amount : Float64? = nil
    )
    end

    # Show invalid properties with the reasons. Usually used together with valid?
    # @return Array for valid properties with the reasons
    def list_invalid_properties : Array(String)
      invalid_properties = Array(String).new

      invalid_properties.push("\"apr_percentage\" is required and cannot be null") if @apr_percentage.nil?

      unless (_apr_percentage = @apr_percentage).nil?
      end
      invalid_properties.push("\"apr_type\" is required and cannot be null") if @apr_type.nil?

      unless (_apr_type = @apr_type).nil?
        invalid_properties.push(ERROR_MESSAGE_FOR_APR_TYPE) unless OpenApi::EnumValidator.valid?(_apr_type, VALID_VALUES_FOR_APR_TYPE)
      end
      unless (_balance_subject_to_apr = @balance_subject_to_apr).nil?
      end
      unless (_interest_charge_amount = @interest_charge_amount).nil?
      end
      invalid_properties
    end

    # Check to see if the all the properties in the model are valid
    # @return true if the model is valid
    def valid? : Bool
      return false if @apr_percentage.nil?
      unless (_apr_percentage = @apr_percentage).nil?
      end

      return false if @apr_type.nil?
      unless (_apr_type = @apr_type).nil?
        return false unless OpenApi::EnumValidator.valid?(_apr_type, VALID_VALUES_FOR_APR_TYPE)
      end

      unless (_balance_subject_to_apr = @balance_subject_to_apr).nil?
      end

      unless (_interest_charge_amount = @interest_charge_amount).nil?
      end

      true
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] apr_percentage Object to be assigned
    def apr_percentage=(new_value : Float64?)
      raise ArgumentError.new("\"apr_percentage\" is required and cannot be null") if new_value.nil?
      unless new_value.nil?
      end

      @apr_percentage = new_value
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] apr_type Object to be assigned
    def apr_type=(new_value : String?)
      raise ArgumentError.new("\"apr_type\" is required and cannot be null") if new_value.nil?
      unless new_value.nil?
        OpenApi::EnumValidator.validate("apr_type", new_value, VALID_VALUES_FOR_APR_TYPE)
      end

      @apr_type = new_value
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] balance_subject_to_apr Object to be assigned
    def balance_subject_to_apr=(new_value : Float64?)
      unless new_value.nil?
      end

      @balance_subject_to_apr = new_value
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] interest_charge_amount Object to be assigned
    def interest_charge_amount=(new_value : Float64?)
      unless new_value.nil?
      end

      @interest_charge_amount = new_value
    end

    # Generates #hash and #== methods from all fields
    # #== @return [Bool]
    # #hash calculates hash code according to all attributes.
    # #hash @return [UInt64] Hash code
    def_equals_and_hash(@apr_percentage, @apr_type, @balance_subject_to_apr, @interest_charge_amount)
  end
end
