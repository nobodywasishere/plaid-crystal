#  The Plaid API
#
# The Plaid REST API. Please see https://plaid.com/docs/api for more details.
#
# The version of the OpenAPI document: 2020-09-14_1.474.3
#
# Generated by: https://openapi-generator.tech
#

require "../../core"

require "./transfer_balance_type"

module Plaid
  # Information about the balance held with Plaid.
  class TransferBalance
    include JSON::Serializable
    include JSON::Serializable::Unmapped
    include OpenApi::Validatable
    include OpenApi::Json

    # Required Properties

    # The amount of this balance available for use (decimal string with two digits of precision e.g. \"10.00\").
    @[JSON::Field(key: "available", type: String?, default: nil, required: true, nullable: false, emit_null: false)]
    getter available : String? = nil

    @[JSON::Field(key: "type", type: Plaid::TransferBalanceType?, default: nil, required: true, nullable: false, emit_null: false)]
    getter _type : Plaid::TransferBalanceType? = nil

    # End of Required Properties

    # Optional Properties

    # The available balance, plus amount of pending funds that in processing (decimal string with two digits of precision e.g. \"10.00\").
    @[JSON::Field(key: "current", type: String?, default: nil, required: false, nullable: false, emit_null: false)]
    getter current : String? = nil

    # Initializes the object
    # @param [Hash] attributes Model attributes in the form of hash
    def initialize(
      *,
      # Required properties
      @available : String? = nil,
      @_type : Plaid::TransferBalanceType? = nil,
      # Optional properties
      @current : String? = nil
    )
    end

    # Show invalid properties with the reasons. Usually used together with valid?
    # @return Array for valid properties with the reasons
    def list_invalid_properties : Array(String)
      invalid_properties = Array(String).new

      invalid_properties.push("\"available\" is required and cannot be null") if @available.nil?

      unless (_available = @available).nil?
      end
      invalid_properties.push("\"_type\" is required and cannot be null") if @_type.nil?

      unless (__type = @_type).nil?
        invalid_properties.push(__type.error_message) if !__type.valid?
      end
      unless (_current = @current).nil?
      end
      invalid_properties
    end

    # Check to see if the all the properties in the model are valid
    # @return true if the model is valid
    def valid? : Bool
      return false if @available.nil?
      unless (_available = @available).nil?
      end

      return false if @_type.nil?
      unless (__type = @_type).nil?
        return false if !__type.valid?
      end

      unless (_current = @current).nil?
      end

      true
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] available Object to be assigned
    def available=(new_value : String?)
      raise ArgumentError.new("\"available\" is required and cannot be null") if new_value.nil?
      unless new_value.nil?
      end

      @available = new_value
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] _type Object to be assigned
    def _type=(new_value : Plaid::TransferBalanceType?)
      raise ArgumentError.new("\"_type\" is required and cannot be null") if new_value.nil?
      unless new_value.nil?
        new_value.validate
      end

      @_type = new_value
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] current Object to be assigned
    def current=(new_value : String?)
      unless new_value.nil?
      end

      @current = new_value
    end

    # Generates #hash and #== methods from all fields
    # #== @return [Bool]
    # #hash calculates hash code according to all attributes.
    # #hash @return [UInt64] Hash code
    def_equals_and_hash(@available, @_type, @current)
  end
end
