#  The Plaid API
#
# The Plaid REST API. Please see https://plaid.com/docs/api for more details.
#
# The version of the OpenAPI document: 2020-09-14_1.474.3
#
# Generated by: https://openapi-generator.tech
#

require "../../core"

require "./income_breakdown_type"

module Plaid
  # An object representing a breakdown of the different income types on the paystub.
  class IncomeBreakdown
    include JSON::Serializable
    include JSON::Serializable::Unmapped
    include OpenApi::Validatable
    include OpenApi::Json

    # Required Properties

    @[JSON::Field(key: "type", type: Plaid::IncomeBreakdownType?, default: nil, required: true, nullable: true, emit_null: true)]
    getter _type : Plaid::IncomeBreakdownType? = nil

    # The hourly rate at which the income is paid.
    @[JSON::Field(key: "rate", type: Float64?, default: nil, required: true, nullable: true, emit_null: true)]
    getter rate : Float64? = nil

    # The number of hours logged for this income for this pay period.
    @[JSON::Field(key: "hours", type: Float64?, default: nil, required: true, nullable: true, emit_null: true)]
    getter hours : Float64? = nil

    # The total pay for this pay period.
    @[JSON::Field(key: "total", type: Float64?, default: nil, required: true, nullable: true, emit_null: true)]
    getter total : Float64? = nil

    # End of Required Properties

    # Initializes the object
    # @param [Hash] attributes Model attributes in the form of hash
    def initialize(
      *,
      # Required properties
      @_type : Plaid::IncomeBreakdownType? = nil,
      @rate : Float64? = nil,
      @hours : Float64? = nil,
      @total : Float64? = nil
    )
    end

    # Show invalid properties with the reasons. Usually used together with valid?
    # @return Array for valid properties with the reasons
    def list_invalid_properties : Array(String)
      invalid_properties = Array(String).new

      unless (__type = @_type).nil?
        invalid_properties.push(__type.error_message) if !__type.valid?
      end
      unless (_rate = @rate).nil?
      end
      unless (_hours = @hours).nil?
      end
      unless (_total = @total).nil?
      end
      invalid_properties
    end

    # Check to see if the all the properties in the model are valid
    # @return true if the model is valid
    def valid? : Bool
      unless (__type = @_type).nil?
        return false if !__type.valid?
      end

      unless (_rate = @rate).nil?
      end

      unless (_hours = @hours).nil?
      end

      unless (_total = @total).nil?
      end

      true
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] _type Object to be assigned
    def _type=(new_value : Plaid::IncomeBreakdownType?)
      unless new_value.nil?
        new_value.validate
      end

      @_type = new_value
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] rate Object to be assigned
    def rate=(new_value : Float64?)
      unless new_value.nil?
      end

      @rate = new_value
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] hours Object to be assigned
    def hours=(new_value : Float64?)
      unless new_value.nil?
      end

      @hours = new_value
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] total Object to be assigned
    def total=(new_value : Float64?)
      unless new_value.nil?
      end

      @total = new_value
    end

    # Generates #hash and #== methods from all fields
    # #== @return [Bool]
    # #hash calculates hash code according to all attributes.
    # #hash @return [UInt64] Hash code
    def_equals_and_hash(@_type, @rate, @hours, @total)
  end
end
