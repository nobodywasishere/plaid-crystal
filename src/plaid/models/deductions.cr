#  The Plaid API
#
# The Plaid REST API. Please see https://plaid.com/docs/api for more details.
#
# The version of the OpenAPI document: 2020-09-14_1.474.3
#
# Generated by: https://openapi-generator.tech
#

require "../../core"

require "./deductions_breakdown"
require "./deductions_total"
require "./total"

module Plaid
  # An object with the deduction information found on a paystub.
  class Deductions
    include JSON::Serializable
    include JSON::Serializable::Unmapped
    include OpenApi::Validatable
    include OpenApi::Json

    # Required Properties

    @[JSON::Field(key: "breakdown", type: Array(DeductionsBreakdown)?, default: nil, required: true, nullable: false, emit_null: false)]
    getter breakdown : Array(DeductionsBreakdown)? = nil

    @[JSON::Field(key: "total", type: DeductionsTotal?, default: nil, required: true, nullable: false, emit_null: false)]
    getter total : DeductionsTotal? = nil

    # End of Required Properties

    # Optional Properties

    @[JSON::Field(key: "subtotals", type: Array(Total)?, default: nil, required: false, nullable: false, emit_null: false)]
    getter subtotals : Array(Total)? = nil

    @[JSON::Field(key: "totals", type: Array(Total)?, default: nil, required: false, nullable: false, emit_null: false)]
    getter totals : Array(Total)? = nil

    # Initializes the object
    # @param [Hash] attributes Model attributes in the form of hash
    def initialize(
      *,
      # Required properties
      @breakdown : Array(DeductionsBreakdown)? = nil,
      @total : DeductionsTotal? = nil,
      # Optional properties
      @subtotals : Array(Total)? = nil,
      @totals : Array(Total)? = nil
    )
    end

    # Show invalid properties with the reasons. Usually used together with valid?
    # @return Array for valid properties with the reasons
    def list_invalid_properties : Array(String)
      invalid_properties = Array(String).new

      invalid_properties.push("\"breakdown\" is required and cannot be null") if @breakdown.nil?

      unless (_breakdown = @breakdown).nil?
      end
      invalid_properties.push("\"total\" is required and cannot be null") if @total.nil?

      unless (_total = @total).nil?
      end
      unless (_subtotals = @subtotals).nil?
      end
      unless (_totals = @totals).nil?
      end
      invalid_properties
    end

    # Check to see if the all the properties in the model are valid
    # @return true if the model is valid
    def valid? : Bool
      return false if @breakdown.nil?
      unless (_breakdown = @breakdown).nil?
      end

      return false if @total.nil?
      unless (_total = @total).nil?
      end

      unless (_subtotals = @subtotals).nil?
      end

      unless (_totals = @totals).nil?
      end

      true
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] breakdown Object to be assigned
    def breakdown=(new_value : Array(DeductionsBreakdown)?)
      raise ArgumentError.new("\"breakdown\" is required and cannot be null") if new_value.nil?
      unless new_value.nil?
      end

      @breakdown = new_value
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] total Object to be assigned
    def total=(new_value : DeductionsTotal?)
      raise ArgumentError.new("\"total\" is required and cannot be null") if new_value.nil?
      unless new_value.nil?
      end

      @total = new_value
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] subtotals Object to be assigned
    def subtotals=(new_value : Array(Total)?)
      unless new_value.nil?
      end

      @subtotals = new_value
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] totals Object to be assigned
    def totals=(new_value : Array(Total)?)
      unless new_value.nil?
      end

      @totals = new_value
    end

    # Generates #hash and #== methods from all fields
    # #== @return [Bool]
    # #hash calculates hash code according to all attributes.
    # #hash @return [UInt64] Hash code
    def_equals_and_hash(@breakdown, @total, @subtotals, @totals)
  end
end
