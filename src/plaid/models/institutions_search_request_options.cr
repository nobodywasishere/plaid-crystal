#  The Plaid API
#
# The Plaid REST API. Please see https://plaid.com/docs/api for more details.
#
# The version of the OpenAPI document: 2020-09-14_1.474.3
#
# Generated by: https://openapi-generator.tech
#

require "../../core"

require "./institutions_search_payment_initiation_options"

module Plaid
  # An optional object to filter `/institutions/search` results.
  class InstitutionsSearchRequestOptions
    include JSON::Serializable
    include JSON::Serializable::Unmapped
    include OpenApi::Validatable
    include OpenApi::Json

    # Optional Properties

    # Limit results to institutions with or without OAuth login flows. Note that institutions will have `oauth` set to `true` if some Items associated with that institution are required to use OAuth flows; institutions in a state of migration to OAuth will have the `oauth` attribute set to `true`.
    @[JSON::Field(key: "oauth", type: Bool?, default: nil, required: false, nullable: true, emit_null: true, presence: true, ignore_serialize: oauth.nil? && !oauth_present?)]
    getter oauth : Bool? = nil

    @[JSON::Field(ignore: true)]
    property? oauth_present : Bool = false

    # When true, return the institution's homepage URL, logo and primary brand color.
    @[JSON::Field(key: "include_optional_metadata", type: Bool?, default: nil, required: false, nullable: false, emit_null: false)]
    getter include_optional_metadata : Bool? = nil

    # When `true`, returns metadata related to the Auth product indicating which auth methods are supported.
    @[JSON::Field(key: "include_auth_metadata", type: Bool?, default: false, required: false, nullable: true, emit_null: true, presence: true, ignore_serialize: include_auth_metadata.nil? && !include_auth_metadata_present?)]
    getter include_auth_metadata : Bool? = false

    @[JSON::Field(ignore: true)]
    property? include_auth_metadata_present : Bool = false

    # When `true`, returns metadata related to the Payment Initiation product indicating which payment configurations are supported.
    @[JSON::Field(key: "include_payment_initiation_metadata", type: Bool?, default: false, required: false, nullable: true, emit_null: true, presence: true, ignore_serialize: include_payment_initiation_metadata.nil? && !include_payment_initiation_metadata_present?)]
    getter include_payment_initiation_metadata : Bool? = false

    @[JSON::Field(ignore: true)]
    property? include_payment_initiation_metadata_present : Bool = false

    @[JSON::Field(key: "payment_initiation", type: Plaid::InstitutionsSearchPaymentInitiationOptions?, default: nil, required: false, nullable: true, emit_null: true, presence: true, ignore_serialize: payment_initiation.nil? && !payment_initiation_present?)]
    getter payment_initiation : Plaid::InstitutionsSearchPaymentInitiationOptions? = nil

    @[JSON::Field(ignore: true)]
    property? payment_initiation_present : Bool = false

    # Initializes the object
    # @param [Hash] attributes Model attributes in the form of hash
    def initialize(
      *,
      # Optional properties
      @oauth : Bool? = nil,
      @include_optional_metadata : Bool? = nil,
      @include_auth_metadata : Bool? = false,
      @include_payment_initiation_metadata : Bool? = false,
      @payment_initiation : Plaid::InstitutionsSearchPaymentInitiationOptions? = nil
    )
    end

    # Show invalid properties with the reasons. Usually used together with valid?
    # @return Array for valid properties with the reasons
    def list_invalid_properties : Array(String)
      invalid_properties = Array(String).new

      unless (_oauth = @oauth).nil?
      end
      unless (_include_optional_metadata = @include_optional_metadata).nil?
      end
      unless (_include_auth_metadata = @include_auth_metadata).nil?
      end
      unless (_include_payment_initiation_metadata = @include_payment_initiation_metadata).nil?
      end
      unless (_payment_initiation = @payment_initiation).nil?
        invalid_properties.concat(_payment_initiation.list_invalid_properties_for("payment_initiation")) if _payment_initiation.is_a?(OpenApi::Validatable)
      end
      invalid_properties
    end

    # Check to see if the all the properties in the model are valid
    # @return true if the model is valid
    def valid? : Bool
      unless (_oauth = @oauth).nil?
      end

      unless (_include_optional_metadata = @include_optional_metadata).nil?
      end

      unless (_include_auth_metadata = @include_auth_metadata).nil?
      end

      unless (_include_payment_initiation_metadata = @include_payment_initiation_metadata).nil?
      end

      unless (_payment_initiation = @payment_initiation).nil?
        return false if _payment_initiation.is_a?(OpenApi::Validatable) && !_payment_initiation.valid?
      end

      true
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] oauth Object to be assigned
    def oauth=(new_value : Bool?)
      unless new_value.nil?
      end

      @oauth = new_value
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] include_optional_metadata Object to be assigned
    def include_optional_metadata=(new_value : Bool?)
      unless new_value.nil?
      end

      @include_optional_metadata = new_value
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] include_auth_metadata Object to be assigned
    def include_auth_metadata=(new_value : Bool?)
      unless new_value.nil?
      end

      @include_auth_metadata = new_value
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] include_payment_initiation_metadata Object to be assigned
    def include_payment_initiation_metadata=(new_value : Bool?)
      unless new_value.nil?
      end

      @include_payment_initiation_metadata = new_value
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] payment_initiation Object to be assigned
    def payment_initiation=(new_value : Plaid::InstitutionsSearchPaymentInitiationOptions?)
      unless new_value.nil?
        new_value.validate if new_value.is_a?(OpenApi::Validatable)
      end

      @payment_initiation = new_value
    end

    # Generates #hash and #== methods from all fields
    # #== @return [Bool]
    # #hash calculates hash code according to all attributes.
    # #hash @return [UInt64] Hash code
    def_equals_and_hash(@oauth, @oauth_present, @include_optional_metadata, @include_auth_metadata, @include_auth_metadata_present, @include_payment_initiation_metadata, @include_payment_initiation_metadata_present, @payment_initiation, @payment_initiation_present)
  end
end
