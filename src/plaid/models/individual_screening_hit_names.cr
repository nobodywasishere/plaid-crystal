#  The Plaid API
#
# The Plaid REST API. Please see https://plaid.com/docs/api for more details.
#
# The version of the OpenAPI document: 2020-09-14_1.474.3
#
# Generated by: https://openapi-generator.tech
#

require "../../core"

require "./weak_alias_determination"

module Plaid
  # Name information for the associated individual watchlist hit
  class IndividualScreeningHitNames
    include JSON::Serializable
    include JSON::Serializable::Unmapped
    include OpenApi::Validatable
    include OpenApi::Json

    # Required Properties

    # The full name of the individual, including all parts.
    @[JSON::Field(key: "full", type: String?, default: nil, required: true, nullable: false, emit_null: false)]
    getter full : String? = nil

    # Primary names are those most commonly used to refer to this person. Only one name will ever be marked as primary.
    @[JSON::Field(key: "is_primary", type: Bool?, default: nil, required: true, nullable: false, emit_null: false)]
    getter is_primary : Bool? = nil

    @[JSON::Field(key: "weak_alias_determination", type: Plaid::WeakAliasDetermination?, default: nil, required: true, nullable: false, emit_null: false)]
    getter weak_alias_determination : Plaid::WeakAliasDetermination? = nil

    # End of Required Properties

    # Initializes the object
    # @param [Hash] attributes Model attributes in the form of hash
    def initialize(
      *,
      # Required properties
      @full : String? = nil,
      @is_primary : Bool? = nil,
      @weak_alias_determination : Plaid::WeakAliasDetermination? = nil
    )
    end

    # Show invalid properties with the reasons. Usually used together with valid?
    # @return Array for valid properties with the reasons
    def list_invalid_properties : Array(String)
      invalid_properties = Array(String).new

      invalid_properties.push("\"full\" is required and cannot be null") if @full.nil?

      unless (_full = @full).nil?
      end
      invalid_properties.push("\"is_primary\" is required and cannot be null") if @is_primary.nil?

      unless (_is_primary = @is_primary).nil?
      end
      invalid_properties.push("\"weak_alias_determination\" is required and cannot be null") if @weak_alias_determination.nil?

      unless (_weak_alias_determination = @weak_alias_determination).nil?
        invalid_properties.push(_weak_alias_determination.error_message) if !_weak_alias_determination.valid?
      end
      invalid_properties
    end

    # Check to see if the all the properties in the model are valid
    # @return true if the model is valid
    def valid? : Bool
      return false if @full.nil?
      unless (_full = @full).nil?
      end

      return false if @is_primary.nil?
      unless (_is_primary = @is_primary).nil?
      end

      return false if @weak_alias_determination.nil?
      unless (_weak_alias_determination = @weak_alias_determination).nil?
        return false if !_weak_alias_determination.valid?
      end

      true
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] full Object to be assigned
    def full=(new_value : String?)
      raise ArgumentError.new("\"full\" is required and cannot be null") if new_value.nil?
      unless new_value.nil?
      end

      @full = new_value
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] is_primary Object to be assigned
    def is_primary=(new_value : Bool?)
      raise ArgumentError.new("\"is_primary\" is required and cannot be null") if new_value.nil?
      unless new_value.nil?
      end

      @is_primary = new_value
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] weak_alias_determination Object to be assigned
    def weak_alias_determination=(new_value : Plaid::WeakAliasDetermination?)
      raise ArgumentError.new("\"weak_alias_determination\" is required and cannot be null") if new_value.nil?
      unless new_value.nil?
        new_value.validate
      end

      @weak_alias_determination = new_value
    end

    # Generates #hash and #== methods from all fields
    # #== @return [Bool]
    # #hash calculates hash code according to all attributes.
    # #hash @return [UInt64] Hash code
    def_equals_and_hash(@full, @is_primary, @weak_alias_determination)
  end
end
