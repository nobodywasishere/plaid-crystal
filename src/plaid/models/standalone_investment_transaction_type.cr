#  The Plaid API
#
# The Plaid REST API. Please see https://plaid.com/docs/api for more details.
#
# The version of the OpenAPI document: 2020-09-14_1.474.3
#
# Generated by: https://openapi-generator.tech
#

require "../../core"

module Plaid
  # Valid values for investment transaction types and subtypes. Note that transactions representing inflow of cash will appear as negative amounts, outflow of cash will appear as positive amounts.
  class StandaloneInvestmentTransactionType
    include JSON::Serializable
    include JSON::Serializable::Unmapped
    include OpenApi::Validatable
    include OpenApi::Json

    # Required Properties

    # Buying an investment
    @[JSON::Field(key: "buy", type: String?, default: nil, required: true, nullable: false, emit_null: false)]
    getter buy : String? = nil

    # Selling an investment
    @[JSON::Field(key: "sell", type: String?, default: nil, required: true, nullable: false, emit_null: false)]
    getter sell : String? = nil

    # A cancellation of a pending transaction
    @[JSON::Field(key: "cancel", type: String?, default: nil, required: true, nullable: false, emit_null: false)]
    getter cancel : String? = nil

    # Activity that modifies a cash position
    @[JSON::Field(key: "cash", type: String?, default: nil, required: true, nullable: false, emit_null: false)]
    getter cash : String? = nil

    # Fees on the account, e.g. commission, bookkeeping, options-related.
    @[JSON::Field(key: "fee", type: String?, default: nil, required: true, nullable: false, emit_null: false)]
    getter fee : String? = nil

    # Activity that modifies a position, but not through buy/sell activity e.g. options exercise, portfolio transfer
    @[JSON::Field(key: "transfer", type: String?, default: nil, required: true, nullable: false, emit_null: false)]
    getter transfer : String? = nil

    # End of Required Properties

    # Initializes the object
    # @param [Hash] attributes Model attributes in the form of hash
    def initialize(
      *,
      # Required properties
      @buy : String? = nil,
      @sell : String? = nil,
      @cancel : String? = nil,
      @cash : String? = nil,
      @fee : String? = nil,
      @transfer : String? = nil
    )
    end

    # Show invalid properties with the reasons. Usually used together with valid?
    # @return Array for valid properties with the reasons
    def list_invalid_properties : Array(String)
      invalid_properties = Array(String).new

      invalid_properties.push("\"buy\" is required and cannot be null") if @buy.nil?

      unless (_buy = @buy).nil?
      end
      invalid_properties.push("\"sell\" is required and cannot be null") if @sell.nil?

      unless (_sell = @sell).nil?
      end
      invalid_properties.push("\"cancel\" is required and cannot be null") if @cancel.nil?

      unless (_cancel = @cancel).nil?
      end
      invalid_properties.push("\"cash\" is required and cannot be null") if @cash.nil?

      unless (_cash = @cash).nil?
      end
      invalid_properties.push("\"fee\" is required and cannot be null") if @fee.nil?

      unless (_fee = @fee).nil?
      end
      invalid_properties.push("\"transfer\" is required and cannot be null") if @transfer.nil?

      unless (_transfer = @transfer).nil?
      end
      invalid_properties
    end

    # Check to see if the all the properties in the model are valid
    # @return true if the model is valid
    def valid? : Bool
      return false if @buy.nil?
      unless (_buy = @buy).nil?
      end

      return false if @sell.nil?
      unless (_sell = @sell).nil?
      end

      return false if @cancel.nil?
      unless (_cancel = @cancel).nil?
      end

      return false if @cash.nil?
      unless (_cash = @cash).nil?
      end

      return false if @fee.nil?
      unless (_fee = @fee).nil?
      end

      return false if @transfer.nil?
      unless (_transfer = @transfer).nil?
      end

      true
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] buy Object to be assigned
    def buy=(new_value : String?)
      raise ArgumentError.new("\"buy\" is required and cannot be null") if new_value.nil?
      unless new_value.nil?
      end

      @buy = new_value
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] sell Object to be assigned
    def sell=(new_value : String?)
      raise ArgumentError.new("\"sell\" is required and cannot be null") if new_value.nil?
      unless new_value.nil?
      end

      @sell = new_value
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] cancel Object to be assigned
    def cancel=(new_value : String?)
      raise ArgumentError.new("\"cancel\" is required and cannot be null") if new_value.nil?
      unless new_value.nil?
      end

      @cancel = new_value
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] cash Object to be assigned
    def cash=(new_value : String?)
      raise ArgumentError.new("\"cash\" is required and cannot be null") if new_value.nil?
      unless new_value.nil?
      end

      @cash = new_value
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] fee Object to be assigned
    def fee=(new_value : String?)
      raise ArgumentError.new("\"fee\" is required and cannot be null") if new_value.nil?
      unless new_value.nil?
      end

      @fee = new_value
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] transfer Object to be assigned
    def transfer=(new_value : String?)
      raise ArgumentError.new("\"transfer\" is required and cannot be null") if new_value.nil?
      unless new_value.nil?
      end

      @transfer = new_value
    end

    # Generates #hash and #== methods from all fields
    # #== @return [Bool]
    # #hash calculates hash code according to all attributes.
    # #hash @return [UInt64] Hash code
    def_equals_and_hash(@buy, @sell, @cancel, @cash, @fee, @transfer)
  end
end
