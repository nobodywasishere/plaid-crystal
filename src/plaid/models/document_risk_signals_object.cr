#  The Plaid API
#
# The Plaid REST API. Please see https://plaid.com/docs/api for more details.
#
# The version of the OpenAPI document: 2020-09-14_1.474.3
#
# Generated by: https://openapi-generator.tech
#

require "../../core"

require "./multi_document_risk_signal"
require "./single_document_risk_signal"

module Plaid
  # Object containing fraud risk data for a set of income documents.
  class DocumentRiskSignalsObject
    include JSON::Serializable
    include JSON::Serializable::Unmapped
    include OpenApi::Validatable
    include OpenApi::Json

    # Required Properties

    # ID of the payroll provider account.
    @[JSON::Field(key: "account_id", type: String?, default: nil, required: true, nullable: true, emit_null: true)]
    getter account_id : String? = nil

    # Array of document metadata and associated risk signals per document
    @[JSON::Field(key: "single_document_risk_signals", type: Array(SingleDocumentRiskSignal)?, default: nil, required: true, nullable: false, emit_null: false)]
    getter single_document_risk_signals : Array(SingleDocumentRiskSignal)? = nil

    # Array of risk signals computed from a set of uploaded documents and the associated documents' metadata
    @[JSON::Field(key: "multi_document_risk_signals", type: Array(MultiDocumentRiskSignal)?, default: nil, required: true, nullable: false, emit_null: false)]
    getter multi_document_risk_signals : Array(MultiDocumentRiskSignal)? = nil

    # End of Required Properties

    # Initializes the object
    # @param [Hash] attributes Model attributes in the form of hash
    def initialize(
      *,
      # Required properties
      @account_id : String? = nil,
      @single_document_risk_signals : Array(SingleDocumentRiskSignal)? = nil,
      @multi_document_risk_signals : Array(MultiDocumentRiskSignal)? = nil
    )
    end

    # Show invalid properties with the reasons. Usually used together with valid?
    # @return Array for valid properties with the reasons
    def list_invalid_properties : Array(String)
      invalid_properties = Array(String).new

      unless (_account_id = @account_id).nil?
      end
      invalid_properties.push("\"single_document_risk_signals\" is required and cannot be null") if @single_document_risk_signals.nil?

      unless (_single_document_risk_signals = @single_document_risk_signals).nil?
      end
      invalid_properties.push("\"multi_document_risk_signals\" is required and cannot be null") if @multi_document_risk_signals.nil?

      unless (_multi_document_risk_signals = @multi_document_risk_signals).nil?
      end
      invalid_properties
    end

    # Check to see if the all the properties in the model are valid
    # @return true if the model is valid
    def valid? : Bool
      unless (_account_id = @account_id).nil?
      end

      return false if @single_document_risk_signals.nil?
      unless (_single_document_risk_signals = @single_document_risk_signals).nil?
      end

      return false if @multi_document_risk_signals.nil?
      unless (_multi_document_risk_signals = @multi_document_risk_signals).nil?
      end

      true
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] account_id Object to be assigned
    def account_id=(new_value : String?)
      unless new_value.nil?
      end

      @account_id = new_value
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] single_document_risk_signals Object to be assigned
    def single_document_risk_signals=(new_value : Array(SingleDocumentRiskSignal)?)
      raise ArgumentError.new("\"single_document_risk_signals\" is required and cannot be null") if new_value.nil?
      unless new_value.nil?
      end

      @single_document_risk_signals = new_value
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] multi_document_risk_signals Object to be assigned
    def multi_document_risk_signals=(new_value : Array(MultiDocumentRiskSignal)?)
      raise ArgumentError.new("\"multi_document_risk_signals\" is required and cannot be null") if new_value.nil?
      unless new_value.nil?
      end

      @multi_document_risk_signals = new_value
    end

    # Generates #hash and #== methods from all fields
    # #== @return [Bool]
    # #hash calculates hash code according to all attributes.
    # #hash @return [UInt64] Hash code
    def_equals_and_hash(@account_id, @single_document_risk_signals, @multi_document_risk_signals)
  end
end
