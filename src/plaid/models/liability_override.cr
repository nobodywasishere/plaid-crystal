#  The Plaid API
#
# The Plaid REST API. Please see https://plaid.com/docs/api for more details.
#
# The version of the OpenAPI document: 2020-09-14_1.474.3
#
# Generated by: https://openapi-generator.tech
#

require "../../core"

require "./address"
require "./pslf_status"
require "./student_loan_repayment_model"
require "./student_loan_status"

module Plaid
  # Used to configure Sandbox test data for the Liabilities product
  class LiabilityOverride
    include JSON::Serializable
    include JSON::Serializable::Unmapped
    include OpenApi::Validatable
    include OpenApi::Json

    # Required Properties

    # The type of the liability object, either `credit` or `student`. Mortgages are not currently supported in the custom Sandbox.
    @[JSON::Field(key: "type", type: String?, default: nil, required: true, nullable: false, emit_null: false)]
    getter _type : String? = nil

    # The purchase APR percentage value. For simplicity, this is the only interest rate used to calculate interest charges. Can only be set if `type` is `credit`.
    @[JSON::Field(key: "purchase_apr", type: Float64?, default: nil, required: true, nullable: false, emit_null: false)]
    getter purchase_apr : Float64? = nil

    # The cash APR percentage value. Can only be set if `type` is `credit`.
    @[JSON::Field(key: "cash_apr", type: Float64?, default: nil, required: true, nullable: false, emit_null: false)]
    getter cash_apr : Float64? = nil

    # The balance transfer APR percentage value. Can only be set if `type` is `credit`.
    @[JSON::Field(key: "balance_transfer_apr", type: Float64?, default: nil, required: true, nullable: false, emit_null: false)]
    getter balance_transfer_apr : Float64? = nil

    # The special APR percentage value. Can only be set if `type` is `credit`.
    @[JSON::Field(key: "special_apr", type: Float64?, default: nil, required: true, nullable: false, emit_null: false)]
    getter special_apr : Float64? = nil

    # Override the `last_payment_amount` field. Can only be set if `type` is `credit`.
    @[JSON::Field(key: "last_payment_amount", type: Float64?, default: nil, required: true, nullable: false, emit_null: false)]
    getter last_payment_amount : Float64? = nil

    # Override the `minimum_payment_amount` field. Can only be set if `type` is `credit` or `student`.
    @[JSON::Field(key: "minimum_payment_amount", type: Float64?, default: nil, required: true, nullable: false, emit_null: false)]
    getter minimum_payment_amount : Float64? = nil

    # Override the `is_overdue` field
    @[JSON::Field(key: "is_overdue", type: Bool?, default: nil, required: true, nullable: false, emit_null: false)]
    getter is_overdue : Bool? = nil

    # The date on which the loan was initially lent, in [ISO 8601](https://wikipedia.org/wiki/ISO_8601) (YYYY-MM-DD) format. Can only be set if `type` is `student`.
    @[JSON::Field(key: "origination_date", type: Time?, default: nil, required: true, nullable: false, emit_null: false, converter: Time::ISO8601DateConverter)]
    getter origination_date : Time? = nil

    # The original loan principal. Can only be set if `type` is `student`.
    @[JSON::Field(key: "principal", type: Float64?, default: nil, required: true, nullable: false, emit_null: false)]
    getter principal : Float64? = nil

    # The interest rate on the loan as a percentage. Can only be set if `type` is `student`.
    @[JSON::Field(key: "nominal_apr", type: Float64?, default: nil, required: true, nullable: false, emit_null: false)]
    getter nominal_apr : Float64? = nil

    # If set, interest capitalization begins at the given number of months after loan origination. By default interest is never capitalized. Can only be set if `type` is `student`.
    @[JSON::Field(key: "interest_capitalization_grace_period_months", type: Float64?, default: nil, required: true, nullable: false, emit_null: false)]
    getter interest_capitalization_grace_period_months : Float64? = nil

    @[JSON::Field(key: "repayment_model", type: StudentLoanRepaymentModel?, default: nil, required: true, nullable: false, emit_null: false)]
    getter repayment_model : StudentLoanRepaymentModel? = nil

    # Override the `expected_payoff_date` field. Can only be set if `type` is `student`.
    @[JSON::Field(key: "expected_payoff_date", type: Time?, default: nil, required: true, nullable: false, emit_null: false, converter: Time::ISO8601DateConverter)]
    getter expected_payoff_date : Time? = nil

    # Override the `guarantor` field. Can only be set if `type` is `student`.
    @[JSON::Field(key: "guarantor", type: String?, default: nil, required: true, nullable: false, emit_null: false)]
    getter guarantor : String? = nil

    # Override the `is_federal` field. Can only be set if `type` is `student`.
    @[JSON::Field(key: "is_federal", type: Bool?, default: nil, required: true, nullable: false, emit_null: false)]
    getter is_federal : Bool? = nil

    # Override the `loan_name` field. Can only be set if `type` is `student`.
    @[JSON::Field(key: "loan_name", type: String?, default: nil, required: true, nullable: false, emit_null: false)]
    getter loan_name : String? = nil

    @[JSON::Field(key: "loan_status", type: StudentLoanStatus?, default: nil, required: true, nullable: false, emit_null: false)]
    getter loan_status : StudentLoanStatus? = nil

    # Override the `payment_reference_number` field. Can only be set if `type` is `student`.
    @[JSON::Field(key: "payment_reference_number", type: String?, default: nil, required: true, nullable: false, emit_null: false)]
    getter payment_reference_number : String? = nil

    @[JSON::Field(key: "pslf_status", type: PSLFStatus?, default: nil, required: true, nullable: false, emit_null: false)]
    getter pslf_status : PSLFStatus? = nil

    # Override the `repayment_plan.description` field. Can only be set if `type` is `student`.
    @[JSON::Field(key: "repayment_plan_description", type: String?, default: nil, required: true, nullable: false, emit_null: false)]
    getter repayment_plan_description : String? = nil

    # Override the `repayment_plan.type` field. Can only be set if `type` is `student`. Possible values are: `\"extended graduated\"`, `\"extended standard\"`, `\"graduated\"`, `\"income-contingent repayment\"`, `\"income-based repayment\"`, `\"interest only\"`, `\"other\"`, `\"pay as you earn\"`, `\"revised pay as you earn\"`, `\"standard\"`, or `\"saving on a valuable education\"`.
    @[JSON::Field(key: "repayment_plan_type", type: String?, default: nil, required: true, nullable: false, emit_null: false)]
    getter repayment_plan_type : String? = nil

    # Override the `sequence_number` field. Can only be set if `type` is `student`.
    @[JSON::Field(key: "sequence_number", type: String?, default: nil, required: true, nullable: false, emit_null: false)]
    getter sequence_number : String? = nil

    @[JSON::Field(key: "servicer_address", type: Address?, default: nil, required: true, nullable: false, emit_null: false)]
    getter servicer_address : Address? = nil

    # End of Required Properties

    # Initializes the object
    # @param [Hash] attributes Model attributes in the form of hash
    def initialize(
      *,
      # Required properties
      @_type : String? = nil,
      @purchase_apr : Float64? = nil,
      @cash_apr : Float64? = nil,
      @balance_transfer_apr : Float64? = nil,
      @special_apr : Float64? = nil,
      @last_payment_amount : Float64? = nil,
      @minimum_payment_amount : Float64? = nil,
      @is_overdue : Bool? = nil,
      @origination_date : Time? = nil,
      @principal : Float64? = nil,
      @nominal_apr : Float64? = nil,
      @interest_capitalization_grace_period_months : Float64? = nil,
      @repayment_model : StudentLoanRepaymentModel? = nil,
      @expected_payoff_date : Time? = nil,
      @guarantor : String? = nil,
      @is_federal : Bool? = nil,
      @loan_name : String? = nil,
      @loan_status : StudentLoanStatus? = nil,
      @payment_reference_number : String? = nil,
      @pslf_status : PSLFStatus? = nil,
      @repayment_plan_description : String? = nil,
      @repayment_plan_type : String? = nil,
      @sequence_number : String? = nil,
      @servicer_address : Address? = nil
    )
    end

    # Show invalid properties with the reasons. Usually used together with valid?
    # @return Array for valid properties with the reasons
    def list_invalid_properties : Array(String)
      invalid_properties = Array(String).new

      invalid_properties.push("\"_type\" is required and cannot be null") if @_type.nil?

      unless (__type = @_type).nil?
      end
      invalid_properties.push("\"purchase_apr\" is required and cannot be null") if @purchase_apr.nil?

      unless (_purchase_apr = @purchase_apr).nil?
      end
      invalid_properties.push("\"cash_apr\" is required and cannot be null") if @cash_apr.nil?

      unless (_cash_apr = @cash_apr).nil?
      end
      invalid_properties.push("\"balance_transfer_apr\" is required and cannot be null") if @balance_transfer_apr.nil?

      unless (_balance_transfer_apr = @balance_transfer_apr).nil?
      end
      invalid_properties.push("\"special_apr\" is required and cannot be null") if @special_apr.nil?

      unless (_special_apr = @special_apr).nil?
      end
      invalid_properties.push("\"last_payment_amount\" is required and cannot be null") if @last_payment_amount.nil?

      unless (_last_payment_amount = @last_payment_amount).nil?
      end
      invalid_properties.push("\"minimum_payment_amount\" is required and cannot be null") if @minimum_payment_amount.nil?

      unless (_minimum_payment_amount = @minimum_payment_amount).nil?
      end
      invalid_properties.push("\"is_overdue\" is required and cannot be null") if @is_overdue.nil?

      unless (_is_overdue = @is_overdue).nil?
      end
      invalid_properties.push("\"origination_date\" is required and cannot be null") if @origination_date.nil?

      unless (_origination_date = @origination_date).nil?
      end
      invalid_properties.push("\"principal\" is required and cannot be null") if @principal.nil?

      unless (_principal = @principal).nil?
      end
      invalid_properties.push("\"nominal_apr\" is required and cannot be null") if @nominal_apr.nil?

      unless (_nominal_apr = @nominal_apr).nil?
      end
      invalid_properties.push("\"interest_capitalization_grace_period_months\" is required and cannot be null") if @interest_capitalization_grace_period_months.nil?

      unless (_interest_capitalization_grace_period_months = @interest_capitalization_grace_period_months).nil?
      end
      invalid_properties.push("\"repayment_model\" is required and cannot be null") if @repayment_model.nil?

      unless (_repayment_model = @repayment_model).nil?
      end
      invalid_properties.push("\"expected_payoff_date\" is required and cannot be null") if @expected_payoff_date.nil?

      unless (_expected_payoff_date = @expected_payoff_date).nil?
      end
      invalid_properties.push("\"guarantor\" is required and cannot be null") if @guarantor.nil?

      unless (_guarantor = @guarantor).nil?
      end
      invalid_properties.push("\"is_federal\" is required and cannot be null") if @is_federal.nil?

      unless (_is_federal = @is_federal).nil?
      end
      invalid_properties.push("\"loan_name\" is required and cannot be null") if @loan_name.nil?

      unless (_loan_name = @loan_name).nil?
      end
      invalid_properties.push("\"loan_status\" is required and cannot be null") if @loan_status.nil?

      unless (_loan_status = @loan_status).nil?
      end
      invalid_properties.push("\"payment_reference_number\" is required and cannot be null") if @payment_reference_number.nil?

      unless (_payment_reference_number = @payment_reference_number).nil?
      end
      invalid_properties.push("\"pslf_status\" is required and cannot be null") if @pslf_status.nil?

      unless (_pslf_status = @pslf_status).nil?
      end
      invalid_properties.push("\"repayment_plan_description\" is required and cannot be null") if @repayment_plan_description.nil?

      unless (_repayment_plan_description = @repayment_plan_description).nil?
      end
      invalid_properties.push("\"repayment_plan_type\" is required and cannot be null") if @repayment_plan_type.nil?

      unless (_repayment_plan_type = @repayment_plan_type).nil?
      end
      invalid_properties.push("\"sequence_number\" is required and cannot be null") if @sequence_number.nil?

      unless (_sequence_number = @sequence_number).nil?
      end
      invalid_properties.push("\"servicer_address\" is required and cannot be null") if @servicer_address.nil?

      unless (_servicer_address = @servicer_address).nil?
      end
      invalid_properties
    end

    # Check to see if the all the properties in the model are valid
    # @return true if the model is valid
    def valid? : Bool
      return false if @_type.nil?
      unless (__type = @_type).nil?
      end

      return false if @purchase_apr.nil?
      unless (_purchase_apr = @purchase_apr).nil?
      end

      return false if @cash_apr.nil?
      unless (_cash_apr = @cash_apr).nil?
      end

      return false if @balance_transfer_apr.nil?
      unless (_balance_transfer_apr = @balance_transfer_apr).nil?
      end

      return false if @special_apr.nil?
      unless (_special_apr = @special_apr).nil?
      end

      return false if @last_payment_amount.nil?
      unless (_last_payment_amount = @last_payment_amount).nil?
      end

      return false if @minimum_payment_amount.nil?
      unless (_minimum_payment_amount = @minimum_payment_amount).nil?
      end

      return false if @is_overdue.nil?
      unless (_is_overdue = @is_overdue).nil?
      end

      return false if @origination_date.nil?
      unless (_origination_date = @origination_date).nil?
      end

      return false if @principal.nil?
      unless (_principal = @principal).nil?
      end

      return false if @nominal_apr.nil?
      unless (_nominal_apr = @nominal_apr).nil?
      end

      return false if @interest_capitalization_grace_period_months.nil?
      unless (_interest_capitalization_grace_period_months = @interest_capitalization_grace_period_months).nil?
      end

      return false if @repayment_model.nil?
      unless (_repayment_model = @repayment_model).nil?
      end

      return false if @expected_payoff_date.nil?
      unless (_expected_payoff_date = @expected_payoff_date).nil?
      end

      return false if @guarantor.nil?
      unless (_guarantor = @guarantor).nil?
      end

      return false if @is_federal.nil?
      unless (_is_federal = @is_federal).nil?
      end

      return false if @loan_name.nil?
      unless (_loan_name = @loan_name).nil?
      end

      return false if @loan_status.nil?
      unless (_loan_status = @loan_status).nil?
      end

      return false if @payment_reference_number.nil?
      unless (_payment_reference_number = @payment_reference_number).nil?
      end

      return false if @pslf_status.nil?
      unless (_pslf_status = @pslf_status).nil?
      end

      return false if @repayment_plan_description.nil?
      unless (_repayment_plan_description = @repayment_plan_description).nil?
      end

      return false if @repayment_plan_type.nil?
      unless (_repayment_plan_type = @repayment_plan_type).nil?
      end

      return false if @sequence_number.nil?
      unless (_sequence_number = @sequence_number).nil?
      end

      return false if @servicer_address.nil?
      unless (_servicer_address = @servicer_address).nil?
      end

      true
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] _type Object to be assigned
    def _type=(new_value : String?)
      raise ArgumentError.new("\"_type\" is required and cannot be null") if new_value.nil?
      unless new_value.nil?
      end

      @_type = new_value
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] purchase_apr Object to be assigned
    def purchase_apr=(new_value : Float64?)
      raise ArgumentError.new("\"purchase_apr\" is required and cannot be null") if new_value.nil?
      unless new_value.nil?
      end

      @purchase_apr = new_value
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] cash_apr Object to be assigned
    def cash_apr=(new_value : Float64?)
      raise ArgumentError.new("\"cash_apr\" is required and cannot be null") if new_value.nil?
      unless new_value.nil?
      end

      @cash_apr = new_value
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] balance_transfer_apr Object to be assigned
    def balance_transfer_apr=(new_value : Float64?)
      raise ArgumentError.new("\"balance_transfer_apr\" is required and cannot be null") if new_value.nil?
      unless new_value.nil?
      end

      @balance_transfer_apr = new_value
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] special_apr Object to be assigned
    def special_apr=(new_value : Float64?)
      raise ArgumentError.new("\"special_apr\" is required and cannot be null") if new_value.nil?
      unless new_value.nil?
      end

      @special_apr = new_value
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] last_payment_amount Object to be assigned
    def last_payment_amount=(new_value : Float64?)
      raise ArgumentError.new("\"last_payment_amount\" is required and cannot be null") if new_value.nil?
      unless new_value.nil?
      end

      @last_payment_amount = new_value
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] minimum_payment_amount Object to be assigned
    def minimum_payment_amount=(new_value : Float64?)
      raise ArgumentError.new("\"minimum_payment_amount\" is required and cannot be null") if new_value.nil?
      unless new_value.nil?
      end

      @minimum_payment_amount = new_value
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] is_overdue Object to be assigned
    def is_overdue=(new_value : Bool?)
      raise ArgumentError.new("\"is_overdue\" is required and cannot be null") if new_value.nil?
      unless new_value.nil?
      end

      @is_overdue = new_value
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] origination_date Object to be assigned
    def origination_date=(new_value : Time?)
      raise ArgumentError.new("\"origination_date\" is required and cannot be null") if new_value.nil?
      unless new_value.nil?
      end

      @origination_date = new_value
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] principal Object to be assigned
    def principal=(new_value : Float64?)
      raise ArgumentError.new("\"principal\" is required and cannot be null") if new_value.nil?
      unless new_value.nil?
      end

      @principal = new_value
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] nominal_apr Object to be assigned
    def nominal_apr=(new_value : Float64?)
      raise ArgumentError.new("\"nominal_apr\" is required and cannot be null") if new_value.nil?
      unless new_value.nil?
      end

      @nominal_apr = new_value
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] interest_capitalization_grace_period_months Object to be assigned
    def interest_capitalization_grace_period_months=(new_value : Float64?)
      raise ArgumentError.new("\"interest_capitalization_grace_period_months\" is required and cannot be null") if new_value.nil?
      unless new_value.nil?
      end

      @interest_capitalization_grace_period_months = new_value
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] repayment_model Object to be assigned
    def repayment_model=(new_value : StudentLoanRepaymentModel?)
      raise ArgumentError.new("\"repayment_model\" is required and cannot be null") if new_value.nil?
      unless new_value.nil?
      end

      @repayment_model = new_value
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] expected_payoff_date Object to be assigned
    def expected_payoff_date=(new_value : Time?)
      raise ArgumentError.new("\"expected_payoff_date\" is required and cannot be null") if new_value.nil?
      unless new_value.nil?
      end

      @expected_payoff_date = new_value
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] guarantor Object to be assigned
    def guarantor=(new_value : String?)
      raise ArgumentError.new("\"guarantor\" is required and cannot be null") if new_value.nil?
      unless new_value.nil?
      end

      @guarantor = new_value
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] is_federal Object to be assigned
    def is_federal=(new_value : Bool?)
      raise ArgumentError.new("\"is_federal\" is required and cannot be null") if new_value.nil?
      unless new_value.nil?
      end

      @is_federal = new_value
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] loan_name Object to be assigned
    def loan_name=(new_value : String?)
      raise ArgumentError.new("\"loan_name\" is required and cannot be null") if new_value.nil?
      unless new_value.nil?
      end

      @loan_name = new_value
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] loan_status Object to be assigned
    def loan_status=(new_value : StudentLoanStatus?)
      raise ArgumentError.new("\"loan_status\" is required and cannot be null") if new_value.nil?
      unless new_value.nil?
      end

      @loan_status = new_value
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] payment_reference_number Object to be assigned
    def payment_reference_number=(new_value : String?)
      raise ArgumentError.new("\"payment_reference_number\" is required and cannot be null") if new_value.nil?
      unless new_value.nil?
      end

      @payment_reference_number = new_value
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] pslf_status Object to be assigned
    def pslf_status=(new_value : PSLFStatus?)
      raise ArgumentError.new("\"pslf_status\" is required and cannot be null") if new_value.nil?
      unless new_value.nil?
      end

      @pslf_status = new_value
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] repayment_plan_description Object to be assigned
    def repayment_plan_description=(new_value : String?)
      raise ArgumentError.new("\"repayment_plan_description\" is required and cannot be null") if new_value.nil?
      unless new_value.nil?
      end

      @repayment_plan_description = new_value
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] repayment_plan_type Object to be assigned
    def repayment_plan_type=(new_value : String?)
      raise ArgumentError.new("\"repayment_plan_type\" is required and cannot be null") if new_value.nil?
      unless new_value.nil?
      end

      @repayment_plan_type = new_value
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] sequence_number Object to be assigned
    def sequence_number=(new_value : String?)
      raise ArgumentError.new("\"sequence_number\" is required and cannot be null") if new_value.nil?
      unless new_value.nil?
      end

      @sequence_number = new_value
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] servicer_address Object to be assigned
    def servicer_address=(new_value : Address?)
      raise ArgumentError.new("\"servicer_address\" is required and cannot be null") if new_value.nil?
      unless new_value.nil?
      end

      @servicer_address = new_value
    end

    # Generates #hash and #== methods from all fields
    # #== @return [Bool]
    # #hash calculates hash code according to all attributes.
    # #hash @return [UInt64] Hash code
    def_equals_and_hash(@_type, @purchase_apr, @cash_apr, @balance_transfer_apr, @special_apr, @last_payment_amount, @minimum_payment_amount, @is_overdue, @origination_date, @principal, @nominal_apr, @interest_capitalization_grace_period_months, @repayment_model, @expected_payoff_date, @guarantor, @is_federal, @loan_name, @loan_status, @payment_reference_number, @pslf_status, @repayment_plan_description, @repayment_plan_type, @sequence_number, @servicer_address)
  end
end
