#  The Plaid API
#
# The Plaid REST API. Please see https://plaid.com/docs/api for more details.
#
# The version of the OpenAPI document: 2020-09-14_1.474.3
#
# Generated by: https://openapi-generator.tech
#

require "../../core"

module Plaid
  # Transaction information specific to inter-bank transfers. If the transaction was not an inter-bank transfer, all fields will be `null`.  If the `transactions` object was returned by a Transactions endpoint such as `/transactions/sync` or `/transactions/get`, the `payment_meta` key will always appear, but no data elements are guaranteed. If the `transactions` object was returned by an Assets endpoint such as `/asset_report/get/` or `/asset_report/pdf/get`, this field will only appear in an Asset Report with Insights.
  class PaymentMeta
    include JSON::Serializable
    include JSON::Serializable::Unmapped
    include OpenApi::Validatable
    include OpenApi::Json

    # Required Properties

    # The transaction reference number supplied by the financial institution.
    @[JSON::Field(key: "reference_number", type: String?, default: nil, required: true, nullable: true, emit_null: true)]
    getter reference_number : String? = nil

    # The ACH PPD ID for the payer.
    @[JSON::Field(key: "ppd_id", type: String?, default: nil, required: true, nullable: true, emit_null: true)]
    getter ppd_id : String? = nil

    # For transfers, the party that is receiving the transaction.
    @[JSON::Field(key: "payee", type: String?, default: nil, required: true, nullable: true, emit_null: true)]
    getter payee : String? = nil

    # The party initiating a wire transfer. Will be `null` if the transaction is not a wire transfer.
    @[JSON::Field(key: "by_order_of", type: String?, default: nil, required: true, nullable: true, emit_null: true)]
    getter by_order_of : String? = nil

    # For transfers, the party that is paying the transaction.
    @[JSON::Field(key: "payer", type: String?, default: nil, required: true, nullable: true, emit_null: true)]
    getter payer : String? = nil

    # The type of transfer, e.g. 'ACH'
    @[JSON::Field(key: "payment_method", type: String?, default: nil, required: true, nullable: true, emit_null: true)]
    getter payment_method : String? = nil

    # The name of the payment processor
    @[JSON::Field(key: "payment_processor", type: String?, default: nil, required: true, nullable: true, emit_null: true)]
    getter payment_processor : String? = nil

    # The payer-supplied description of the transfer.
    @[JSON::Field(key: "reason", type: String?, default: nil, required: true, nullable: true, emit_null: true)]
    getter reason : String? = nil

    # End of Required Properties

    # Initializes the object
    # @param [Hash] attributes Model attributes in the form of hash
    def initialize(
      *,
      # Required properties
      @reference_number : String? = nil,
      @ppd_id : String? = nil,
      @payee : String? = nil,
      @by_order_of : String? = nil,
      @payer : String? = nil,
      @payment_method : String? = nil,
      @payment_processor : String? = nil,
      @reason : String? = nil
    )
    end

    # Show invalid properties with the reasons. Usually used together with valid?
    # @return Array for valid properties with the reasons
    def list_invalid_properties : Array(String)
      invalid_properties = Array(String).new

      unless (_reference_number = @reference_number).nil?
      end
      unless (_ppd_id = @ppd_id).nil?
      end
      unless (_payee = @payee).nil?
      end
      unless (_by_order_of = @by_order_of).nil?
      end
      unless (_payer = @payer).nil?
      end
      unless (_payment_method = @payment_method).nil?
      end
      unless (_payment_processor = @payment_processor).nil?
      end
      unless (_reason = @reason).nil?
      end
      invalid_properties
    end

    # Check to see if the all the properties in the model are valid
    # @return true if the model is valid
    def valid? : Bool
      unless (_reference_number = @reference_number).nil?
      end

      unless (_ppd_id = @ppd_id).nil?
      end

      unless (_payee = @payee).nil?
      end

      unless (_by_order_of = @by_order_of).nil?
      end

      unless (_payer = @payer).nil?
      end

      unless (_payment_method = @payment_method).nil?
      end

      unless (_payment_processor = @payment_processor).nil?
      end

      unless (_reason = @reason).nil?
      end

      true
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] reference_number Object to be assigned
    def reference_number=(new_value : String?)
      unless new_value.nil?
      end

      @reference_number = new_value
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] ppd_id Object to be assigned
    def ppd_id=(new_value : String?)
      unless new_value.nil?
      end

      @ppd_id = new_value
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] payee Object to be assigned
    def payee=(new_value : String?)
      unless new_value.nil?
      end

      @payee = new_value
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] by_order_of Object to be assigned
    def by_order_of=(new_value : String?)
      unless new_value.nil?
      end

      @by_order_of = new_value
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] payer Object to be assigned
    def payer=(new_value : String?)
      unless new_value.nil?
      end

      @payer = new_value
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] payment_method Object to be assigned
    def payment_method=(new_value : String?)
      unless new_value.nil?
      end

      @payment_method = new_value
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] payment_processor Object to be assigned
    def payment_processor=(new_value : String?)
      unless new_value.nil?
      end

      @payment_processor = new_value
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] reason Object to be assigned
    def reason=(new_value : String?)
      unless new_value.nil?
      end

      @reason = new_value
    end

    # Generates #hash and #== methods from all fields
    # #== @return [Bool]
    # #hash calculates hash code according to all attributes.
    # #hash @return [UInt64] Hash code
    def_equals_and_hash(@reference_number, @ppd_id, @payee, @by_order_of, @payer, @payment_method, @payment_processor, @reason)
  end
end
