#  The Plaid API
#
# The Plaid REST API. Please see https://plaid.com/docs/api for more details.
#
# The version of the OpenAPI document: 2020-09-14_1.474.3
#
# Generated by: https://openapi-generator.tech
#

require "../../core"

require "./category_insights"
require "./counterparty_insights"
require "./recurring_transactions"
require "./user_data_overview"

module Plaid
  # TransactionsUserInsightsGetResponse defines the response schema for `/beta/transactions/user_insights/v1/get`.
  class TransactionsUserInsightsGetResponse
    include JSON::Serializable
    include JSON::Serializable::Unmapped
    include OpenApi::Validatable
    include OpenApi::Json

    # Required Properties

    @[JSON::Field(key: "user_data_overview", type: UserDataOverview?, default: nil, required: true, nullable: false, emit_null: false)]
    getter user_data_overview : UserDataOverview? = nil

    # End of Required Properties

    # Optional Properties

    @[JSON::Field(key: "counterparty_insights", type: CounterpartyInsights?, default: nil, required: false, nullable: false, emit_null: false)]
    getter counterparty_insights : CounterpartyInsights? = nil

    @[JSON::Field(key: "category_insights", type: CategoryInsights?, default: nil, required: false, nullable: false, emit_null: false)]
    getter category_insights : CategoryInsights? = nil

    @[JSON::Field(key: "recurring_transactions", type: RecurringTransactions?, default: nil, required: false, nullable: false, emit_null: false)]
    getter recurring_transactions : RecurringTransactions? = nil

    # Initializes the object
    # @param [Hash] attributes Model attributes in the form of hash
    def initialize(
      *,
      # Required properties
      @user_data_overview : UserDataOverview? = nil,
      # Optional properties
      @counterparty_insights : CounterpartyInsights? = nil,
      @category_insights : CategoryInsights? = nil,
      @recurring_transactions : RecurringTransactions? = nil
    )
    end

    # Show invalid properties with the reasons. Usually used together with valid?
    # @return Array for valid properties with the reasons
    def list_invalid_properties : Array(String)
      invalid_properties = Array(String).new

      invalid_properties.push("\"user_data_overview\" is required and cannot be null") if @user_data_overview.nil?

      unless (_user_data_overview = @user_data_overview).nil?
      end
      unless (_counterparty_insights = @counterparty_insights).nil?
      end
      unless (_category_insights = @category_insights).nil?
      end
      unless (_recurring_transactions = @recurring_transactions).nil?
      end
      invalid_properties
    end

    # Check to see if the all the properties in the model are valid
    # @return true if the model is valid
    def valid? : Bool
      return false if @user_data_overview.nil?
      unless (_user_data_overview = @user_data_overview).nil?
      end

      unless (_counterparty_insights = @counterparty_insights).nil?
      end

      unless (_category_insights = @category_insights).nil?
      end

      unless (_recurring_transactions = @recurring_transactions).nil?
      end

      true
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] user_data_overview Object to be assigned
    def user_data_overview=(new_value : UserDataOverview?)
      raise ArgumentError.new("\"user_data_overview\" is required and cannot be null") if new_value.nil?
      unless new_value.nil?
      end

      @user_data_overview = new_value
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] counterparty_insights Object to be assigned
    def counterparty_insights=(new_value : CounterpartyInsights?)
      unless new_value.nil?
      end

      @counterparty_insights = new_value
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] category_insights Object to be assigned
    def category_insights=(new_value : CategoryInsights?)
      unless new_value.nil?
      end

      @category_insights = new_value
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] recurring_transactions Object to be assigned
    def recurring_transactions=(new_value : RecurringTransactions?)
      unless new_value.nil?
      end

      @recurring_transactions = new_value
    end

    # Generates #hash and #== methods from all fields
    # #== @return [Bool]
    # #hash calculates hash code according to all attributes.
    # #hash @return [UInt64] Hash code
    def_equals_and_hash(@user_data_overview, @counterparty_insights, @category_insights, @recurring_transactions)
  end
end
