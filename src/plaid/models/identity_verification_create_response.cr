#  The Plaid API
#
# The Plaid REST API. Please see https://plaid.com/docs/api for more details.
#
# The version of the OpenAPI document: 2020-09-14_1.474.3
#
# Generated by: https://openapi-generator.tech
#

require "../../core"

require "./documentary_verification"
require "./identity_verification_status"
require "./identity_verification_step_summary"
require "./identity_verification_template_reference"
require "./identity_verification_user_data"
require "./kyc_check_details"
require "./risk_check_details"
require "./selfie_check"

module Plaid
  # A identity verification attempt represents a customer's attempt to verify their identity, reflecting the required steps for completing the session, the results for each step, and information collected in the process.
  class IdentityVerificationCreateResponse
    include JSON::Serializable
    include JSON::Serializable::Unmapped
    include OpenApi::Validatable
    include OpenApi::Json

    # Required Properties

    # ID of the associated Identity Verification attempt.
    @[JSON::Field(key: "id", type: String?, default: nil, required: true, nullable: false, emit_null: false)]
    getter id : String? = nil

    # A unique ID that identifies the end user in your system. This ID can also be used to associate user-specific data from other Plaid products. Financial Account Matching requires this field and the `/link/token/create` `client_user_id` to be consistent. Personally identifiable information, such as an email address or phone number, should not be used in the `client_user_id`.
    @[JSON::Field(key: "client_user_id", type: String?, default: nil, required: true, nullable: false, emit_null: false)]
    getter client_user_id : String? = nil
    MIN_LENGTH_FOR_CLIENT_USER_ID = 1

    # An ISO8601 formatted timestamp.
    @[JSON::Field(key: "created_at", type: Time?, default: nil, required: true, nullable: false, emit_null: false, converter: Time::RFC3339Converter)]
    getter created_at : Time? = nil

    # An ISO8601 formatted timestamp.
    @[JSON::Field(key: "completed_at", type: Time?, default: nil, required: true, nullable: true, emit_null: true, converter: Time::RFC3339Converter)]
    getter completed_at : Time? = nil

    # The ID for the Identity Verification preceding this session. This field will only be filled if the current Identity Verification is a retry of a previous attempt.
    @[JSON::Field(key: "previous_attempt_id", type: String?, default: nil, required: true, nullable: true, emit_null: true)]
    getter previous_attempt_id : String? = nil

    # A shareable URL that can be sent directly to the user to complete verification
    @[JSON::Field(key: "shareable_url", type: String?, default: nil, required: true, nullable: true, emit_null: true)]
    getter shareable_url : String? = nil

    @[JSON::Field(key: "template", type: IdentityVerificationTemplateReference?, default: nil, required: true, nullable: false, emit_null: false)]
    getter template : IdentityVerificationTemplateReference? = nil

    @[JSON::Field(key: "user", type: IdentityVerificationUserData?, default: nil, required: true, nullable: false, emit_null: false)]
    getter user : IdentityVerificationUserData? = nil

    @[JSON::Field(key: "status", type: Plaid::IdentityVerificationStatus?, default: nil, required: true, nullable: false, emit_null: false)]
    getter status : Plaid::IdentityVerificationStatus? = nil

    @[JSON::Field(key: "steps", type: IdentityVerificationStepSummary?, default: nil, required: true, nullable: false, emit_null: false)]
    getter steps : IdentityVerificationStepSummary? = nil

    @[JSON::Field(key: "documentary_verification", type: DocumentaryVerification?, default: nil, required: true, nullable: true, emit_null: true)]
    getter documentary_verification : DocumentaryVerification? = nil

    @[JSON::Field(key: "selfie_check", type: SelfieCheck?, default: nil, required: true, nullable: true, emit_null: true)]
    getter selfie_check : SelfieCheck? = nil

    @[JSON::Field(key: "kyc_check", type: KYCCheckDetails?, default: nil, required: true, nullable: true, emit_null: true)]
    getter kyc_check : KYCCheckDetails? = nil

    @[JSON::Field(key: "risk_check", type: RiskCheckDetails?, default: nil, required: true, nullable: true, emit_null: true)]
    getter risk_check : RiskCheckDetails? = nil

    # ID of the associated screening.
    @[JSON::Field(key: "watchlist_screening_id", type: String?, default: nil, required: true, nullable: true, emit_null: true)]
    getter watchlist_screening_id : String? = nil

    # An ISO8601 formatted timestamp.
    @[JSON::Field(key: "redacted_at", type: Time?, default: nil, required: true, nullable: true, emit_null: true, converter: Time::RFC3339Converter)]
    getter redacted_at : Time? = nil

    # A unique identifier for the request, which can be used for troubleshooting. This identifier, like all Plaid identifiers, is case sensitive.
    @[JSON::Field(key: "request_id", type: String?, default: nil, required: true, nullable: false, emit_null: false)]
    getter request_id : String? = nil

    # End of Required Properties

    # Initializes the object
    # @param [Hash] attributes Model attributes in the form of hash
    def initialize(
      *,
      # Required properties
      @id : String? = nil,
      @client_user_id : String? = nil,
      @created_at : Time? = nil,
      @completed_at : Time? = nil,
      @previous_attempt_id : String? = nil,
      @shareable_url : String? = nil,
      @template : IdentityVerificationTemplateReference? = nil,
      @user : IdentityVerificationUserData? = nil,
      @status : Plaid::IdentityVerificationStatus? = nil,
      @steps : IdentityVerificationStepSummary? = nil,
      @documentary_verification : DocumentaryVerification? = nil,
      @selfie_check : SelfieCheck? = nil,
      @kyc_check : KYCCheckDetails? = nil,
      @risk_check : RiskCheckDetails? = nil,
      @watchlist_screening_id : String? = nil,
      @redacted_at : Time? = nil,
      @request_id : String? = nil
    )
    end

    # Show invalid properties with the reasons. Usually used together with valid?
    # @return Array for valid properties with the reasons
    def list_invalid_properties : Array(String)
      invalid_properties = Array(String).new

      invalid_properties.push("\"id\" is required and cannot be null") if @id.nil?

      unless (_id = @id).nil?
      end
      invalid_properties.push("\"client_user_id\" is required and cannot be null") if @client_user_id.nil?

      unless (_client_user_id = @client_user_id).nil?
        if min_length_error = OpenApi::PrimitiveValidator.min_length_error("client_user_id", _client_user_id.to_s.size, MIN_LENGTH_FOR_CLIENT_USER_ID)
          invalid_properties.push(min_length_error)
        end
      end
      invalid_properties.push("\"created_at\" is required and cannot be null") if @created_at.nil?

      unless (_created_at = @created_at).nil?
      end
      unless (_completed_at = @completed_at).nil?
      end
      unless (_previous_attempt_id = @previous_attempt_id).nil?
      end
      unless (_shareable_url = @shareable_url).nil?
      end
      invalid_properties.push("\"template\" is required and cannot be null") if @template.nil?

      unless (_template = @template).nil?
      end
      invalid_properties.push("\"user\" is required and cannot be null") if @user.nil?

      unless (_user = @user).nil?
      end
      invalid_properties.push("\"status\" is required and cannot be null") if @status.nil?

      unless (_status = @status).nil?
        invalid_properties.push(_status.error_message) if !_status.valid?
      end
      invalid_properties.push("\"steps\" is required and cannot be null") if @steps.nil?

      unless (_steps = @steps).nil?
      end
      unless (_documentary_verification = @documentary_verification).nil?
      end
      unless (_selfie_check = @selfie_check).nil?
      end
      unless (_kyc_check = @kyc_check).nil?
      end
      unless (_risk_check = @risk_check).nil?
      end
      unless (_watchlist_screening_id = @watchlist_screening_id).nil?
      end
      unless (_redacted_at = @redacted_at).nil?
      end
      invalid_properties.push("\"request_id\" is required and cannot be null") if @request_id.nil?

      unless (_request_id = @request_id).nil?
      end
      invalid_properties
    end

    # Check to see if the all the properties in the model are valid
    # @return true if the model is valid
    def valid? : Bool
      return false if @id.nil?
      unless (_id = @id).nil?
      end

      return false if @client_user_id.nil?
      unless (_client_user_id = @client_user_id).nil?
        return false if _client_user_id.to_s.size < MIN_LENGTH_FOR_CLIENT_USER_ID
      end

      return false if @created_at.nil?
      unless (_created_at = @created_at).nil?
      end

      unless (_completed_at = @completed_at).nil?
      end

      unless (_previous_attempt_id = @previous_attempt_id).nil?
      end

      unless (_shareable_url = @shareable_url).nil?
      end

      return false if @template.nil?
      unless (_template = @template).nil?
      end

      return false if @user.nil?
      unless (_user = @user).nil?
      end

      return false if @status.nil?
      unless (_status = @status).nil?
        return false if !_status.valid?
      end

      return false if @steps.nil?
      unless (_steps = @steps).nil?
      end

      unless (_documentary_verification = @documentary_verification).nil?
      end

      unless (_selfie_check = @selfie_check).nil?
      end

      unless (_kyc_check = @kyc_check).nil?
      end

      unless (_risk_check = @risk_check).nil?
      end

      unless (_watchlist_screening_id = @watchlist_screening_id).nil?
      end

      unless (_redacted_at = @redacted_at).nil?
      end

      return false if @request_id.nil?
      unless (_request_id = @request_id).nil?
      end

      true
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] id Object to be assigned
    def id=(new_value : String?)
      raise ArgumentError.new("\"id\" is required and cannot be null") if new_value.nil?
      unless new_value.nil?
      end

      @id = new_value
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] client_user_id Object to be assigned
    def client_user_id=(new_value : String?)
      raise ArgumentError.new("\"client_user_id\" is required and cannot be null") if new_value.nil?
      unless new_value.nil?
        OpenApi::PrimitiveValidator.validate_min_length("client_user_id", new_value.to_s.size, MIN_LENGTH_FOR_CLIENT_USER_ID)
      end

      @client_user_id = new_value
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] created_at Object to be assigned
    def created_at=(new_value : Time?)
      raise ArgumentError.new("\"created_at\" is required and cannot be null") if new_value.nil?
      unless new_value.nil?
      end

      @created_at = new_value
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] completed_at Object to be assigned
    def completed_at=(new_value : Time?)
      unless new_value.nil?
      end

      @completed_at = new_value
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] previous_attempt_id Object to be assigned
    def previous_attempt_id=(new_value : String?)
      unless new_value.nil?
      end

      @previous_attempt_id = new_value
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] shareable_url Object to be assigned
    def shareable_url=(new_value : String?)
      unless new_value.nil?
      end

      @shareable_url = new_value
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] template Object to be assigned
    def template=(new_value : IdentityVerificationTemplateReference?)
      raise ArgumentError.new("\"template\" is required and cannot be null") if new_value.nil?
      unless new_value.nil?
      end

      @template = new_value
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] user Object to be assigned
    def user=(new_value : IdentityVerificationUserData?)
      raise ArgumentError.new("\"user\" is required and cannot be null") if new_value.nil?
      unless new_value.nil?
      end

      @user = new_value
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] status Object to be assigned
    def status=(new_value : Plaid::IdentityVerificationStatus?)
      raise ArgumentError.new("\"status\" is required and cannot be null") if new_value.nil?
      unless new_value.nil?
        new_value.validate
      end

      @status = new_value
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] steps Object to be assigned
    def steps=(new_value : IdentityVerificationStepSummary?)
      raise ArgumentError.new("\"steps\" is required and cannot be null") if new_value.nil?
      unless new_value.nil?
      end

      @steps = new_value
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] documentary_verification Object to be assigned
    def documentary_verification=(new_value : DocumentaryVerification?)
      unless new_value.nil?
      end

      @documentary_verification = new_value
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] selfie_check Object to be assigned
    def selfie_check=(new_value : SelfieCheck?)
      unless new_value.nil?
      end

      @selfie_check = new_value
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] kyc_check Object to be assigned
    def kyc_check=(new_value : KYCCheckDetails?)
      unless new_value.nil?
      end

      @kyc_check = new_value
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] risk_check Object to be assigned
    def risk_check=(new_value : RiskCheckDetails?)
      unless new_value.nil?
      end

      @risk_check = new_value
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] watchlist_screening_id Object to be assigned
    def watchlist_screening_id=(new_value : String?)
      unless new_value.nil?
      end

      @watchlist_screening_id = new_value
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] redacted_at Object to be assigned
    def redacted_at=(new_value : Time?)
      unless new_value.nil?
      end

      @redacted_at = new_value
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] request_id Object to be assigned
    def request_id=(new_value : String?)
      raise ArgumentError.new("\"request_id\" is required and cannot be null") if new_value.nil?
      unless new_value.nil?
      end

      @request_id = new_value
    end

    # Generates #hash and #== methods from all fields
    # #== @return [Bool]
    # #hash calculates hash code according to all attributes.
    # #hash @return [UInt64] Hash code
    def_equals_and_hash(@id, @client_user_id, @created_at, @completed_at, @previous_attempt_id, @shareable_url, @template, @user, @status, @steps, @documentary_verification, @selfie_check, @kyc_check, @risk_check, @watchlist_screening_id, @redacted_at, @request_id)
  end
end
