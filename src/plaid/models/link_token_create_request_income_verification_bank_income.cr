#  The Plaid API
#
# The Plaid REST API. Please see https://plaid.com/docs/api for more details.
#
# The version of the OpenAPI document: 2020-09-14_1.474.3
#
# Generated by: https://openapi-generator.tech
#

require "../../core"

module Plaid
  # Specifies options for initializing Link for use with Bank Income. This field is required if `income_verification` is included in the `products` array and `bank` is specified in `income_source_types`.
  class LinkTokenCreateRequestIncomeVerificationBankIncome
    include JSON::Serializable
    include JSON::Serializable::Unmapped
    include OpenApi::Validatable
    include OpenApi::Json

    # Required Properties

    # The number of days of data to request for the Bank Income product
    @[JSON::Field(key: "days_requested", type: Int32?, default: nil, required: true, nullable: false, emit_null: false)]
    getter days_requested : Int32? = nil
    MAX_FOR_DAYS_REQUESTED = Int32.new("731")
    MIN_FOR_DAYS_REQUESTED = Int32.new("1")

    # End of Required Properties

    # Optional Properties

    # Whether to enable multiple Items to be added in the Link session
    @[JSON::Field(key: "enable_multiple_items", type: Bool?, default: false, required: false, nullable: true, emit_null: true, presence: true, ignore_serialize: enable_multiple_items.nil? && !enable_multiple_items_present?)]
    getter enable_multiple_items : Bool? = false

    @[JSON::Field(ignore: true)]
    property? enable_multiple_items_present : Bool = false

    # Initializes the object
    # @param [Hash] attributes Model attributes in the form of hash
    def initialize(
      *,
      # Required properties
      @days_requested : Int32? = nil,
      # Optional properties
      @enable_multiple_items : Bool? = false
    )
    end

    # Show invalid properties with the reasons. Usually used together with valid?
    # @return Array for valid properties with the reasons
    def list_invalid_properties : Array(String)
      invalid_properties = Array(String).new

      invalid_properties.push("\"days_requested\" is required and cannot be null") if @days_requested.nil?

      unless (_days_requested = @days_requested).nil?
        if max_number_error = OpenApi::PrimitiveValidator.max_number_error("days_requested", _days_requested, MAX_FOR_DAYS_REQUESTED)
          invalid_properties.push(max_number_error)
        end

        if min_number_error = OpenApi::PrimitiveValidator.min_number_error("days_requested", _days_requested, MIN_FOR_DAYS_REQUESTED)
          invalid_properties.push(min_number_error)
        end
      end
      unless (_enable_multiple_items = @enable_multiple_items).nil?
      end
      invalid_properties
    end

    # Check to see if the all the properties in the model are valid
    # @return true if the model is valid
    def valid? : Bool
      return false if @days_requested.nil?
      unless (_days_requested = @days_requested).nil?
        return false if _days_requested > MAX_FOR_DAYS_REQUESTED
        return false if _days_requested < MIN_FOR_DAYS_REQUESTED
      end

      unless (_enable_multiple_items = @enable_multiple_items).nil?
      end

      true
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] days_requested Object to be assigned
    def days_requested=(new_value : Int32?)
      raise ArgumentError.new("\"days_requested\" is required and cannot be null") if new_value.nil?
      unless new_value.nil?
        OpenApi::PrimitiveValidator.validate_max_number("days_requested", new_value, MAX_FOR_DAYS_REQUESTED)
        OpenApi::PrimitiveValidator.validate_min_number("days_requested", new_value, MIN_FOR_DAYS_REQUESTED)
      end

      @days_requested = new_value
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] enable_multiple_items Object to be assigned
    def enable_multiple_items=(new_value : Bool?)
      unless new_value.nil?
      end

      @enable_multiple_items = new_value
    end

    # Generates #hash and #== methods from all fields
    # #== @return [Bool]
    # #hash calculates hash code according to all attributes.
    # #hash @return [UInt64] Hash code
    def_equals_and_hash(@days_requested, @enable_multiple_items, @enable_multiple_items_present)
  end
end
