#  The Plaid API
#
# The Plaid REST API. Please see https://plaid.com/docs/api for more details.
#
# The version of the OpenAPI document: 2020-09-14_1.474.3
#
# Generated by: https://openapi-generator.tech
#

require "../../core"

require "./investment_transaction_subtype"
require "./investment_transaction_type"

module Plaid
  # A transaction within an investment account.
  class AssetReportInvestments
    include JSON::Serializable
    include JSON::Serializable::Unmapped
    include OpenApi::Validatable
    include OpenApi::Json

    # Required Properties

    # The ID of the Investment transaction, unique across all Plaid transactions. Like all Plaid identifiers, the `investment_transaction_id` is case sensitive.
    @[JSON::Field(key: "investment_transaction_id", type: String?, default: nil, required: true, nullable: false, emit_null: false)]
    getter investment_transaction_id : String? = nil

    # The `account_id` of the account against which this transaction posted.
    @[JSON::Field(key: "account_id", type: String?, default: nil, required: true, nullable: false, emit_null: false)]
    getter account_id : String? = nil

    # The `security_id` to which this transaction is related.
    @[JSON::Field(key: "security_id", type: String?, default: nil, required: true, nullable: true, emit_null: true)]
    getter security_id : String? = nil

    # The [ISO 8601](https://wikipedia.org/wiki/ISO_8601) posting date for the transaction.
    @[JSON::Field(key: "date", type: Time?, default: nil, required: true, nullable: false, emit_null: false, converter: Time::ISO8601DateConverter)]
    getter date : Time? = nil

    # The institutionâ€™s description of the transaction.
    @[JSON::Field(key: "name", type: String?, default: nil, required: true, nullable: false, emit_null: false)]
    getter name : String? = nil

    # The number of units of the security involved in this transaction. Positive for buy transactions; negative for sell transactions.
    @[JSON::Field(key: "quantity", type: Float64?, default: nil, required: true, nullable: false, emit_null: false)]
    getter quantity : Float64? = nil

    # The complete value of the transaction. Positive values when cash is debited, e.g. purchases of stock; negative values when cash is credited, e.g. sales of stock. Treatment remains the same for cash-only movements unassociated with securities.
    @[JSON::Field(key: "amount", type: Float64?, default: nil, required: true, nullable: false, emit_null: false)]
    getter amount : Float64? = nil

    # The price of the security at which this transaction occurred.
    @[JSON::Field(key: "price", type: Float64?, default: nil, required: true, nullable: false, emit_null: false)]
    getter price : Float64? = nil

    # The combined value of all fees applied to this transaction
    @[JSON::Field(key: "fees", type: Float64?, default: nil, required: true, nullable: true, emit_null: true)]
    getter fees : Float64? = nil

    @[JSON::Field(key: "type", type: Plaid::InvestmentTransactionType?, default: nil, required: true, nullable: false, emit_null: false)]
    getter _type : Plaid::InvestmentTransactionType? = nil

    @[JSON::Field(key: "subtype", type: Plaid::InvestmentTransactionSubtype?, default: nil, required: true, nullable: false, emit_null: false)]
    getter subtype : Plaid::InvestmentTransactionSubtype? = nil

    # The ISO-4217 currency code of the transaction. Always `null` if `unofficial_currency_code` is non-`null`.
    @[JSON::Field(key: "iso_currency_code", type: String?, default: nil, required: true, nullable: true, emit_null: true)]
    getter iso_currency_code : String? = nil

    # The unofficial currency code associated with the holding. Always `null` if `iso_currency_code` is non-`null`. Unofficial currency codes are used for currencies that do not have official ISO currency codes, such as cryptocurrencies and the currencies of certain countries.  See the [currency code schema](https://plaid.com/docs/api/accounts#currency-code-schema) for a full listing of supported `iso_currency_code`s.
    @[JSON::Field(key: "unofficial_currency_code", type: String?, default: nil, required: true, nullable: true, emit_null: true)]
    getter unofficial_currency_code : String? = nil

    # End of Required Properties

    # Initializes the object
    # @param [Hash] attributes Model attributes in the form of hash
    def initialize(
      *,
      # Required properties
      @investment_transaction_id : String? = nil,
      @account_id : String? = nil,
      @security_id : String? = nil,
      @date : Time? = nil,
      @name : String? = nil,
      @quantity : Float64? = nil,
      @amount : Float64? = nil,
      @price : Float64? = nil,
      @fees : Float64? = nil,
      @_type : Plaid::InvestmentTransactionType? = nil,
      @subtype : Plaid::InvestmentTransactionSubtype? = nil,
      @iso_currency_code : String? = nil,
      @unofficial_currency_code : String? = nil
    )
    end

    # Show invalid properties with the reasons. Usually used together with valid?
    # @return Array for valid properties with the reasons
    def list_invalid_properties : Array(String)
      invalid_properties = Array(String).new

      invalid_properties.push("\"investment_transaction_id\" is required and cannot be null") if @investment_transaction_id.nil?

      unless (_investment_transaction_id = @investment_transaction_id).nil?
      end
      invalid_properties.push("\"account_id\" is required and cannot be null") if @account_id.nil?

      unless (_account_id = @account_id).nil?
      end
      unless (_security_id = @security_id).nil?
      end
      invalid_properties.push("\"date\" is required and cannot be null") if @date.nil?

      unless (_date = @date).nil?
      end
      invalid_properties.push("\"name\" is required and cannot be null") if @name.nil?

      unless (_name = @name).nil?
      end
      invalid_properties.push("\"quantity\" is required and cannot be null") if @quantity.nil?

      unless (_quantity = @quantity).nil?
      end
      invalid_properties.push("\"amount\" is required and cannot be null") if @amount.nil?

      unless (_amount = @amount).nil?
      end
      invalid_properties.push("\"price\" is required and cannot be null") if @price.nil?

      unless (_price = @price).nil?
      end
      unless (_fees = @fees).nil?
      end
      invalid_properties.push("\"_type\" is required and cannot be null") if @_type.nil?

      unless (__type = @_type).nil?
        invalid_properties.push(__type.error_message) if !__type.valid?
      end
      invalid_properties.push("\"subtype\" is required and cannot be null") if @subtype.nil?

      unless (_subtype = @subtype).nil?
        invalid_properties.push(_subtype.error_message) if !_subtype.valid?
      end
      unless (_iso_currency_code = @iso_currency_code).nil?
      end
      unless (_unofficial_currency_code = @unofficial_currency_code).nil?
      end
      invalid_properties
    end

    # Check to see if the all the properties in the model are valid
    # @return true if the model is valid
    def valid? : Bool
      return false if @investment_transaction_id.nil?
      unless (_investment_transaction_id = @investment_transaction_id).nil?
      end

      return false if @account_id.nil?
      unless (_account_id = @account_id).nil?
      end

      unless (_security_id = @security_id).nil?
      end

      return false if @date.nil?
      unless (_date = @date).nil?
      end

      return false if @name.nil?
      unless (_name = @name).nil?
      end

      return false if @quantity.nil?
      unless (_quantity = @quantity).nil?
      end

      return false if @amount.nil?
      unless (_amount = @amount).nil?
      end

      return false if @price.nil?
      unless (_price = @price).nil?
      end

      unless (_fees = @fees).nil?
      end

      return false if @_type.nil?
      unless (__type = @_type).nil?
        return false if !__type.valid?
      end

      return false if @subtype.nil?
      unless (_subtype = @subtype).nil?
        return false if !_subtype.valid?
      end

      unless (_iso_currency_code = @iso_currency_code).nil?
      end

      unless (_unofficial_currency_code = @unofficial_currency_code).nil?
      end

      true
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] investment_transaction_id Object to be assigned
    def investment_transaction_id=(new_value : String?)
      raise ArgumentError.new("\"investment_transaction_id\" is required and cannot be null") if new_value.nil?
      unless new_value.nil?
      end

      @investment_transaction_id = new_value
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] account_id Object to be assigned
    def account_id=(new_value : String?)
      raise ArgumentError.new("\"account_id\" is required and cannot be null") if new_value.nil?
      unless new_value.nil?
      end

      @account_id = new_value
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] security_id Object to be assigned
    def security_id=(new_value : String?)
      unless new_value.nil?
      end

      @security_id = new_value
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] date Object to be assigned
    def date=(new_value : Time?)
      raise ArgumentError.new("\"date\" is required and cannot be null") if new_value.nil?
      unless new_value.nil?
      end

      @date = new_value
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] name Object to be assigned
    def name=(new_value : String?)
      raise ArgumentError.new("\"name\" is required and cannot be null") if new_value.nil?
      unless new_value.nil?
      end

      @name = new_value
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] quantity Object to be assigned
    def quantity=(new_value : Float64?)
      raise ArgumentError.new("\"quantity\" is required and cannot be null") if new_value.nil?
      unless new_value.nil?
      end

      @quantity = new_value
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] amount Object to be assigned
    def amount=(new_value : Float64?)
      raise ArgumentError.new("\"amount\" is required and cannot be null") if new_value.nil?
      unless new_value.nil?
      end

      @amount = new_value
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] price Object to be assigned
    def price=(new_value : Float64?)
      raise ArgumentError.new("\"price\" is required and cannot be null") if new_value.nil?
      unless new_value.nil?
      end

      @price = new_value
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] fees Object to be assigned
    def fees=(new_value : Float64?)
      unless new_value.nil?
      end

      @fees = new_value
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] _type Object to be assigned
    def _type=(new_value : Plaid::InvestmentTransactionType?)
      raise ArgumentError.new("\"_type\" is required and cannot be null") if new_value.nil?
      unless new_value.nil?
        new_value.validate
      end

      @_type = new_value
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] subtype Object to be assigned
    def subtype=(new_value : Plaid::InvestmentTransactionSubtype?)
      raise ArgumentError.new("\"subtype\" is required and cannot be null") if new_value.nil?
      unless new_value.nil?
        new_value.validate
      end

      @subtype = new_value
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] iso_currency_code Object to be assigned
    def iso_currency_code=(new_value : String?)
      unless new_value.nil?
      end

      @iso_currency_code = new_value
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] unofficial_currency_code Object to be assigned
    def unofficial_currency_code=(new_value : String?)
      unless new_value.nil?
      end

      @unofficial_currency_code = new_value
    end

    # Generates #hash and #== methods from all fields
    # #== @return [Bool]
    # #hash calculates hash code according to all attributes.
    # #hash @return [UInt64] Hash code
    def_equals_and_hash(@investment_transaction_id, @account_id, @security_id, @date, @name, @quantity, @amount, @price, @fees, @_type, @subtype, @iso_currency_code, @unofficial_currency_code)
  end
end
