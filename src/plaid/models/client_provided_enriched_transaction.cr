#  The Plaid API
#
# The Plaid REST API. Please see https://plaid.com/docs/api for more details.
#
# The version of the OpenAPI document: 2020-09-14_1.474.3
#
# Generated by: https://openapi-generator.tech
#

require "../../core"

require "./enrich_transaction_direction"
require "./enrichments"

module Plaid
  # A client-provided transaction that Plaid has enriched.
  class ClientProvidedEnrichedTransaction
    include JSON::Serializable
    include JSON::Serializable::Unmapped
    include OpenApi::Validatable
    include OpenApi::Json

    # Required Properties

    # The unique ID for the transaction as provided by you in the request.
    @[JSON::Field(key: "id", type: String?, default: nil, required: true, nullable: false, emit_null: false)]
    getter id : String? = nil

    # The raw description of the transaction.
    @[JSON::Field(key: "description", type: String?, default: nil, required: true, nullable: false, emit_null: false)]
    getter description : String? = nil

    # The absolute value of the transaction (>= 0)
    @[JSON::Field(key: "amount", type: Float64?, default: nil, required: true, nullable: false, emit_null: false)]
    getter amount : Float64? = nil

    # The ISO-4217 currency code of the transaction e.g. USD.
    @[JSON::Field(key: "iso_currency_code", type: String?, default: nil, required: true, nullable: false, emit_null: false)]
    getter iso_currency_code : String? = nil

    @[JSON::Field(key: "enrichments", type: Enrichments?, default: nil, required: true, nullable: false, emit_null: false)]
    getter enrichments : Enrichments? = nil

    # End of Required Properties

    # Optional Properties

    # A unique user id used to group transactions for a given user, as a unique identifier from your application. Personally identifiable information, such as an email address or phone number, should not be used in the client_user_id.
    @[JSON::Field(key: "client_user_id", type: String?, default: nil, required: false, nullable: false, emit_null: false)]
    getter client_user_id : String? = nil

    # A unique account id used to group transactions for a given account, as a unique identifier from your application. Personally identifiable information, such as an email address or phone number, should not be used in the client_account_id.
    @[JSON::Field(key: "client_account_id", type: String?, default: nil, required: false, nullable: false, emit_null: false)]
    getter client_account_id : String? = nil

    # The account type associated with the transaction. For a full list of valid types and subtypes, see the [Account schema](https://plaid.com/docs/api/accounts#account-type-schema).
    @[JSON::Field(key: "account_type", type: String?, default: nil, required: false, nullable: false, emit_null: false)]
    getter account_type : String? = nil

    # The account subtype associated with the transaction. For a full list of valid types and subtypes, see the [Account schema](https://plaid.com/docs/api/accounts#account-type-schema).
    @[JSON::Field(key: "account_subtype", type: String?, default: nil, required: false, nullable: false, emit_null: false)]
    getter account_subtype : String? = nil

    @[JSON::Field(key: "direction", type: Plaid::EnrichTransactionDirection?, default: nil, required: false, nullable: false, emit_null: false)]
    getter direction : Plaid::EnrichTransactionDirection? = nil

    # Initializes the object
    # @param [Hash] attributes Model attributes in the form of hash
    def initialize(
      *,
      # Required properties
      @id : String? = nil,
      @description : String? = nil,
      @amount : Float64? = nil,
      @iso_currency_code : String? = nil,
      @enrichments : Enrichments? = nil,
      # Optional properties
      @client_user_id : String? = nil,
      @client_account_id : String? = nil,
      @account_type : String? = nil,
      @account_subtype : String? = nil,
      @direction : Plaid::EnrichTransactionDirection? = nil
    )
    end

    # Show invalid properties with the reasons. Usually used together with valid?
    # @return Array for valid properties with the reasons
    def list_invalid_properties : Array(String)
      invalid_properties = Array(String).new

      invalid_properties.push("\"id\" is required and cannot be null") if @id.nil?

      unless (_id = @id).nil?
      end
      invalid_properties.push("\"description\" is required and cannot be null") if @description.nil?

      unless (_description = @description).nil?
      end
      invalid_properties.push("\"amount\" is required and cannot be null") if @amount.nil?

      unless (_amount = @amount).nil?
      end
      invalid_properties.push("\"iso_currency_code\" is required and cannot be null") if @iso_currency_code.nil?

      unless (_iso_currency_code = @iso_currency_code).nil?
      end
      invalid_properties.push("\"enrichments\" is required and cannot be null") if @enrichments.nil?

      unless (_enrichments = @enrichments).nil?
      end
      unless (_client_user_id = @client_user_id).nil?
      end
      unless (_client_account_id = @client_account_id).nil?
      end
      unless (_account_type = @account_type).nil?
      end
      unless (_account_subtype = @account_subtype).nil?
      end
      unless (_direction = @direction).nil?
        invalid_properties.push(_direction.error_message) if !_direction.valid?
      end
      invalid_properties
    end

    # Check to see if the all the properties in the model are valid
    # @return true if the model is valid
    def valid? : Bool
      return false if @id.nil?
      unless (_id = @id).nil?
      end

      return false if @description.nil?
      unless (_description = @description).nil?
      end

      return false if @amount.nil?
      unless (_amount = @amount).nil?
      end

      return false if @iso_currency_code.nil?
      unless (_iso_currency_code = @iso_currency_code).nil?
      end

      return false if @enrichments.nil?
      unless (_enrichments = @enrichments).nil?
      end

      unless (_client_user_id = @client_user_id).nil?
      end

      unless (_client_account_id = @client_account_id).nil?
      end

      unless (_account_type = @account_type).nil?
      end

      unless (_account_subtype = @account_subtype).nil?
      end

      unless (_direction = @direction).nil?
        return false if !_direction.valid?
      end

      true
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] id Object to be assigned
    def id=(new_value : String?)
      raise ArgumentError.new("\"id\" is required and cannot be null") if new_value.nil?
      unless new_value.nil?
      end

      @id = new_value
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] description Object to be assigned
    def description=(new_value : String?)
      raise ArgumentError.new("\"description\" is required and cannot be null") if new_value.nil?
      unless new_value.nil?
      end

      @description = new_value
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] amount Object to be assigned
    def amount=(new_value : Float64?)
      raise ArgumentError.new("\"amount\" is required and cannot be null") if new_value.nil?
      unless new_value.nil?
      end

      @amount = new_value
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] iso_currency_code Object to be assigned
    def iso_currency_code=(new_value : String?)
      raise ArgumentError.new("\"iso_currency_code\" is required and cannot be null") if new_value.nil?
      unless new_value.nil?
      end

      @iso_currency_code = new_value
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] enrichments Object to be assigned
    def enrichments=(new_value : Enrichments?)
      raise ArgumentError.new("\"enrichments\" is required and cannot be null") if new_value.nil?
      unless new_value.nil?
      end

      @enrichments = new_value
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] client_user_id Object to be assigned
    def client_user_id=(new_value : String?)
      unless new_value.nil?
      end

      @client_user_id = new_value
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] client_account_id Object to be assigned
    def client_account_id=(new_value : String?)
      unless new_value.nil?
      end

      @client_account_id = new_value
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] account_type Object to be assigned
    def account_type=(new_value : String?)
      unless new_value.nil?
      end

      @account_type = new_value
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] account_subtype Object to be assigned
    def account_subtype=(new_value : String?)
      unless new_value.nil?
      end

      @account_subtype = new_value
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] direction Object to be assigned
    def direction=(new_value : Plaid::EnrichTransactionDirection?)
      unless new_value.nil?
        new_value.validate
      end

      @direction = new_value
    end

    # Generates #hash and #== methods from all fields
    # #== @return [Bool]
    # #hash calculates hash code according to all attributes.
    # #hash @return [UInt64] Hash code
    def_equals_and_hash(@id, @description, @amount, @iso_currency_code, @enrichments, @client_user_id, @client_account_id, @account_type, @account_subtype, @direction)
  end
end
