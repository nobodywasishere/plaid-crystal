#  The Plaid API
#
# The Plaid REST API. Please see https://plaid.com/docs/api for more details.
#
# The version of the OpenAPI document: 2020-09-14_1.474.3
#
# Generated by: https://openapi-generator.tech
#

require "../../core"

require "./cra_bank_income_transaction"
require "./credit_amount_with_currency"

module Plaid
  # The end user's monthly summary for the income source(s).
  class CraBankIncomeHistoricalSummary
    include JSON::Serializable
    include JSON::Serializable::Unmapped
    include OpenApi::Validatable
    include OpenApi::Json

    # Optional Properties

    # Total amount of earnings for the income source(s) of the user for the month in the summary. This can contain multiple amounts, with each amount denominated in one unique currency.
    @[JSON::Field(key: "total_amounts", type: Array(CreditAmountWithCurrency)?, default: nil, required: false, nullable: false, emit_null: false)]
    getter total_amounts : Array(CreditAmountWithCurrency)? = nil

    # The start date of the period covered in this monthly summary. This date will be the first day of the month, unless the month being covered is a partial month because it is the first month included in the summary and the date range being requested does not begin with the first day of the month. The date will be returned in an ISO 8601 format (YYYY-MM-DD).
    @[JSON::Field(key: "start_date", type: Time?, default: nil, required: false, nullable: false, emit_null: false, converter: Time::ISO8601DateConverter)]
    getter start_date : Time? = nil

    # The end date of the period included in this monthly summary. This date will be the last day of the month, unless the month being covered is a partial month because it is the last month included in the summary and the date range being requested does not end with the last day of the month. The date will be returned in an ISO 8601 format (YYYY-MM-DD).
    @[JSON::Field(key: "end_date", type: Time?, default: nil, required: false, nullable: false, emit_null: false, converter: Time::ISO8601DateConverter)]
    getter end_date : Time? = nil

    @[JSON::Field(key: "transactions", type: Array(CraBankIncomeTransaction)?, default: nil, required: false, nullable: false, emit_null: false)]
    getter transactions : Array(CraBankIncomeTransaction)? = nil

    # Initializes the object
    # @param [Hash] attributes Model attributes in the form of hash
    def initialize(
      *,
      # Optional properties
      @total_amounts : Array(CreditAmountWithCurrency)? = nil,
      @start_date : Time? = nil,
      @end_date : Time? = nil,
      @transactions : Array(CraBankIncomeTransaction)? = nil
    )
    end

    # Show invalid properties with the reasons. Usually used together with valid?
    # @return Array for valid properties with the reasons
    def list_invalid_properties : Array(String)
      invalid_properties = Array(String).new

      unless (_total_amounts = @total_amounts).nil?
      end
      unless (_start_date = @start_date).nil?
      end
      unless (_end_date = @end_date).nil?
      end
      unless (_transactions = @transactions).nil?
      end
      invalid_properties
    end

    # Check to see if the all the properties in the model are valid
    # @return true if the model is valid
    def valid? : Bool
      unless (_total_amounts = @total_amounts).nil?
      end

      unless (_start_date = @start_date).nil?
      end

      unless (_end_date = @end_date).nil?
      end

      unless (_transactions = @transactions).nil?
      end

      true
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] total_amounts Object to be assigned
    def total_amounts=(new_value : Array(CreditAmountWithCurrency)?)
      unless new_value.nil?
      end

      @total_amounts = new_value
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] start_date Object to be assigned
    def start_date=(new_value : Time?)
      unless new_value.nil?
      end

      @start_date = new_value
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] end_date Object to be assigned
    def end_date=(new_value : Time?)
      unless new_value.nil?
      end

      @end_date = new_value
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] transactions Object to be assigned
    def transactions=(new_value : Array(CraBankIncomeTransaction)?)
      unless new_value.nil?
      end

      @transactions = new_value
    end

    # Generates #hash and #== methods from all fields
    # #== @return [Bool]
    # #hash calculates hash code according to all attributes.
    # #hash @return [UInt64] Hash code
    def_equals_and_hash(@total_amounts, @start_date, @end_date, @transactions)
  end
end
