#  The Plaid API
#
# The Plaid REST API. Please see https://plaid.com/docs/api for more details.
#
# The version of the OpenAPI document: 2020-09-14_1.474.3
#
# Generated by: https://openapi-generator.tech
#

require "../../core"

require "./financial_institution_insights"
require "./merchant_insights"

module Plaid
  # Insights around a user's counterparties
  class CounterpartyInsights
    include JSON::Serializable
    include JSON::Serializable::Unmapped
    include OpenApi::Validatable
    include OpenApi::Json

    # Optional Properties

    # Insights related to a user’s transactions with other financial institutions, including detected account types.
    @[JSON::Field(key: "financial_institution_insights", type: Array(Plaid::FinancialInstitutionInsights)?, default: nil, required: false, nullable: false, emit_null: false)]
    getter financial_institution_insights : Array(Plaid::FinancialInstitutionInsights)? = nil

    # Insights about a user’s top merchants, ranked by spend.
    @[JSON::Field(key: "merchant_insights", type: Array(Plaid::MerchantInsights)?, default: nil, required: false, nullable: false, emit_null: false)]
    getter merchant_insights : Array(Plaid::MerchantInsights)? = nil

    # Initializes the object
    # @param [Hash] attributes Model attributes in the form of hash
    def initialize(
      *,
      # Optional properties
      @financial_institution_insights : Array(Plaid::FinancialInstitutionInsights)? = nil,
      @merchant_insights : Array(Plaid::MerchantInsights)? = nil
    )
    end

    # Show invalid properties with the reasons. Usually used together with valid?
    # @return Array for valid properties with the reasons
    def list_invalid_properties : Array(String)
      invalid_properties = Array(String).new

      unless (_financial_institution_insights = @financial_institution_insights).nil?
        invalid_properties.concat(OpenApi::ContainerValidator.list_invalid_properties_for(key: "financial_institution_insights", container: _financial_institution_insights)) if _financial_institution_insights.is_a?(Array)
      end
      unless (_merchant_insights = @merchant_insights).nil?
        invalid_properties.concat(OpenApi::ContainerValidator.list_invalid_properties_for(key: "merchant_insights", container: _merchant_insights)) if _merchant_insights.is_a?(Array)
      end
      invalid_properties
    end

    # Check to see if the all the properties in the model are valid
    # @return true if the model is valid
    def valid? : Bool
      unless (_financial_institution_insights = @financial_institution_insights).nil?
        return false if _financial_institution_insights.is_a?(Array) && !OpenApi::ContainerValidator.valid?(container: _financial_institution_insights)
      end

      unless (_merchant_insights = @merchant_insights).nil?
        return false if _merchant_insights.is_a?(Array) && !OpenApi::ContainerValidator.valid?(container: _merchant_insights)
      end

      true
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] financial_institution_insights Object to be assigned
    def financial_institution_insights=(new_value : Array(Plaid::FinancialInstitutionInsights)?)
      unless new_value.nil?
        OpenApi::ContainerValidator.validate(container: new_value) if new_value.is_a?(Array)
      end

      @financial_institution_insights = new_value
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] merchant_insights Object to be assigned
    def merchant_insights=(new_value : Array(Plaid::MerchantInsights)?)
      unless new_value.nil?
        OpenApi::ContainerValidator.validate(container: new_value) if new_value.is_a?(Array)
      end

      @merchant_insights = new_value
    end

    # Generates #hash and #== methods from all fields
    # #== @return [Bool]
    # #hash calculates hash code according to all attributes.
    # #hash @return [UInt64] Hash code
    def_equals_and_hash(@financial_institution_insights, @merchant_insights)
  end
end
