#  The Plaid API
#
# The Plaid REST API. Please see https://plaid.com/docs/api for more details.
#
# The version of the OpenAPI document: 2020-09-14_1.474.3
#
# Generated by: https://openapi-generator.tech
#

require "../../core"

require "./credit_card_liability"
require "./mortgage_liability"
require "./student_loan"

module Plaid
  # An object containing liability accounts
  class LiabilitiesObject
    include JSON::Serializable
    include JSON::Serializable::Unmapped
    include OpenApi::Validatable
    include OpenApi::Json

    # Required Properties

    # The credit accounts returned.
    @[JSON::Field(key: "credit", type: Array(CreditCardLiability)?, default: nil, required: true, nullable: true, emit_null: true)]
    getter credit : Array(CreditCardLiability)? = nil

    # The mortgage accounts returned.
    @[JSON::Field(key: "mortgage", type: Array(MortgageLiability)?, default: nil, required: true, nullable: true, emit_null: true)]
    getter mortgage : Array(MortgageLiability)? = nil

    # The student loan accounts returned.
    @[JSON::Field(key: "student", type: Array(StudentLoan)?, default: nil, required: true, nullable: true, emit_null: true)]
    getter student : Array(StudentLoan)? = nil

    # End of Required Properties

    # Initializes the object
    # @param [Hash] attributes Model attributes in the form of hash
    def initialize(
      *,
      # Required properties
      @credit : Array(CreditCardLiability)? = nil,
      @mortgage : Array(MortgageLiability)? = nil,
      @student : Array(StudentLoan)? = nil
    )
    end

    # Show invalid properties with the reasons. Usually used together with valid?
    # @return Array for valid properties with the reasons
    def list_invalid_properties : Array(String)
      invalid_properties = Array(String).new

      unless (_credit = @credit).nil?
      end
      unless (_mortgage = @mortgage).nil?
      end
      unless (_student = @student).nil?
      end
      invalid_properties
    end

    # Check to see if the all the properties in the model are valid
    # @return true if the model is valid
    def valid? : Bool
      unless (_credit = @credit).nil?
      end

      unless (_mortgage = @mortgage).nil?
      end

      unless (_student = @student).nil?
      end

      true
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] credit Object to be assigned
    def credit=(new_value : Array(CreditCardLiability)?)
      unless new_value.nil?
      end

      @credit = new_value
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] mortgage Object to be assigned
    def mortgage=(new_value : Array(MortgageLiability)?)
      unless new_value.nil?
      end

      @mortgage = new_value
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] student Object to be assigned
    def student=(new_value : Array(StudentLoan)?)
      unless new_value.nil?
      end

      @student = new_value
    end

    # Generates #hash and #== methods from all fields
    # #== @return [Bool]
    # #hash calculates hash code according to all attributes.
    # #hash @return [UInt64] Hash code
    def_equals_and_hash(@credit, @mortgage, @student)
  end
end
