#  The Plaid API
#
# The Plaid REST API. Please see https://plaid.com/docs/api for more details.
#
# The version of the OpenAPI document: 2020-09-14_1.474.3
#
# Generated by: https://openapi-generator.tech
#

require "../../core"

require "./document_risk_signal_institution_metadata"

module Plaid
  # Details about a certain reason as to why a document could potentially be fraudulent.
  class DocumentRiskSignal
    include JSON::Serializable
    include JSON::Serializable::Unmapped
    include OpenApi::Validatable
    include OpenApi::Json

    # Required Properties

    # The result from the risk signal check.
    @[JSON::Field(key: "type", type: String?, default: nil, required: true, nullable: true, emit_null: true)]
    getter _type : String? = nil

    # The field which the risk signal was computed for
    @[JSON::Field(key: "field", type: String?, default: nil, required: true, nullable: true, emit_null: true)]
    getter field : String? = nil

    # A flag used to quickly identify if the signal indicates that this field is authentic or fraudulent
    @[JSON::Field(key: "has_fraud_risk", type: Bool?, default: nil, required: true, nullable: true, emit_null: true)]
    getter has_fraud_risk : Bool? = nil

    @[JSON::Field(key: "institution_metadata", type: DocumentRiskSignalInstitutionMetadata?, default: nil, required: true, nullable: true, emit_null: true)]
    getter institution_metadata : DocumentRiskSignalInstitutionMetadata? = nil

    # The expected value of the field, as seen on the document
    @[JSON::Field(key: "expected_value", type: String?, default: nil, required: true, nullable: true, emit_null: true)]
    getter expected_value : String? = nil

    # The derived value obtained in the risk signal calculation process for this field
    @[JSON::Field(key: "actual_value", type: String?, default: nil, required: true, nullable: true, emit_null: true)]
    getter actual_value : String? = nil

    # A human-readable explanation providing more detail into the particular risk signal
    @[JSON::Field(key: "signal_description", type: String?, default: nil, required: true, nullable: true, emit_null: true)]
    getter signal_description : String? = nil

    # The relevant page associated with the risk signal
    @[JSON::Field(key: "page_number", type: Int32?, default: nil, required: true, nullable: true, emit_null: true)]
    getter page_number : Int32? = nil

    # End of Required Properties

    # Initializes the object
    # @param [Hash] attributes Model attributes in the form of hash
    def initialize(
      *,
      # Required properties
      @_type : String? = nil,
      @field : String? = nil,
      @has_fraud_risk : Bool? = nil,
      @institution_metadata : DocumentRiskSignalInstitutionMetadata? = nil,
      @expected_value : String? = nil,
      @actual_value : String? = nil,
      @signal_description : String? = nil,
      @page_number : Int32? = nil
    )
    end

    # Show invalid properties with the reasons. Usually used together with valid?
    # @return Array for valid properties with the reasons
    def list_invalid_properties : Array(String)
      invalid_properties = Array(String).new

      unless (__type = @_type).nil?
      end
      unless (_field = @field).nil?
      end
      unless (_has_fraud_risk = @has_fraud_risk).nil?
      end
      unless (_institution_metadata = @institution_metadata).nil?
      end
      unless (_expected_value = @expected_value).nil?
      end
      unless (_actual_value = @actual_value).nil?
      end
      unless (_signal_description = @signal_description).nil?
      end
      unless (_page_number = @page_number).nil?
      end
      invalid_properties
    end

    # Check to see if the all the properties in the model are valid
    # @return true if the model is valid
    def valid? : Bool
      unless (__type = @_type).nil?
      end

      unless (_field = @field).nil?
      end

      unless (_has_fraud_risk = @has_fraud_risk).nil?
      end

      unless (_institution_metadata = @institution_metadata).nil?
      end

      unless (_expected_value = @expected_value).nil?
      end

      unless (_actual_value = @actual_value).nil?
      end

      unless (_signal_description = @signal_description).nil?
      end

      unless (_page_number = @page_number).nil?
      end

      true
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] _type Object to be assigned
    def _type=(new_value : String?)
      unless new_value.nil?
      end

      @_type = new_value
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] field Object to be assigned
    def field=(new_value : String?)
      unless new_value.nil?
      end

      @field = new_value
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] has_fraud_risk Object to be assigned
    def has_fraud_risk=(new_value : Bool?)
      unless new_value.nil?
      end

      @has_fraud_risk = new_value
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] institution_metadata Object to be assigned
    def institution_metadata=(new_value : DocumentRiskSignalInstitutionMetadata?)
      unless new_value.nil?
      end

      @institution_metadata = new_value
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] expected_value Object to be assigned
    def expected_value=(new_value : String?)
      unless new_value.nil?
      end

      @expected_value = new_value
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] actual_value Object to be assigned
    def actual_value=(new_value : String?)
      unless new_value.nil?
      end

      @actual_value = new_value
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] signal_description Object to be assigned
    def signal_description=(new_value : String?)
      unless new_value.nil?
      end

      @signal_description = new_value
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] page_number Object to be assigned
    def page_number=(new_value : Int32?)
      unless new_value.nil?
      end

      @page_number = new_value
    end

    # Generates #hash and #== methods from all fields
    # #== @return [Bool]
    # #hash calculates hash code according to all attributes.
    # #hash @return [UInt64] Hash code
    def_equals_and_hash(@_type, @field, @has_fraud_risk, @institution_metadata, @expected_value, @actual_value, @signal_description, @page_number)
  end
end
