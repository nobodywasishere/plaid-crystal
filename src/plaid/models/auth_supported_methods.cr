#  The Plaid API
#
# The Plaid REST API. Please see https://plaid.com/docs/api for more details.
#
# The version of the OpenAPI document: 2020-09-14_1.474.3
#
# Generated by: https://openapi-generator.tech
#

require "../../core"

module Plaid
  # Metadata specifically related to which auth methods an institution supports.
  class AuthSupportedMethods
    include JSON::Serializable
    include JSON::Serializable::Unmapped
    include OpenApi::Validatable
    include OpenApi::Json

    # Required Properties

    # Indicates if instant auth is supported.
    @[JSON::Field(key: "instant_auth", type: Bool?, default: nil, required: true, nullable: false, emit_null: false)]
    getter instant_auth : Bool? = nil

    # Indicates if instant match is supported.
    @[JSON::Field(key: "instant_match", type: Bool?, default: nil, required: true, nullable: false, emit_null: false)]
    getter instant_match : Bool? = nil

    # Indicates if automated microdeposits are supported.
    @[JSON::Field(key: "automated_micro_deposits", type: Bool?, default: nil, required: true, nullable: false, emit_null: false)]
    getter automated_micro_deposits : Bool? = nil

    # Indicates if instant microdeposits are supported.
    @[JSON::Field(key: "instant_micro_deposits", type: Bool?, default: nil, required: true, nullable: false, emit_null: false)]
    getter instant_micro_deposits : Bool? = nil

    # End of Required Properties

    # Initializes the object
    # @param [Hash] attributes Model attributes in the form of hash
    def initialize(
      *,
      # Required properties
      @instant_auth : Bool? = nil,
      @instant_match : Bool? = nil,
      @automated_micro_deposits : Bool? = nil,
      @instant_micro_deposits : Bool? = nil
    )
    end

    # Show invalid properties with the reasons. Usually used together with valid?
    # @return Array for valid properties with the reasons
    def list_invalid_properties : Array(String)
      invalid_properties = Array(String).new

      invalid_properties.push("\"instant_auth\" is required and cannot be null") if @instant_auth.nil?

      unless (_instant_auth = @instant_auth).nil?
      end
      invalid_properties.push("\"instant_match\" is required and cannot be null") if @instant_match.nil?

      unless (_instant_match = @instant_match).nil?
      end
      invalid_properties.push("\"automated_micro_deposits\" is required and cannot be null") if @automated_micro_deposits.nil?

      unless (_automated_micro_deposits = @automated_micro_deposits).nil?
      end
      invalid_properties.push("\"instant_micro_deposits\" is required and cannot be null") if @instant_micro_deposits.nil?

      unless (_instant_micro_deposits = @instant_micro_deposits).nil?
      end
      invalid_properties
    end

    # Check to see if the all the properties in the model are valid
    # @return true if the model is valid
    def valid? : Bool
      return false if @instant_auth.nil?
      unless (_instant_auth = @instant_auth).nil?
      end

      return false if @instant_match.nil?
      unless (_instant_match = @instant_match).nil?
      end

      return false if @automated_micro_deposits.nil?
      unless (_automated_micro_deposits = @automated_micro_deposits).nil?
      end

      return false if @instant_micro_deposits.nil?
      unless (_instant_micro_deposits = @instant_micro_deposits).nil?
      end

      true
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] instant_auth Object to be assigned
    def instant_auth=(new_value : Bool?)
      raise ArgumentError.new("\"instant_auth\" is required and cannot be null") if new_value.nil?
      unless new_value.nil?
      end

      @instant_auth = new_value
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] instant_match Object to be assigned
    def instant_match=(new_value : Bool?)
      raise ArgumentError.new("\"instant_match\" is required and cannot be null") if new_value.nil?
      unless new_value.nil?
      end

      @instant_match = new_value
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] automated_micro_deposits Object to be assigned
    def automated_micro_deposits=(new_value : Bool?)
      raise ArgumentError.new("\"automated_micro_deposits\" is required and cannot be null") if new_value.nil?
      unless new_value.nil?
      end

      @automated_micro_deposits = new_value
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] instant_micro_deposits Object to be assigned
    def instant_micro_deposits=(new_value : Bool?)
      raise ArgumentError.new("\"instant_micro_deposits\" is required and cannot be null") if new_value.nil?
      unless new_value.nil?
      end

      @instant_micro_deposits = new_value
    end

    # Generates #hash and #== methods from all fields
    # #== @return [Bool]
    # #hash calculates hash code according to all attributes.
    # #hash @return [UInt64] Hash code
    def_equals_and_hash(@instant_auth, @instant_match, @automated_micro_deposits, @instant_micro_deposits)
  end
end
