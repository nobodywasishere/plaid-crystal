#  The Plaid API
#
# The Plaid REST API. Please see https://plaid.com/docs/api for more details.
#
# The version of the OpenAPI document: 2020-09-14_1.474.3
#
# Generated by: https://openapi-generator.tech
#

require "../../core"

require "./signal_warning"
require "./transfer_authorization_risk_level"

module Plaid
  # This object includes the scores and risk level. This response is offered as an add-on to /transfer/authorization/create. To request access to these fields please contact your Plaid account manager.
  class TransferAuthorizationPaymentRisk
    include JSON::Serializable
    include JSON::Serializable::Unmapped
    include OpenApi::Validatable
    include OpenApi::Json

    # Required Properties

    # A score from 1-99 that indicates the transaction return risk: a higher risk score suggests a higher return likelihood.  The score evaluates the transaction return risk because an account is overdrawn or because an ineligible account is used and covers return codes: \"R01\", \"R02\", \"R03\", \"R04\", \"R06\", \"R08\",  \"R09\", \"R13\", \"R16\", \"R17\", \"R20\", \"R23\". These returns have a turnaround time of 2 banking days.
    @[JSON::Field(key: "bank_initiated_return_score", type: Int32?, default: nil, required: true, nullable: true, emit_null: true)]
    getter bank_initiated_return_score : Int32? = nil
    MAX_FOR_BANK_INITIATED_RETURN_SCORE = Int32.new("99")
    MIN_FOR_BANK_INITIATED_RETURN_SCORE = Int32.new("1")

    # A score from 1-99 that indicates the transaction return risk: a higher risk score suggests a higher return likelihood.  The score evaluates the transaction return risk of an unauthorized debit and covers return codes: \"R05\", \"R07\", \"R10\", \"R11\", \"R29\". These returns typically have a return time frame of up to 60 calendar days. During this period, the customer of financial institutions can dispute a transaction as unauthorized.
    @[JSON::Field(key: "customer_initiated_return_score", type: Int32?, default: nil, required: true, nullable: true, emit_null: true)]
    getter customer_initiated_return_score : Int32? = nil
    MAX_FOR_CUSTOMER_INITIATED_RETURN_SCORE = Int32.new("99")
    MIN_FOR_CUSTOMER_INITIATED_RETURN_SCORE = Int32.new("1")

    @[JSON::Field(key: "risk_level", type: Plaid::TransferAuthorizationRiskLevel?, default: nil, required: true, nullable: true, emit_null: true)]
    getter risk_level : Plaid::TransferAuthorizationRiskLevel? = nil

    # If bank information was not available to be used in the Signal model, this array contains warnings describing why bank data is missing. If you want to receive an API error instead of Signal scores in the case of missing bank data, file a support ticket or contact your Plaid account manager.
    @[JSON::Field(key: "warnings", type: Array(Plaid::SignalWarning)?, default: nil, required: true, nullable: false, emit_null: false)]
    getter warnings : Array(Plaid::SignalWarning)? = nil

    # End of Required Properties

    # Initializes the object
    # @param [Hash] attributes Model attributes in the form of hash
    def initialize(
      *,
      # Required properties
      @bank_initiated_return_score : Int32? = nil,
      @customer_initiated_return_score : Int32? = nil,
      @risk_level : Plaid::TransferAuthorizationRiskLevel? = nil,
      @warnings : Array(Plaid::SignalWarning)? = nil
    )
    end

    # Show invalid properties with the reasons. Usually used together with valid?
    # @return Array for valid properties with the reasons
    def list_invalid_properties : Array(String)
      invalid_properties = Array(String).new

      unless (_bank_initiated_return_score = @bank_initiated_return_score).nil?
        if max_number_error = OpenApi::PrimitiveValidator.max_number_error("bank_initiated_return_score", _bank_initiated_return_score, MAX_FOR_BANK_INITIATED_RETURN_SCORE)
          invalid_properties.push(max_number_error)
        end

        if min_number_error = OpenApi::PrimitiveValidator.min_number_error("bank_initiated_return_score", _bank_initiated_return_score, MIN_FOR_BANK_INITIATED_RETURN_SCORE)
          invalid_properties.push(min_number_error)
        end
      end
      unless (_customer_initiated_return_score = @customer_initiated_return_score).nil?
        if max_number_error = OpenApi::PrimitiveValidator.max_number_error("customer_initiated_return_score", _customer_initiated_return_score, MAX_FOR_CUSTOMER_INITIATED_RETURN_SCORE)
          invalid_properties.push(max_number_error)
        end

        if min_number_error = OpenApi::PrimitiveValidator.min_number_error("customer_initiated_return_score", _customer_initiated_return_score, MIN_FOR_CUSTOMER_INITIATED_RETURN_SCORE)
          invalid_properties.push(min_number_error)
        end
      end
      unless (_risk_level = @risk_level).nil?
        invalid_properties.push(_risk_level.error_message) if !_risk_level.valid?
      end
      invalid_properties.push("\"warnings\" is required and cannot be null") if @warnings.nil?

      unless (_warnings = @warnings).nil?
        invalid_properties.concat(OpenApi::ContainerValidator.list_invalid_properties_for(key: "warnings", container: _warnings)) if _warnings.is_a?(Array)
      end
      invalid_properties
    end

    # Check to see if the all the properties in the model are valid
    # @return true if the model is valid
    def valid? : Bool
      unless (_bank_initiated_return_score = @bank_initiated_return_score).nil?
        return false if _bank_initiated_return_score > MAX_FOR_BANK_INITIATED_RETURN_SCORE
        return false if _bank_initiated_return_score < MIN_FOR_BANK_INITIATED_RETURN_SCORE
      end

      unless (_customer_initiated_return_score = @customer_initiated_return_score).nil?
        return false if _customer_initiated_return_score > MAX_FOR_CUSTOMER_INITIATED_RETURN_SCORE
        return false if _customer_initiated_return_score < MIN_FOR_CUSTOMER_INITIATED_RETURN_SCORE
      end

      unless (_risk_level = @risk_level).nil?
        return false if !_risk_level.valid?
      end

      return false if @warnings.nil?
      unless (_warnings = @warnings).nil?
        return false if _warnings.is_a?(Array) && !OpenApi::ContainerValidator.valid?(container: _warnings)
      end

      true
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] bank_initiated_return_score Object to be assigned
    def bank_initiated_return_score=(new_value : Int32?)
      unless new_value.nil?
        OpenApi::PrimitiveValidator.validate_max_number("bank_initiated_return_score", new_value, MAX_FOR_BANK_INITIATED_RETURN_SCORE)
        OpenApi::PrimitiveValidator.validate_min_number("bank_initiated_return_score", new_value, MIN_FOR_BANK_INITIATED_RETURN_SCORE)
      end

      @bank_initiated_return_score = new_value
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] customer_initiated_return_score Object to be assigned
    def customer_initiated_return_score=(new_value : Int32?)
      unless new_value.nil?
        OpenApi::PrimitiveValidator.validate_max_number("customer_initiated_return_score", new_value, MAX_FOR_CUSTOMER_INITIATED_RETURN_SCORE)
        OpenApi::PrimitiveValidator.validate_min_number("customer_initiated_return_score", new_value, MIN_FOR_CUSTOMER_INITIATED_RETURN_SCORE)
      end

      @customer_initiated_return_score = new_value
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] risk_level Object to be assigned
    def risk_level=(new_value : Plaid::TransferAuthorizationRiskLevel?)
      unless new_value.nil?
        new_value.validate
      end

      @risk_level = new_value
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] warnings Object to be assigned
    def warnings=(new_value : Array(Plaid::SignalWarning)?)
      raise ArgumentError.new("\"warnings\" is required and cannot be null") if new_value.nil?
      unless new_value.nil?
        OpenApi::ContainerValidator.validate(container: new_value) if new_value.is_a?(Array)
      end

      @warnings = new_value
    end

    # Generates #hash and #== methods from all fields
    # #== @return [Bool]
    # #hash calculates hash code according to all attributes.
    # #hash @return [UInt64] Hash code
    def_equals_and_hash(@bank_initiated_return_score, @customer_initiated_return_score, @risk_level, @warnings)
  end
end
