#  The Plaid API
#
# The Plaid REST API. Please see https://plaid.com/docs/api for more details.
#
# The version of the OpenAPI document: 2020-09-14_1.474.3
#
# Generated by: https://openapi-generator.tech
#

require "../../core"

require "./payment_initiation_consent_constraints"
require "./payment_initiation_consent_scope"
require "./payment_initiation_consent_status"

module Plaid
  # PaymentInitiationConsent defines a payment initiation consent.
  class PaymentInitiationConsent
    include JSON::Serializable
    include JSON::Serializable::Unmapped
    include OpenApi::Validatable
    include OpenApi::Json

    # Required Properties

    # The consent ID.
    @[JSON::Field(key: "consent_id", type: String?, default: nil, required: true, nullable: false, emit_null: false)]
    getter consent_id : String? = nil
    MIN_LENGTH_FOR_CONSENT_ID = 1

    @[JSON::Field(key: "status", type: Plaid::PaymentInitiationConsentStatus?, default: nil, required: true, nullable: false, emit_null: false)]
    getter status : Plaid::PaymentInitiationConsentStatus? = nil

    # Consent creation timestamp, in [ISO 8601](https://wikipedia.org/wiki/ISO_8601) format.
    @[JSON::Field(key: "created_at", type: Time?, default: nil, required: true, nullable: false, emit_null: false, converter: Time::RFC3339Converter)]
    getter created_at : Time? = nil

    # The ID of the recipient the payment consent is for.
    @[JSON::Field(key: "recipient_id", type: String?, default: nil, required: true, nullable: false, emit_null: false)]
    getter recipient_id : String? = nil
    MIN_LENGTH_FOR_RECIPIENT_ID = 1

    # A reference for the payment consent.
    @[JSON::Field(key: "reference", type: String?, default: nil, required: true, nullable: false, emit_null: false)]
    getter reference : String? = nil

    @[JSON::Field(key: "constraints", type: Plaid::PaymentInitiationConsentConstraints?, default: nil, required: true, nullable: false, emit_null: false)]
    getter constraints : Plaid::PaymentInitiationConsentConstraints? = nil

    # An array of payment consent scopes.
    @[JSON::Field(key: "scopes", type: Array(PaymentInitiationConsentScope)?, default: nil, required: true, nullable: false, emit_null: false)]
    getter scopes : Array(PaymentInitiationConsentScope)? = nil

    # End of Required Properties

    # Initializes the object
    # @param [Hash] attributes Model attributes in the form of hash
    def initialize(
      *,
      # Required properties
      @consent_id : String? = nil,
      @status : Plaid::PaymentInitiationConsentStatus? = nil,
      @created_at : Time? = nil,
      @recipient_id : String? = nil,
      @reference : String? = nil,
      @constraints : Plaid::PaymentInitiationConsentConstraints? = nil,
      @scopes : Array(PaymentInitiationConsentScope)? = nil
    )
    end

    # Show invalid properties with the reasons. Usually used together with valid?
    # @return Array for valid properties with the reasons
    def list_invalid_properties : Array(String)
      invalid_properties = Array(String).new

      invalid_properties.push("\"consent_id\" is required and cannot be null") if @consent_id.nil?

      unless (_consent_id = @consent_id).nil?
        if min_length_error = OpenApi::PrimitiveValidator.min_length_error("consent_id", _consent_id.to_s.size, MIN_LENGTH_FOR_CONSENT_ID)
          invalid_properties.push(min_length_error)
        end
      end
      invalid_properties.push("\"status\" is required and cannot be null") if @status.nil?

      unless (_status = @status).nil?
        invalid_properties.push(_status.error_message) if !_status.valid?
      end
      invalid_properties.push("\"created_at\" is required and cannot be null") if @created_at.nil?

      unless (_created_at = @created_at).nil?
      end
      invalid_properties.push("\"recipient_id\" is required and cannot be null") if @recipient_id.nil?

      unless (_recipient_id = @recipient_id).nil?
        if min_length_error = OpenApi::PrimitiveValidator.min_length_error("recipient_id", _recipient_id.to_s.size, MIN_LENGTH_FOR_RECIPIENT_ID)
          invalid_properties.push(min_length_error)
        end
      end
      invalid_properties.push("\"reference\" is required and cannot be null") if @reference.nil?

      unless (_reference = @reference).nil?
      end
      invalid_properties.push("\"constraints\" is required and cannot be null") if @constraints.nil?

      unless (_constraints = @constraints).nil?
        invalid_properties.concat(_constraints.list_invalid_properties_for("constraints")) if _constraints.is_a?(OpenApi::Validatable)
      end
      invalid_properties.push("\"scopes\" is required and cannot be null") if @scopes.nil?

      unless (_scopes = @scopes).nil?
      end
      invalid_properties
    end

    # Check to see if the all the properties in the model are valid
    # @return true if the model is valid
    def valid? : Bool
      return false if @consent_id.nil?
      unless (_consent_id = @consent_id).nil?
        return false if _consent_id.to_s.size < MIN_LENGTH_FOR_CONSENT_ID
      end

      return false if @status.nil?
      unless (_status = @status).nil?
        return false if !_status.valid?
      end

      return false if @created_at.nil?
      unless (_created_at = @created_at).nil?
      end

      return false if @recipient_id.nil?
      unless (_recipient_id = @recipient_id).nil?
        return false if _recipient_id.to_s.size < MIN_LENGTH_FOR_RECIPIENT_ID
      end

      return false if @reference.nil?
      unless (_reference = @reference).nil?
      end

      return false if @constraints.nil?
      unless (_constraints = @constraints).nil?
        return false if _constraints.is_a?(OpenApi::Validatable) && !_constraints.valid?
      end

      return false if @scopes.nil?
      unless (_scopes = @scopes).nil?
      end

      true
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] consent_id Object to be assigned
    def consent_id=(new_value : String?)
      raise ArgumentError.new("\"consent_id\" is required and cannot be null") if new_value.nil?
      unless new_value.nil?
        OpenApi::PrimitiveValidator.validate_min_length("consent_id", new_value.to_s.size, MIN_LENGTH_FOR_CONSENT_ID)
      end

      @consent_id = new_value
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] status Object to be assigned
    def status=(new_value : Plaid::PaymentInitiationConsentStatus?)
      raise ArgumentError.new("\"status\" is required and cannot be null") if new_value.nil?
      unless new_value.nil?
        new_value.validate
      end

      @status = new_value
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] created_at Object to be assigned
    def created_at=(new_value : Time?)
      raise ArgumentError.new("\"created_at\" is required and cannot be null") if new_value.nil?
      unless new_value.nil?
      end

      @created_at = new_value
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] recipient_id Object to be assigned
    def recipient_id=(new_value : String?)
      raise ArgumentError.new("\"recipient_id\" is required and cannot be null") if new_value.nil?
      unless new_value.nil?
        OpenApi::PrimitiveValidator.validate_min_length("recipient_id", new_value.to_s.size, MIN_LENGTH_FOR_RECIPIENT_ID)
      end

      @recipient_id = new_value
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] reference Object to be assigned
    def reference=(new_value : String?)
      raise ArgumentError.new("\"reference\" is required and cannot be null") if new_value.nil?
      unless new_value.nil?
      end

      @reference = new_value
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] constraints Object to be assigned
    def constraints=(new_value : Plaid::PaymentInitiationConsentConstraints?)
      raise ArgumentError.new("\"constraints\" is required and cannot be null") if new_value.nil?
      unless new_value.nil?
        new_value.validate if new_value.is_a?(OpenApi::Validatable)
      end

      @constraints = new_value
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] scopes Object to be assigned
    def scopes=(new_value : Array(PaymentInitiationConsentScope)?)
      raise ArgumentError.new("\"scopes\" is required and cannot be null") if new_value.nil?
      unless new_value.nil?
      end

      @scopes = new_value
    end

    # Generates #hash and #== methods from all fields
    # #== @return [Bool]
    # #hash calculates hash code according to all attributes.
    # #hash @return [UInt64] Hash code
    def_equals_and_hash(@consent_id, @status, @created_at, @recipient_id, @reference, @constraints, @scopes)
  end
end
