#  The Plaid API
#
# The Plaid REST API. Please see https://plaid.com/docs/api for more details.
#
# The version of the OpenAPI document: 2020-09-14_1.474.3
#
# Generated by: https://openapi-generator.tech
#

require "../../core"

module Plaid
  # Specifies the multi-factor authentication settings to use with this test account
  class MFA
    include JSON::Serializable
    include JSON::Serializable::Unmapped
    include OpenApi::Validatable
    include OpenApi::Json

    # Required Properties

    # Possible values are `device`, `selections`, or `questions`.  If value is `device`, the MFA answer is `1234`.  If value is `selections`, the MFA answer is always the first option.  If value is `questions`, the MFA answer is  `answer_<i>_<j>` for the j-th question in the i-th round, starting from 0. For example, the answer to the first question in the second round is `answer_1_0`.
    @[JSON::Field(key: "type", type: String?, default: nil, required: true, nullable: false, emit_null: false)]
    getter _type : String? = nil

    # Number of rounds of questions. Required if value of `type` is `questions`.
    @[JSON::Field(key: "question_rounds", type: Float64?, default: nil, required: true, nullable: false, emit_null: false)]
    getter question_rounds : Float64? = nil

    # Number of questions per round. Required if value of `type` is `questions`. If value of type is `selections`, default value is 2.
    @[JSON::Field(key: "questions_per_round", type: Float64?, default: nil, required: true, nullable: false, emit_null: false)]
    getter questions_per_round : Float64? = nil

    # Number of rounds of selections, used if `type` is `selections`. Defaults to 1.
    @[JSON::Field(key: "selection_rounds", type: Float64?, default: nil, required: true, nullable: false, emit_null: false)]
    getter selection_rounds : Float64? = nil

    # Number of available answers per question, used if `type` is `selection`. Defaults to 2.
    @[JSON::Field(key: "selections_per_question", type: Float64?, default: nil, required: true, nullable: false, emit_null: false)]
    getter selections_per_question : Float64? = nil

    # End of Required Properties

    # Initializes the object
    # @param [Hash] attributes Model attributes in the form of hash
    def initialize(
      *,
      # Required properties
      @_type : String? = nil,
      @question_rounds : Float64? = nil,
      @questions_per_round : Float64? = nil,
      @selection_rounds : Float64? = nil,
      @selections_per_question : Float64? = nil
    )
    end

    # Show invalid properties with the reasons. Usually used together with valid?
    # @return Array for valid properties with the reasons
    def list_invalid_properties : Array(String)
      invalid_properties = Array(String).new

      invalid_properties.push("\"_type\" is required and cannot be null") if @_type.nil?

      unless (__type = @_type).nil?
      end
      invalid_properties.push("\"question_rounds\" is required and cannot be null") if @question_rounds.nil?

      unless (_question_rounds = @question_rounds).nil?
      end
      invalid_properties.push("\"questions_per_round\" is required and cannot be null") if @questions_per_round.nil?

      unless (_questions_per_round = @questions_per_round).nil?
      end
      invalid_properties.push("\"selection_rounds\" is required and cannot be null") if @selection_rounds.nil?

      unless (_selection_rounds = @selection_rounds).nil?
      end
      invalid_properties.push("\"selections_per_question\" is required and cannot be null") if @selections_per_question.nil?

      unless (_selections_per_question = @selections_per_question).nil?
      end
      invalid_properties
    end

    # Check to see if the all the properties in the model are valid
    # @return true if the model is valid
    def valid? : Bool
      return false if @_type.nil?
      unless (__type = @_type).nil?
      end

      return false if @question_rounds.nil?
      unless (_question_rounds = @question_rounds).nil?
      end

      return false if @questions_per_round.nil?
      unless (_questions_per_round = @questions_per_round).nil?
      end

      return false if @selection_rounds.nil?
      unless (_selection_rounds = @selection_rounds).nil?
      end

      return false if @selections_per_question.nil?
      unless (_selections_per_question = @selections_per_question).nil?
      end

      true
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] _type Object to be assigned
    def _type=(new_value : String?)
      raise ArgumentError.new("\"_type\" is required and cannot be null") if new_value.nil?
      unless new_value.nil?
      end

      @_type = new_value
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] question_rounds Object to be assigned
    def question_rounds=(new_value : Float64?)
      raise ArgumentError.new("\"question_rounds\" is required and cannot be null") if new_value.nil?
      unless new_value.nil?
      end

      @question_rounds = new_value
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] questions_per_round Object to be assigned
    def questions_per_round=(new_value : Float64?)
      raise ArgumentError.new("\"questions_per_round\" is required and cannot be null") if new_value.nil?
      unless new_value.nil?
      end

      @questions_per_round = new_value
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] selection_rounds Object to be assigned
    def selection_rounds=(new_value : Float64?)
      raise ArgumentError.new("\"selection_rounds\" is required and cannot be null") if new_value.nil?
      unless new_value.nil?
      end

      @selection_rounds = new_value
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] selections_per_question Object to be assigned
    def selections_per_question=(new_value : Float64?)
      raise ArgumentError.new("\"selections_per_question\" is required and cannot be null") if new_value.nil?
      unless new_value.nil?
      end

      @selections_per_question = new_value
    end

    # Generates #hash and #== methods from all fields
    # #== @return [Bool]
    # #hash calculates hash code according to all attributes.
    # #hash @return [UInt64] Hash code
    def_equals_and_hash(@_type, @question_rounds, @questions_per_round, @selection_rounds, @selections_per_question)
  end
end
