#  The Plaid API
#
# The Plaid REST API. Please see https://plaid.com/docs/api for more details.
#
# The version of the OpenAPI document: 2020-09-14_1.474.3
#
# Generated by: https://openapi-generator.tech
#

require "../../core"

module Plaid
  # Identifying information for transferring money to or from a US account via ACH or wire transfer.
  class NumbersACHNullable
    include JSON::Serializable
    include JSON::Serializable::Unmapped
    include OpenApi::Validatable
    include OpenApi::Json

    # Required Properties

    # The Plaid account ID associated with the account numbers
    @[JSON::Field(key: "account_id", type: String?, default: nil, required: true, nullable: false, emit_null: false)]
    getter account_id : String? = nil

    # The ACH account number for the account.  Note that when using OAuth with Chase Bank (`ins_56`), Chase will issue \"tokenized\" routing and account numbers, which are not the user's actual account and routing numbers. These tokenized account numbers (also known as TANs) should work identically to normal account and routing numbers. The digits returned in the `mask` field will continue to reflect the actual account number, rather than the tokenized account number; for this reason, when displaying account numbers to the user to help them identify their account in your UI, always use the `mask` rather than truncating the `account` number. If a user revokes their permissions to your app, the tokenized numbers will no longer work.
    @[JSON::Field(key: "account", type: String?, default: nil, required: true, nullable: false, emit_null: false)]
    getter account : String? = nil

    # The ACH routing number for the account. If the institution is `ins_56`, this may be a tokenized routing number. For more information, see the description of the `account` field.
    @[JSON::Field(key: "routing", type: String?, default: nil, required: true, nullable: false, emit_null: false)]
    getter routing : String? = nil

    # The wire transfer routing number for the account, if available
    @[JSON::Field(key: "wire_routing", type: String?, default: nil, required: true, nullable: true, emit_null: true)]
    getter wire_routing : String? = nil

    # End of Required Properties

    # Optional Properties

    # Whether the account supports ACH transfers into the account
    @[JSON::Field(key: "can_transfer_in", type: Bool?, default: nil, required: false, nullable: true, emit_null: true, presence: true, ignore_serialize: can_transfer_in.nil? && !can_transfer_in_present?)]
    getter can_transfer_in : Bool? = nil

    @[JSON::Field(ignore: true)]
    property? can_transfer_in_present : Bool = false

    # Whether the account supports ACH transfers out of the account
    @[JSON::Field(key: "can_transfer_out", type: Bool?, default: nil, required: false, nullable: true, emit_null: true, presence: true, ignore_serialize: can_transfer_out.nil? && !can_transfer_out_present?)]
    getter can_transfer_out : Bool? = nil

    @[JSON::Field(ignore: true)]
    property? can_transfer_out_present : Bool = false

    # Initializes the object
    # @param [Hash] attributes Model attributes in the form of hash
    def initialize(
      *,
      # Required properties
      @account_id : String? = nil,
      @account : String? = nil,
      @routing : String? = nil,
      @wire_routing : String? = nil,
      # Optional properties
      @can_transfer_in : Bool? = nil,
      @can_transfer_out : Bool? = nil
    )
    end

    # Show invalid properties with the reasons. Usually used together with valid?
    # @return Array for valid properties with the reasons
    def list_invalid_properties : Array(String)
      invalid_properties = Array(String).new

      invalid_properties.push("\"account_id\" is required and cannot be null") if @account_id.nil?

      unless (_account_id = @account_id).nil?
      end
      invalid_properties.push("\"account\" is required and cannot be null") if @account.nil?

      unless (_account = @account).nil?
      end
      invalid_properties.push("\"routing\" is required and cannot be null") if @routing.nil?

      unless (_routing = @routing).nil?
      end
      unless (_wire_routing = @wire_routing).nil?
      end
      unless (_can_transfer_in = @can_transfer_in).nil?
      end
      unless (_can_transfer_out = @can_transfer_out).nil?
      end
      invalid_properties
    end

    # Check to see if the all the properties in the model are valid
    # @return true if the model is valid
    def valid? : Bool
      return false if @account_id.nil?
      unless (_account_id = @account_id).nil?
      end

      return false if @account.nil?
      unless (_account = @account).nil?
      end

      return false if @routing.nil?
      unless (_routing = @routing).nil?
      end

      unless (_wire_routing = @wire_routing).nil?
      end

      unless (_can_transfer_in = @can_transfer_in).nil?
      end

      unless (_can_transfer_out = @can_transfer_out).nil?
      end

      true
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] account_id Object to be assigned
    def account_id=(new_value : String?)
      raise ArgumentError.new("\"account_id\" is required and cannot be null") if new_value.nil?
      unless new_value.nil?
      end

      @account_id = new_value
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] account Object to be assigned
    def account=(new_value : String?)
      raise ArgumentError.new("\"account\" is required and cannot be null") if new_value.nil?
      unless new_value.nil?
      end

      @account = new_value
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] routing Object to be assigned
    def routing=(new_value : String?)
      raise ArgumentError.new("\"routing\" is required and cannot be null") if new_value.nil?
      unless new_value.nil?
      end

      @routing = new_value
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] wire_routing Object to be assigned
    def wire_routing=(new_value : String?)
      unless new_value.nil?
      end

      @wire_routing = new_value
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] can_transfer_in Object to be assigned
    def can_transfer_in=(new_value : Bool?)
      unless new_value.nil?
      end

      @can_transfer_in = new_value
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] can_transfer_out Object to be assigned
    def can_transfer_out=(new_value : Bool?)
      unless new_value.nil?
      end

      @can_transfer_out = new_value
    end

    # Generates #hash and #== methods from all fields
    # #== @return [Bool]
    # #hash calculates hash code according to all attributes.
    # #hash @return [UInt64] Hash code
    def_equals_and_hash(@account_id, @account, @routing, @wire_routing, @can_transfer_in, @can_transfer_in_present, @can_transfer_out, @can_transfer_out_present)
  end
end
