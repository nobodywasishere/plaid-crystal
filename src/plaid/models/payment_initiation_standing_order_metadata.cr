#  The Plaid API
#
# The Plaid REST API. Please see https://plaid.com/docs/api for more details.
#
# The version of the OpenAPI document: 2020-09-14_1.474.3
#
# Generated by: https://openapi-generator.tech
#

require "../../core"

require "./payment_schedule_interval"

module Plaid
  # Metadata specifically related to valid Payment Initiation standing order configurations for the institution.
  class PaymentInitiationStandingOrderMetadata
    include JSON::Serializable
    include JSON::Serializable::Unmapped
    include OpenApi::Validatable
    include OpenApi::Json

    # Required Properties

    # Indicates whether the institution supports closed-ended standing orders by providing an end date.
    @[JSON::Field(key: "supports_standing_order_end_date", type: Bool?, default: nil, required: true, nullable: false, emit_null: false)]
    getter supports_standing_order_end_date : Bool? = nil

    # This is only applicable to `MONTHLY` standing orders. Indicates whether the institution supports negative integers (-1 to -5) for setting up a `MONTHLY` standing order relative to the end of the month.
    @[JSON::Field(key: "supports_standing_order_negative_execution_days", type: Bool?, default: nil, required: true, nullable: false, emit_null: false)]
    getter supports_standing_order_negative_execution_days : Bool? = nil

    # A list of the valid standing order intervals supported by the institution.
    @[JSON::Field(key: "valid_standing_order_intervals", type: Array(PaymentScheduleInterval)?, default: nil, required: true, nullable: false, emit_null: false)]
    getter valid_standing_order_intervals : Array(PaymentScheduleInterval)? = nil

    # End of Required Properties

    # Initializes the object
    # @param [Hash] attributes Model attributes in the form of hash
    def initialize(
      *,
      # Required properties
      @supports_standing_order_end_date : Bool? = nil,
      @supports_standing_order_negative_execution_days : Bool? = nil,
      @valid_standing_order_intervals : Array(PaymentScheduleInterval)? = nil
    )
    end

    # Show invalid properties with the reasons. Usually used together with valid?
    # @return Array for valid properties with the reasons
    def list_invalid_properties : Array(String)
      invalid_properties = Array(String).new

      invalid_properties.push("\"supports_standing_order_end_date\" is required and cannot be null") if @supports_standing_order_end_date.nil?

      unless (_supports_standing_order_end_date = @supports_standing_order_end_date).nil?
      end
      invalid_properties.push("\"supports_standing_order_negative_execution_days\" is required and cannot be null") if @supports_standing_order_negative_execution_days.nil?

      unless (_supports_standing_order_negative_execution_days = @supports_standing_order_negative_execution_days).nil?
      end
      invalid_properties.push("\"valid_standing_order_intervals\" is required and cannot be null") if @valid_standing_order_intervals.nil?

      unless (_valid_standing_order_intervals = @valid_standing_order_intervals).nil?
      end
      invalid_properties
    end

    # Check to see if the all the properties in the model are valid
    # @return true if the model is valid
    def valid? : Bool
      return false if @supports_standing_order_end_date.nil?
      unless (_supports_standing_order_end_date = @supports_standing_order_end_date).nil?
      end

      return false if @supports_standing_order_negative_execution_days.nil?
      unless (_supports_standing_order_negative_execution_days = @supports_standing_order_negative_execution_days).nil?
      end

      return false if @valid_standing_order_intervals.nil?
      unless (_valid_standing_order_intervals = @valid_standing_order_intervals).nil?
      end

      true
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] supports_standing_order_end_date Object to be assigned
    def supports_standing_order_end_date=(new_value : Bool?)
      raise ArgumentError.new("\"supports_standing_order_end_date\" is required and cannot be null") if new_value.nil?
      unless new_value.nil?
      end

      @supports_standing_order_end_date = new_value
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] supports_standing_order_negative_execution_days Object to be assigned
    def supports_standing_order_negative_execution_days=(new_value : Bool?)
      raise ArgumentError.new("\"supports_standing_order_negative_execution_days\" is required and cannot be null") if new_value.nil?
      unless new_value.nil?
      end

      @supports_standing_order_negative_execution_days = new_value
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] valid_standing_order_intervals Object to be assigned
    def valid_standing_order_intervals=(new_value : Array(PaymentScheduleInterval)?)
      raise ArgumentError.new("\"valid_standing_order_intervals\" is required and cannot be null") if new_value.nil?
      unless new_value.nil?
      end

      @valid_standing_order_intervals = new_value
    end

    # Generates #hash and #== methods from all fields
    # #== @return [Bool]
    # #hash calculates hash code according to all attributes.
    # #hash @return [UInt64] Hash code
    def_equals_and_hash(@supports_standing_order_end_date, @supports_standing_order_negative_execution_days, @valid_standing_order_intervals)
  end
end
