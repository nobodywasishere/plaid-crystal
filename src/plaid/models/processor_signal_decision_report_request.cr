#  The Plaid API
#
# The Plaid REST API. Please see https://plaid.com/docs/api for more details.
#
# The version of the OpenAPI document: 2020-09-14_1.474.3
#
# Generated by: https://openapi-generator.tech
#

require "../../core"

require "./signal_decision_outcome"
require "./signal_payment_method"

module Plaid
  # ProcessorSignalDecisionReportRequest defines the request schema for `/processor/signal/decision/report`
  class ProcessorSignalDecisionReportRequest
    include JSON::Serializable
    include JSON::Serializable::Unmapped
    include OpenApi::Validatable
    include OpenApi::Json

    # Required Properties

    # The processor token obtained from the Plaid integration partner. Processor tokens are in the format: `processor-<environment>-<identifier>`
    @[JSON::Field(key: "processor_token", type: String?, default: nil, required: true, nullable: false, emit_null: false)]
    getter processor_token : String? = nil

    # Must be the same as the `client_transaction_id` supplied when calling `/signal/evaluate`
    @[JSON::Field(key: "client_transaction_id", type: String?, default: nil, required: true, nullable: false, emit_null: false)]
    getter client_transaction_id : String? = nil
    MAX_LENGTH_FOR_CLIENT_TRANSACTION_ID = 36
    MIN_LENGTH_FOR_CLIENT_TRANSACTION_ID =  1

    # `true` if the ACH transaction was initiated, `false` otherwise.  This field must be returned as a boolean. If formatted incorrectly, this will result in an [`INVALID_FIELD`](/docs/errors/invalid-request/#invalid_field) error.
    @[JSON::Field(key: "initiated", type: Bool?, default: nil, required: true, nullable: false, emit_null: false)]
    getter initiated : Bool? = nil

    # End of Required Properties

    # Optional Properties

    # Your Plaid API `client_id`. The `client_id` is required and may be provided either in the `PLAID-CLIENT-ID` header or as part of a request body.
    @[JSON::Field(key: "client_id", type: String?, default: nil, required: false, nullable: false, emit_null: false)]
    getter client_id : String? = nil

    # Your Plaid API `secret`. The `secret` is required and may be provided either in the `PLAID-SECRET` header or as part of a request body.
    @[JSON::Field(key: "secret", type: String?, default: nil, required: false, nullable: false, emit_null: false)]
    getter secret : String? = nil

    # The actual number of days (hold time) since the ACH debit transaction that you wait before making funds available to your customers. The holding time could affect the ACH return rate.  For example, use 0 if you make funds available to your customers instantly or the same day following the debit transaction, or 1 if you make funds available the next day following the debit initialization.
    @[JSON::Field(key: "days_funds_on_hold", type: Int32?, default: nil, required: false, nullable: true, emit_null: true, presence: true, ignore_serialize: days_funds_on_hold.nil? && !days_funds_on_hold_present?)]
    getter days_funds_on_hold : Int32? = nil
    MIN_FOR_DAYS_FUNDS_ON_HOLD = Int32.new("0")

    @[JSON::Field(ignore: true)]
    property? days_funds_on_hold_present : Bool = false

    @[JSON::Field(key: "decision_outcome", type: Plaid::SignalDecisionOutcome?, default: nil, required: false, nullable: true, emit_null: true, presence: true, ignore_serialize: decision_outcome.nil? && !decision_outcome_present?)]
    getter decision_outcome : Plaid::SignalDecisionOutcome? = nil

    @[JSON::Field(ignore: true)]
    property? decision_outcome_present : Bool = false

    @[JSON::Field(key: "payment_method", type: Plaid::SignalPaymentMethod?, default: nil, required: false, nullable: true, emit_null: true, presence: true, ignore_serialize: payment_method.nil? && !payment_method_present?)]
    getter payment_method : Plaid::SignalPaymentMethod? = nil

    @[JSON::Field(ignore: true)]
    property? payment_method_present : Bool = false

    # The amount (in USD) made available to your customers instantly following the debit transaction. It could be a partial amount of the requested transaction (example: 102.05).
    @[JSON::Field(key: "amount_instantly_available", type: Float64?, default: nil, required: false, nullable: true, emit_null: true, presence: true, ignore_serialize: amount_instantly_available.nil? && !amount_instantly_available_present?)]
    getter amount_instantly_available : Float64? = nil

    @[JSON::Field(ignore: true)]
    property? amount_instantly_available_present : Bool = false

    # Initializes the object
    # @param [Hash] attributes Model attributes in the form of hash
    def initialize(
      *,
      # Required properties
      @processor_token : String? = nil,
      @client_transaction_id : String? = nil,
      @initiated : Bool? = nil,
      # Optional properties
      @client_id : String? = nil,
      @secret : String? = nil,
      @days_funds_on_hold : Int32? = nil,
      @decision_outcome : Plaid::SignalDecisionOutcome? = nil,
      @payment_method : Plaid::SignalPaymentMethod? = nil,
      @amount_instantly_available : Float64? = nil
    )
    end

    # Show invalid properties with the reasons. Usually used together with valid?
    # @return Array for valid properties with the reasons
    def list_invalid_properties : Array(String)
      invalid_properties = Array(String).new

      invalid_properties.push("\"processor_token\" is required and cannot be null") if @processor_token.nil?

      unless (_processor_token = @processor_token).nil?
      end
      invalid_properties.push("\"client_transaction_id\" is required and cannot be null") if @client_transaction_id.nil?

      unless (_client_transaction_id = @client_transaction_id).nil?
        if max_length_error = OpenApi::PrimitiveValidator.max_length_error("client_transaction_id", _client_transaction_id.to_s.size, MAX_LENGTH_FOR_CLIENT_TRANSACTION_ID)
          invalid_properties.push(max_length_error)
        end

        if min_length_error = OpenApi::PrimitiveValidator.min_length_error("client_transaction_id", _client_transaction_id.to_s.size, MIN_LENGTH_FOR_CLIENT_TRANSACTION_ID)
          invalid_properties.push(min_length_error)
        end
      end
      invalid_properties.push("\"initiated\" is required and cannot be null") if @initiated.nil?

      unless (_initiated = @initiated).nil?
      end
      unless (_client_id = @client_id).nil?
      end
      unless (_secret = @secret).nil?
      end
      unless (_days_funds_on_hold = @days_funds_on_hold).nil?
        if min_number_error = OpenApi::PrimitiveValidator.min_number_error("days_funds_on_hold", _days_funds_on_hold, MIN_FOR_DAYS_FUNDS_ON_HOLD)
          invalid_properties.push(min_number_error)
        end
      end
      unless (_decision_outcome = @decision_outcome).nil?
        invalid_properties.push(_decision_outcome.error_message) if !_decision_outcome.valid?
      end
      unless (_payment_method = @payment_method).nil?
        invalid_properties.push(_payment_method.error_message) if !_payment_method.valid?
      end
      unless (_amount_instantly_available = @amount_instantly_available).nil?
      end
      invalid_properties
    end

    # Check to see if the all the properties in the model are valid
    # @return true if the model is valid
    def valid? : Bool
      return false if @processor_token.nil?
      unless (_processor_token = @processor_token).nil?
      end

      return false if @client_transaction_id.nil?
      unless (_client_transaction_id = @client_transaction_id).nil?
        return false if _client_transaction_id.to_s.size > MAX_LENGTH_FOR_CLIENT_TRANSACTION_ID
        return false if _client_transaction_id.to_s.size < MIN_LENGTH_FOR_CLIENT_TRANSACTION_ID
      end

      return false if @initiated.nil?
      unless (_initiated = @initiated).nil?
      end

      unless (_client_id = @client_id).nil?
      end

      unless (_secret = @secret).nil?
      end

      unless (_days_funds_on_hold = @days_funds_on_hold).nil?
        return false if _days_funds_on_hold < MIN_FOR_DAYS_FUNDS_ON_HOLD
      end

      unless (_decision_outcome = @decision_outcome).nil?
        return false if !_decision_outcome.valid?
      end

      unless (_payment_method = @payment_method).nil?
        return false if !_payment_method.valid?
      end

      unless (_amount_instantly_available = @amount_instantly_available).nil?
      end

      true
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] processor_token Object to be assigned
    def processor_token=(new_value : String?)
      raise ArgumentError.new("\"processor_token\" is required and cannot be null") if new_value.nil?
      unless new_value.nil?
      end

      @processor_token = new_value
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] client_transaction_id Object to be assigned
    def client_transaction_id=(new_value : String?)
      raise ArgumentError.new("\"client_transaction_id\" is required and cannot be null") if new_value.nil?
      unless new_value.nil?
        OpenApi::PrimitiveValidator.validate_max_length("client_transaction_id", new_value.to_s.size, MAX_LENGTH_FOR_CLIENT_TRANSACTION_ID)
        OpenApi::PrimitiveValidator.validate_min_length("client_transaction_id", new_value.to_s.size, MIN_LENGTH_FOR_CLIENT_TRANSACTION_ID)
      end

      @client_transaction_id = new_value
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] initiated Object to be assigned
    def initiated=(new_value : Bool?)
      raise ArgumentError.new("\"initiated\" is required and cannot be null") if new_value.nil?
      unless new_value.nil?
      end

      @initiated = new_value
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] client_id Object to be assigned
    def client_id=(new_value : String?)
      unless new_value.nil?
      end

      @client_id = new_value
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] secret Object to be assigned
    def secret=(new_value : String?)
      unless new_value.nil?
      end

      @secret = new_value
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] days_funds_on_hold Object to be assigned
    def days_funds_on_hold=(new_value : Int32?)
      unless new_value.nil?
        OpenApi::PrimitiveValidator.validate_min_number("days_funds_on_hold", new_value, MIN_FOR_DAYS_FUNDS_ON_HOLD)
      end

      @days_funds_on_hold = new_value
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] decision_outcome Object to be assigned
    def decision_outcome=(new_value : Plaid::SignalDecisionOutcome?)
      unless new_value.nil?
        new_value.validate
      end

      @decision_outcome = new_value
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] payment_method Object to be assigned
    def payment_method=(new_value : Plaid::SignalPaymentMethod?)
      unless new_value.nil?
        new_value.validate
      end

      @payment_method = new_value
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] amount_instantly_available Object to be assigned
    def amount_instantly_available=(new_value : Float64?)
      unless new_value.nil?
      end

      @amount_instantly_available = new_value
    end

    # Generates #hash and #== methods from all fields
    # #== @return [Bool]
    # #hash calculates hash code according to all attributes.
    # #hash @return [UInt64] Hash code
    def_equals_and_hash(@processor_token, @client_transaction_id, @initiated, @client_id, @secret, @days_funds_on_hold, @days_funds_on_hold_present, @decision_outcome, @decision_outcome_present, @payment_method, @payment_method_present, @amount_instantly_available, @amount_instantly_available_present)
  end
end
