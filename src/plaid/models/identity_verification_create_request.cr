#  The Plaid API
#
# The Plaid REST API. Please see https://plaid.com/docs/api for more details.
#
# The version of the OpenAPI document: 2020-09-14_1.474.3
#
# Generated by: https://openapi-generator.tech
#

require "../../core"

require "./identity_verification_create_request_user"

module Plaid
  # Request schema for '/identity_verification/create'
  class IdentityVerificationCreateRequest
    include JSON::Serializable
    include JSON::Serializable::Unmapped
    include OpenApi::Validatable
    include OpenApi::Json

    # Required Properties

    # A flag specifying whether you would like Plaid to expose a shareable URL for the verification being created.
    @[JSON::Field(key: "is_shareable", type: Bool?, default: nil, required: true, nullable: false, emit_null: false)]
    getter is_shareable : Bool? = nil

    # ID of the associated Identity Verification template.
    @[JSON::Field(key: "template_id", type: String?, default: nil, required: true, nullable: false, emit_null: false)]
    getter template_id : String? = nil

    # A flag specifying whether the end user has already agreed to a privacy policy specifying that their data will be shared with Plaid for verification purposes.  If `gave_consent` is set to `true`, the `accept_tos` step will be marked as `skipped` and the end user's session will start at the next step requirement.
    @[JSON::Field(key: "gave_consent", type: Bool?, default: false, required: true, nullable: false, emit_null: false)]
    getter gave_consent : Bool? = false

    # End of Required Properties

    # Optional Properties

    # A unique ID that identifies the end user in your system. This ID can also be used to associate user-specific data from other Plaid products. Financial Account Matching requires this field and the `/link/token/create` `client_user_id` to be consistent. Personally identifiable information, such as an email address or phone number, should not be used in the `client_user_id`.
    @[JSON::Field(key: "client_user_id", type: String?, default: nil, required: false, nullable: false, emit_null: false)]
    getter client_user_id : String? = nil
    MIN_LENGTH_FOR_CLIENT_USER_ID = 1

    @[JSON::Field(key: "user", type: Plaid::IdentityVerificationCreateRequestUser?, default: nil, required: false, nullable: true, emit_null: true, presence: true, ignore_serialize: user.nil? && !user_present?)]
    getter user : Plaid::IdentityVerificationCreateRequestUser? = nil

    @[JSON::Field(ignore: true)]
    property? user_present : Bool = false

    # Your Plaid API `client_id`. The `client_id` is required and may be provided either in the `PLAID-CLIENT-ID` header or as part of a request body.
    @[JSON::Field(key: "client_id", type: String?, default: nil, required: false, nullable: false, emit_null: false)]
    getter client_id : String? = nil

    # Your Plaid API `secret`. The `secret` is required and may be provided either in the `PLAID-SECRET` header or as part of a request body.
    @[JSON::Field(key: "secret", type: String?, default: nil, required: false, nullable: false, emit_null: false)]
    getter secret : String? = nil

    # An optional flag specifying how you would like Plaid to handle attempts to create an Identity Verification when an Identity Verification already exists for the provided `client_user_id` and `template_id`. If idempotency is enabled, Plaid will return the existing Identity Verification. If idempotency is disabled, Plaid will reject the request with a `400 Bad Request` status code if an Identity Verification already exists for the supplied `client_user_id` and `template_id`.
    @[JSON::Field(key: "is_idempotent", type: Bool?, default: nil, required: false, nullable: true, emit_null: true, presence: true, ignore_serialize: is_idempotent.nil? && !is_idempotent_present?)]
    getter is_idempotent : Bool? = nil

    @[JSON::Field(ignore: true)]
    property? is_idempotent_present : Bool = false

    # Initializes the object
    # @param [Hash] attributes Model attributes in the form of hash
    def initialize(
      *,
      # Required properties
      @is_shareable : Bool? = nil,
      @template_id : String? = nil,
      @gave_consent : Bool? = false,
      # Optional properties
      @client_user_id : String? = nil,
      @user : Plaid::IdentityVerificationCreateRequestUser? = nil,
      @client_id : String? = nil,
      @secret : String? = nil,
      @is_idempotent : Bool? = nil
    )
    end

    # Show invalid properties with the reasons. Usually used together with valid?
    # @return Array for valid properties with the reasons
    def list_invalid_properties : Array(String)
      invalid_properties = Array(String).new

      invalid_properties.push("\"is_shareable\" is required and cannot be null") if @is_shareable.nil?

      unless (_is_shareable = @is_shareable).nil?
      end
      invalid_properties.push("\"template_id\" is required and cannot be null") if @template_id.nil?

      unless (_template_id = @template_id).nil?
      end
      invalid_properties.push("\"gave_consent\" is required and cannot be null") if @gave_consent.nil?

      unless (_gave_consent = @gave_consent).nil?
      end
      unless (_client_user_id = @client_user_id).nil?
        if min_length_error = OpenApi::PrimitiveValidator.min_length_error("client_user_id", _client_user_id.to_s.size, MIN_LENGTH_FOR_CLIENT_USER_ID)
          invalid_properties.push(min_length_error)
        end
      end
      unless (_user = @user).nil?
        invalid_properties.concat(_user.list_invalid_properties_for("user")) if _user.is_a?(OpenApi::Validatable)
      end
      unless (_client_id = @client_id).nil?
      end
      unless (_secret = @secret).nil?
      end
      unless (_is_idempotent = @is_idempotent).nil?
      end
      invalid_properties
    end

    # Check to see if the all the properties in the model are valid
    # @return true if the model is valid
    def valid? : Bool
      return false if @is_shareable.nil?
      unless (_is_shareable = @is_shareable).nil?
      end

      return false if @template_id.nil?
      unless (_template_id = @template_id).nil?
      end

      return false if @gave_consent.nil?
      unless (_gave_consent = @gave_consent).nil?
      end

      unless (_client_user_id = @client_user_id).nil?
        return false if _client_user_id.to_s.size < MIN_LENGTH_FOR_CLIENT_USER_ID
      end

      unless (_user = @user).nil?
        return false if _user.is_a?(OpenApi::Validatable) && !_user.valid?
      end

      unless (_client_id = @client_id).nil?
      end

      unless (_secret = @secret).nil?
      end

      unless (_is_idempotent = @is_idempotent).nil?
      end

      true
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] is_shareable Object to be assigned
    def is_shareable=(new_value : Bool?)
      raise ArgumentError.new("\"is_shareable\" is required and cannot be null") if new_value.nil?
      unless new_value.nil?
      end

      @is_shareable = new_value
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] template_id Object to be assigned
    def template_id=(new_value : String?)
      raise ArgumentError.new("\"template_id\" is required and cannot be null") if new_value.nil?
      unless new_value.nil?
      end

      @template_id = new_value
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] gave_consent Object to be assigned
    def gave_consent=(new_value : Bool?)
      raise ArgumentError.new("\"gave_consent\" is required and cannot be null") if new_value.nil?
      unless new_value.nil?
      end

      @gave_consent = new_value
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] client_user_id Object to be assigned
    def client_user_id=(new_value : String?)
      unless new_value.nil?
        OpenApi::PrimitiveValidator.validate_min_length("client_user_id", new_value.to_s.size, MIN_LENGTH_FOR_CLIENT_USER_ID)
      end

      @client_user_id = new_value
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] user Object to be assigned
    def user=(new_value : Plaid::IdentityVerificationCreateRequestUser?)
      unless new_value.nil?
        new_value.validate if new_value.is_a?(OpenApi::Validatable)
      end

      @user = new_value
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] client_id Object to be assigned
    def client_id=(new_value : String?)
      unless new_value.nil?
      end

      @client_id = new_value
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] secret Object to be assigned
    def secret=(new_value : String?)
      unless new_value.nil?
      end

      @secret = new_value
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] is_idempotent Object to be assigned
    def is_idempotent=(new_value : Bool?)
      unless new_value.nil?
      end

      @is_idempotent = new_value
    end

    # Generates #hash and #== methods from all fields
    # #== @return [Bool]
    # #hash calculates hash code according to all attributes.
    # #hash @return [UInt64] Hash code
    def_equals_and_hash(@is_shareable, @template_id, @gave_consent, @client_user_id, @user, @user_present, @client_id, @secret, @is_idempotent, @is_idempotent_present)
  end
end
