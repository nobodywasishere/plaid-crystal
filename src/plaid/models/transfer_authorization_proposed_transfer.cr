#  The Plaid API
#
# The Plaid REST API. Please see https://plaid.com/docs/api for more details.
#
# The version of the OpenAPI document: 2020-09-14_1.474.3
#
# Generated by: https://openapi-generator.tech
#

require "../../core"

require "./ach_class"
require "./transfer_credit_funds_source"
require "./transfer_type"
require "./transfer_user_in_response"

module Plaid
  # Details regarding the proposed transfer.
  class TransferAuthorizationProposedTransfer
    include JSON::Serializable
    include JSON::Serializable::Unmapped
    include OpenApi::Validatable
    include OpenApi::Json

    # Required Properties

    # The id of the associated funding account, available in the Plaid Dashboard. If present, this indicates which of your business checking accounts will be credited or debited.
    @[JSON::Field(key: "funding_account_id", type: String?, default: nil, required: true, nullable: true, emit_null: true)]
    getter funding_account_id : String? = nil

    @[JSON::Field(key: "type", type: Plaid::TransferType?, default: nil, required: true, nullable: false, emit_null: false)]
    getter _type : Plaid::TransferType? = nil

    @[JSON::Field(key: "user", type: TransferUserInResponse?, default: nil, required: true, nullable: false, emit_null: false)]
    getter user : TransferUserInResponse? = nil

    # The amount of the transfer (decimal string with two digits of precision e.g. \"10.00\"). When calling `/transfer/authorization/create`, specify the maximum amount to authorize. When calling `/transfer/create`, specify the exact amount of the transfer, up to a maximum of the amount authorized. If this field is left blank when calling `/transfer/create`, the maximum amount authorized in the `authorization_id` will be sent.
    @[JSON::Field(key: "amount", type: String?, default: nil, required: true, nullable: false, emit_null: false)]
    getter amount : String? = nil

    # The network or rails used for the transfer.
    @[JSON::Field(key: "network", type: String?, default: nil, required: true, nullable: false, emit_null: false)]
    getter network : String? = nil

    # Plaid's unique identifier for the origination account that was used for this transfer.
    @[JSON::Field(key: "origination_account_id", type: String?, default: nil, required: true, nullable: false, emit_null: false)]
    getter origination_account_id : String? = nil

    # The currency of the transfer amount. The default value is \"USD\".
    @[JSON::Field(key: "iso_currency_code", type: String?, default: nil, required: true, nullable: false, emit_null: false)]
    getter iso_currency_code : String? = nil

    # The Plaid client ID that is the originator of this transfer. Only present if created on behalf of another client as a [Platform customer](https://plaid.com/docs/transfer/application/#originators-vs-platforms).
    @[JSON::Field(key: "originator_client_id", type: String?, default: nil, required: true, nullable: true, emit_null: true)]
    getter originator_client_id : String? = nil

    @[JSON::Field(key: "credit_funds_source", type: Plaid::TransferCreditFundsSource?, default: nil, required: true, nullable: true, emit_null: true)]
    getter credit_funds_source : Plaid::TransferCreditFundsSource? = nil

    # End of Required Properties

    # Optional Properties

    @[JSON::Field(key: "ach_class", type: Plaid::ACHClass?, default: nil, required: false, nullable: false, emit_null: false)]
    getter ach_class : Plaid::ACHClass? = nil

    # The Plaid `account_id` for the account that will be debited or credited.
    @[JSON::Field(key: "account_id", type: String?, default: nil, required: false, nullable: false, emit_null: false)]
    getter account_id : String? = nil

    # Initializes the object
    # @param [Hash] attributes Model attributes in the form of hash
    def initialize(
      *,
      # Required properties
      @funding_account_id : String? = nil,
      @_type : Plaid::TransferType? = nil,
      @user : TransferUserInResponse? = nil,
      @amount : String? = nil,
      @network : String? = nil,
      @origination_account_id : String? = nil,
      @iso_currency_code : String? = nil,
      @originator_client_id : String? = nil,
      @credit_funds_source : Plaid::TransferCreditFundsSource? = nil,
      # Optional properties
      @ach_class : Plaid::ACHClass? = nil,
      @account_id : String? = nil
    )
    end

    # Show invalid properties with the reasons. Usually used together with valid?
    # @return Array for valid properties with the reasons
    def list_invalid_properties : Array(String)
      invalid_properties = Array(String).new

      unless (_funding_account_id = @funding_account_id).nil?
      end
      invalid_properties.push("\"_type\" is required and cannot be null") if @_type.nil?

      unless (__type = @_type).nil?
        invalid_properties.push(__type.error_message) if !__type.valid?
      end
      invalid_properties.push("\"user\" is required and cannot be null") if @user.nil?

      unless (_user = @user).nil?
      end
      invalid_properties.push("\"amount\" is required and cannot be null") if @amount.nil?

      unless (_amount = @amount).nil?
      end
      invalid_properties.push("\"network\" is required and cannot be null") if @network.nil?

      unless (_network = @network).nil?
      end
      invalid_properties.push("\"origination_account_id\" is required and cannot be null") if @origination_account_id.nil?

      unless (_origination_account_id = @origination_account_id).nil?
      end
      invalid_properties.push("\"iso_currency_code\" is required and cannot be null") if @iso_currency_code.nil?

      unless (_iso_currency_code = @iso_currency_code).nil?
      end
      unless (_originator_client_id = @originator_client_id).nil?
      end
      unless (_credit_funds_source = @credit_funds_source).nil?
        invalid_properties.push(_credit_funds_source.error_message) if !_credit_funds_source.valid?
      end
      unless (_ach_class = @ach_class).nil?
        invalid_properties.push(_ach_class.error_message) if !_ach_class.valid?
      end
      unless (_account_id = @account_id).nil?
      end
      invalid_properties
    end

    # Check to see if the all the properties in the model are valid
    # @return true if the model is valid
    def valid? : Bool
      unless (_funding_account_id = @funding_account_id).nil?
      end

      return false if @_type.nil?
      unless (__type = @_type).nil?
        return false if !__type.valid?
      end

      return false if @user.nil?
      unless (_user = @user).nil?
      end

      return false if @amount.nil?
      unless (_amount = @amount).nil?
      end

      return false if @network.nil?
      unless (_network = @network).nil?
      end

      return false if @origination_account_id.nil?
      unless (_origination_account_id = @origination_account_id).nil?
      end

      return false if @iso_currency_code.nil?
      unless (_iso_currency_code = @iso_currency_code).nil?
      end

      unless (_originator_client_id = @originator_client_id).nil?
      end

      unless (_credit_funds_source = @credit_funds_source).nil?
        return false if !_credit_funds_source.valid?
      end

      unless (_ach_class = @ach_class).nil?
        return false if !_ach_class.valid?
      end

      unless (_account_id = @account_id).nil?
      end

      true
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] funding_account_id Object to be assigned
    def funding_account_id=(new_value : String?)
      unless new_value.nil?
      end

      @funding_account_id = new_value
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] _type Object to be assigned
    def _type=(new_value : Plaid::TransferType?)
      raise ArgumentError.new("\"_type\" is required and cannot be null") if new_value.nil?
      unless new_value.nil?
        new_value.validate
      end

      @_type = new_value
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] user Object to be assigned
    def user=(new_value : TransferUserInResponse?)
      raise ArgumentError.new("\"user\" is required and cannot be null") if new_value.nil?
      unless new_value.nil?
      end

      @user = new_value
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] amount Object to be assigned
    def amount=(new_value : String?)
      raise ArgumentError.new("\"amount\" is required and cannot be null") if new_value.nil?
      unless new_value.nil?
      end

      @amount = new_value
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] network Object to be assigned
    def network=(new_value : String?)
      raise ArgumentError.new("\"network\" is required and cannot be null") if new_value.nil?
      unless new_value.nil?
      end

      @network = new_value
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] origination_account_id Object to be assigned
    def origination_account_id=(new_value : String?)
      raise ArgumentError.new("\"origination_account_id\" is required and cannot be null") if new_value.nil?
      unless new_value.nil?
      end

      @origination_account_id = new_value
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] iso_currency_code Object to be assigned
    def iso_currency_code=(new_value : String?)
      raise ArgumentError.new("\"iso_currency_code\" is required and cannot be null") if new_value.nil?
      unless new_value.nil?
      end

      @iso_currency_code = new_value
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] originator_client_id Object to be assigned
    def originator_client_id=(new_value : String?)
      unless new_value.nil?
      end

      @originator_client_id = new_value
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] credit_funds_source Object to be assigned
    def credit_funds_source=(new_value : Plaid::TransferCreditFundsSource?)
      unless new_value.nil?
        new_value.validate
      end

      @credit_funds_source = new_value
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] ach_class Object to be assigned
    def ach_class=(new_value : Plaid::ACHClass?)
      unless new_value.nil?
        new_value.validate
      end

      @ach_class = new_value
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] account_id Object to be assigned
    def account_id=(new_value : String?)
      unless new_value.nil?
      end

      @account_id = new_value
    end

    # Generates #hash and #== methods from all fields
    # #== @return [Bool]
    # #hash calculates hash code according to all attributes.
    # #hash @return [UInt64] Hash code
    def_equals_and_hash(@funding_account_id, @_type, @user, @amount, @network, @origination_account_id, @iso_currency_code, @originator_client_id, @credit_funds_source, @ach_class, @account_id)
  end
end
