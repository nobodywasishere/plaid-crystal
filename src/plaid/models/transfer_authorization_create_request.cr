#  The Plaid API
#
# The Plaid REST API. Please see https://plaid.com/docs/api for more details.
#
# The version of the OpenAPI document: 2020-09-14_1.474.3
#
# Generated by: https://openapi-generator.tech
#

require "../../core"

require "./ach_class"
require "./transfer_authorization_device"
require "./transfer_authorization_user_in_request"
require "./transfer_credit_funds_source"
require "./transfer_network"
require "./transfer_type"

module Plaid
  # Defines the request schema for `/transfer/authorization/create`
  class TransferAuthorizationCreateRequest
    include JSON::Serializable
    include JSON::Serializable::Unmapped
    include OpenApi::Validatable
    include OpenApi::Json

    # Required Properties

    # The Plaid `access_token` for the account that will be debited or credited.
    @[JSON::Field(key: "access_token", type: String?, default: nil, required: true, nullable: false, emit_null: false)]
    getter access_token : String? = nil

    # The Plaid `account_id` corresponding to the end-user account that will be debited or credited.
    @[JSON::Field(key: "account_id", type: String?, default: nil, required: true, nullable: false, emit_null: false)]
    getter account_id : String? = nil

    @[JSON::Field(key: "type", type: Plaid::TransferType?, default: nil, required: true, nullable: false, emit_null: false)]
    getter _type : Plaid::TransferType? = nil

    @[JSON::Field(key: "network", type: Plaid::TransferNetwork?, default: nil, required: true, nullable: false, emit_null: false)]
    getter network : Plaid::TransferNetwork? = nil

    # The amount of the transfer (decimal string with two digits of precision e.g. \"10.00\"). When calling `/transfer/authorization/create`, specify the maximum amount to authorize. When calling `/transfer/create`, specify the exact amount of the transfer, up to a maximum of the amount authorized. If this field is left blank when calling `/transfer/create`, the maximum amount authorized in the `authorization_id` will be sent.
    @[JSON::Field(key: "amount", type: String?, default: nil, required: true, nullable: false, emit_null: false)]
    getter amount : String? = nil

    @[JSON::Field(key: "user", type: Plaid::TransferAuthorizationUserInRequest?, default: nil, required: true, nullable: false, emit_null: false)]
    getter user : Plaid::TransferAuthorizationUserInRequest? = nil

    # End of Required Properties

    # Optional Properties

    # Your Plaid API `client_id`. The `client_id` is required and may be provided either in the `PLAID-CLIENT-ID` header or as part of a request body.
    @[JSON::Field(key: "client_id", type: String?, default: nil, required: false, nullable: false, emit_null: false)]
    getter client_id : String? = nil

    # Your Plaid API `secret`. The `secret` is required and may be provided either in the `PLAID-SECRET` header or as part of a request body.
    @[JSON::Field(key: "secret", type: String?, default: nil, required: false, nullable: false, emit_null: false)]
    getter secret : String? = nil

    # Specify the account used to fund the transfer. Should be specified if using legacy funding methods only. If using Plaid Ledger, leave this field blank. Customers can find a list of `funding_account_id`s in the Accounts page of your Plaid Dashboard, under the \"Account ID\" column. If this field is left blank and you are using legacy funding methods, this will default to the default `funding_account_id` specified during onboarding. Otherwise, Plaid Ledger will be used.
    @[JSON::Field(key: "funding_account_id", type: String?, default: nil, required: false, nullable: true, emit_null: true, presence: true, ignore_serialize: funding_account_id.nil? && !funding_account_id_present?)]
    getter funding_account_id : String? = nil

    @[JSON::Field(ignore: true)]
    property? funding_account_id_present : Bool = false

    # The payment profile token associated with the Payment Profile that will be debited or credited. Required if not using `access_token`.
    @[JSON::Field(key: "payment_profile_token", type: String?, default: nil, required: false, nullable: false, emit_null: false)]
    getter payment_profile_token : String? = nil

    @[JSON::Field(key: "ach_class", type: Plaid::ACHClass?, default: nil, required: false, nullable: false, emit_null: false)]
    getter ach_class : Plaid::ACHClass? = nil

    @[JSON::Field(key: "device", type: TransferAuthorizationDevice?, default: nil, required: false, nullable: false, emit_null: false)]
    getter device : TransferAuthorizationDevice? = nil

    # Plaid's unique identifier for the origination account for this authorization. If not specified, the default account will be used.
    @[JSON::Field(key: "origination_account_id", type: String?, default: nil, required: false, nullable: false, emit_null: false)]
    getter origination_account_id : String? = nil

    # The currency of the transfer amount. The default value is \"USD\".
    @[JSON::Field(key: "iso_currency_code", type: String?, default: nil, required: false, nullable: false, emit_null: false)]
    getter iso_currency_code : String? = nil

    # A random key provided by the client, per unique authorization, which expires after 48 hours. Maximum of 50 characters.  The API supports idempotency for safely retrying requests without accidentally performing the same operation twice. For example, if a request to create an authorization fails due to a network connection error, you can retry the request with the same idempotency key to guarantee that only a single authorization is created.  This idempotency key expires after 48 hours, after which the same key can be reused. Failure to provide this key may result in duplicate charges.
    @[JSON::Field(key: "idempotency_key", type: String?, default: nil, required: false, nullable: true, emit_null: true, presence: true, ignore_serialize: idempotency_key.nil? && !idempotency_key_present?)]
    getter idempotency_key : String? = nil
    MAX_LENGTH_FOR_IDEMPOTENCY_KEY = 50

    @[JSON::Field(ignore: true)]
    property? idempotency_key_present : Bool = false

    # If the end user is initiating the specific transfer themselves via an interactive UI, this should be `true`; for automatic recurring payments where the end user is not actually initiating each individual transfer, it should be `false`. This field is not currently used and is present to support planned future functionality.
    @[JSON::Field(key: "user_present", type: Bool?, default: nil, required: false, nullable: true, emit_null: true, presence: true, ignore_serialize: user_present.nil? && !user_present_present?)]
    getter user_present : Bool? = nil

    @[JSON::Field(ignore: true)]
    property? user_present_present : Bool = false

    # If set to `false`, Plaid will not offer a `guarantee_decision` for this request (Guarantee customers only).
    @[JSON::Field(key: "with_guarantee", type: Bool?, default: true, required: false, nullable: true, emit_null: true, presence: true, ignore_serialize: with_guarantee.nil? && !with_guarantee_present?)]
    getter with_guarantee : Bool? = true

    @[JSON::Field(ignore: true)]
    property? with_guarantee_present : Bool = false

    # The unique identifier returned by Plaid's [beacon](https://plaid.com/docs/transfer/guarantee/#using-a-beacon) when it is run on your webpage.
    @[JSON::Field(key: "beacon_session_id", type: String?, default: nil, required: false, nullable: true, emit_null: true, presence: true, ignore_serialize: beacon_session_id.nil? && !beacon_session_id_present?)]
    getter beacon_session_id : String? = nil

    @[JSON::Field(ignore: true)]
    property? beacon_session_id_present : Bool = false

    # The Plaid client ID that is the originator of this transfer. Only needed if creating transfers on behalf of another client as a [Platform customer](https://plaid.com/docs/transfer/application/#originators-vs-platforms).
    @[JSON::Field(key: "originator_client_id", type: String?, default: nil, required: false, nullable: true, emit_null: true, presence: true, ignore_serialize: originator_client_id.nil? && !originator_client_id_present?)]
    getter originator_client_id : String? = nil

    @[JSON::Field(ignore: true)]
    property? originator_client_id_present : Bool = false

    @[JSON::Field(key: "credit_funds_source", type: Plaid::TransferCreditFundsSource?, default: nil, required: false, nullable: true, emit_null: true, presence: true, ignore_serialize: credit_funds_source.nil? && !credit_funds_source_present?)]
    getter credit_funds_source : Plaid::TransferCreditFundsSource? = nil

    @[JSON::Field(ignore: true)]
    property? credit_funds_source_present : Bool = false

    # Plaidâ€™s unique identifier for a test clock. This field may only be used when using `sandbox` environment. If provided, the `authorization` is created at the `virtual_time` on the provided test clock.
    @[JSON::Field(key: "test_clock_id", type: String?, default: nil, required: false, nullable: true, emit_null: true, presence: true, ignore_serialize: test_clock_id.nil? && !test_clock_id_present?)]
    getter test_clock_id : String? = nil

    @[JSON::Field(ignore: true)]
    property? test_clock_id_present : Bool = false

    # Initializes the object
    # @param [Hash] attributes Model attributes in the form of hash
    def initialize(
      *,
      # Required properties
      @access_token : String? = nil,
      @account_id : String? = nil,
      @_type : Plaid::TransferType? = nil,
      @network : Plaid::TransferNetwork? = nil,
      @amount : String? = nil,
      @user : Plaid::TransferAuthorizationUserInRequest? = nil,
      # Optional properties
      @client_id : String? = nil,
      @secret : String? = nil,
      @funding_account_id : String? = nil,
      @payment_profile_token : String? = nil,
      @ach_class : Plaid::ACHClass? = nil,
      @device : TransferAuthorizationDevice? = nil,
      @origination_account_id : String? = nil,
      @iso_currency_code : String? = nil,
      @idempotency_key : String? = nil,
      @user_present : Bool? = nil,
      @with_guarantee : Bool? = true,
      @beacon_session_id : String? = nil,
      @originator_client_id : String? = nil,
      @credit_funds_source : Plaid::TransferCreditFundsSource? = nil,
      @test_clock_id : String? = nil
    )
    end

    # Show invalid properties with the reasons. Usually used together with valid?
    # @return Array for valid properties with the reasons
    def list_invalid_properties : Array(String)
      invalid_properties = Array(String).new

      invalid_properties.push("\"access_token\" is required and cannot be null") if @access_token.nil?

      unless (_access_token = @access_token).nil?
      end
      invalid_properties.push("\"account_id\" is required and cannot be null") if @account_id.nil?

      unless (_account_id = @account_id).nil?
      end
      invalid_properties.push("\"_type\" is required and cannot be null") if @_type.nil?

      unless (__type = @_type).nil?
        invalid_properties.push(__type.error_message) if !__type.valid?
      end
      invalid_properties.push("\"network\" is required and cannot be null") if @network.nil?

      unless (_network = @network).nil?
        invalid_properties.push(_network.error_message) if !_network.valid?
      end
      invalid_properties.push("\"amount\" is required and cannot be null") if @amount.nil?

      unless (_amount = @amount).nil?
      end
      invalid_properties.push("\"user\" is required and cannot be null") if @user.nil?

      unless (_user = @user).nil?
        invalid_properties.concat(_user.list_invalid_properties_for("user")) if _user.is_a?(OpenApi::Validatable)
      end
      unless (_client_id = @client_id).nil?
      end
      unless (_secret = @secret).nil?
      end
      unless (_funding_account_id = @funding_account_id).nil?
      end
      unless (_payment_profile_token = @payment_profile_token).nil?
      end
      unless (_ach_class = @ach_class).nil?
        invalid_properties.push(_ach_class.error_message) if !_ach_class.valid?
      end
      unless (_device = @device).nil?
      end
      unless (_origination_account_id = @origination_account_id).nil?
      end
      unless (_iso_currency_code = @iso_currency_code).nil?
      end
      unless (_idempotency_key = @idempotency_key).nil?
        if max_length_error = OpenApi::PrimitiveValidator.max_length_error("idempotency_key", _idempotency_key.to_s.size, MAX_LENGTH_FOR_IDEMPOTENCY_KEY)
          invalid_properties.push(max_length_error)
        end
      end
      unless (_user_present = @user_present).nil?
      end
      unless (_with_guarantee = @with_guarantee).nil?
      end
      unless (_beacon_session_id = @beacon_session_id).nil?
      end
      unless (_originator_client_id = @originator_client_id).nil?
      end
      unless (_credit_funds_source = @credit_funds_source).nil?
        invalid_properties.push(_credit_funds_source.error_message) if !_credit_funds_source.valid?
      end
      unless (_test_clock_id = @test_clock_id).nil?
      end
      invalid_properties
    end

    # Check to see if the all the properties in the model are valid
    # @return true if the model is valid
    def valid? : Bool
      return false if @access_token.nil?
      unless (_access_token = @access_token).nil?
      end

      return false if @account_id.nil?
      unless (_account_id = @account_id).nil?
      end

      return false if @_type.nil?
      unless (__type = @_type).nil?
        return false if !__type.valid?
      end

      return false if @network.nil?
      unless (_network = @network).nil?
        return false if !_network.valid?
      end

      return false if @amount.nil?
      unless (_amount = @amount).nil?
      end

      return false if @user.nil?
      unless (_user = @user).nil?
        return false if _user.is_a?(OpenApi::Validatable) && !_user.valid?
      end

      unless (_client_id = @client_id).nil?
      end

      unless (_secret = @secret).nil?
      end

      unless (_funding_account_id = @funding_account_id).nil?
      end

      unless (_payment_profile_token = @payment_profile_token).nil?
      end

      unless (_ach_class = @ach_class).nil?
        return false if !_ach_class.valid?
      end

      unless (_device = @device).nil?
      end

      unless (_origination_account_id = @origination_account_id).nil?
      end

      unless (_iso_currency_code = @iso_currency_code).nil?
      end

      unless (_idempotency_key = @idempotency_key).nil?
        return false if _idempotency_key.to_s.size > MAX_LENGTH_FOR_IDEMPOTENCY_KEY
      end

      unless (_user_present = @user_present).nil?
      end

      unless (_with_guarantee = @with_guarantee).nil?
      end

      unless (_beacon_session_id = @beacon_session_id).nil?
      end

      unless (_originator_client_id = @originator_client_id).nil?
      end

      unless (_credit_funds_source = @credit_funds_source).nil?
        return false if !_credit_funds_source.valid?
      end

      unless (_test_clock_id = @test_clock_id).nil?
      end

      true
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] access_token Object to be assigned
    def access_token=(new_value : String?)
      raise ArgumentError.new("\"access_token\" is required and cannot be null") if new_value.nil?
      unless new_value.nil?
      end

      @access_token = new_value
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] account_id Object to be assigned
    def account_id=(new_value : String?)
      raise ArgumentError.new("\"account_id\" is required and cannot be null") if new_value.nil?
      unless new_value.nil?
      end

      @account_id = new_value
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] _type Object to be assigned
    def _type=(new_value : Plaid::TransferType?)
      raise ArgumentError.new("\"_type\" is required and cannot be null") if new_value.nil?
      unless new_value.nil?
        new_value.validate
      end

      @_type = new_value
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] network Object to be assigned
    def network=(new_value : Plaid::TransferNetwork?)
      raise ArgumentError.new("\"network\" is required and cannot be null") if new_value.nil?
      unless new_value.nil?
        new_value.validate
      end

      @network = new_value
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] amount Object to be assigned
    def amount=(new_value : String?)
      raise ArgumentError.new("\"amount\" is required and cannot be null") if new_value.nil?
      unless new_value.nil?
      end

      @amount = new_value
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] user Object to be assigned
    def user=(new_value : Plaid::TransferAuthorizationUserInRequest?)
      raise ArgumentError.new("\"user\" is required and cannot be null") if new_value.nil?
      unless new_value.nil?
        new_value.validate if new_value.is_a?(OpenApi::Validatable)
      end

      @user = new_value
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] client_id Object to be assigned
    def client_id=(new_value : String?)
      unless new_value.nil?
      end

      @client_id = new_value
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] secret Object to be assigned
    def secret=(new_value : String?)
      unless new_value.nil?
      end

      @secret = new_value
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] funding_account_id Object to be assigned
    def funding_account_id=(new_value : String?)
      unless new_value.nil?
      end

      @funding_account_id = new_value
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] payment_profile_token Object to be assigned
    def payment_profile_token=(new_value : String?)
      unless new_value.nil?
      end

      @payment_profile_token = new_value
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] ach_class Object to be assigned
    def ach_class=(new_value : Plaid::ACHClass?)
      unless new_value.nil?
        new_value.validate
      end

      @ach_class = new_value
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] device Object to be assigned
    def device=(new_value : TransferAuthorizationDevice?)
      unless new_value.nil?
      end

      @device = new_value
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] origination_account_id Object to be assigned
    def origination_account_id=(new_value : String?)
      unless new_value.nil?
      end

      @origination_account_id = new_value
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] iso_currency_code Object to be assigned
    def iso_currency_code=(new_value : String?)
      unless new_value.nil?
      end

      @iso_currency_code = new_value
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] idempotency_key Object to be assigned
    def idempotency_key=(new_value : String?)
      unless new_value.nil?
        OpenApi::PrimitiveValidator.validate_max_length("idempotency_key", new_value.to_s.size, MAX_LENGTH_FOR_IDEMPOTENCY_KEY)
      end

      @idempotency_key = new_value
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] user_present Object to be assigned
    def user_present=(new_value : Bool?)
      unless new_value.nil?
      end

      @user_present = new_value
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] with_guarantee Object to be assigned
    def with_guarantee=(new_value : Bool?)
      unless new_value.nil?
      end

      @with_guarantee = new_value
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] beacon_session_id Object to be assigned
    def beacon_session_id=(new_value : String?)
      unless new_value.nil?
      end

      @beacon_session_id = new_value
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] originator_client_id Object to be assigned
    def originator_client_id=(new_value : String?)
      unless new_value.nil?
      end

      @originator_client_id = new_value
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] credit_funds_source Object to be assigned
    def credit_funds_source=(new_value : Plaid::TransferCreditFundsSource?)
      unless new_value.nil?
        new_value.validate
      end

      @credit_funds_source = new_value
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] test_clock_id Object to be assigned
    def test_clock_id=(new_value : String?)
      unless new_value.nil?
      end

      @test_clock_id = new_value
    end

    # Generates #hash and #== methods from all fields
    # #== @return [Bool]
    # #hash calculates hash code according to all attributes.
    # #hash @return [UInt64] Hash code
    def_equals_and_hash(@access_token, @account_id, @_type, @network, @amount, @user, @client_id, @secret, @funding_account_id, @funding_account_id_present, @payment_profile_token, @ach_class, @device, @origination_account_id, @iso_currency_code, @idempotency_key, @idempotency_key_present, @user_present, @user_present_present, @with_guarantee, @with_guarantee_present, @beacon_session_id, @beacon_session_id_present, @originator_client_id, @originator_client_id_present, @credit_funds_source, @credit_funds_source_present, @test_clock_id, @test_clock_id_present)
  end
end
