#  The Plaid API
#
# The Plaid REST API. Please see https://plaid.com/docs/api for more details.
#
# The version of the OpenAPI document: 2020-09-14_1.474.3
#
# Generated by: https://openapi-generator.tech
#

require "../../core"

require "./account_product_access_nullable"

module Plaid
  # Allow or disallow product access by account. Unlisted (e.g. missing) accounts will be considered `new_accounts`.
  class AccountAccess
    include JSON::Serializable
    include JSON::Serializable::Unmapped
    include OpenApi::Validatable
    include OpenApi::Json

    # Required Properties

    # The unique account identifier for this account. This value must match that returned by the data access API for this account.
    @[JSON::Field(key: "unique_id", type: String?, default: nil, required: true, nullable: false, emit_null: false)]
    getter unique_id : String? = nil

    # End of Required Properties

    # Optional Properties

    # Allow the application to see this account (and associated details, including balance) in the list of accounts  If unset, defaults to `true`.
    @[JSON::Field(key: "authorized", type: Bool?, default: true, required: false, nullable: true, emit_null: true, presence: true, ignore_serialize: authorized.nil? && !authorized_present?)]
    getter authorized : Bool? = true

    @[JSON::Field(ignore: true)]
    property? authorized_present : Bool = false

    @[JSON::Field(key: "account_product_access", type: Plaid::AccountProductAccessNullable?, default: nil, required: false, nullable: true, emit_null: true, presence: true, ignore_serialize: account_product_access.nil? && !account_product_access_present?)]
    getter account_product_access : Plaid::AccountProductAccessNullable? = nil

    @[JSON::Field(ignore: true)]
    property? account_product_access_present : Bool = false

    # Initializes the object
    # @param [Hash] attributes Model attributes in the form of hash
    def initialize(
      *,
      # Required properties
      @unique_id : String? = nil,
      # Optional properties
      @authorized : Bool? = true,
      @account_product_access : Plaid::AccountProductAccessNullable? = nil
    )
    end

    # Show invalid properties with the reasons. Usually used together with valid?
    # @return Array for valid properties with the reasons
    def list_invalid_properties : Array(String)
      invalid_properties = Array(String).new

      invalid_properties.push("\"unique_id\" is required and cannot be null") if @unique_id.nil?

      unless (_unique_id = @unique_id).nil?
      end
      unless (_authorized = @authorized).nil?
      end
      unless (_account_product_access = @account_product_access).nil?
        invalid_properties.concat(_account_product_access.list_invalid_properties_for("account_product_access")) if _account_product_access.is_a?(OpenApi::Validatable)
      end
      invalid_properties
    end

    # Check to see if the all the properties in the model are valid
    # @return true if the model is valid
    def valid? : Bool
      return false if @unique_id.nil?
      unless (_unique_id = @unique_id).nil?
      end

      unless (_authorized = @authorized).nil?
      end

      unless (_account_product_access = @account_product_access).nil?
        return false if _account_product_access.is_a?(OpenApi::Validatable) && !_account_product_access.valid?
      end

      true
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] unique_id Object to be assigned
    def unique_id=(new_value : String?)
      raise ArgumentError.new("\"unique_id\" is required and cannot be null") if new_value.nil?
      unless new_value.nil?
      end

      @unique_id = new_value
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] authorized Object to be assigned
    def authorized=(new_value : Bool?)
      unless new_value.nil?
      end

      @authorized = new_value
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] account_product_access Object to be assigned
    def account_product_access=(new_value : Plaid::AccountProductAccessNullable?)
      unless new_value.nil?
        new_value.validate if new_value.is_a?(OpenApi::Validatable)
      end

      @account_product_access = new_value
    end

    # Generates #hash and #== methods from all fields
    # #== @return [Bool]
    # #hash calculates hash code according to all attributes.
    # #hash @return [UInt64] Hash code
    def_equals_and_hash(@unique_id, @authorized, @authorized_present, @account_product_access, @account_product_access_present)
  end
end
